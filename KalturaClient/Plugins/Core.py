# ===================================================================================================
#                           _  __     _ _
#                          | |/ /__ _| | |_ _  _ _ _ __ _
#                          | ' </ _` | |  _| || | '_/ _` |
#                          |_|\_\__,_|_|\__|\_,_|_| \__,_|
#
# This file is part of the Kaltura Collaborative Media Suite which allows users
# to do with audio, video, and animation what Wiki platforms allow them to do with
# text.
#
# Copyright (C) 2006-2023  Kaltura Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http:#www.gnu.org/licenses/>.
#
# @ignore
# ===================================================================================================
# @package Kaltura
# @subpackage Client
from __future__ import absolute_import

from ..Base import (
    getXmlNodeBool,
    getXmlNodeFloat,
    getXmlNodeInt,
    getXmlNodeText,
    KalturaClientPlugin,
    KalturaEnumsFactory,
    KalturaObjectBase,
    KalturaObjectFactory,
    KalturaParams,
    KalturaServiceBase,
)

API_VERSION = '8.4.0.30119'

########## enums ##########
# @package Kaltura
# @subpackage Client
class KalturaAdsPolicy(object):
    NO_ADS = "NO_ADS"
    KEEP_ADS = "KEEP_ADS"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAggregationCountOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAggregationType(object):
    COUNT = "Count"
    SUM = "Sum"
    AVG = "Avg"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAnnouncementOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAnnouncementRecipientsType(object):
    ALL = "All"
    LOGGEDIN = "LoggedIn"
    GUESTS = "Guests"
    OTHER = "Other"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAnnouncementStatus(object):
    NOTSENT = "NotSent"
    SENDING = "Sending"
    SENT = "Sent"
    ABORTED = "Aborted"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaApiAction(object):
    ADD = "ADD"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaApiParameterPermissionItemAction(object):
    READ = "READ"
    INSERT = "INSERT"
    UPDATE = "UPDATE"
    WRITE = "WRITE"
    ALL = "ALL"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaApiService(object):
    HOUSEHOLD_DEVICE = "HOUSEHOLD_DEVICE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAppTokenHashType(object):
    SHA1 = "SHA1"
    SHA256 = "SHA256"
    SHA512 = "SHA512"
    MD5 = "MD5"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetCommentOrderBy(object):
    CREATE_DATE_DESC = "CREATE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetFilePpvOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetHistoryOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetImagePerRatioOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetIndexStatus(object):
    OK = "Ok"
    DELETED = "Deleted"
    NOTUPDATED = "NotUpdated"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetInheritancePolicy(object):
    ENABLE = "Enable"
    DISABLE = "Disable"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetLifeCycleRuleActionType(object):
    ADD = "ADD"
    REMOVE = "REMOVE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetLifeCycleRuleTransitionType(object):
    TAG = "TAG"
    BUSINESS_MODEL = "BUSINESS_MODEL"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetOrderBy(object):
    RELEVANCY_DESC = "RELEVANCY_DESC"
    NAME_ASC = "NAME_ASC"
    NAME_DESC = "NAME_DESC"
    VIEWS_DESC = "VIEWS_DESC"
    RATINGS_DESC = "RATINGS_DESC"
    VOTES_DESC = "VOTES_DESC"
    START_DATE_DESC = "START_DATE_DESC"
    START_DATE_ASC = "START_DATE_ASC"
    LIKES_DESC = "LIKES_DESC"
    CREATE_DATE_ASC = "CREATE_DATE_ASC"
    CREATE_DATE_DESC = "CREATE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetOrderByStatistics(object):
    VIEWS_DESC = "VIEWS_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetOrderByType(object):
    RELEVANCY_DESC = "RELEVANCY_DESC"
    NAME_ASC = "NAME_ASC"
    NAME_DESC = "NAME_DESC"
    RATINGS_DESC = "RATINGS_DESC"
    VOTES_DESC = "VOTES_DESC"
    START_DATE_DESC = "START_DATE_DESC"
    START_DATE_ASC = "START_DATE_ASC"
    LIKES_DESC = "LIKES_DESC"
    CREATE_DATE_ASC = "CREATE_DATE_ASC"
    CREATE_DATE_DESC = "CREATE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetPersonalMarkupSearchOrderBy(object):
    NONE = "NONE"
    REQUEST_ORDER = "REQUEST_ORDER"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetReferenceType(object):
    MEDIA = "media"
    EPG_INTERNAL = "epg_internal"
    EPG_EXTERNAL = "epg_external"
    NPVR = "npvr"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetReminderOrderBy(object):
    RELEVANCY_DESC = "RELEVANCY_DESC"
    NAME_ASC = "NAME_ASC"
    NAME_DESC = "NAME_DESC"
    VIEWS_DESC = "VIEWS_DESC"
    RATINGS_DESC = "RATINGS_DESC"
    VOTES_DESC = "VOTES_DESC"
    START_DATE_DESC = "START_DATE_DESC"
    START_DATE_ASC = "START_DATE_ASC"
    LIKES_DESC = "LIKES_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetRuleOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetRuleStatus(object):
    READY = "READY"
    IN_PROGRESS = "IN_PROGRESS"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetStructMetaOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetStructOrderBy(object):
    NAME_ASC = "NAME_ASC"
    NAME_DESC = "NAME_DESC"
    SYSTEM_NAME_ASC = "SYSTEM_NAME_ASC"
    SYSTEM_NAME_DESC = "SYSTEM_NAME_DESC"
    CREATE_DATE_ASC = "CREATE_DATE_ASC"
    CREATE_DATE_DESC = "CREATE_DATE_DESC"
    UPDATE_DATE_ASC = "UPDATE_DATE_ASC"
    UPDATE_DATE_DESC = "UPDATE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetType(object):
    MEDIA = "media"
    RECORDING = "recording"
    EPG = "epg"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetUserRuleOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBillingAction(object):
    UNKNOWN = "unknown"
    PURCHASE = "purchase"
    RENEW_PAYMENT = "renew_payment"
    RENEW_CANCELED_SUBSCRIPTION = "renew_canceled_subscription"
    CANCEL_SUBSCRIPTION_ORDER = "cancel_subscription_order"
    SUBSCRIPTION_DATE_CHANGED = "subscription_date_changed"
    PENDING = "pending"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBillingItemsType(object):
    UNKNOWN = "unknown"
    PPV = "ppv"
    SUBSCRIPTION = "subscription"
    PRE_PAID = "pre_paid"
    PRE_PAID_EXPIRED = "pre_paid_expired"
    COLLECTION = "collection"
    PROGRAM_ASSET_GROUP_OFFER = "program_asset_group_offer"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBillingPriceType(object):
    FULLPERIOD = "FullPeriod"
    PARTIALPERIOD = "PartialPeriod"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBookmarkActionType(object):
    HIT = "HIT"
    PLAY = "PLAY"
    STOP = "STOP"
    PAUSE = "PAUSE"
    FIRST_PLAY = "FIRST_PLAY"
    SWOOSH = "SWOOSH"
    FULL_SCREEN = "FULL_SCREEN"
    SEND_TO_FRIEND = "SEND_TO_FRIEND"
    LOAD = "LOAD"
    FULL_SCREEN_EXIT = "FULL_SCREEN_EXIT"
    FINISH = "FINISH"
    ERROR = "ERROR"
    BITRATE_CHANGE = "BITRATE_CHANGE"
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBookmarkOrderBy(object):
    POSITION_ASC = "POSITION_ASC"
    POSITION_DESC = "POSITION_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBooleanOperator(object):
    AND = "And"
    OR = "Or"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBulkUploadJobAction(object):
    UPSERT = "Upsert"
    DELETE = "Delete"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBulkUploadJobStatus(object):
    PENDING = "Pending"
    UPLOADED = "Uploaded"
    QUEUED = "Queued"
    PARSING = "Parsing"
    PROCESSING = "Processing"
    PROCESSED = "Processed"
    SUCCESS = "Success"
    PARTIAL = "Partial"
    FAILED = "Failed"
    FATAL = "Fatal"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBulkUploadOrderBy(object):
    NONE = "NONE"
    UPDATE_DATE_ASC = "UPDATE_DATE_ASC"
    UPDATE_DATE_DESC = "UPDATE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBulkUploadResultStatus(object):
    ERROR = "Error"
    OK = "Ok"
    INPROGRESS = "InProgress"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBundleType(object):
    SUBSCRIPTION = "subscription"
    COLLECTION = "collection"
    PAGO = "pago"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCampaignOrderBy(object):
    START_DATE_DESC = "START_DATE_DESC"
    START_DATE_ASC = "START_DATE_ASC"
    UPDATE_DATE_DESC = "UPDATE_DATE_DESC"
    UPDATE_DATE_ASC = "UPDATE_DATE_ASC"
    END_DATE_DESC = "END_DATE_DESC"
    END_DATE_ASC = "END_DATE_ASC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCategoryItemOrderBy(object):
    NAME_ASC = "NAME_ASC"
    NAME_DESC = "NAME_DESC"
    CREATE_DATE_ASC = "CREATE_DATE_ASC"
    CREATE_DATE_DESC = "CREATE_DATE_DESC"
    NONE = "NONE"
    UPDATE_DATE_ASC = "UPDATE_DATE_ASC"
    UPDATE_DATE_DESC = "UPDATE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCategoryVersionOrderBy(object):
    UPDATE_DATE_DESC = "UPDATE_DATE_DESC"
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCategoryVersionState(object):
    DRAFT = "DRAFT"
    DEFAULT = "DEFAULT"
    RELEASED = "RELEASED"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaChannelEnrichment(object):
    CLIENTLOCATION = "ClientLocation"
    USERID = "UserId"
    HOUSEHOLDID = "HouseholdId"
    DEVICEID = "DeviceId"
    DEVICETYPE = "DeviceType"
    UTCOFFSET = "UTCOffset"
    LANGUAGE = "Language"
    DTTREGION = "DTTRegion"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaChannelFieldOrderByType(object):
    NAME_ASC = "NAME_ASC"
    NAME_DESC = "NAME_DESC"
    START_DATE_DESC = "START_DATE_DESC"
    START_DATE_ASC = "START_DATE_ASC"
    CREATE_DATE_ASC = "CREATE_DATE_ASC"
    CREATE_DATE_DESC = "CREATE_DATE_DESC"
    RELEVANCY_DESC = "RELEVANCY_DESC"
    ORDER_NUM = "ORDER_NUM"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaChannelOrderBy(object):
    ORDER_NUM = "ORDER_NUM"
    RELEVANCY_DESC = "RELEVANCY_DESC"
    NAME_ASC = "NAME_ASC"
    NAME_DESC = "NAME_DESC"
    VIEWS_DESC = "VIEWS_DESC"
    RATINGS_DESC = "RATINGS_DESC"
    VOTES_DESC = "VOTES_DESC"
    START_DATE_DESC = "START_DATE_DESC"
    START_DATE_ASC = "START_DATE_ASC"
    LIKES_DESC = "LIKES_DESC"
    CREATE_DATE_ASC = "CREATE_DATE_ASC"
    CREATE_DATE_DESC = "CREATE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaChannelSlidingWindowOrderByType(object):
    LIKES_DESC = "LIKES_DESC"
    RATINGS_DESC = "RATINGS_DESC"
    VOTES_DESC = "VOTES_DESC"
    VIEWS_DESC = "VIEWS_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaChannelsOrderBy(object):
    NONE = "NONE"
    NAME_ASC = "NAME_ASC"
    NAME_DESC = "NAME_DESC"
    CREATE_DATE_ASC = "CREATE_DATE_ASC"
    CREATE_DATE_DESC = "CREATE_DATE_DESC"
    UPDATE_DATE_ASC = "UPDATE_DATE_ASC"
    UPDATE_DATE_DESC = "UPDATE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaChannelStruct(object):
    MANUAL = "Manual"
    DYNAMIC = "Dynamic"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaChannelType(object):
    INTERNAL = "Internal"
    EXTERNAL = "External"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaChronologicalRecordStartTime(object):
    NONE = "NONE"
    NOW = "NOW"
    EPG_START_TIME = "EPG_START_TIME"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCollectionOrderBy(object):
    NONE = "NONE"
    NAME_ASC = "NAME_ASC"
    NAME_DESC = "NAME_DESC"
    UPDATE_DATE_ASC = "UPDATE_DATE_ASC"
    UPDATE_DATE_DESC = "UPDATE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCompensationType(object):
    PERCENTAGE = "PERCENTAGE"
    FIXED_AMOUNT = "FIXED_AMOUNT"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaConcurrencyLimitationType(object):
    SINGLE = "Single"
    GROUP = "Group"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaConfigurationGroupDeviceOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaConfigurationGroupTagOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaConfigurationsOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaContentAction(object):
    WATCH_LINEAR = "watch_linear"
    WATCH_VOD = "watch_vod"
    CATCHUP = "catchup"
    NPVR = "npvr"
    FAVORITE = "favorite"
    RECORDING = "recording"
    SOCIAL_ACTION = "social_action"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaContentActionConditionLengthType(object):
    MINUTES = "minutes"
    PERCENTAGE = "percentage"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaContextType(object):
    NONE = "none"
    RECORDING = "recording"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCountryOrderBy(object):
    NAME_ASC = "NAME_ASC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCouponGroupType(object):
    COUPON = "COUPON"
    GIFT_CARD = "GIFT_CARD"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCouponStatus(object):
    VALID = "VALID"
    NOT_EXISTS = "NOT_EXISTS"
    ALREADY_USED = "ALREADY_USED"
    EXPIRED = "EXPIRED"
    INACTIVE = "INACTIVE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCurrencyOrderBy(object):
    NAME_ASC = "NAME_ASC"
    NAME_DESC = "NAME_DESC"
    CODE_ASC = "CODE_ASC"
    CODE_DESC = "CODE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeleteMediaPolicy(object):
    DISABLE = "Disable"
    DELETE = "Delete"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeviceBrandOrderBy(object):
    ID_ASC = "ID_ASC"
    ID_DESC = "ID_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeviceBrandType(object):
    SYSTEM = "System"
    CUSTOM = "Custom"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeviceFamilyOrderBy(object):
    ID_ASC = "ID_ASC"
    ID_DESC = "ID_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeviceFamilyType(object):
    SYSTEM = "System"
    CUSTOM = "Custom"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeviceReferenceDataOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeviceStatus(object):
    PENDING = "PENDING"
    ACTIVATED = "ACTIVATED"
    NOT_ACTIVATED = "NOT_ACTIVATED"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDowngradePolicy(object):
    LIFO = "LIFO"
    FIFO = "FIFO"
    ACTIVE_DATE = "ACTIVE_DATE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDrmSchemeName(object):
    PLAYREADY_CENC = "PLAYREADY_CENC"
    WIDEVINE_CENC = "WIDEVINE_CENC"
    FAIRPLAY = "FAIRPLAY"
    WIDEVINE = "WIDEVINE"
    PLAYREADY = "PLAYREADY"
    CUSTOM_DRM = "CUSTOM_DRM"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDurationUnit(object):
    MINUTES = "Minutes"
    HOURS = "Hours"
    DAYS = "Days"
    MONTHS = "Months"
    YEARS = "Years"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDynamicListOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEncryptionType(object):
    AES256 = "AES256"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEngagementOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEngagementType(object):
    CHURN = "Churn"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEntitlementOrderBy(object):
    PURCHASE_DATE_ASC = "PURCHASE_DATE_ASC"
    PURCHASE_DATE_DESC = "PURCHASE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEntityAttribute(object):
    MEDIA_FILE_LABELS = "MEDIA_FILE_LABELS"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEntityReferenceBy(object):
    USER = "user"
    HOUSEHOLD = "household"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEpgOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEventNotificationOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEventNotificationStatus(object):
    SENT = "SENT"
    FAILED = "FAILED"
    SUCCESS = "SUCCESS"
    FAILED_TO_SEND = "FAILED_TO_SEND"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEvictionPolicyType(object):
    FIFO = "FIFO"
    LIFO = "LIFO"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaExportDataType(object):
    VOD = "vod"
    EPG = "epg"
    USERS = "users"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaExportTaskOrderBy(object):
    CREATE_DATE_ASC = "CREATE_DATE_ASC"
    CREATE_DATE_DESC = "CREATE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaExportType(object):
    FULL = "full"
    INCREMENTAL = "incremental"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaExternalChannelProfileOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaExternalRecordingResponseProfileOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaFavoriteOrderBy(object):
    CREATE_DATE_ASC = "CREATE_DATE_ASC"
    CREATE_DATE_DESC = "CREATE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaFollowTvSeriesOrderBy(object):
    START_DATE_DESC = "START_DATE_DESC"
    START_DATE_ASC = "START_DATE_ASC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaGroupByField(object):
    MEDIA_TYPE_ID = "media_type_id"
    SUPPRESSED = "suppressed"
    CRID = "crid"
    LINEAR_MEDIA_ID = "linear_media_id"
    NAME = "name"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaGroupByOrder(object):
    DEFAULTORDER = "defaultOrder"
    COUNT_ASC = "count_asc"
    COUNT_DESC = "count_desc"
    VALUE_ASC = "value_asc"
    VALUE_DESC = "value_desc"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaGroupingOption(object):
    OMIT = "Omit"
    INCLUDE = "Include"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaHouseholdCouponOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaHouseholdDeviceOrderBy(object):
    NONE = "NONE"
    CREATED_DATE_ASC = "CREATED_DATE_ASC"
    CREATED_DATE_DESC = "CREATED_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaHouseholdFrequencyType(object):
    DEVICES = "devices"
    USERS = "users"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaHouseholdOrderBy(object):
    CREATE_DATE_DESC = "CREATE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaHouseholdPaymentGatewaySelectedBy(object):
    NONE = "none"
    ACCOUNT = "account"
    HOUSEHOLD = "household"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaHouseholdRestriction(object):
    NOT_RESTRICTED = "not_restricted"
    USER_MASTER_RESTRICTED = "user_master_restricted"
    DEVICE_MASTER_RESTRICTED = "device_master_restricted"
    DEVICE_USER_MASTER_RESTRICTED = "device_user_master_restricted"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaHouseholdSegmentOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaHouseholdState(object):
    OK = "ok"
    CREATED_WITHOUT_NPVR_ACCOUNT = "created_without_npvr_account"
    SUSPENDED = "suspended"
    NO_USERS_IN_HOUSEHOLD = "no_users_in_household"
    PENDING = "pending"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaHouseholdSuspensionState(object):
    NOT_SUSPENDED = "NOT_SUSPENDED"
    SUSPENDED = "SUSPENDED"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaHouseholdUserOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaHouseholdUserStatus(object):
    OK = "OK"
    PENDING = "PENDING"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaImageObjectType(object):
    MEDIA_ASSET = "MEDIA_ASSET"
    PROGRAM_ASSET = "PROGRAM_ASSET"
    CHANNEL = "CHANNEL"
    CATEGORY = "CATEGORY"
    PARTNER = "PARTNER"
    IMAGE_TYPE = "IMAGE_TYPE"
    PROGRAM_GROUP = "PROGRAM_GROUP"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaImageOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaImageStatus(object):
    PENDING = "PENDING"
    READY = "READY"
    FAILED = "FAILED"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaImageTypeOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaInboxMessageOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaInboxMessageStatus(object):
    UNREAD = "Unread"
    READ = "Read"
    DELETED = "Deleted"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaInboxMessageType(object):
    SYSTEMANNOUNCEMENT = "SystemAnnouncement"
    FOLLOWED = "Followed"
    ENGAGEMENT = "Engagement"
    INTEREST = "Interest"
    CAMPAIGN = "Campaign"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaIngestEpgProgramResultOrderBy(object):
    NONE = "NONE"
    EXTERNAL_PROGRAM_ID_DESC = "EXTERNAL_PROGRAM_ID_DESC"
    EXTERNAL_PROGRAM_ID_ASC = "EXTERNAL_PROGRAM_ID_ASC"
    LINEAR_CHANNEL_ID_DESC = "LINEAR_CHANNEL_ID_DESC"
    LINEAR_CHANNEL_ID_ASC = "LINEAR_CHANNEL_ID_ASC"
    INDEX_IN_FILE_DESC = "INDEX_IN_FILE_DESC"
    INDEX_IN_FILE_ASC = "INDEX_IN_FILE_ASC"
    START_DATE_DESC = "START_DATE_DESC"
    START_DATE_ASC = "START_DATE_ASC"
    SEVERITY_DESC = "SEVERITY_DESC"
    SEVERITY_ASC = "SEVERITY_ASC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaIngestEpgProgramStatus(object):
    FAILURE = "FAILURE"
    WARNING = "WARNING"
    SUCCESS = "SUCCESS"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaIngestProfileAutofillPolicy(object):
    REJECT = "REJECT"
    AUTOFILL = "AUTOFILL"
    KEEP_HOLES = "KEEP_HOLES"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaIngestProfileOverlapPolicy(object):
    REJECT = "REJECT"
    CUT_SOURCE = "CUT_SOURCE"
    CUT_TARGET = "CUT_TARGET"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaIngestStatus(object):
    TOTAL_FAILURE = "TOTAL_FAILURE"
    PARTIAL_FAILURE = "PARTIAL_FAILURE"
    WARNING = "WARNING"
    IN_PROGRESS = "IN_PROGRESS"
    SUCCESS = "SUCCESS"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaIotOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaIotProfileOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLabelOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLanguageOrderBy(object):
    SYSTEM_NAME_ASC = "SYSTEM_NAME_ASC"
    SYSTEM_NAME_DESC = "SYSTEM_NAME_DESC"
    CODE_ASC = "CODE_ASC"
    CODE_DESC = "CODE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLinearChannelType(object):
    UNKNOWN = "UNKNOWN"
    DTT = "DTT"
    OTT = "OTT"
    DTT_AND_OTT = "DTT_AND_OTT"
    VRM_EXPORT = "VRM_EXPORT"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaListGroupsRepresentativesOrderBy(object):
    NONE = "None"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaManualCollectionAssetType(object):
    MEDIA = "media"
    EPG = "epg"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMathemticalOperatorType(object):
    COUNT = "count"
    SUM = "sum"
    AVG = "avg"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMediaFileDynamicDataOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMediaFileOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMediaFileStreamerType(object):
    APPLE_HTTP = "APPLE_HTTP"
    MPEG_DASH = "MPEG_DASH"
    URL = "URL"
    SMOOTH_STREAMING = "SMOOTH_STREAMING"
    MULTICAST = "MULTICAST"
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMediaFileTypeQuality(object):
    ADAPTIVE = "ADAPTIVE"
    SD = "SD"
    HD_720 = "HD_720"
    HD_1080 = "HD_1080"
    UHD_4K = "UHD_4K"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMessageTemplateType(object):
    SERIES = "Series"
    REMINDER = "Reminder"
    CHURN = "Churn"
    SERIESREMINDER = "SeriesReminder"
    INTERESTVOD = "InterestVod"
    INTERESTEPG = "InterestEPG"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMetaDataType(object):
    STRING = "STRING"
    MULTILINGUAL_STRING = "MULTILINGUAL_STRING"
    NUMBER = "NUMBER"
    BOOLEAN = "BOOLEAN"
    DATE = "DATE"
    RELEATED_ENTITY = "RELEATED_ENTITY"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMetaOrderBy(object):
    NAME_ASC = "NAME_ASC"
    NAME_DESC = "NAME_DESC"
    SYSTEM_NAME_ASC = "SYSTEM_NAME_ASC"
    SYSTEM_NAME_DESC = "SYSTEM_NAME_DESC"
    CREATE_DATE_ASC = "CREATE_DATE_ASC"
    CREATE_DATE_DESC = "CREATE_DATE_DESC"
    UPDATE_DATE_ASC = "UPDATE_DATE_ASC"
    UPDATE_DATE_DESC = "UPDATE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMetaTagOrderBy(object):
    META_ASC = "META_ASC"
    META_DESC = "META_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMonetizationType(object):
    PPV = "ppv"
    SUBSCRIPTION = "subscription"
    BOXSET = "boxset"
    ANY = "any"
    PPV_LIVE = "ppv_live"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaNotificationType(object):
    ANNOUNCEMENT = "announcement"
    SYSTEM = "system"
    REMINDER = "Reminder"
    SERIES_REMINDER = "series_reminder"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaObjectState(object):
    INACTIVE = "INACTIVE"
    ACTIVE = "ACTIVE"
    ARCHIVE = "ARCHIVE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaObjectVirtualAssetInfoType(object):
    SUBSCRIPTION = "Subscription"
    SEGMENT = "Segment"
    CATEGORY = "Category"
    TVOD = "Tvod"
    BOXSET = "Boxset"
    PAGO = "PAGO"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaOTTUserOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaParentalRuleOrderBy(object):
    PARTNER_SORT_VALUE = "PARTNER_SORT_VALUE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaParentalRuleType(object):
    ALL = "ALL"
    MOVIES = "MOVIES"
    TV_SERIES = "TV_SERIES"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPartnerConfigurationOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPartnerConfigurationType(object):
    DEFAULTPAYMENTGATEWAY = "DefaultPaymentGateway"
    ENABLEPAYMENTGATEWAYSELECTION = "EnablePaymentGatewaySelection"
    OSSADAPTER = "OSSAdapter"
    CONCURRENCY = "Concurrency"
    GENERAL = "General"
    OBJECTVIRTUALASSET = "ObjectVirtualAsset"
    COMMERCE = "Commerce"
    PLAYBACK = "Playback"
    PAYMENT = "Payment"
    CATALOG = "Catalog"
    SECURITY = "Security"
    OPC = "Opc"
    BASE = "Base"
    CUSTOMFIELDS = "CustomFields"
    DEFAULTPARENTALSETTINGS = "DefaultParentalSettings"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPasswordPolicyOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPaymentMethodProfileOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPaymentMethodType(object):
    UNKNOWN = "unknown"
    CREDIT_CARD = "credit_card"
    SMS = "sms"
    PAY_PAL = "pay_pal"
    DEBIT_CARD = "debit_card"
    IDEAL = "ideal"
    INCASO = "incaso"
    GIFT = "gift"
    VISA = "visa"
    MASTER_CARD = "master_card"
    IN_APP = "in_app"
    M1 = "m1"
    CHANGE_SUBSCRIPTION = "change_subscription"
    OFFLINE = "offline"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPermissionItemOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPermissionOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPermissionType(object):
    NORMAL = "NORMAL"
    GROUP = "GROUP"
    SPECIAL_FEATURE = "SPECIAL_FEATURE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPersonalAssetSelectionOrderBy(object):
    ASSET_SELECTION_DATE_DESC = "ASSET_SELECTION_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPersonalFeedOrderBy(object):
    RELEVANCY_DESC = "RELEVANCY_DESC"
    NAME_ASC = "NAME_ASC"
    NAME_DESC = "NAME_DESC"
    VIEWS_DESC = "VIEWS_DESC"
    RATINGS_DESC = "RATINGS_DESC"
    VOTES_DESC = "VOTES_DESC"
    START_DATE_DESC = "START_DATE_DESC"
    START_DATE_ASC = "START_DATE_ASC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPersonalListOrderBy(object):
    CREATE_DATE_DESC = "CREATE_DATE_DESC"
    CREATE_DATE_ASC = "CREATE_DATE_ASC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPinType(object):
    PURCHASE = "purchase"
    PARENTAL = "parental"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPlatform(object):
    ANDROID = "Android"
    IOS = "iOS"
    WINDOWSPHONE = "WindowsPhone"
    BLACKBERRY = "Blackberry"
    STB = "STB"
    CTV = "CTV"
    OTHER = "Other"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPlaybackContextType(object):
    TRAILER = "TRAILER"
    CATCHUP = "CATCHUP"
    START_OVER = "START_OVER"
    PLAYBACK = "PLAYBACK"
    DOWNLOAD = "DOWNLOAD"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPlaybackProfileOrderBy(object):
    NAME_ASC = "NAME_ASC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPositionOwner(object):
    HOUSEHOLD = "household"
    USER = "user"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPpvOrderBy(object):
    NAME_ASC = "NAME_ASC"
    NAME_DESC = "NAME_DESC"
    UPDATE_DATE_ASC = "UPDATE_DATE_ASC"
    UPDATE_DATE_DESC = "UPDATE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPreviewModuleOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPriceDetailsOrderBy(object):
    NAME_ASC = "NAME_ASC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPricePlanOrderBy(object):
    CREATE_DATE_DESC = "CREATE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaProductPriceOrderBy(object):
    PRODUCT_ID_ASC = "PRODUCT_ID_ASC"
    PRODUCT_ID_DESC = "PRODUCT_ID_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaProgramAssetGroupOfferOrderBy(object):
    NAME_ASC = "NAME_ASC"
    NAME_DESC = "NAME_DESC"
    UPDATE_DATE_ASC = "UPDATE_DATE_ASC"
    UPDATE_DATE_DESC = "UPDATE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaProtectionPolicy(object):
    EXTENDINGRECORDINGLIFETIME = "ExtendingRecordingLifetime"
    LIMITEDBYRECORDINGLIFETIME = "LimitedByRecordingLifetime"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPurchaseSettingsType(object):
    BLOCK = "block"
    ASK = "ask"
    ALLOW = "allow"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPurchaseStatus(object):
    PPV_PURCHASED = "ppv_purchased"
    FREE = "free"
    FOR_PURCHASE_SUBSCRIPTION_ONLY = "for_purchase_subscription_only"
    SUBSCRIPTION_PURCHASED = "subscription_purchased"
    FOR_PURCHASE = "for_purchase"
    SUBSCRIPTION_PURCHASED_WRONG_CURRENCY = "subscription_purchased_wrong_currency"
    PRE_PAID_PURCHASED = "pre_paid_purchased"
    GEO_COMMERCE_BLOCKED = "geo_commerce_blocked"
    ENTITLED_TO_PREVIEW_MODULE = "entitled_to_preview_module"
    FIRST_DEVICE_LIMITATION = "first_device_limitation"
    COLLECTION_PURCHASED = "collection_purchased"
    USER_SUSPENDED = "user_suspended"
    NOT_FOR_PURCHASE = "not_for_purchase"
    INVALID_CURRENCY = "invalid_currency"
    CURRENCY_NOT_DEFINED_ON_PRICE_CODE = "currency_not_defined_on_price_code"
    PENDING_ENTITLEMENT = "pending_entitlement"
    PROGRAM_ASSET_GROUP_OFFER_PURCHASED = "program_asset_group_offer_purchased"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaQuotaOveragePolicy(object):
    STOPATQUOTA = "StopAtQuota"
    FIFOAUTODELETE = "FIFOAutoDelete"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaRecordingContextOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaRecordingOrderBy(object):
    TITLE_ASC = "TITLE_ASC"
    TITLE_DESC = "TITLE_DESC"
    START_DATE_ASC = "START_DATE_ASC"
    START_DATE_DESC = "START_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaRecordingStatus(object):
    SCHEDULED = "SCHEDULED"
    RECORDING = "RECORDING"
    RECORDED = "RECORDED"
    CANCELED = "CANCELED"
    FAILED = "FAILED"
    DELETED = "DELETED"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaRecordingType(object):
    SINGLE = "SINGLE"
    SEASON = "SEASON"
    SERIES = "SERIES"
    ORIGINALBROADCAST = "OriginalBroadcast"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaRegionOrderBy(object):
    CREATE_DATE_ASC = "CREATE_DATE_ASC"
    CREATE_DATE_DESC = "CREATE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaRelatedEntityType(object):
    CHANNEL = "CHANNEL"
    EXTERNAL_CHANNEL = "EXTERNAL_CHANNEL"
    MEDIA = "MEDIA"
    PROGRAM = "PROGRAM"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaReminderType(object):
    ASSET = "ASSET"
    SERIES = "SERIES"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaReportOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaResponseType(object):
    JSON = 1
    XML = 2
    JSONP = 9
    ASSET_XML = 30
    EXCEL = 31

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaRollingDevicePolicy(object):
    NONE = "NONE"
    LIFO = "LIFO"
    FIFO = "FIFO"
    ACTIVE_DEVICE_ASCENDING = "ACTIVE_DEVICE_ASCENDING"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaRuleActionType(object):
    BLOCK = "BLOCK"
    START_DATE_OFFSET = "START_DATE_OFFSET"
    END_DATE_OFFSET = "END_DATE_OFFSET"
    USER_BLOCK = "USER_BLOCK"
    ALLOW_PLAYBACK = "ALLOW_PLAYBACK"
    BLOCK_PLAYBACK = "BLOCK_PLAYBACK"
    APPLY_DISCOUNT_MODULE = "APPLY_DISCOUNT_MODULE"
    APPLY_PLAYBACK_ADAPTER = "APPLY_PLAYBACK_ADAPTER"
    FILTER = "FILTER"
    ASSET_LIFE_CYCLE_TRANSITION = "ASSET_LIFE_CYCLE_TRANSITION"
    APPLY_FREE_PLAYBACK = "APPLY_FREE_PLAYBACK"
    FILTERASSETBYKSQL = "FilterAssetByKsql"
    FILTERFILEBYQUALITYINDISCOVERY = "FilterFileByQualityInDiscovery"
    FILTERFILEBYQUALITYINPLAYBACK = "FilterFileByQualityInPlayback"
    FILTERFILEBYFILETYPEIDFORASSETTYPEINDISCOVERY = "FilterFileByFileTypeIdForAssetTypeInDiscovery"
    FILTERFILEBYFILETYPEIDFORASSETTYPEINPLAYBACK = "FilterFileByFileTypeIdForAssetTypeInPlayback"
    FILTERFILEBYFILETYPEIDINDISCOVERY = "FilterFileByFileTypeIdInDiscovery"
    FILTERFILEBYFILETYPEIDINPLAYBACK = "FilterFileByFileTypeIdInPlayback"
    FILTERFILEBYAUDIOCODECINDISCOVERY = "FilterFileByAudioCodecInDiscovery"
    FILTERFILEBYAUDIOCODECINPLAYBACK = "FilterFileByAudioCodecInPlayback"
    FILTERFILEBYVIDEOCODECINDISCOVERY = "FilterFileByVideoCodecInDiscovery"
    FILTERFILEBYVIDEOCODECINPLAYBACK = "FilterFileByVideoCodecInPlayback"
    FILTERFILEBYSTREAMERTYPEINDISCOVERY = "FilterFileByStreamerTypeInDiscovery"
    FILTERFILEBYSTREAMERTYPEINPLAYBACK = "FilterFileByStreamerTypeInPlayback"
    FILTERFILEBYLABELINDISCOVERY = "FilterFileByLabelInDiscovery"
    FILTERFILEBYLABELINPLAYBACK = "FilterFileByLabelInPlayback"
    FILTERFILEBYDYNAMICDATAINDISCOVERY = "FilterFileByDynamicDataInDiscovery"
    FILTERFILEBYDYNAMICDATAINPLAYBACK = "FilterFileByDynamicDataInPlayback"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaRuleConditionType(object):
    ASSET = "ASSET"
    COUNTRY = "COUNTRY"
    CONCURRENCY = "CONCURRENCY"
    IP_RANGE = "IP_RANGE"
    BUSINESS_MODULE = "BUSINESS_MODULE"
    SEGMENTS = "SEGMENTS"
    DATE = "DATE"
    OR = "OR"
    HEADER = "HEADER"
    USER_SUBSCRIPTION = "USER_SUBSCRIPTION"
    ASSET_SUBSCRIPTION = "ASSET_SUBSCRIPTION"
    USER_ROLE = "USER_ROLE"
    DEVICE_BRAND = "DEVICE_BRAND"
    DEVICE_FAMILY = "DEVICE_FAMILY"
    DEVICE_MANUFACTURER = "DEVICE_MANUFACTURER"
    DEVICE_MODEL = "DEVICE_MODEL"
    DEVICE_UDID_DYNAMIC_LIST = "DEVICE_UDID_DYNAMIC_LIST"
    DYNAMIC_KEYS = "DYNAMIC_KEYS"
    USER_SESSION_PROFILE = "USER_SESSION_PROFILE"
    DEVICE_DYNAMIC_DATA = "DEVICE_DYNAMIC_DATA"
    IP_V6_RANGE = "IP_V6_RANGE"
    ASSET_SHOP = "ASSET_SHOP"
    CHANNEL = "CHANNEL"
    FILE_TYPE = "FILE_TYPE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaRuleLevel(object):
    INVALID = "invalid"
    USER = "user"
    HOUSEHOLD = "household"
    ACCOUNT = "account"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaRuleType(object):
    PARENTAL = "parental"
    GEO = "geo"
    USER_TYPE = "user_type"
    DEVICE = "device"
    ASSETUSER = "assetUser"
    NETWORK = "network"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaScheduledRecordingAssetType(object):
    SINGLE = "single"
    SERIES = "series"
    ALL = "all"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSearchHistoryOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSearchPriorityCriteriaType(object):
    KSQL = "KSql"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSearchPriorityGroupOrderBy(object):
    PRIORITY_DESC = "PRIORITY_DESC"
    NAME_ASC = "NAME_ASC"
    NAME_DESC = "NAME_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSegmentationTypeOrderBy(object):
    UPDATE_DATE_DESC = "UPDATE_DATE_DESC"
    UPDATE_DATE_ASC = "UPDATE_DATE_ASC"
    CREATE_DATE_DESC = "CREATE_DATE_DESC"
    CREATE_DATE_ASC = "CREATE_DATE_ASC"
    EXECUTE_DATE_DESC = "EXECUTE_DATE_DESC"
    EXECUTE_DATE_ASC = "EXECUTE_DATE_ASC"
    AFFECTED_USERS_DESC = "AFFECTED_USERS_DESC"
    AFFECTED_USERS_ASC = "AFFECTED_USERS_ASC"
    AFFECTED_HOUSEHOLDS_DESC = "AFFECTED_HOUSEHOLDS_DESC"
    AFFECTED_HOUSEHOLDS_ASC = "AFFECTED_HOUSEHOLDS_ASC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSeriesRecordingOrderBy(object):
    START_DATE_ASC = "START_DATE_ASC"
    START_DATE_DESC = "START_DATE_DESC"
    ID_ASC = "ID_ASC"
    ID_DESC = "ID_DESC"
    SERIES_ID_ASC = "SERIES_ID_ASC"
    SERIES_ID_DESC = "SERIES_ID_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSeriesReminderOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSkipOperators(object):
    EQUAL = "Equal"
    UNEQUAL = "UnEqual"
    LESSTHAN = "LessThan"
    GREATERTHAN = "GreaterThan"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSkipOptions(object):
    NO = "No"
    PREVIOUS = "Previous"
    ANY = "Any"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSmsAdapterProfileOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSocialActionOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSocialActionPrivacy(object):
    ALLOW = "ALLOW"
    DONT_ALLOW = "DONT_ALLOW"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSocialActionType(object):
    LIKE = "LIKE"
    WATCH = "WATCH"
    RATE = "RATE"
    SHARE = "SHARE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSocialCommentOrderBy(object):
    CREATE_DATE_ASC = "CREATE_DATE_ASC"
    CREATE_DATE_DESC = "CREATE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSocialFriendActivityOrderBy(object):
    NONE = "NONE"
    UPDATE_DATE_DESC = "UPDATE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSocialNetwork(object):
    FACEBOOK = "facebook"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSocialPlatform(object):
    IN_APP = "IN_APP"
    FACEBOOK = "FACEBOOK"
    TWITTER = "TWITTER"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSocialPrivacy(object):
    UNKNOWN = "UNKNOWN"
    EVERYONE = "EVERYONE"
    ALL_FRIENDS = "ALL_FRIENDS"
    FRIENDS_OF_FRIENDS = "FRIENDS_OF_FRIENDS"
    SELF = "SELF"
    CUSTOM = "CUSTOM"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSocialStatus(object):
    ERROR = "error"
    OK = "ok"
    USER_DOES_NOT_EXIST = "user_does_not_exist"
    NO_USER_SOCIAL_SETTINGS_FOUND = "no_user_social_settings_found"
    ASSET_ALREADY_LIKED = "asset_already_liked"
    NOT_ALLOWED = "not_allowed"
    INVALID_PARAMETERS = "invalid_parameters"
    NO_FACEBOOK_ACTION = "no_facebook_action"
    ASSET_ALREADY_RATED = "asset_already_rated"
    ASSET_DOSE_NOT_EXISTS = "asset_dose_not_exists"
    INVALID_PLATFORM_REQUEST = "invalid_platform_request"
    INVALID_ACCESS_TOKEN = "invalid_access_token"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaStreamingDeviceOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaStreamType(object):
    CATCHUP = "catchup"
    START_OVER = "start_over"
    TRICK_PLAY = "trick_play"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSubscriptionDependencyType(object):
    NOTAPPLICABLE = "NOTAPPLICABLE"
    BASE = "BASE"
    ADDON = "ADDON"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSubscriptionOrderBy(object):
    START_DATE_ASC = "START_DATE_ASC"
    START_DATE_DESC = "START_DATE_DESC"
    CREATE_DATE_ASC = "CREATE_DATE_ASC"
    CREATE_DATE_DESC = "CREATE_DATE_DESC"
    UPDATE_DATE_ASC = "UPDATE_DATE_ASC"
    UPDATE_DATE_DESC = "UPDATE_DATE_DESC"
    NAME_ASC = "NAME_ASC"
    NAME_DESC = "NAME_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSubscriptionSetOrderBy(object):
    NAME_ASC = "NAME_ASC"
    NAME_DESC = "NAME_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSubscriptionSetType(object):
    SWITCH = "SWITCH"
    DEPENDENCY = "DEPENDENCY"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSubscriptionTriggerType(object):
    START_DATE = "START_DATE"
    END_DATE = "END_DATE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSuspensionProfileInheritanceType(object):
    ALWAYS = "ALWAYS"
    NEVER = "NEVER"
    DEFAULT = "DEFAULT"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaTagOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaTimeShiftedTvState(object):
    INHERITED = "INHERITED"
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaTopicAutomaticIssueNotification(object):
    INHERIT = "Inherit"
    YES = "Yes"
    NO = "No"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaTopicNotificationMessageOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaTopicNotificationOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaTopicOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaTransactionAdapterStatus(object):
    OK = "OK"
    PENDING = "PENDING"
    FAILED = "FAILED"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaTransactionHistoryOrderBy(object):
    CREATE_DATE_ASC = "CREATE_DATE_ASC"
    CREATE_DATE_DESC = "CREATE_DATE_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaTransactionType(object):
    PPV = "ppv"
    SUBSCRIPTION = "subscription"
    COLLECTION = "collection"
    PROGRAMASSETGROUPOFFER = "programAssetGroupOffer"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaTvmRuleOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaTvmRuleType(object):
    GEO = "Geo"
    DEVICE = "Device"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUnmatchedItemsPolicy(object):
    OMIT = "OMIT"
    GROUP = "GROUP"
    INCLUDE_AND_MERGE = "INCLUDE_AND_MERGE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUploadTokenStatus(object):
    PENDING = "PENDING"
    FULL_UPLOAD = "FULL_UPLOAD"
    CLOSED = "CLOSED"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUrlType(object):
    PLAYMANIFEST = "PLAYMANIFEST"
    DIRECT = "DIRECT"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUserAssetRuleOrderBy(object):
    NAME_ASC = "NAME_ASC"
    NAME_DESC = "NAME_DESC"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUserAssetsListItemType(object):
    ALL = "all"
    MEDIA = "media"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUserAssetsListType(object):
    ALL = "all"
    WATCH = "watch"
    PURCHASE = "purchase"
    LIBRARY = "library"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUserRoleOrderBy(object):
    NONE = "NONE"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUserRoleProfile(object):
    USER = "USER"
    PARTNER = "PARTNER"
    PROFILE = "PROFILE"
    SYSTEM = "SYSTEM"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUserRoleType(object):
    SYSTEM = "SYSTEM"
    CUSTOM = "CUSTOM"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUserState(object):
    OK = "ok"
    USER_WITH_NO_HOUSEHOLD = "user_with_no_household"
    USER_CREATED_WITH_NO_ROLE = "user_created_with_no_role"
    USER_NOT_ACTIVATED = "user_not_activated"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaWatchStatus(object):
    PROGRESS = "progress"
    DONE = "done"
    ALL = "all"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

########## classes ##########
# @package Kaltura
# @subpackage Client
class KalturaApiExceptionArg(KalturaObjectBase):
    def __init__(self,
            name=NotImplemented,
            value=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Argument name
        # @var string
        self.name = name

        # Argument value
        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'name': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaApiExceptionArg.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaApiExceptionArg")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaClientConfiguration(KalturaObjectBase):
    """Define client optional configurations"""

    def __init__(self,
            clientTag=NotImplemented,
            apiVersion=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Client Tag
        # @var string
        self.clientTag = clientTag

        # API client version
        # @var string
        self.apiVersion = apiVersion


    PROPERTY_LOADERS = {
        'clientTag': getXmlNodeText, 
        'apiVersion': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaClientConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaClientConfiguration")
        kparams.addStringIfDefined("clientTag", self.clientTag)
        kparams.addStringIfDefined("apiVersion", self.apiVersion)
        return kparams

    def getClientTag(self):
        return self.clientTag

    def setClientTag(self, newClientTag):
        self.clientTag = newClientTag

    def getApiVersion(self):
        return self.apiVersion

    def setApiVersion(self, newApiVersion):
        self.apiVersion = newApiVersion


# @package Kaltura
# @subpackage Client
class KalturaBaseResponseProfile(KalturaObjectBase):
    """Define base profile response -  optional configurations"""

    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseResponseProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBaseResponseProfile")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSkipCondition(KalturaObjectBase):
    """Skip current request according to skip condition"""

    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSkipCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSkipCondition")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaRequestConfiguration(KalturaObjectBase):
    """Define client request optional configurations"""

    def __init__(self,
            partnerId=NotImplemented,
            userId=NotImplemented,
            language=NotImplemented,
            currency=NotImplemented,
            ks=NotImplemented,
            responseProfile=NotImplemented,
            abortOnError=NotImplemented,
            abortAllOnError=NotImplemented,
            skipCondition=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Impersonated partner id
        # @var int
        self.partnerId = partnerId

        # Impersonated user id
        # @var int
        self.userId = userId

        # Content language
        # @var string
        self.language = language

        # Currency to be used
        # @var string
        self.currency = currency

        # Kaltura API session
        # @var string
        self.ks = ks

        # Kaltura response profile object
        # @var KalturaBaseResponseProfile
        self.responseProfile = responseProfile

        # Abort the Multireuqset call if any error occurs in one of the requests
        # @var bool
        self.abortOnError = abortOnError

        # Abort all following requests in Multireuqset if current request has an error
        # @var bool
        self.abortAllOnError = abortAllOnError

        # Skip current request according to skip condition
        # @var KalturaSkipCondition
        self.skipCondition = skipCondition


    PROPERTY_LOADERS = {
        'partnerId': getXmlNodeInt, 
        'userId': getXmlNodeInt, 
        'language': getXmlNodeText, 
        'currency': getXmlNodeText, 
        'ks': getXmlNodeText, 
        'responseProfile': (KalturaObjectFactory.create, 'KalturaBaseResponseProfile'), 
        'abortOnError': getXmlNodeBool, 
        'abortAllOnError': getXmlNodeBool, 
        'skipCondition': (KalturaObjectFactory.create, 'KalturaSkipCondition'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRequestConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaRequestConfiguration")
        kparams.addIntIfDefined("partnerId", self.partnerId)
        kparams.addIntIfDefined("userId", self.userId)
        kparams.addStringIfDefined("language", self.language)
        kparams.addStringIfDefined("currency", self.currency)
        kparams.addStringIfDefined("ks", self.ks)
        kparams.addObjectIfDefined("responseProfile", self.responseProfile)
        kparams.addBoolIfDefined("abortOnError", self.abortOnError)
        kparams.addBoolIfDefined("abortAllOnError", self.abortAllOnError)
        kparams.addObjectIfDefined("skipCondition", self.skipCondition)
        return kparams

    def getPartnerId(self):
        return self.partnerId

    def setPartnerId(self, newPartnerId):
        self.partnerId = newPartnerId

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getLanguage(self):
        return self.language

    def setLanguage(self, newLanguage):
        self.language = newLanguage

    def getCurrency(self):
        return self.currency

    def setCurrency(self, newCurrency):
        self.currency = newCurrency

    def getKs(self):
        return self.ks

    def setKs(self, newKs):
        self.ks = newKs

    def getResponseProfile(self):
        return self.responseProfile

    def setResponseProfile(self, newResponseProfile):
        self.responseProfile = newResponseProfile

    def getAbortOnError(self):
        return self.abortOnError

    def setAbortOnError(self, newAbortOnError):
        self.abortOnError = newAbortOnError

    def getAbortAllOnError(self):
        return self.abortAllOnError

    def setAbortAllOnError(self, newAbortAllOnError):
        self.abortAllOnError = newAbortAllOnError

    def getSkipCondition(self):
        return self.skipCondition

    def setSkipCondition(self, newSkipCondition):
        self.skipCondition = newSkipCondition


# @package Kaltura
# @subpackage Client
class KalturaFilter(KalturaObjectBase):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaObjectBase.__init__(self)

        # order by
        # @var string
        self.orderBy = orderBy


    PROPERTY_LOADERS = {
        'orderBy': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaFilter")
        kparams.addStringIfDefined("orderBy", self.orderBy)
        return kparams

    def getOrderBy(self):
        return self.orderBy

    def setOrderBy(self, newOrderBy):
        self.orderBy = newOrderBy


# @package Kaltura
# @subpackage Client
class KalturaDetachedResponseProfile(KalturaBaseResponseProfile):
    """Define specific base profile response"""

    def __init__(self,
            name=NotImplemented,
            filter=NotImplemented,
            relatedProfiles=NotImplemented):
        KalturaBaseResponseProfile.__init__(self)

        # name
        # @var string
        self.name = name

        # filter
        # @var KalturaRelatedObjectFilter
        self.filter = filter

        # relatedProfiles
        # @var array of KalturaDetachedResponseProfile
        self.relatedProfiles = relatedProfiles


    PROPERTY_LOADERS = {
        'name': getXmlNodeText, 
        'filter': (KalturaObjectFactory.create, 'KalturaRelatedObjectFilter'), 
        'relatedProfiles': (KalturaObjectFactory.createArray, 'KalturaObjectBase'), 
    }

    def fromXml(self, node):
        KalturaBaseResponseProfile.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDetachedResponseProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseResponseProfile.toParams(self)
        kparams.put("objectType", "KalturaDetachedResponseProfile")
        kparams.addStringIfDefined("name", self.name)
        kparams.addObjectIfDefined("filter", self.filter)
        kparams.addArrayIfDefined("relatedProfiles", self.relatedProfiles)
        return kparams

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getFilter(self):
        return self.filter

    def setFilter(self, newFilter):
        self.filter = newFilter

    def getRelatedProfiles(self):
        return self.relatedProfiles

    def setRelatedProfiles(self, newRelatedProfiles):
        self.relatedProfiles = newRelatedProfiles


# @package Kaltura
# @subpackage Client
class KalturaOnDemandResponseProfile(KalturaDetachedResponseProfile):
    """Define on demand response"""

    def __init__(self,
            name=NotImplemented,
            filter=NotImplemented,
            relatedProfiles=NotImplemented,
            retrievedProperties=NotImplemented):
        KalturaDetachedResponseProfile.__init__(self,
            name,
            filter,
            relatedProfiles)

        # Comma seperated properties names
        # @var string
        self.retrievedProperties = retrievedProperties


    PROPERTY_LOADERS = {
        'retrievedProperties': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaDetachedResponseProfile.fromXml(self, node)
        self.fromXmlImpl(node, KalturaOnDemandResponseProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDetachedResponseProfile.toParams(self)
        kparams.put("objectType", "KalturaOnDemandResponseProfile")
        kparams.addStringIfDefined("retrievedProperties", self.retrievedProperties)
        return kparams

    def getRetrievedProperties(self):
        return self.retrievedProperties

    def setRetrievedProperties(self, newRetrievedProperties):
        self.retrievedProperties = newRetrievedProperties


# @package Kaltura
# @subpackage Client
class KalturaRelatedObjectFilter(KalturaFilter):
    """Define KalturaRelatedObjectFilter"""

    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRelatedObjectFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaRelatedObjectFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeviceReferenceDataFilter(KalturaFilter):
    """Device Reference Data Filter"""

    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # IdIn
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeviceReferenceDataFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaDeviceReferenceDataFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaDeviceManufacturersReferenceDataFilter(KalturaDeviceReferenceDataFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented,
            nameEqual=NotImplemented):
        KalturaDeviceReferenceDataFilter.__init__(self,
            orderBy,
            idIn)

        # name equal
        # @var string
        self.nameEqual = nameEqual


    PROPERTY_LOADERS = {
        'nameEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaDeviceReferenceDataFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeviceManufacturersReferenceDataFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeviceReferenceDataFilter.toParams(self)
        kparams.put("objectType", "KalturaDeviceManufacturersReferenceDataFilter")
        kparams.addStringIfDefined("nameEqual", self.nameEqual)
        return kparams

    def getNameEqual(self):
        return self.nameEqual

    def setNameEqual(self, newNameEqual):
        self.nameEqual = newNameEqual


# @package Kaltura
# @subpackage Client
class KalturaValue(KalturaObjectBase):
    """A representation to return an array of values"""

    def __init__(self,
            description=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Description
        # @var string
        self.description = description


    PROPERTY_LOADERS = {
        'description': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaValue.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaValue")
        kparams.addStringIfDefined("description", self.description)
        return kparams

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription


# @package Kaltura
# @subpackage Client
class KalturaIntegerValue(KalturaValue):
    """A string representation to return an array of ints"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        KalturaValue.__init__(self,
            description)

        # Value
        # @var int
        self.value = value


    PROPERTY_LOADERS = {
        'value': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaValue.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIntegerValue.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaValue.toParams(self)
        kparams.put("objectType", "KalturaIntegerValue")
        kparams.addIntIfDefined("value", self.value)
        return kparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaFavoriteFilter(KalturaFilter):
    """Favorite request filter"""

    def __init__(self,
            orderBy=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaIdIn=NotImplemented,
            udidEqualCurrent=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Media type to filter by the favorite assets
        # @var int
        self.mediaTypeEqual = mediaTypeEqual

        # Media identifiers from which to filter the favorite assets
        # @var string
        self.mediaIdIn = mediaIdIn

        # Indicates whether the results should be filtered by origin UDID using the current
        # @var bool
        self.udidEqualCurrent = udidEqualCurrent


    PROPERTY_LOADERS = {
        'mediaTypeEqual': getXmlNodeInt, 
        'mediaIdIn': getXmlNodeText, 
        'udidEqualCurrent': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFavoriteFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaFavoriteFilter")
        kparams.addIntIfDefined("mediaTypeEqual", self.mediaTypeEqual)
        kparams.addStringIfDefined("mediaIdIn", self.mediaIdIn)
        kparams.addBoolIfDefined("udidEqualCurrent", self.udidEqualCurrent)
        return kparams

    def getMediaTypeEqual(self):
        return self.mediaTypeEqual

    def setMediaTypeEqual(self, newMediaTypeEqual):
        self.mediaTypeEqual = newMediaTypeEqual

    def getMediaIdIn(self):
        return self.mediaIdIn

    def setMediaIdIn(self, newMediaIdIn):
        self.mediaIdIn = newMediaIdIn

    def getUdidEqualCurrent(self):
        return self.udidEqualCurrent

    def setUdidEqualCurrent(self, newUdidEqualCurrent):
        self.udidEqualCurrent = newUdidEqualCurrent


# @package Kaltura
# @subpackage Client
class KalturaBooleanValue(KalturaValue):
    """A string representation to return an array of booleans"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        KalturaValue.__init__(self,
            description)

        # Value
        # @var bool
        self.value = value


    PROPERTY_LOADERS = {
        'value': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaValue.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBooleanValue.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaValue.toParams(self)
        kparams.put("objectType", "KalturaBooleanValue")
        kparams.addBoolIfDefined("value", self.value)
        return kparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaDoubleValue(KalturaValue):
    """A string representation to return an array of doubles"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        KalturaValue.__init__(self,
            description)

        # Value
        # @var float
        self.value = value


    PROPERTY_LOADERS = {
        'value': getXmlNodeFloat, 
    }

    def fromXml(self, node):
        KalturaValue.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDoubleValue.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaValue.toParams(self)
        kparams.put("objectType", "KalturaDoubleValue")
        kparams.addFloatIfDefined("value", self.value)
        return kparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaLongValue(KalturaValue):
    """A string representation to return an array of longs"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        KalturaValue.__init__(self,
            description)

        # Value
        # @var int
        self.value = value


    PROPERTY_LOADERS = {
        'value': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaValue.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLongValue.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaValue.toParams(self)
        kparams.put("objectType", "KalturaLongValue")
        kparams.addIntIfDefined("value", self.value)
        return kparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaTranslationToken(KalturaObjectBase):
    """Container for translation"""

    def __init__(self,
            language=NotImplemented,
            value=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Language code
        # @var string
        self.language = language

        # Translated value
        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'language': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTranslationToken.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaTranslationToken")
        kparams.addStringIfDefined("language", self.language)
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getLanguage(self):
        return self.language

    def setLanguage(self, newLanguage):
        self.language = newLanguage

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaMultilingualStringValue(KalturaValue):
    """Array of translated strings"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented,
            multilingualValue=NotImplemented):
        KalturaValue.__init__(self,
            description)

        # Value
        # @var string
        # @readonly
        self.value = value

        # Value
        # @var array of KalturaTranslationToken
        self.multilingualValue = multilingualValue


    PROPERTY_LOADERS = {
        'value': getXmlNodeText, 
        'multilingualValue': (KalturaObjectFactory.createArray, 'KalturaTranslationToken'), 
    }

    def fromXml(self, node):
        KalturaValue.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMultilingualStringValue.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaValue.toParams(self)
        kparams.put("objectType", "KalturaMultilingualStringValue")
        kparams.addArrayIfDefined("multilingualValue", self.multilingualValue)
        return kparams

    def getValue(self):
        return self.value

    def getMultilingualValue(self):
        return self.multilingualValue

    def setMultilingualValue(self, newMultilingualValue):
        self.multilingualValue = newMultilingualValue


# @package Kaltura
# @subpackage Client
class KalturaStringValue(KalturaValue):
    """A string representation to return an array of strings"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        KalturaValue.__init__(self,
            description)

        # Value
        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaValue.fromXml(self, node)
        self.fromXmlImpl(node, KalturaStringValue.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaValue.toParams(self)
        kparams.put("objectType", "KalturaStringValue")
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaOTTUserFilter(KalturaFilter):
    """OTT User filter"""

    def __init__(self,
            orderBy=NotImplemented,
            usernameEqual=NotImplemented,
            externalIdEqual=NotImplemented,
            idIn=NotImplemented,
            roleIdsIn=NotImplemented,
            emailEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Username
        # @var string
        self.usernameEqual = usernameEqual

        # User external identifier
        # @var string
        self.externalIdEqual = externalIdEqual

        # List of user identifiers separated by &#39;,&#39;
        # @var string
        self.idIn = idIn

        # Comma separated list of role Ids.
        # @var string
        self.roleIdsIn = roleIdsIn

        # User email
        # @var string
        self.emailEqual = emailEqual


    PROPERTY_LOADERS = {
        'usernameEqual': getXmlNodeText, 
        'externalIdEqual': getXmlNodeText, 
        'idIn': getXmlNodeText, 
        'roleIdsIn': getXmlNodeText, 
        'emailEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaOTTUserFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaOTTUserFilter")
        kparams.addStringIfDefined("usernameEqual", self.usernameEqual)
        kparams.addStringIfDefined("externalIdEqual", self.externalIdEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addStringIfDefined("roleIdsIn", self.roleIdsIn)
        kparams.addStringIfDefined("emailEqual", self.emailEqual)
        return kparams

    def getUsernameEqual(self):
        return self.usernameEqual

    def setUsernameEqual(self, newUsernameEqual):
        self.usernameEqual = newUsernameEqual

    def getExternalIdEqual(self):
        return self.externalIdEqual

    def setExternalIdEqual(self, newExternalIdEqual):
        self.externalIdEqual = newExternalIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getRoleIdsIn(self):
        return self.roleIdsIn

    def setRoleIdsIn(self, newRoleIdsIn):
        self.roleIdsIn = newRoleIdsIn

    def getEmailEqual(self):
        return self.emailEqual

    def setEmailEqual(self, newEmailEqual):
        self.emailEqual = newEmailEqual


# @package Kaltura
# @subpackage Client
class KalturaPartnerFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma separated discount codes
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPartnerFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaPartnerFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaPasswordPolicyFilter(KalturaFilter):
    """Password policy settings filter"""

    def __init__(self,
            orderBy=NotImplemented,
            userRoleIdIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma separated list of role Ids.
        # @var string
        self.userRoleIdIn = userRoleIdIn


    PROPERTY_LOADERS = {
        'userRoleIdIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPasswordPolicyFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaPasswordPolicyFilter")
        kparams.addStringIfDefined("userRoleIdIn", self.userRoleIdIn)
        return kparams

    def getUserRoleIdIn(self):
        return self.userRoleIdIn

    def setUserRoleIdIn(self, newUserRoleIdIn):
        self.userRoleIdIn = newUserRoleIdIn


# @package Kaltura
# @subpackage Client
class KalturaUserSessionProfileFilter(KalturaFilter):
    """User Session Profile filter"""

    def __init__(self,
            orderBy=NotImplemented,
            idEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # UserSessionProfile identifier to filter by
        # @var int
        self.idEqual = idEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserSessionProfileFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaUserSessionProfileFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadFilter(KalturaFilter):
    """Bulk Upload Filter"""

    def __init__(self,
            orderBy=NotImplemented,
            bulkObjectTypeEqual=NotImplemented,
            createDateGreaterThanOrEqual=NotImplemented,
            uploadedByUserIdEqualCurrent=NotImplemented,
            statusIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # bulk objects Type name (must be type of KalturaOTTObject)
        # @var string
        self.bulkObjectTypeEqual = bulkObjectTypeEqual

        # upload date to search within (search in the last 60 days)
        # @var int
        self.createDateGreaterThanOrEqual = createDateGreaterThanOrEqual

        # Indicates if to get the BulkUpload list that created by current user or by the entire group.
        # @var bool
        self.uploadedByUserIdEqualCurrent = uploadedByUserIdEqualCurrent

        # Comma separated list of BulkUpload Statuses to search\filter
        # @var string
        self.statusIn = statusIn


    PROPERTY_LOADERS = {
        'bulkObjectTypeEqual': getXmlNodeText, 
        'createDateGreaterThanOrEqual': getXmlNodeInt, 
        'uploadedByUserIdEqualCurrent': getXmlNodeBool, 
        'statusIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadFilter")
        kparams.addStringIfDefined("bulkObjectTypeEqual", self.bulkObjectTypeEqual)
        kparams.addIntIfDefined("createDateGreaterThanOrEqual", self.createDateGreaterThanOrEqual)
        kparams.addBoolIfDefined("uploadedByUserIdEqualCurrent", self.uploadedByUserIdEqualCurrent)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        return kparams

    def getBulkObjectTypeEqual(self):
        return self.bulkObjectTypeEqual

    def setBulkObjectTypeEqual(self, newBulkObjectTypeEqual):
        self.bulkObjectTypeEqual = newBulkObjectTypeEqual

    def getCreateDateGreaterThanOrEqual(self):
        return self.createDateGreaterThanOrEqual

    def setCreateDateGreaterThanOrEqual(self, newCreateDateGreaterThanOrEqual):
        self.createDateGreaterThanOrEqual = newCreateDateGreaterThanOrEqual

    def getUploadedByUserIdEqualCurrent(self):
        return self.uploadedByUserIdEqualCurrent

    def setUploadedByUserIdEqualCurrent(self, newUploadedByUserIdEqualCurrent):
        self.uploadedByUserIdEqualCurrent = newUploadedByUserIdEqualCurrent

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn


# @package Kaltura
# @subpackage Client
class KalturaSocialActionFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            assetIdIn=NotImplemented,
            assetTypeEqual=NotImplemented,
            actionTypeIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma separated list of asset identifiers.
        # @var string
        self.assetIdIn = assetIdIn

        # Asset Type
        # @var KalturaAssetType
        self.assetTypeEqual = assetTypeEqual

        # Comma separated list of social actions to filter by
        # @var string
        self.actionTypeIn = actionTypeIn


    PROPERTY_LOADERS = {
        'assetIdIn': getXmlNodeText, 
        'assetTypeEqual': (KalturaEnumsFactory.createString, "KalturaAssetType"), 
        'actionTypeIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSocialActionFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaSocialActionFilter")
        kparams.addStringIfDefined("assetIdIn", self.assetIdIn)
        kparams.addStringEnumIfDefined("assetTypeEqual", self.assetTypeEqual)
        kparams.addStringIfDefined("actionTypeIn", self.actionTypeIn)
        return kparams

    def getAssetIdIn(self):
        return self.assetIdIn

    def setAssetIdIn(self, newAssetIdIn):
        self.assetIdIn = newAssetIdIn

    def getAssetTypeEqual(self):
        return self.assetTypeEqual

    def setAssetTypeEqual(self, newAssetTypeEqual):
        self.assetTypeEqual = newAssetTypeEqual

    def getActionTypeIn(self):
        return self.actionTypeIn

    def setActionTypeIn(self, newActionTypeIn):
        self.actionTypeIn = newActionTypeIn


# @package Kaltura
# @subpackage Client
class KalturaSocialCommentFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            assetIdEqual=NotImplemented,
            assetTypeEqual=NotImplemented,
            socialPlatformEqual=NotImplemented,
            createDateGreaterThan=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Asset ID to filter by
        # @var int
        self.assetIdEqual = assetIdEqual

        # Asset type to filter by, currently only VOD (media)
        # @var KalturaAssetType
        self.assetTypeEqual = assetTypeEqual

        # Comma separated list of social actions to filter by
        # @var KalturaSocialPlatform
        self.socialPlatformEqual = socialPlatformEqual

        # The create date from which to get the comments
        # @var int
        self.createDateGreaterThan = createDateGreaterThan


    PROPERTY_LOADERS = {
        'assetIdEqual': getXmlNodeInt, 
        'assetTypeEqual': (KalturaEnumsFactory.createString, "KalturaAssetType"), 
        'socialPlatformEqual': (KalturaEnumsFactory.createString, "KalturaSocialPlatform"), 
        'createDateGreaterThan': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSocialCommentFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaSocialCommentFilter")
        kparams.addIntIfDefined("assetIdEqual", self.assetIdEqual)
        kparams.addStringEnumIfDefined("assetTypeEqual", self.assetTypeEqual)
        kparams.addStringEnumIfDefined("socialPlatformEqual", self.socialPlatformEqual)
        kparams.addIntIfDefined("createDateGreaterThan", self.createDateGreaterThan)
        return kparams

    def getAssetIdEqual(self):
        return self.assetIdEqual

    def setAssetIdEqual(self, newAssetIdEqual):
        self.assetIdEqual = newAssetIdEqual

    def getAssetTypeEqual(self):
        return self.assetTypeEqual

    def setAssetTypeEqual(self, newAssetTypeEqual):
        self.assetTypeEqual = newAssetTypeEqual

    def getSocialPlatformEqual(self):
        return self.socialPlatformEqual

    def setSocialPlatformEqual(self, newSocialPlatformEqual):
        self.socialPlatformEqual = newSocialPlatformEqual

    def getCreateDateGreaterThan(self):
        return self.createDateGreaterThan

    def setCreateDateGreaterThan(self, newCreateDateGreaterThan):
        self.createDateGreaterThan = newCreateDateGreaterThan


# @package Kaltura
# @subpackage Client
class KalturaSocialFriendActivityFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            assetIdEqual=NotImplemented,
            assetTypeEqual=NotImplemented,
            actionTypeIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Asset ID to filter by
        # @var int
        self.assetIdEqual = assetIdEqual

        # Asset type to filter by, currently only VOD (media)
        # @var KalturaAssetType
        self.assetTypeEqual = assetTypeEqual

        # Comma separated list of social actions to filter by
        # @var string
        self.actionTypeIn = actionTypeIn


    PROPERTY_LOADERS = {
        'assetIdEqual': getXmlNodeInt, 
        'assetTypeEqual': (KalturaEnumsFactory.createString, "KalturaAssetType"), 
        'actionTypeIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSocialFriendActivityFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaSocialFriendActivityFilter")
        kparams.addIntIfDefined("assetIdEqual", self.assetIdEqual)
        kparams.addStringEnumIfDefined("assetTypeEqual", self.assetTypeEqual)
        kparams.addStringIfDefined("actionTypeIn", self.actionTypeIn)
        return kparams

    def getAssetIdEqual(self):
        return self.assetIdEqual

    def setAssetIdEqual(self, newAssetIdEqual):
        self.assetIdEqual = newAssetIdEqual

    def getAssetTypeEqual(self):
        return self.assetTypeEqual

    def setAssetTypeEqual(self, newAssetTypeEqual):
        self.assetTypeEqual = newAssetTypeEqual

    def getActionTypeIn(self):
        return self.actionTypeIn

    def setActionTypeIn(self, newActionTypeIn):
        self.actionTypeIn = newActionTypeIn


# @package Kaltura
# @subpackage Client
class KalturaBaseSegmentationTypeFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseSegmentationTypeFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaBaseSegmentationTypeFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSegmentationTypeFilter(KalturaBaseSegmentationTypeFilter):
    """Filter for segmentation types"""

    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented,
            kSql=NotImplemented,
            nameContain=NotImplemented):
        KalturaBaseSegmentationTypeFilter.__init__(self,
            orderBy)

        # Comma separated segmentation types identifiers
        # @var string
        self.idIn = idIn

        # KSQL expression
        # @var string
        self.kSql = kSql

        # Name of segment contains specific string value
        # @var string
        self.nameContain = nameContain


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
        'kSql': getXmlNodeText, 
        'nameContain': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBaseSegmentationTypeFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSegmentationTypeFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSegmentationTypeFilter.toParams(self)
        kparams.put("objectType", "KalturaSegmentationTypeFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addStringIfDefined("kSql", self.kSql)
        kparams.addStringIfDefined("nameContain", self.nameContain)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getKSql(self):
        return self.kSql

    def setKSql(self, newKSql):
        self.kSql = newKSql

    def getNameContain(self):
        return self.nameContain

    def setNameContain(self, newNameContain):
        self.nameContain = newNameContain


# @package Kaltura
# @subpackage Client
class KalturaSegmentValueFilter(KalturaBaseSegmentationTypeFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented):
        KalturaBaseSegmentationTypeFilter.__init__(self,
            orderBy)

        # Comma separated segmentation identifiers
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBaseSegmentationTypeFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSegmentValueFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSegmentationTypeFilter.toParams(self)
        kparams.put("objectType", "KalturaSegmentValueFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaHouseholdSegmentFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            kSql=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # KSQL expression
        # @var string
        self.kSql = kSql


    PROPERTY_LOADERS = {
        'kSql': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdSegmentFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaHouseholdSegmentFilter")
        kparams.addStringIfDefined("kSql", self.kSql)
        return kparams

    def getKSql(self):
        return self.kSql

    def setKSql(self, newKSql):
        self.kSql = newKSql


# @package Kaltura
# @subpackage Client
class KalturaUserSegmentFilter(KalturaFilter):
    """Filter for user segments"""

    def __init__(self,
            orderBy=NotImplemented,
            userIdEqual=NotImplemented,
            kSql=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # User ID
        # @var string
        self.userIdEqual = userIdEqual

        # KSQL expression
        # @var string
        self.kSql = kSql


    PROPERTY_LOADERS = {
        'userIdEqual': getXmlNodeText, 
        'kSql': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserSegmentFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaUserSegmentFilter")
        kparams.addStringIfDefined("userIdEqual", self.userIdEqual)
        kparams.addStringIfDefined("kSql", self.kSql)
        return kparams

    def getUserIdEqual(self):
        return self.userIdEqual

    def setUserIdEqual(self, newUserIdEqual):
        self.userIdEqual = newUserIdEqual

    def getKSql(self):
        return self.kSql

    def setKSql(self, newKSql):
        self.kSql = newKSql


# @package Kaltura
# @subpackage Client
class KalturaAssetFilePpvFilter(KalturaFilter):
    """Filtering Asset Struct Metas"""

    def __init__(self,
            orderBy=NotImplemented,
            assetIdEqual=NotImplemented,
            assetFileIdEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Filter Asset file ppvs that contain a specific asset id
        # @var int
        self.assetIdEqual = assetIdEqual

        # Filter Asset file ppvs that contain a specific asset file id
        # @var int
        self.assetFileIdEqual = assetFileIdEqual


    PROPERTY_LOADERS = {
        'assetIdEqual': getXmlNodeInt, 
        'assetFileIdEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetFilePpvFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaAssetFilePpvFilter")
        kparams.addIntIfDefined("assetIdEqual", self.assetIdEqual)
        kparams.addIntIfDefined("assetFileIdEqual", self.assetFileIdEqual)
        return kparams

    def getAssetIdEqual(self):
        return self.assetIdEqual

    def setAssetIdEqual(self, newAssetIdEqual):
        self.assetIdEqual = newAssetIdEqual

    def getAssetFileIdEqual(self):
        return self.assetFileIdEqual

    def setAssetFileIdEqual(self, newAssetFileIdEqual):
        self.assetFileIdEqual = newAssetFileIdEqual


# @package Kaltura
# @subpackage Client
class KalturaCollectionFilter(KalturaFilter):
    """Collection Filter"""

    def __init__(self,
            orderBy=NotImplemented,
            collectionIdIn=NotImplemented,
            mediaFileIdEqual=NotImplemented,
            couponGroupIdEqual=NotImplemented,
            alsoInactive=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma separated collection IDs
        # @var string
        self.collectionIdIn = collectionIdIn

        # Media-file ID to get the collections by
        # @var int
        self.mediaFileIdEqual = mediaFileIdEqual

        # couponGroupIdEqual
        # @var int
        self.couponGroupIdEqual = couponGroupIdEqual

        # return also inactive
        # @var bool
        self.alsoInactive = alsoInactive


    PROPERTY_LOADERS = {
        'collectionIdIn': getXmlNodeText, 
        'mediaFileIdEqual': getXmlNodeInt, 
        'couponGroupIdEqual': getXmlNodeInt, 
        'alsoInactive': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCollectionFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaCollectionFilter")
        kparams.addStringIfDefined("collectionIdIn", self.collectionIdIn)
        kparams.addIntIfDefined("mediaFileIdEqual", self.mediaFileIdEqual)
        kparams.addIntIfDefined("couponGroupIdEqual", self.couponGroupIdEqual)
        kparams.addBoolIfDefined("alsoInactive", self.alsoInactive)
        return kparams

    def getCollectionIdIn(self):
        return self.collectionIdIn

    def setCollectionIdIn(self, newCollectionIdIn):
        self.collectionIdIn = newCollectionIdIn

    def getMediaFileIdEqual(self):
        return self.mediaFileIdEqual

    def setMediaFileIdEqual(self, newMediaFileIdEqual):
        self.mediaFileIdEqual = newMediaFileIdEqual

    def getCouponGroupIdEqual(self):
        return self.couponGroupIdEqual

    def setCouponGroupIdEqual(self, newCouponGroupIdEqual):
        self.couponGroupIdEqual = newCouponGroupIdEqual

    def getAlsoInactive(self):
        return self.alsoInactive

    def setAlsoInactive(self, newAlsoInactive):
        self.alsoInactive = newAlsoInactive


# @package Kaltura
# @subpackage Client
class KalturaDiscountDetailsFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma separated discount codes
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDiscountDetailsFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaDiscountDetailsFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaPpvFilter(KalturaFilter):
    """Filtering Asset Struct Metas"""

    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented,
            couponGroupIdEqual=NotImplemented,
            alsoInactive=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma separated identifiers
        # @var string
        self.idIn = idIn

        # couponGroupIdEqual
        # @var int
        self.couponGroupIdEqual = couponGroupIdEqual

        # return also inactive
        # @var bool
        self.alsoInactive = alsoInactive


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
        'couponGroupIdEqual': getXmlNodeInt, 
        'alsoInactive': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPpvFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaPpvFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addIntIfDefined("couponGroupIdEqual", self.couponGroupIdEqual)
        kparams.addBoolIfDefined("alsoInactive", self.alsoInactive)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getCouponGroupIdEqual(self):
        return self.couponGroupIdEqual

    def setCouponGroupIdEqual(self, newCouponGroupIdEqual):
        self.couponGroupIdEqual = newCouponGroupIdEqual

    def getAlsoInactive(self):
        return self.alsoInactive

    def setAlsoInactive(self, newAlsoInactive):
        self.alsoInactive = newAlsoInactive


# @package Kaltura
# @subpackage Client
class KalturaPreviewModuleFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma separated discount codes
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPreviewModuleFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaPreviewModuleFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaPriceDetailsFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma separated price identifiers
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPriceDetailsFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaPriceDetailsFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaPricePlanFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma separated price plans identifiers
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPricePlanFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaPricePlanFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaProgramAssetGroupOfferFilter(KalturaFilter):
    """Program asset group offer filter"""

    def __init__(self,
            orderBy=NotImplemented,
            alsoInactive=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # return also inactive
        # @var bool
        self.alsoInactive = alsoInactive


    PROPERTY_LOADERS = {
        'alsoInactive': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaProgramAssetGroupOfferFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaProgramAssetGroupOfferFilter")
        kparams.addBoolIfDefined("alsoInactive", self.alsoInactive)
        return kparams

    def getAlsoInactive(self):
        return self.alsoInactive

    def setAlsoInactive(self, newAlsoInactive):
        self.alsoInactive = newAlsoInactive


# @package Kaltura
# @subpackage Client
class KalturaProgramAssetGroupOfferIdInFilter(KalturaProgramAssetGroupOfferFilter):
    """Program asset group offer filter"""

    def __init__(self,
            orderBy=NotImplemented,
            alsoInactive=NotImplemented,
            idIn=NotImplemented):
        KalturaProgramAssetGroupOfferFilter.__init__(self,
            orderBy,
            alsoInactive)

        # Comma separated asset group offer identifiers
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaProgramAssetGroupOfferFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaProgramAssetGroupOfferIdInFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaProgramAssetGroupOfferFilter.toParams(self)
        kparams.put("objectType", "KalturaProgramAssetGroupOfferIdInFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaSubscriptionSetFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented,
            subscriptionIdContains=NotImplemented,
            typeEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma separated identifiers
        # @var string
        self.idIn = idIn

        # Comma separated subscription identifiers
        # @var string
        self.subscriptionIdContains = subscriptionIdContains

        # Subscription Type
        # @var KalturaSubscriptionSetType
        self.typeEqual = typeEqual


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
        'subscriptionIdContains': getXmlNodeText, 
        'typeEqual': (KalturaEnumsFactory.createString, "KalturaSubscriptionSetType"), 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSubscriptionSetFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaSubscriptionSetFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addStringIfDefined("subscriptionIdContains", self.subscriptionIdContains)
        kparams.addStringEnumIfDefined("typeEqual", self.typeEqual)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getSubscriptionIdContains(self):
        return self.subscriptionIdContains

    def setSubscriptionIdContains(self, newSubscriptionIdContains):
        self.subscriptionIdContains = newSubscriptionIdContains

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual


# @package Kaltura
# @subpackage Client
class KalturaSubscriptionDependencySetFilter(KalturaSubscriptionSetFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented,
            subscriptionIdContains=NotImplemented,
            typeEqual=NotImplemented,
            baseSubscriptionIdIn=NotImplemented):
        KalturaSubscriptionSetFilter.__init__(self,
            orderBy,
            idIn,
            subscriptionIdContains,
            typeEqual)

        # Comma separated identifiers
        # @var string
        self.baseSubscriptionIdIn = baseSubscriptionIdIn


    PROPERTY_LOADERS = {
        'baseSubscriptionIdIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaSubscriptionSetFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSubscriptionDependencySetFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSubscriptionSetFilter.toParams(self)
        kparams.put("objectType", "KalturaSubscriptionDependencySetFilter")
        kparams.addStringIfDefined("baseSubscriptionIdIn", self.baseSubscriptionIdIn)
        return kparams

    def getBaseSubscriptionIdIn(self):
        return self.baseSubscriptionIdIn

    def setBaseSubscriptionIdIn(self, newBaseSubscriptionIdIn):
        self.baseSubscriptionIdIn = newBaseSubscriptionIdIn


# @package Kaltura
# @subpackage Client
class KalturaSubscriptionFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            subscriptionIdIn=NotImplemented,
            mediaFileIdEqual=NotImplemented,
            externalIdIn=NotImplemented,
            couponGroupIdEqual=NotImplemented,
            previewModuleIdEqual=NotImplemented,
            pricePlanIdEqual=NotImplemented,
            channelIdEqual=NotImplemented,
            kSql=NotImplemented,
            alsoInactive=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma separated subscription IDs to get the subscriptions by
        # @var string
        self.subscriptionIdIn = subscriptionIdIn

        # Media-file ID to get the subscriptions by
        # @var int
        self.mediaFileIdEqual = mediaFileIdEqual

        # Comma separated subscription external IDs to get the subscriptions by
        # @var string
        self.externalIdIn = externalIdIn

        # couponGroupIdEqual
        # @var int
        self.couponGroupIdEqual = couponGroupIdEqual

        # previewModuleIdEqual
        # @var int
        self.previewModuleIdEqual = previewModuleIdEqual

        # pricePlanIdEqual
        # @var int
        self.pricePlanIdEqual = pricePlanIdEqual

        # channelIdEqual
        # @var int
        self.channelIdEqual = channelIdEqual

        # KSQL expression
        # @var string
        self.kSql = kSql

        # return also inactive
        # @var bool
        self.alsoInactive = alsoInactive


    PROPERTY_LOADERS = {
        'subscriptionIdIn': getXmlNodeText, 
        'mediaFileIdEqual': getXmlNodeInt, 
        'externalIdIn': getXmlNodeText, 
        'couponGroupIdEqual': getXmlNodeInt, 
        'previewModuleIdEqual': getXmlNodeInt, 
        'pricePlanIdEqual': getXmlNodeInt, 
        'channelIdEqual': getXmlNodeInt, 
        'kSql': getXmlNodeText, 
        'alsoInactive': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSubscriptionFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaSubscriptionFilter")
        kparams.addStringIfDefined("subscriptionIdIn", self.subscriptionIdIn)
        kparams.addIntIfDefined("mediaFileIdEqual", self.mediaFileIdEqual)
        kparams.addStringIfDefined("externalIdIn", self.externalIdIn)
        kparams.addIntIfDefined("couponGroupIdEqual", self.couponGroupIdEqual)
        kparams.addIntIfDefined("previewModuleIdEqual", self.previewModuleIdEqual)
        kparams.addIntIfDefined("pricePlanIdEqual", self.pricePlanIdEqual)
        kparams.addIntIfDefined("channelIdEqual", self.channelIdEqual)
        kparams.addStringIfDefined("kSql", self.kSql)
        kparams.addBoolIfDefined("alsoInactive", self.alsoInactive)
        return kparams

    def getSubscriptionIdIn(self):
        return self.subscriptionIdIn

    def setSubscriptionIdIn(self, newSubscriptionIdIn):
        self.subscriptionIdIn = newSubscriptionIdIn

    def getMediaFileIdEqual(self):
        return self.mediaFileIdEqual

    def setMediaFileIdEqual(self, newMediaFileIdEqual):
        self.mediaFileIdEqual = newMediaFileIdEqual

    def getExternalIdIn(self):
        return self.externalIdIn

    def setExternalIdIn(self, newExternalIdIn):
        self.externalIdIn = newExternalIdIn

    def getCouponGroupIdEqual(self):
        return self.couponGroupIdEqual

    def setCouponGroupIdEqual(self, newCouponGroupIdEqual):
        self.couponGroupIdEqual = newCouponGroupIdEqual

    def getPreviewModuleIdEqual(self):
        return self.previewModuleIdEqual

    def setPreviewModuleIdEqual(self, newPreviewModuleIdEqual):
        self.previewModuleIdEqual = newPreviewModuleIdEqual

    def getPricePlanIdEqual(self):
        return self.pricePlanIdEqual

    def setPricePlanIdEqual(self, newPricePlanIdEqual):
        self.pricePlanIdEqual = newPricePlanIdEqual

    def getChannelIdEqual(self):
        return self.channelIdEqual

    def setChannelIdEqual(self, newChannelIdEqual):
        self.channelIdEqual = newChannelIdEqual

    def getKSql(self):
        return self.kSql

    def setKSql(self, newKSql):
        self.kSql = newKSql

    def getAlsoInactive(self):
        return self.alsoInactive

    def setAlsoInactive(self, newAlsoInactive):
        self.alsoInactive = newAlsoInactive


# @package Kaltura
# @subpackage Client
class KalturaUsageModuleFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # usageModule id
        # @var int
        self.idEqual = idEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUsageModuleFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaUsageModuleFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual


# @package Kaltura
# @subpackage Client
class KalturaPartnerConfigurationFilter(KalturaFilter):
    """Partner configuration filter"""

    def __init__(self,
            orderBy=NotImplemented,
            partnerConfigurationTypeEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Indicates which partner configuration list to return
        # @var KalturaPartnerConfigurationType
        self.partnerConfigurationTypeEqual = partnerConfigurationTypeEqual


    PROPERTY_LOADERS = {
        'partnerConfigurationTypeEqual': (KalturaEnumsFactory.createString, "KalturaPartnerConfigurationType"), 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPartnerConfigurationFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaPartnerConfigurationFilter")
        kparams.addStringEnumIfDefined("partnerConfigurationTypeEqual", self.partnerConfigurationTypeEqual)
        return kparams

    def getPartnerConfigurationTypeEqual(self):
        return self.partnerConfigurationTypeEqual

    def setPartnerConfigurationTypeEqual(self, newPartnerConfigurationTypeEqual):
        self.partnerConfigurationTypeEqual = newPartnerConfigurationTypeEqual


# @package Kaltura
# @subpackage Client
class KalturaPersonalListFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            partnerListTypeIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma separated list of partner list types to search within. 
        #             If omitted - all types should be included.
        # @var string
        self.partnerListTypeIn = partnerListTypeIn


    PROPERTY_LOADERS = {
        'partnerListTypeIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPersonalListFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaPersonalListFilter")
        kparams.addStringIfDefined("partnerListTypeIn", self.partnerListTypeIn)
        return kparams

    def getPartnerListTypeIn(self):
        return self.partnerListTypeIn

    def setPartnerListTypeIn(self, newPartnerListTypeIn):
        self.partnerListTypeIn = newPartnerListTypeIn


# @package Kaltura
# @subpackage Client
class KalturaReminderFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaReminderFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaReminderFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAssetReminderFilter(KalturaReminderFilter):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaReminderFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaReminderFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetReminderFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaReminderFilter.toParams(self)
        kparams.put("objectType", "KalturaAssetReminderFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSeasonsReminderFilter(KalturaReminderFilter):
    def __init__(self,
            orderBy=NotImplemented,
            seriesIdEqual=NotImplemented,
            seasonNumberIn=NotImplemented,
            epgChannelIdEqual=NotImplemented):
        KalturaReminderFilter.__init__(self,
            orderBy)

        # Series ID
        # @var string
        self.seriesIdEqual = seriesIdEqual

        # Comma separated season numbers
        # @var string
        self.seasonNumberIn = seasonNumberIn

        # EPG channel ID
        # @var int
        self.epgChannelIdEqual = epgChannelIdEqual


    PROPERTY_LOADERS = {
        'seriesIdEqual': getXmlNodeText, 
        'seasonNumberIn': getXmlNodeText, 
        'epgChannelIdEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaReminderFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSeasonsReminderFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaReminderFilter.toParams(self)
        kparams.put("objectType", "KalturaSeasonsReminderFilter")
        kparams.addStringIfDefined("seriesIdEqual", self.seriesIdEqual)
        kparams.addStringIfDefined("seasonNumberIn", self.seasonNumberIn)
        kparams.addIntIfDefined("epgChannelIdEqual", self.epgChannelIdEqual)
        return kparams

    def getSeriesIdEqual(self):
        return self.seriesIdEqual

    def setSeriesIdEqual(self, newSeriesIdEqual):
        self.seriesIdEqual = newSeriesIdEqual

    def getSeasonNumberIn(self):
        return self.seasonNumberIn

    def setSeasonNumberIn(self, newSeasonNumberIn):
        self.seasonNumberIn = newSeasonNumberIn

    def getEpgChannelIdEqual(self):
        return self.epgChannelIdEqual

    def setEpgChannelIdEqual(self, newEpgChannelIdEqual):
        self.epgChannelIdEqual = newEpgChannelIdEqual


# @package Kaltura
# @subpackage Client
class KalturaSeriesReminderFilter(KalturaReminderFilter):
    def __init__(self,
            orderBy=NotImplemented,
            seriesIdIn=NotImplemented,
            epgChannelIdEqual=NotImplemented):
        KalturaReminderFilter.__init__(self,
            orderBy)

        # Comma separated series IDs
        # @var string
        self.seriesIdIn = seriesIdIn

        # EPG channel ID
        # @var int
        self.epgChannelIdEqual = epgChannelIdEqual


    PROPERTY_LOADERS = {
        'seriesIdIn': getXmlNodeText, 
        'epgChannelIdEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaReminderFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSeriesReminderFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaReminderFilter.toParams(self)
        kparams.put("objectType", "KalturaSeriesReminderFilter")
        kparams.addStringIfDefined("seriesIdIn", self.seriesIdIn)
        kparams.addIntIfDefined("epgChannelIdEqual", self.epgChannelIdEqual)
        return kparams

    def getSeriesIdIn(self):
        return self.seriesIdIn

    def setSeriesIdIn(self, newSeriesIdIn):
        self.seriesIdIn = newSeriesIdIn

    def getEpgChannelIdEqual(self):
        return self.epgChannelIdEqual

    def setEpgChannelIdEqual(self, newEpgChannelIdEqual):
        self.epgChannelIdEqual = newEpgChannelIdEqual


# @package Kaltura
# @subpackage Client
class KalturaEngagementFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            typeIn=NotImplemented,
            sendTimeGreaterThanOrEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # List of inbox message types to search within.
        # @var string
        self.typeIn = typeIn

        # SendTime GreaterThanOrEqual
        # @var int
        self.sendTimeGreaterThanOrEqual = sendTimeGreaterThanOrEqual


    PROPERTY_LOADERS = {
        'typeIn': getXmlNodeText, 
        'sendTimeGreaterThanOrEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEngagementFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaEngagementFilter")
        kparams.addStringIfDefined("typeIn", self.typeIn)
        kparams.addIntIfDefined("sendTimeGreaterThanOrEqual", self.sendTimeGreaterThanOrEqual)
        return kparams

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn

    def getSendTimeGreaterThanOrEqual(self):
        return self.sendTimeGreaterThanOrEqual

    def setSendTimeGreaterThanOrEqual(self, newSendTimeGreaterThanOrEqual):
        self.sendTimeGreaterThanOrEqual = newSendTimeGreaterThanOrEqual


# @package Kaltura
# @subpackage Client
class KalturaFollowTvSeriesFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFollowTvSeriesFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaFollowTvSeriesFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaInboxMessageFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # List of inbox message types to search within.
        # @var string
        self.typeIn = typeIn

        # createdAtGreaterThanOrEqual
        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # createdAtLessThanOrEqual
        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual


    PROPERTY_LOADERS = {
        'typeIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaInboxMessageFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaInboxMessageFilter")
        kparams.addStringIfDefined("typeIn", self.typeIn)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        return kparams

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual


# @package Kaltura
# @subpackage Client
class KalturaAnnouncementFilter(KalturaFilter):
    """order announcements"""

    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # A list of comma separated announcement ids.
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAnnouncementFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaAnnouncementFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaPersonalFeedFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPersonalFeedFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaPersonalFeedFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSmsAdapterProfileFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSmsAdapterProfileFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaSmsAdapterProfileFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaTopicFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTopicFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaTopicFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSubscribeReference(KalturaObjectBase):
    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSubscribeReference.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSubscribeReference")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaTopicNotificationFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            subscribeReference=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Subscribe rreference
        # @var KalturaSubscribeReference
        self.subscribeReference = subscribeReference


    PROPERTY_LOADERS = {
        'subscribeReference': (KalturaObjectFactory.create, 'KalturaSubscribeReference'), 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTopicNotificationFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaTopicNotificationFilter")
        kparams.addObjectIfDefined("subscribeReference", self.subscribeReference)
        return kparams

    def getSubscribeReference(self):
        return self.subscribeReference

    def setSubscribeReference(self, newSubscribeReference):
        self.subscribeReference = newSubscribeReference


# @package Kaltura
# @subpackage Client
class KalturaSubscriptionSubscribeReference(KalturaSubscribeReference):
    def __init__(self,
            subscriptionId=NotImplemented):
        KalturaSubscribeReference.__init__(self)

        # Subscription ID
        # @var int
        self.subscriptionId = subscriptionId


    PROPERTY_LOADERS = {
        'subscriptionId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaSubscribeReference.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSubscriptionSubscribeReference.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSubscribeReference.toParams(self)
        kparams.put("objectType", "KalturaSubscriptionSubscribeReference")
        kparams.addIntIfDefined("subscriptionId", self.subscriptionId)
        return kparams

    def getSubscriptionId(self):
        return self.subscriptionId

    def setSubscriptionId(self, newSubscriptionId):
        self.subscriptionId = newSubscriptionId


# @package Kaltura
# @subpackage Client
class KalturaTopicNotificationMessageFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            topicNotificationIdEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Topic notification ID
        # @var int
        self.topicNotificationIdEqual = topicNotificationIdEqual


    PROPERTY_LOADERS = {
        'topicNotificationIdEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTopicNotificationMessageFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaTopicNotificationMessageFilter")
        kparams.addIntIfDefined("topicNotificationIdEqual", self.topicNotificationIdEqual)
        return kparams

    def getTopicNotificationIdEqual(self):
        return self.topicNotificationIdEqual

    def setTopicNotificationIdEqual(self, newTopicNotificationIdEqual):
        self.topicNotificationIdEqual = newTopicNotificationIdEqual


# @package Kaltura
# @subpackage Client
class KalturaIngestByCompoundFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            ingestNameContains=NotImplemented,
            ingestedByUserIdIn=NotImplemented,
            ingestStatusIn=NotImplemented,
            createdDateGreaterThan=NotImplemented,
            createdDateSmallerThan=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # A string that is included in the ingest file name
        # @var string
        self.ingestNameContains = ingestNameContains

        # Comma seperated user ids
        # @var string
        self.ingestedByUserIdIn = ingestedByUserIdIn

        # Comma seperated valid stutuses
        # @var string
        self.ingestStatusIn = ingestStatusIn

        # Ingest created date greater then this value. . Date and time represented as epoch.
        # @var int
        self.createdDateGreaterThan = createdDateGreaterThan

        # Ingest created date smaller than this value. Date and time represented as epoch.
        # @var int
        self.createdDateSmallerThan = createdDateSmallerThan


    PROPERTY_LOADERS = {
        'ingestNameContains': getXmlNodeText, 
        'ingestedByUserIdIn': getXmlNodeText, 
        'ingestStatusIn': getXmlNodeText, 
        'createdDateGreaterThan': getXmlNodeInt, 
        'createdDateSmallerThan': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIngestByCompoundFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaIngestByCompoundFilter")
        kparams.addStringIfDefined("ingestNameContains", self.ingestNameContains)
        kparams.addStringIfDefined("ingestedByUserIdIn", self.ingestedByUserIdIn)
        kparams.addStringIfDefined("ingestStatusIn", self.ingestStatusIn)
        kparams.addIntIfDefined("createdDateGreaterThan", self.createdDateGreaterThan)
        kparams.addIntIfDefined("createdDateSmallerThan", self.createdDateSmallerThan)
        return kparams

    def getIngestNameContains(self):
        return self.ingestNameContains

    def setIngestNameContains(self, newIngestNameContains):
        self.ingestNameContains = newIngestNameContains

    def getIngestedByUserIdIn(self):
        return self.ingestedByUserIdIn

    def setIngestedByUserIdIn(self, newIngestedByUserIdIn):
        self.ingestedByUserIdIn = newIngestedByUserIdIn

    def getIngestStatusIn(self):
        return self.ingestStatusIn

    def setIngestStatusIn(self, newIngestStatusIn):
        self.ingestStatusIn = newIngestStatusIn

    def getCreatedDateGreaterThan(self):
        return self.createdDateGreaterThan

    def setCreatedDateGreaterThan(self, newCreatedDateGreaterThan):
        self.createdDateGreaterThan = newCreatedDateGreaterThan

    def getCreatedDateSmallerThan(self):
        return self.createdDateSmallerThan

    def setCreatedDateSmallerThan(self, newCreatedDateSmallerThan):
        self.createdDateSmallerThan = newCreatedDateSmallerThan


# @package Kaltura
# @subpackage Client
class KalturaIngestByIdsFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            ingestIdIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma seperated ingest profile ids
        # @var string
        self.ingestIdIn = ingestIdIn


    PROPERTY_LOADERS = {
        'ingestIdIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIngestByIdsFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaIngestByIdsFilter")
        kparams.addStringIfDefined("ingestIdIn", self.ingestIdIn)
        return kparams

    def getIngestIdIn(self):
        return self.ingestIdIn

    def setIngestIdIn(self, newIngestIdIn):
        self.ingestIdIn = newIngestIdIn


# @package Kaltura
# @subpackage Client
class KalturaIngestEpgProgramResultFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIngestEpgProgramResultFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaIngestEpgProgramResultFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaIngestProgramResultsByRefineFilter(KalturaIngestEpgProgramResultFilter):
    def __init__(self,
            orderBy=NotImplemented,
            ingestStatusIn=NotImplemented,
            startDateGreaterThan=NotImplemented,
            startDateSmallerThan=NotImplemented):
        KalturaIngestEpgProgramResultFilter.__init__(self,
            orderBy)

        # Comma seperated valid statuses - only &#39;FAILURE&#39;, &#39;WARNING&#39; and &#39;SUCCESS&#39; are valid strings. No repetitions are allowed.
        # @var string
        self.ingestStatusIn = ingestStatusIn

        # Program EPG start date greater then this value. Date and time represented as epoch.
        # @var int
        self.startDateGreaterThan = startDateGreaterThan

        # Program EPG start date smaller than this value. Date and time represented as epoch.
        # @var int
        self.startDateSmallerThan = startDateSmallerThan


    PROPERTY_LOADERS = {
        'ingestStatusIn': getXmlNodeText, 
        'startDateGreaterThan': getXmlNodeInt, 
        'startDateSmallerThan': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaIngestEpgProgramResultFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIngestProgramResultsByRefineFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaIngestEpgProgramResultFilter.toParams(self)
        kparams.put("objectType", "KalturaIngestProgramResultsByRefineFilter")
        kparams.addStringIfDefined("ingestStatusIn", self.ingestStatusIn)
        kparams.addIntIfDefined("startDateGreaterThan", self.startDateGreaterThan)
        kparams.addIntIfDefined("startDateSmallerThan", self.startDateSmallerThan)
        return kparams

    def getIngestStatusIn(self):
        return self.ingestStatusIn

    def setIngestStatusIn(self, newIngestStatusIn):
        self.ingestStatusIn = newIngestStatusIn

    def getStartDateGreaterThan(self):
        return self.startDateGreaterThan

    def setStartDateGreaterThan(self, newStartDateGreaterThan):
        self.startDateGreaterThan = newStartDateGreaterThan

    def getStartDateSmallerThan(self):
        return self.startDateSmallerThan

    def setStartDateSmallerThan(self, newStartDateSmallerThan):
        self.startDateSmallerThan = newStartDateSmallerThan


# @package Kaltura
# @subpackage Client
class KalturaIngestProgramResultsByCombinedFieldsFilter(KalturaIngestProgramResultsByRefineFilter):
    def __init__(self,
            orderBy=NotImplemented,
            ingestStatusIn=NotImplemented,
            startDateGreaterThan=NotImplemented,
            startDateSmallerThan=NotImplemented,
            combinedFieldsValue=NotImplemented):
        KalturaIngestProgramResultsByRefineFilter.__init__(self,
            orderBy,
            ingestStatusIn,
            startDateGreaterThan,
            startDateSmallerThan)

        # String value to substring search by ProgramID or ExternalProgramID or LinearChannelID.
        #             Up to 20 ids are allowed.
        # @var string
        self.combinedFieldsValue = combinedFieldsValue


    PROPERTY_LOADERS = {
        'combinedFieldsValue': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaIngestProgramResultsByRefineFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIngestProgramResultsByCombinedFieldsFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaIngestProgramResultsByRefineFilter.toParams(self)
        kparams.put("objectType", "KalturaIngestProgramResultsByCombinedFieldsFilter")
        kparams.addStringIfDefined("combinedFieldsValue", self.combinedFieldsValue)
        return kparams

    def getCombinedFieldsValue(self):
        return self.combinedFieldsValue

    def setCombinedFieldsValue(self, newCombinedFieldsValue):
        self.combinedFieldsValue = newCombinedFieldsValue


# @package Kaltura
# @subpackage Client
class KalturaIngestProgramResultsByCompoundFilter(KalturaIngestProgramResultsByRefineFilter):
    def __init__(self,
            orderBy=NotImplemented,
            ingestStatusIn=NotImplemented,
            startDateGreaterThan=NotImplemented,
            startDateSmallerThan=NotImplemented,
            linearChannelIdIn=NotImplemented):
        KalturaIngestProgramResultsByRefineFilter.__init__(self,
            orderBy,
            ingestStatusIn,
            startDateGreaterThan,
            startDateSmallerThan)

        # Comma seperated channel id (the id of the linear channel asset that the program belongs to).
        #             Up to 20 ids are allowed.
        # @var string
        self.linearChannelIdIn = linearChannelIdIn


    PROPERTY_LOADERS = {
        'linearChannelIdIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaIngestProgramResultsByRefineFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIngestProgramResultsByCompoundFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaIngestProgramResultsByRefineFilter.toParams(self)
        kparams.put("objectType", "KalturaIngestProgramResultsByCompoundFilter")
        kparams.addStringIfDefined("linearChannelIdIn", self.linearChannelIdIn)
        return kparams

    def getLinearChannelIdIn(self):
        return self.linearChannelIdIn

    def setLinearChannelIdIn(self, newLinearChannelIdIn):
        self.linearChannelIdIn = newLinearChannelIdIn


# @package Kaltura
# @subpackage Client
class KalturaIngestProgramResultsByExternalIdsFilter(KalturaIngestEpgProgramResultFilter):
    def __init__(self,
            orderBy=NotImplemented,
            externalProgramIdIn=NotImplemented):
        KalturaIngestEpgProgramResultFilter.__init__(self,
            orderBy)

        # Comma seperated external program id.
        #             Up to 20 ids are allowed.
        # @var string
        self.externalProgramIdIn = externalProgramIdIn


    PROPERTY_LOADERS = {
        'externalProgramIdIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaIngestEpgProgramResultFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIngestProgramResultsByExternalIdsFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaIngestEpgProgramResultFilter.toParams(self)
        kparams.put("objectType", "KalturaIngestProgramResultsByExternalIdsFilter")
        kparams.addStringIfDefined("externalProgramIdIn", self.externalProgramIdIn)
        return kparams

    def getExternalProgramIdIn(self):
        return self.externalProgramIdIn

    def setExternalProgramIdIn(self, newExternalProgramIdIn):
        self.externalProgramIdIn = newExternalProgramIdIn


# @package Kaltura
# @subpackage Client
class KalturaIngestProgramResultsByProgramIdsFilter(KalturaIngestEpgProgramResultFilter):
    def __init__(self,
            orderBy=NotImplemented,
            programIdIn=NotImplemented):
        KalturaIngestEpgProgramResultFilter.__init__(self,
            orderBy)

        # Comma seperated program id (the unique ingested program id as it determined by Kaltura BE).
        #             Up to 20 ids are allowed.
        # @var string
        self.programIdIn = programIdIn


    PROPERTY_LOADERS = {
        'programIdIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaIngestEpgProgramResultFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIngestProgramResultsByProgramIdsFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaIngestEpgProgramResultFilter.toParams(self)
        kparams.put("objectType", "KalturaIngestProgramResultsByProgramIdsFilter")
        kparams.addStringIfDefined("programIdIn", self.programIdIn)
        return kparams

    def getProgramIdIn(self):
        return self.programIdIn

    def setProgramIdIn(self, newProgramIdIn):
        self.programIdIn = newProgramIdIn


# @package Kaltura
# @subpackage Client
class KalturaAggregationCountFilter(KalturaRelatedObjectFilter):
    """Kaltura Aggregation CountFilter"""

    def __init__(self,
            orderBy=NotImplemented):
        KalturaRelatedObjectFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaRelatedObjectFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAggregationCountFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedObjectFilter.toParams(self)
        kparams.put("objectType", "KalturaAggregationCountFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDynamicListFilter(KalturaFilter):
    """DynamicListFilter"""

    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDynamicListFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaDynamicListFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDynamicListIdInFilter(KalturaDynamicListFilter):
    """DynamicListIdInFilter"""

    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented):
        KalturaDynamicListFilter.__init__(self,
            orderBy)

        # DynamicList identifiers
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaDynamicListFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDynamicListIdInFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDynamicListFilter.toParams(self)
        kparams.put("objectType", "KalturaDynamicListIdInFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaDynamicListSearchFilter(KalturaDynamicListFilter):
    """DynamicListSearchFilter"""

    def __init__(self,
            orderBy=NotImplemented,
            idEqual=NotImplemented,
            valueEqual=NotImplemented):
        KalturaDynamicListFilter.__init__(self,
            orderBy)

        # DynamicList id to search by
        # @var int
        self.idEqual = idEqual

        # udid value that should be in the DynamicList
        # @var string
        self.valueEqual = valueEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'valueEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaDynamicListFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDynamicListSearchFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDynamicListFilter.toParams(self)
        kparams.put("objectType", "KalturaDynamicListSearchFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("valueEqual", self.valueEqual)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getValueEqual(self):
        return self.valueEqual

    def setValueEqual(self, newValueEqual):
        self.valueEqual = newValueEqual


# @package Kaltura
# @subpackage Client
class KalturaUdidDynamicListSearchFilter(KalturaDynamicListSearchFilter):
    """UdidDynamicListSearchFilter"""

    def __init__(self,
            orderBy=NotImplemented,
            idEqual=NotImplemented,
            valueEqual=NotImplemented):
        KalturaDynamicListSearchFilter.__init__(self,
            orderBy,
            idEqual,
            valueEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDynamicListSearchFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUdidDynamicListSearchFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDynamicListSearchFilter.toParams(self)
        kparams.put("objectType", "KalturaUdidDynamicListSearchFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaPersistedFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            name=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Name for the presisted filter. If empty, no action will be done. If has value, the filter will be saved and persisted in user&#39;s search history.
        # @var string
        self.name = name


    PROPERTY_LOADERS = {
        'name': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPersistedFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaPersistedFilter")
        kparams.addStringIfDefined("name", self.name)
        return kparams

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName


# @package Kaltura
# @subpackage Client
class KalturaBaseAssetOrder(KalturaObjectBase):
    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseAssetOrder.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBaseAssetOrder")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDynamicOrderBy(KalturaObjectBase):
    """Kaltura Asset Order"""

    def __init__(self,
            name=NotImplemented,
            orderBy=NotImplemented):
        KalturaObjectBase.__init__(self)

        # order by name
        # @var string
        self.name = name

        # order by meta asc/desc
        # @var KalturaMetaTagOrderBy
        self.orderBy = orderBy


    PROPERTY_LOADERS = {
        'name': getXmlNodeText, 
        'orderBy': (KalturaEnumsFactory.createString, "KalturaMetaTagOrderBy"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDynamicOrderBy.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaDynamicOrderBy")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringEnumIfDefined("orderBy", self.orderBy)
        return kparams

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getOrderBy(self):
        return self.orderBy

    def setOrderBy(self, newOrderBy):
        self.orderBy = newOrderBy


# @package Kaltura
# @subpackage Client
class KalturaAssetFilter(KalturaPersistedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            name=NotImplemented,
            dynamicOrderBy=NotImplemented,
            orderingParameters=NotImplemented,
            trendingDaysEqual=NotImplemented,
            shouldApplyPriorityGroupsEqual=NotImplemented):
        KalturaPersistedFilter.__init__(self,
            orderBy,
            name)

        # dynamicOrderBy - order by Meta
        # @var KalturaDynamicOrderBy
        self.dynamicOrderBy = dynamicOrderBy

        # Parameters for asset list sorting.
        # @var array of KalturaBaseAssetOrder
        self.orderingParameters = orderingParameters

        # Trending Days Equal
        # @var int
        self.trendingDaysEqual = trendingDaysEqual

        # Should apply priority groups filter or not.
        # @var bool
        self.shouldApplyPriorityGroupsEqual = shouldApplyPriorityGroupsEqual


    PROPERTY_LOADERS = {
        'dynamicOrderBy': (KalturaObjectFactory.create, 'KalturaDynamicOrderBy'), 
        'orderingParameters': (KalturaObjectFactory.createArray, 'KalturaBaseAssetOrder'), 
        'trendingDaysEqual': getXmlNodeInt, 
        'shouldApplyPriorityGroupsEqual': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaPersistedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPersistedFilter.toParams(self)
        kparams.put("objectType", "KalturaAssetFilter")
        kparams.addObjectIfDefined("dynamicOrderBy", self.dynamicOrderBy)
        kparams.addArrayIfDefined("orderingParameters", self.orderingParameters)
        kparams.addIntIfDefined("trendingDaysEqual", self.trendingDaysEqual)
        kparams.addBoolIfDefined("shouldApplyPriorityGroupsEqual", self.shouldApplyPriorityGroupsEqual)
        return kparams

    def getDynamicOrderBy(self):
        return self.dynamicOrderBy

    def setDynamicOrderBy(self, newDynamicOrderBy):
        self.dynamicOrderBy = newDynamicOrderBy

    def getOrderingParameters(self):
        return self.orderingParameters

    def setOrderingParameters(self, newOrderingParameters):
        self.orderingParameters = newOrderingParameters

    def getTrendingDaysEqual(self):
        return self.trendingDaysEqual

    def setTrendingDaysEqual(self, newTrendingDaysEqual):
        self.trendingDaysEqual = newTrendingDaysEqual

    def getShouldApplyPriorityGroupsEqual(self):
        return self.shouldApplyPriorityGroupsEqual

    def setShouldApplyPriorityGroupsEqual(self, newShouldApplyPriorityGroupsEqual):
        self.shouldApplyPriorityGroupsEqual = newShouldApplyPriorityGroupsEqual


# @package Kaltura
# @subpackage Client
class KalturaAssetGroupBy(KalturaObjectBase):
    """Abstarct class - represents an asset parameter that can be used for grouping"""

    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetGroupBy.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAssetGroupBy")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBaseSearchAssetFilter(KalturaAssetFilter):
    def __init__(self,
            orderBy=NotImplemented,
            name=NotImplemented,
            dynamicOrderBy=NotImplemented,
            orderingParameters=NotImplemented,
            trendingDaysEqual=NotImplemented,
            shouldApplyPriorityGroupsEqual=NotImplemented,
            kSql=NotImplemented,
            groupBy=NotImplemented,
            groupOrderBy=NotImplemented,
            groupingOptionEqual=NotImplemented):
        KalturaAssetFilter.__init__(self,
            orderBy,
            name,
            dynamicOrderBy,
            orderingParameters,
            trendingDaysEqual,
            shouldApplyPriorityGroupsEqual)

        # Search assets using dynamic criteria. Provided collection of nested expressions with key, comparison operators, value, and logical conjunction.
        #             Possible keys: any Tag or Meta defined in the system and the following reserved keys: start_date, end_date. 
        #             epg_id, media_id - for specific asset IDs.
        #             geo_block - only valid value is &quot;true&quot;: When enabled, only assets that are not restricted to the user by geo-block rules will return.
        #             parental_rules - only valid value is &quot;true&quot;: When enabled, only assets that the user doesn&#39;t need to provide PIN code will return.
        #             user_interests - only valid value is &quot;true&quot;. When enabled, only assets that the user defined as his interests (by tags and metas) will return.
        #             epg_channel_id - the channel identifier of the EPG program.
        #             entitled_assets - valid values: &quot;free&quot;, &quot;entitled&quot;, &quot;not_entitled&quot;, &quot;both&quot;. free - gets only free to watch assets. entitled - only those that the user is implicitly entitled to watch.
        #             asset_type - valid values: &quot;media&quot;, &quot;epg&quot;, &quot;recording&quot; or any number that represents media type in group.
        #             Comparison operators: for numerical fields =, &gt;, &gt;=, &lt;, &lt;=, : (in). 
        #             For alpha-numerical fields =, != (not), ~ (like), !~, ^ (any word starts with), ^= (phrase starts with), + (exists), !+ (not exists).
        #             Logical conjunction: and, or. 
        #             Search values are limited to 20 characters each for the next operators: ~, !~, ^, ^=
        #             (maximum length of entire filter is 4096 characters)
        # @var string
        self.kSql = kSql

        # groupBy
        # @var array of KalturaAssetGroupBy
        self.groupBy = groupBy

        # order by of grouping
        # @var KalturaGroupByOrder
        self.groupOrderBy = groupOrderBy

        # Grouping Option, Omit if not specified otherwise
        # @var KalturaGroupingOption
        self.groupingOptionEqual = groupingOptionEqual


    PROPERTY_LOADERS = {
        'kSql': getXmlNodeText, 
        'groupBy': (KalturaObjectFactory.createArray, 'KalturaAssetGroupBy'), 
        'groupOrderBy': (KalturaEnumsFactory.createString, "KalturaGroupByOrder"), 
        'groupingOptionEqual': (KalturaEnumsFactory.createString, "KalturaGroupingOption"), 
    }

    def fromXml(self, node):
        KalturaAssetFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseSearchAssetFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetFilter.toParams(self)
        kparams.put("objectType", "KalturaBaseSearchAssetFilter")
        kparams.addStringIfDefined("kSql", self.kSql)
        kparams.addArrayIfDefined("groupBy", self.groupBy)
        kparams.addStringEnumIfDefined("groupOrderBy", self.groupOrderBy)
        kparams.addStringEnumIfDefined("groupingOptionEqual", self.groupingOptionEqual)
        return kparams

    def getKSql(self):
        return self.kSql

    def setKSql(self, newKSql):
        self.kSql = newKSql

    def getGroupBy(self):
        return self.groupBy

    def setGroupBy(self, newGroupBy):
        self.groupBy = newGroupBy

    def getGroupOrderBy(self):
        return self.groupOrderBy

    def setGroupOrderBy(self, newGroupOrderBy):
        self.groupOrderBy = newGroupOrderBy

    def getGroupingOptionEqual(self):
        return self.groupingOptionEqual

    def setGroupingOptionEqual(self, newGroupingOptionEqual):
        self.groupingOptionEqual = newGroupingOptionEqual


# @package Kaltura
# @subpackage Client
class KalturaChannelFilter(KalturaBaseSearchAssetFilter):
    def __init__(self,
            orderBy=NotImplemented,
            name=NotImplemented,
            dynamicOrderBy=NotImplemented,
            orderingParameters=NotImplemented,
            trendingDaysEqual=NotImplemented,
            shouldApplyPriorityGroupsEqual=NotImplemented,
            kSql=NotImplemented,
            groupBy=NotImplemented,
            groupOrderBy=NotImplemented,
            groupingOptionEqual=NotImplemented,
            idEqual=NotImplemented,
            excludeWatched=NotImplemented):
        KalturaBaseSearchAssetFilter.__init__(self,
            orderBy,
            name,
            dynamicOrderBy,
            orderingParameters,
            trendingDaysEqual,
            shouldApplyPriorityGroupsEqual,
            kSql,
            groupBy,
            groupOrderBy,
            groupingOptionEqual)

        # Channel Id
        # @var int
        self.idEqual = idEqual

        # Exclude watched asset.
        # @var bool
        self.excludeWatched = excludeWatched


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'excludeWatched': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaBaseSearchAssetFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaChannelFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSearchAssetFilter.toParams(self)
        kparams.put("objectType", "KalturaChannelFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addBoolIfDefined("excludeWatched", self.excludeWatched)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getExcludeWatched(self):
        return self.excludeWatched

    def setExcludeWatched(self, newExcludeWatched):
        self.excludeWatched = newExcludeWatched


# @package Kaltura
# @subpackage Client
class KalturaAssetDynamicOrder(KalturaBaseAssetOrder):
    def __init__(self,
            name=NotImplemented,
            orderBy=NotImplemented):
        KalturaBaseAssetOrder.__init__(self)

        # order by name
        # @var string
        self.name = name

        # order by meta asc/desc
        # @var KalturaMetaTagOrderBy
        self.orderBy = orderBy


    PROPERTY_LOADERS = {
        'name': getXmlNodeText, 
        'orderBy': (KalturaEnumsFactory.createString, "KalturaMetaTagOrderBy"), 
    }

    def fromXml(self, node):
        KalturaBaseAssetOrder.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetDynamicOrder.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseAssetOrder.toParams(self)
        kparams.put("objectType", "KalturaAssetDynamicOrder")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringEnumIfDefined("orderBy", self.orderBy)
        return kparams

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getOrderBy(self):
        return self.orderBy

    def setOrderBy(self, newOrderBy):
        self.orderBy = newOrderBy


# @package Kaltura
# @subpackage Client
class KalturaAssetOrder(KalturaBaseAssetOrder):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaBaseAssetOrder.__init__(self)

        # Order By
        # @var KalturaAssetOrderByType
        self.orderBy = orderBy


    PROPERTY_LOADERS = {
        'orderBy': (KalturaEnumsFactory.createString, "KalturaAssetOrderByType"), 
    }

    def fromXml(self, node):
        KalturaBaseAssetOrder.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetOrder.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseAssetOrder.toParams(self)
        kparams.put("objectType", "KalturaAssetOrder")
        kparams.addStringEnumIfDefined("orderBy", self.orderBy)
        return kparams

    def getOrderBy(self):
        return self.orderBy

    def setOrderBy(self, newOrderBy):
        self.orderBy = newOrderBy


# @package Kaltura
# @subpackage Client
class KalturaAssetStatisticsOrder(KalturaBaseAssetOrder):
    def __init__(self,
            trendingDaysEqual=NotImplemented,
            orderBy=NotImplemented):
        KalturaBaseAssetOrder.__init__(self)

        # Trending Days Equal
        # @var int
        self.trendingDaysEqual = trendingDaysEqual

        # order by meta asc/desc
        # @var KalturaAssetOrderByStatistics
        self.orderBy = orderBy


    PROPERTY_LOADERS = {
        'trendingDaysEqual': getXmlNodeInt, 
        'orderBy': (KalturaEnumsFactory.createString, "KalturaAssetOrderByStatistics"), 
    }

    def fromXml(self, node):
        KalturaBaseAssetOrder.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetStatisticsOrder.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseAssetOrder.toParams(self)
        kparams.put("objectType", "KalturaAssetStatisticsOrder")
        kparams.addIntIfDefined("trendingDaysEqual", self.trendingDaysEqual)
        kparams.addStringEnumIfDefined("orderBy", self.orderBy)
        return kparams

    def getTrendingDaysEqual(self):
        return self.trendingDaysEqual

    def setTrendingDaysEqual(self, newTrendingDaysEqual):
        self.trendingDaysEqual = newTrendingDaysEqual

    def getOrderBy(self):
        return self.orderBy

    def setOrderBy(self, newOrderBy):
        self.orderBy = newOrderBy


# @package Kaltura
# @subpackage Client
class KalturaPersonalListSearchFilter(KalturaBaseSearchAssetFilter):
    def __init__(self,
            orderBy=NotImplemented,
            name=NotImplemented,
            dynamicOrderBy=NotImplemented,
            orderingParameters=NotImplemented,
            trendingDaysEqual=NotImplemented,
            shouldApplyPriorityGroupsEqual=NotImplemented,
            kSql=NotImplemented,
            groupBy=NotImplemented,
            groupOrderBy=NotImplemented,
            groupingOptionEqual=NotImplemented,
            partnerListTypeIn=NotImplemented):
        KalturaBaseSearchAssetFilter.__init__(self,
            orderBy,
            name,
            dynamicOrderBy,
            orderingParameters,
            trendingDaysEqual,
            shouldApplyPriorityGroupsEqual,
            kSql,
            groupBy,
            groupOrderBy,
            groupingOptionEqual)

        # Comma separated list of partner list types to search within. 
        #             If omitted - all types should be included.
        # @var string
        self.partnerListTypeIn = partnerListTypeIn


    PROPERTY_LOADERS = {
        'partnerListTypeIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBaseSearchAssetFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPersonalListSearchFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSearchAssetFilter.toParams(self)
        kparams.put("objectType", "KalturaPersonalListSearchFilter")
        kparams.addStringIfDefined("partnerListTypeIn", self.partnerListTypeIn)
        return kparams

    def getPartnerListTypeIn(self):
        return self.partnerListTypeIn

    def setPartnerListTypeIn(self, newPartnerListTypeIn):
        self.partnerListTypeIn = newPartnerListTypeIn


# @package Kaltura
# @subpackage Client
class KalturaRelatedFilter(KalturaBaseSearchAssetFilter):
    def __init__(self,
            orderBy=NotImplemented,
            name=NotImplemented,
            dynamicOrderBy=NotImplemented,
            orderingParameters=NotImplemented,
            trendingDaysEqual=NotImplemented,
            shouldApplyPriorityGroupsEqual=NotImplemented,
            kSql=NotImplemented,
            groupBy=NotImplemented,
            groupOrderBy=NotImplemented,
            groupingOptionEqual=NotImplemented,
            idEqual=NotImplemented,
            typeIn=NotImplemented,
            excludeWatched=NotImplemented):
        KalturaBaseSearchAssetFilter.__init__(self,
            orderBy,
            name,
            dynamicOrderBy,
            orderingParameters,
            trendingDaysEqual,
            shouldApplyPriorityGroupsEqual,
            kSql,
            groupBy,
            groupOrderBy,
            groupingOptionEqual)

        # the ID of the asset for which to return related assets
        # @var int
        self.idEqual = idEqual

        # Comma separated list of asset types to search within. 
        #             Possible values: any media type ID (according to media type IDs defined dynamically in the system).
        #             If omitted - same type as the provided asset.
        # @var string
        self.typeIn = typeIn

        # Exclude watched asset.
        # @var bool
        self.excludeWatched = excludeWatched


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'typeIn': getXmlNodeText, 
        'excludeWatched': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaBaseSearchAssetFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRelatedFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSearchAssetFilter.toParams(self)
        kparams.put("objectType", "KalturaRelatedFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("typeIn", self.typeIn)
        kparams.addBoolIfDefined("excludeWatched", self.excludeWatched)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn

    def getExcludeWatched(self):
        return self.excludeWatched

    def setExcludeWatched(self, newExcludeWatched):
        self.excludeWatched = newExcludeWatched


# @package Kaltura
# @subpackage Client
class KalturaSearchAssetFilter(KalturaBaseSearchAssetFilter):
    def __init__(self,
            orderBy=NotImplemented,
            name=NotImplemented,
            dynamicOrderBy=NotImplemented,
            orderingParameters=NotImplemented,
            trendingDaysEqual=NotImplemented,
            shouldApplyPriorityGroupsEqual=NotImplemented,
            kSql=NotImplemented,
            groupBy=NotImplemented,
            groupOrderBy=NotImplemented,
            groupingOptionEqual=NotImplemented,
            typeIn=NotImplemented):
        KalturaBaseSearchAssetFilter.__init__(self,
            orderBy,
            name,
            dynamicOrderBy,
            orderingParameters,
            trendingDaysEqual,
            shouldApplyPriorityGroupsEqual,
            kSql,
            groupBy,
            groupOrderBy,
            groupingOptionEqual)

        # (Deprecated - use KalturaBaseSearchAssetFilter.kSql)
        #             Comma separated list of asset types to search within. 
        #             Possible values: 0 - EPG linear programs entries; 1 - Recordings; Any media type ID (according to media type IDs defined dynamically in the system).
        #             If omitted - all types should be included.
        # @var string
        self.typeIn = typeIn


    PROPERTY_LOADERS = {
        'typeIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBaseSearchAssetFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchAssetFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSearchAssetFilter.toParams(self)
        kparams.put("objectType", "KalturaSearchAssetFilter")
        kparams.addStringIfDefined("typeIn", self.typeIn)
        return kparams

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn


# @package Kaltura
# @subpackage Client
class KalturaSearchAssetListFilter(KalturaSearchAssetFilter):
    def __init__(self,
            orderBy=NotImplemented,
            name=NotImplemented,
            dynamicOrderBy=NotImplemented,
            orderingParameters=NotImplemented,
            trendingDaysEqual=NotImplemented,
            shouldApplyPriorityGroupsEqual=NotImplemented,
            kSql=NotImplemented,
            groupBy=NotImplemented,
            groupOrderBy=NotImplemented,
            groupingOptionEqual=NotImplemented,
            typeIn=NotImplemented,
            excludeWatched=NotImplemented):
        KalturaSearchAssetFilter.__init__(self,
            orderBy,
            name,
            dynamicOrderBy,
            orderingParameters,
            trendingDaysEqual,
            shouldApplyPriorityGroupsEqual,
            kSql,
            groupBy,
            groupOrderBy,
            groupingOptionEqual,
            typeIn)

        # Exclude watched asset.
        # @var bool
        self.excludeWatched = excludeWatched


    PROPERTY_LOADERS = {
        'excludeWatched': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaSearchAssetFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchAssetListFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchAssetFilter.toParams(self)
        kparams.put("objectType", "KalturaSearchAssetListFilter")
        kparams.addBoolIfDefined("excludeWatched", self.excludeWatched)
        return kparams

    def getExcludeWatched(self):
        return self.excludeWatched

    def setExcludeWatched(self, newExcludeWatched):
        self.excludeWatched = newExcludeWatched


# @package Kaltura
# @subpackage Client
class KalturaAssetMetaOrTagGroupBy(KalturaAssetGroupBy):
    """Group by a tag or meta - according to the name that appears in the system (similar to KSQL)"""

    def __init__(self,
            value=NotImplemented):
        KalturaAssetGroupBy.__init__(self)

        # Group by a tag or meta - according to the name that appears in the system (similar to KSQL)
        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaAssetGroupBy.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetMetaOrTagGroupBy.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetGroupBy.toParams(self)
        kparams.put("objectType", "KalturaAssetMetaOrTagGroupBy")
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaAssetFieldGroupBy(KalturaAssetGroupBy):
    """Group by a field that is defined in enum"""

    def __init__(self,
            value=NotImplemented):
        KalturaAssetGroupBy.__init__(self)

        # Group by a specific field that is defined in enum
        # @var KalturaGroupByField
        self.value = value


    PROPERTY_LOADERS = {
        'value': (KalturaEnumsFactory.createString, "KalturaGroupByField"), 
    }

    def fromXml(self, node):
        KalturaAssetGroupBy.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetFieldGroupBy.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetGroupBy.toParams(self)
        kparams.put("objectType", "KalturaAssetFieldGroupBy")
        kparams.addStringEnumIfDefined("value", self.value)
        return kparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaBundleFilter(KalturaAssetFilter):
    def __init__(self,
            orderBy=NotImplemented,
            name=NotImplemented,
            dynamicOrderBy=NotImplemented,
            orderingParameters=NotImplemented,
            trendingDaysEqual=NotImplemented,
            shouldApplyPriorityGroupsEqual=NotImplemented,
            idEqual=NotImplemented,
            typeIn=NotImplemented,
            bundleTypeEqual=NotImplemented):
        KalturaAssetFilter.__init__(self,
            orderBy,
            name,
            dynamicOrderBy,
            orderingParameters,
            trendingDaysEqual,
            shouldApplyPriorityGroupsEqual)

        # Bundle Id.
        # @var int
        self.idEqual = idEqual

        # Comma separated list of asset types to search within. 
        #             Possible values: 0 - EPG linear programs entries, any media type ID (according to media type IDs defined dynamically in the system).
        #             If omitted - all types should be included.
        # @var string
        self.typeIn = typeIn

        # bundleType - possible values: Subscription or Collection
        # @var KalturaBundleType
        self.bundleTypeEqual = bundleTypeEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'typeIn': getXmlNodeText, 
        'bundleTypeEqual': (KalturaEnumsFactory.createString, "KalturaBundleType"), 
    }

    def fromXml(self, node):
        KalturaAssetFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBundleFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetFilter.toParams(self)
        kparams.put("objectType", "KalturaBundleFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("typeIn", self.typeIn)
        kparams.addStringEnumIfDefined("bundleTypeEqual", self.bundleTypeEqual)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn

    def getBundleTypeEqual(self):
        return self.bundleTypeEqual

    def setBundleTypeEqual(self, newBundleTypeEqual):
        self.bundleTypeEqual = newBundleTypeEqual


# @package Kaltura
# @subpackage Client
class KalturaChannelExternalFilter(KalturaAssetFilter):
    def __init__(self,
            orderBy=NotImplemented,
            name=NotImplemented,
            dynamicOrderBy=NotImplemented,
            orderingParameters=NotImplemented,
            trendingDaysEqual=NotImplemented,
            shouldApplyPriorityGroupsEqual=NotImplemented,
            idEqual=NotImplemented,
            utcOffsetEqual=NotImplemented,
            freeText=NotImplemented):
        KalturaAssetFilter.__init__(self,
            orderBy,
            name,
            dynamicOrderBy,
            orderingParameters,
            trendingDaysEqual,
            shouldApplyPriorityGroupsEqual)

        # External Channel Id.
        # @var int
        self.idEqual = idEqual

        # UtcOffsetEqual
        # @var float
        self.utcOffsetEqual = utcOffsetEqual

        # FreeTextEqual
        # @var string
        self.freeText = freeText


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'utcOffsetEqual': getXmlNodeFloat, 
        'freeText': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaAssetFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaChannelExternalFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetFilter.toParams(self)
        kparams.put("objectType", "KalturaChannelExternalFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addFloatIfDefined("utcOffsetEqual", self.utcOffsetEqual)
        kparams.addStringIfDefined("freeText", self.freeText)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getUtcOffsetEqual(self):
        return self.utcOffsetEqual

    def setUtcOffsetEqual(self, newUtcOffsetEqual):
        self.utcOffsetEqual = newUtcOffsetEqual

    def getFreeText(self):
        return self.freeText

    def setFreeText(self, newFreeText):
        self.freeText = newFreeText


# @package Kaltura
# @subpackage Client
class KalturaRelatedExternalFilter(KalturaAssetFilter):
    def __init__(self,
            orderBy=NotImplemented,
            name=NotImplemented,
            dynamicOrderBy=NotImplemented,
            orderingParameters=NotImplemented,
            trendingDaysEqual=NotImplemented,
            shouldApplyPriorityGroupsEqual=NotImplemented,
            idEqual=NotImplemented,
            typeIn=NotImplemented,
            utcOffsetEqual=NotImplemented,
            freeText=NotImplemented):
        KalturaAssetFilter.__init__(self,
            orderBy,
            name,
            dynamicOrderBy,
            orderingParameters,
            trendingDaysEqual,
            shouldApplyPriorityGroupsEqual)

        # the External ID of the asset for which to return related assets
        # @var int
        self.idEqual = idEqual

        # Comma separated list of asset types to search within. 
        #             Possible values: 0 - EPG linear programs entries, any media type ID (according to media type IDs defined dynamically in the system).
        #             If omitted - all types should be included.
        # @var string
        self.typeIn = typeIn

        # UtcOffsetEqual
        # @var int
        self.utcOffsetEqual = utcOffsetEqual

        # FreeText
        # @var string
        self.freeText = freeText


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'typeIn': getXmlNodeText, 
        'utcOffsetEqual': getXmlNodeInt, 
        'freeText': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaAssetFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRelatedExternalFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetFilter.toParams(self)
        kparams.put("objectType", "KalturaRelatedExternalFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("typeIn", self.typeIn)
        kparams.addIntIfDefined("utcOffsetEqual", self.utcOffsetEqual)
        kparams.addStringIfDefined("freeText", self.freeText)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn

    def getUtcOffsetEqual(self):
        return self.utcOffsetEqual

    def setUtcOffsetEqual(self, newUtcOffsetEqual):
        self.utcOffsetEqual = newUtcOffsetEqual

    def getFreeText(self):
        return self.freeText

    def setFreeText(self, newFreeText):
        self.freeText = newFreeText


# @package Kaltura
# @subpackage Client
class KalturaScheduledRecordingProgramFilter(KalturaAssetFilter):
    def __init__(self,
            orderBy=NotImplemented,
            name=NotImplemented,
            dynamicOrderBy=NotImplemented,
            orderingParameters=NotImplemented,
            trendingDaysEqual=NotImplemented,
            shouldApplyPriorityGroupsEqual=NotImplemented,
            recordingTypeEqual=NotImplemented,
            channelsIn=NotImplemented,
            startDateGreaterThanOrNull=NotImplemented,
            endDateLessThanOrNull=NotImplemented,
            seriesIdsIn=NotImplemented):
        KalturaAssetFilter.__init__(self,
            orderBy,
            name,
            dynamicOrderBy,
            orderingParameters,
            trendingDaysEqual,
            shouldApplyPriorityGroupsEqual)

        # The type of recordings to return
        # @var KalturaScheduledRecordingAssetType
        self.recordingTypeEqual = recordingTypeEqual

        # Channels to filter by
        # @var string
        self.channelsIn = channelsIn

        # start date
        # @var int
        self.startDateGreaterThanOrNull = startDateGreaterThanOrNull

        # end date
        # @var int
        self.endDateLessThanOrNull = endDateLessThanOrNull

        # Series to filter by
        # @var string
        self.seriesIdsIn = seriesIdsIn


    PROPERTY_LOADERS = {
        'recordingTypeEqual': (KalturaEnumsFactory.createString, "KalturaScheduledRecordingAssetType"), 
        'channelsIn': getXmlNodeText, 
        'startDateGreaterThanOrNull': getXmlNodeInt, 
        'endDateLessThanOrNull': getXmlNodeInt, 
        'seriesIdsIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaAssetFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaScheduledRecordingProgramFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetFilter.toParams(self)
        kparams.put("objectType", "KalturaScheduledRecordingProgramFilter")
        kparams.addStringEnumIfDefined("recordingTypeEqual", self.recordingTypeEqual)
        kparams.addStringIfDefined("channelsIn", self.channelsIn)
        kparams.addIntIfDefined("startDateGreaterThanOrNull", self.startDateGreaterThanOrNull)
        kparams.addIntIfDefined("endDateLessThanOrNull", self.endDateLessThanOrNull)
        kparams.addStringIfDefined("seriesIdsIn", self.seriesIdsIn)
        return kparams

    def getRecordingTypeEqual(self):
        return self.recordingTypeEqual

    def setRecordingTypeEqual(self, newRecordingTypeEqual):
        self.recordingTypeEqual = newRecordingTypeEqual

    def getChannelsIn(self):
        return self.channelsIn

    def setChannelsIn(self, newChannelsIn):
        self.channelsIn = newChannelsIn

    def getStartDateGreaterThanOrNull(self):
        return self.startDateGreaterThanOrNull

    def setStartDateGreaterThanOrNull(self, newStartDateGreaterThanOrNull):
        self.startDateGreaterThanOrNull = newStartDateGreaterThanOrNull

    def getEndDateLessThanOrNull(self):
        return self.endDateLessThanOrNull

    def setEndDateLessThanOrNull(self, newEndDateLessThanOrNull):
        self.endDateLessThanOrNull = newEndDateLessThanOrNull

    def getSeriesIdsIn(self):
        return self.seriesIdsIn

    def setSeriesIdsIn(self, newSeriesIdsIn):
        self.seriesIdsIn = newSeriesIdsIn


# @package Kaltura
# @subpackage Client
class KalturaSearchExternalFilter(KalturaAssetFilter):
    def __init__(self,
            orderBy=NotImplemented,
            name=NotImplemented,
            dynamicOrderBy=NotImplemented,
            orderingParameters=NotImplemented,
            trendingDaysEqual=NotImplemented,
            shouldApplyPriorityGroupsEqual=NotImplemented,
            query=NotImplemented,
            utcOffsetEqual=NotImplemented,
            typeIn=NotImplemented):
        KalturaAssetFilter.__init__(self,
            orderBy,
            name,
            dynamicOrderBy,
            orderingParameters,
            trendingDaysEqual,
            shouldApplyPriorityGroupsEqual)

        # Query
        # @var string
        self.query = query

        # UtcOffsetEqual
        # @var int
        self.utcOffsetEqual = utcOffsetEqual

        # Comma separated list of asset types to search within. 
        #             Possible values: 0 - EPG linear programs entries, any media type ID (according to media type IDs defined dynamically in the system).
        #             If omitted - all types should be included.
        # @var string
        self.typeIn = typeIn


    PROPERTY_LOADERS = {
        'query': getXmlNodeText, 
        'utcOffsetEqual': getXmlNodeInt, 
        'typeIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaAssetFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchExternalFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetFilter.toParams(self)
        kparams.put("objectType", "KalturaSearchExternalFilter")
        kparams.addStringIfDefined("query", self.query)
        kparams.addIntIfDefined("utcOffsetEqual", self.utcOffsetEqual)
        kparams.addStringIfDefined("typeIn", self.typeIn)
        return kparams

    def getQuery(self):
        return self.query

    def setQuery(self, newQuery):
        self.query = newQuery

    def getUtcOffsetEqual(self):
        return self.utcOffsetEqual

    def setUtcOffsetEqual(self, newUtcOffsetEqual):
        self.utcOffsetEqual = newUtcOffsetEqual

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn


# @package Kaltura
# @subpackage Client
class KalturaPriorityGroupFilter(KalturaRelatedObjectFilter):
    """It&#39;s just a pure fabrication filter not intended to filter smth."""

    def __init__(self,
            orderBy=NotImplemented):
        KalturaRelatedObjectFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaRelatedObjectFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPriorityGroupFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedObjectFilter.toParams(self)
        kparams.put("objectType", "KalturaPriorityGroupFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaReportFilter(KalturaFilter):
    """Report filter"""

    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaReportFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaReportFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeviceReportFilter(KalturaReportFilter):
    """Report filter"""

    def __init__(self,
            orderBy=NotImplemented,
            lastAccessDateGreaterThanOrEqual=NotImplemented):
        KalturaReportFilter.__init__(self,
            orderBy)

        # Filter device configuration later than specific date
        # @var int
        self.lastAccessDateGreaterThanOrEqual = lastAccessDateGreaterThanOrEqual


    PROPERTY_LOADERS = {
        'lastAccessDateGreaterThanOrEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaReportFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeviceReportFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaReportFilter.toParams(self)
        kparams.put("objectType", "KalturaDeviceReportFilter")
        kparams.addIntIfDefined("lastAccessDateGreaterThanOrEqual", self.lastAccessDateGreaterThanOrEqual)
        return kparams

    def getLastAccessDateGreaterThanOrEqual(self):
        return self.lastAccessDateGreaterThanOrEqual

    def setLastAccessDateGreaterThanOrEqual(self, newLastAccessDateGreaterThanOrEqual):
        self.lastAccessDateGreaterThanOrEqual = newLastAccessDateGreaterThanOrEqual


# @package Kaltura
# @subpackage Client
class KalturaHouseholdCouponCodeFilter(KalturaRelatedObjectFilter):
    """Kaltura Houseold CouponCode Filter"""

    def __init__(self,
            orderBy=NotImplemented):
        KalturaRelatedObjectFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaRelatedObjectFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdCouponCodeFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedObjectFilter.toParams(self)
        kparams.put("objectType", "KalturaHouseholdCouponCodeFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaHouseholdCouponFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            businessModuleTypeEqual=NotImplemented,
            businessModuleIdEqual=NotImplemented,
            couponCode=NotImplemented,
            status=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Indicates which household coupons list to return by their business module type.
        # @var KalturaTransactionType
        self.businessModuleTypeEqual = businessModuleTypeEqual

        # Indicates which household coupons list to return by their business module ID.
        # @var int
        self.businessModuleIdEqual = businessModuleIdEqual

        # Allow clients to inquiry if a specific coupon is part of an HH's wallet or not
        # @var string
        self.couponCode = couponCode

        # Allow clients to filter out coupons which are valid/invalid
        # @var KalturaCouponStatus
        self.status = status


    PROPERTY_LOADERS = {
        'businessModuleTypeEqual': (KalturaEnumsFactory.createString, "KalturaTransactionType"), 
        'businessModuleIdEqual': getXmlNodeInt, 
        'couponCode': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createString, "KalturaCouponStatus"), 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdCouponFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaHouseholdCouponFilter")
        kparams.addStringEnumIfDefined("businessModuleTypeEqual", self.businessModuleTypeEqual)
        kparams.addIntIfDefined("businessModuleIdEqual", self.businessModuleIdEqual)
        kparams.addStringIfDefined("couponCode", self.couponCode)
        kparams.addStringEnumIfDefined("status", self.status)
        return kparams

    def getBusinessModuleTypeEqual(self):
        return self.businessModuleTypeEqual

    def setBusinessModuleTypeEqual(self, newBusinessModuleTypeEqual):
        self.businessModuleTypeEqual = newBusinessModuleTypeEqual

    def getBusinessModuleIdEqual(self):
        return self.businessModuleIdEqual

    def setBusinessModuleIdEqual(self, newBusinessModuleIdEqual):
        self.businessModuleIdEqual = newBusinessModuleIdEqual

    def getCouponCode(self):
        return self.couponCode

    def setCouponCode(self, newCouponCode):
        self.couponCode = newCouponCode

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus


# @package Kaltura
# @subpackage Client
class KalturaHouseholdDeviceFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            householdIdEqual=NotImplemented,
            deviceFamilyIdIn=NotImplemented,
            externalIdEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # The identifier of the household
        # @var int
        self.householdIdEqual = householdIdEqual

        # Device family Ids
        # @var string
        self.deviceFamilyIdIn = deviceFamilyIdIn

        # External Id
        # @var string
        self.externalIdEqual = externalIdEqual


    PROPERTY_LOADERS = {
        'householdIdEqual': getXmlNodeInt, 
        'deviceFamilyIdIn': getXmlNodeText, 
        'externalIdEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdDeviceFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaHouseholdDeviceFilter")
        kparams.addIntIfDefined("householdIdEqual", self.householdIdEqual)
        kparams.addStringIfDefined("deviceFamilyIdIn", self.deviceFamilyIdIn)
        kparams.addStringIfDefined("externalIdEqual", self.externalIdEqual)
        return kparams

    def getHouseholdIdEqual(self):
        return self.householdIdEqual

    def setHouseholdIdEqual(self, newHouseholdIdEqual):
        self.householdIdEqual = newHouseholdIdEqual

    def getDeviceFamilyIdIn(self):
        return self.deviceFamilyIdIn

    def setDeviceFamilyIdIn(self, newDeviceFamilyIdIn):
        self.deviceFamilyIdIn = newDeviceFamilyIdIn

    def getExternalIdEqual(self):
        return self.externalIdEqual

    def setExternalIdEqual(self, newExternalIdEqual):
        self.externalIdEqual = newExternalIdEqual


# @package Kaltura
# @subpackage Client
class KalturaHouseholdFilter(KalturaFilter):
    """Household details"""

    def __init__(self,
            orderBy=NotImplemented,
            externalIdEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Household external identifier to search by
        # @var string
        self.externalIdEqual = externalIdEqual


    PROPERTY_LOADERS = {
        'externalIdEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaHouseholdFilter")
        kparams.addStringIfDefined("externalIdEqual", self.externalIdEqual)
        return kparams

    def getExternalIdEqual(self):
        return self.externalIdEqual

    def setExternalIdEqual(self, newExternalIdEqual):
        self.externalIdEqual = newExternalIdEqual


# @package Kaltura
# @subpackage Client
class KalturaHouseholdUserFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            householdIdEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # The identifier of the household
        # @var int
        self.householdIdEqual = householdIdEqual


    PROPERTY_LOADERS = {
        'householdIdEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdUserFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaHouseholdUserFilter")
        kparams.addIntIfDefined("householdIdEqual", self.householdIdEqual)
        return kparams

    def getHouseholdIdEqual(self):
        return self.householdIdEqual

    def setHouseholdIdEqual(self, newHouseholdIdEqual):
        self.householdIdEqual = newHouseholdIdEqual


# @package Kaltura
# @subpackage Client
class KalturaConfigurationGroupDeviceFilter(KalturaFilter):
    """Configuration group device filter"""

    def __init__(self,
            orderBy=NotImplemented,
            configurationGroupIdEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # the ID of the configuration group for which to return related configurations group devices
        # @var string
        self.configurationGroupIdEqual = configurationGroupIdEqual


    PROPERTY_LOADERS = {
        'configurationGroupIdEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConfigurationGroupDeviceFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaConfigurationGroupDeviceFilter")
        kparams.addStringIfDefined("configurationGroupIdEqual", self.configurationGroupIdEqual)
        return kparams

    def getConfigurationGroupIdEqual(self):
        return self.configurationGroupIdEqual

    def setConfigurationGroupIdEqual(self, newConfigurationGroupIdEqual):
        self.configurationGroupIdEqual = newConfigurationGroupIdEqual


# @package Kaltura
# @subpackage Client
class KalturaConfigurationGroupTagFilter(KalturaFilter):
    """Configuration group tag filter"""

    def __init__(self,
            orderBy=NotImplemented,
            configurationGroupIdEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # the ID of the configuration group for which to return related configurations group tags
        # @var string
        self.configurationGroupIdEqual = configurationGroupIdEqual


    PROPERTY_LOADERS = {
        'configurationGroupIdEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConfigurationGroupTagFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaConfigurationGroupTagFilter")
        kparams.addStringIfDefined("configurationGroupIdEqual", self.configurationGroupIdEqual)
        return kparams

    def getConfigurationGroupIdEqual(self):
        return self.configurationGroupIdEqual

    def setConfigurationGroupIdEqual(self, newConfigurationGroupIdEqual):
        self.configurationGroupIdEqual = newConfigurationGroupIdEqual


# @package Kaltura
# @subpackage Client
class KalturaConfigurationsFilter(KalturaFilter):
    """Configuration filter"""

    def __init__(self,
            orderBy=NotImplemented,
            configurationGroupIdEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # the ID of the configuration group for which to return related configurations
        # @var string
        self.configurationGroupIdEqual = configurationGroupIdEqual


    PROPERTY_LOADERS = {
        'configurationGroupIdEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConfigurationsFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaConfigurationsFilter")
        kparams.addStringIfDefined("configurationGroupIdEqual", self.configurationGroupIdEqual)
        return kparams

    def getConfigurationGroupIdEqual(self):
        return self.configurationGroupIdEqual

    def setConfigurationGroupIdEqual(self, newConfigurationGroupIdEqual):
        self.configurationGroupIdEqual = newConfigurationGroupIdEqual


# @package Kaltura
# @subpackage Client
class KalturaBaseEntitlementFilter(KalturaFilter):
    """Entitlements filter"""

    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseEntitlementFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaBaseEntitlementFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaEntitlementFilter(KalturaBaseEntitlementFilter):
    """Entitlements filter"""

    def __init__(self,
            orderBy=NotImplemented,
            productTypeEqual=NotImplemented,
            entityReferenceEqual=NotImplemented,
            isExpiredEqual=NotImplemented):
        KalturaBaseEntitlementFilter.__init__(self,
            orderBy)

        # The type of the entitlements to return
        # @var KalturaTransactionType
        self.productTypeEqual = productTypeEqual

        # Reference type to filter by
        # @var KalturaEntityReferenceBy
        self.entityReferenceEqual = entityReferenceEqual

        # Is expired
        # @var bool
        self.isExpiredEqual = isExpiredEqual


    PROPERTY_LOADERS = {
        'productTypeEqual': (KalturaEnumsFactory.createString, "KalturaTransactionType"), 
        'entityReferenceEqual': (KalturaEnumsFactory.createString, "KalturaEntityReferenceBy"), 
        'isExpiredEqual': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaBaseEntitlementFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntitlementFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseEntitlementFilter.toParams(self)
        kparams.put("objectType", "KalturaEntitlementFilter")
        kparams.addStringEnumIfDefined("productTypeEqual", self.productTypeEqual)
        kparams.addStringEnumIfDefined("entityReferenceEqual", self.entityReferenceEqual)
        kparams.addBoolIfDefined("isExpiredEqual", self.isExpiredEqual)
        return kparams

    def getProductTypeEqual(self):
        return self.productTypeEqual

    def setProductTypeEqual(self, newProductTypeEqual):
        self.productTypeEqual = newProductTypeEqual

    def getEntityReferenceEqual(self):
        return self.entityReferenceEqual

    def setEntityReferenceEqual(self, newEntityReferenceEqual):
        self.entityReferenceEqual = newEntityReferenceEqual

    def getIsExpiredEqual(self):
        return self.isExpiredEqual

    def setIsExpiredEqual(self, newIsExpiredEqual):
        self.isExpiredEqual = newIsExpiredEqual


# @package Kaltura
# @subpackage Client
class KalturaProgramAssetGroupOfferEntitlementFilter(KalturaBaseEntitlementFilter):
    """Program asset group offer Entitlements filter"""

    def __init__(self,
            orderBy=NotImplemented):
        KalturaBaseEntitlementFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBaseEntitlementFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaProgramAssetGroupOfferEntitlementFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseEntitlementFilter.toParams(self)
        kparams.put("objectType", "KalturaProgramAssetGroupOfferEntitlementFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaRecordingFilter(KalturaFilter):
    """Filtering recordings"""

    def __init__(self,
            orderBy=NotImplemented,
            statusIn=NotImplemented,
            externalRecordingIdIn=NotImplemented,
            kSql=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Recording Statuses
        # @var string
        self.statusIn = statusIn

        # Comma separated external identifiers
        # @var string
        self.externalRecordingIdIn = externalRecordingIdIn

        # KSQL expression
        # @var string
        self.kSql = kSql


    PROPERTY_LOADERS = {
        'statusIn': getXmlNodeText, 
        'externalRecordingIdIn': getXmlNodeText, 
        'kSql': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRecordingFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaRecordingFilter")
        kparams.addStringIfDefined("statusIn", self.statusIn)
        kparams.addStringIfDefined("externalRecordingIdIn", self.externalRecordingIdIn)
        kparams.addStringIfDefined("kSql", self.kSql)
        return kparams

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getExternalRecordingIdIn(self):
        return self.externalRecordingIdIn

    def setExternalRecordingIdIn(self, newExternalRecordingIdIn):
        self.externalRecordingIdIn = newExternalRecordingIdIn

    def getKSql(self):
        return self.kSql

    def setKSql(self, newKSql):
        self.kSql = newKSql


# @package Kaltura
# @subpackage Client
class KalturaExternalRecordingFilter(KalturaRecordingFilter):
    """Filtering external recordings"""

    def __init__(self,
            orderBy=NotImplemented,
            statusIn=NotImplemented,
            externalRecordingIdIn=NotImplemented,
            kSql=NotImplemented,
            metaData=NotImplemented):
        KalturaRecordingFilter.__init__(self,
            orderBy,
            statusIn,
            externalRecordingIdIn,
            kSql)

        # MetaData filtering
        # @var map
        self.metaData = metaData


    PROPERTY_LOADERS = {
        'metaData': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
    }

    def fromXml(self, node):
        KalturaRecordingFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaExternalRecordingFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRecordingFilter.toParams(self)
        kparams.put("objectType", "KalturaExternalRecordingFilter")
        kparams.addMapIfDefined("metaData", self.metaData)
        return kparams

    def getMetaData(self):
        return self.metaData

    def setMetaData(self, newMetaData):
        self.metaData = newMetaData


# @package Kaltura
# @subpackage Client
class KalturaCloudRecordingFilter(KalturaExternalRecordingFilter):
    """Filtering cloud external recordings"""

    def __init__(self,
            orderBy=NotImplemented,
            statusIn=NotImplemented,
            externalRecordingIdIn=NotImplemented,
            kSql=NotImplemented,
            metaData=NotImplemented,
            adapterData=NotImplemented):
        KalturaExternalRecordingFilter.__init__(self,
            orderBy,
            statusIn,
            externalRecordingIdIn,
            kSql,
            metaData)

        # Adapter Data
        # @var map
        self.adapterData = adapterData


    PROPERTY_LOADERS = {
        'adapterData': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
    }

    def fromXml(self, node):
        KalturaExternalRecordingFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCloudRecordingFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaExternalRecordingFilter.toParams(self)
        kparams.put("objectType", "KalturaCloudRecordingFilter")
        kparams.addMapIfDefined("adapterData", self.adapterData)
        return kparams

    def getAdapterData(self):
        return self.adapterData

    def setAdapterData(self, newAdapterData):
        self.adapterData = newAdapterData


# @package Kaltura
# @subpackage Client
class KalturaSeriesRecordingFilter(KalturaFilter):
    """Filtering recordings"""

    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSeriesRecordingFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaSeriesRecordingFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaCloudSeriesRecordingFilter(KalturaSeriesRecordingFilter):
    """Cloud series filtering recordings"""

    def __init__(self,
            orderBy=NotImplemented,
            adapterData=NotImplemented):
        KalturaSeriesRecordingFilter.__init__(self,
            orderBy)

        # Adapter Data
        # @var map
        self.adapterData = adapterData


    PROPERTY_LOADERS = {
        'adapterData': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
    }

    def fromXml(self, node):
        KalturaSeriesRecordingFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCloudSeriesRecordingFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSeriesRecordingFilter.toParams(self)
        kparams.put("objectType", "KalturaCloudSeriesRecordingFilter")
        kparams.addMapIfDefined("adapterData", self.adapterData)
        return kparams

    def getAdapterData(self):
        return self.adapterData

    def setAdapterData(self, newAdapterData):
        self.adapterData = newAdapterData


# @package Kaltura
# @subpackage Client
class KalturaExternalRecordingResponseProfileFilter(KalturaRelatedObjectFilter):
    """Kaltura External Recording ResponseProfile Filter"""

    def __init__(self,
            orderBy=NotImplemented):
        KalturaRelatedObjectFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaRelatedObjectFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaExternalRecordingResponseProfileFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedObjectFilter.toParams(self)
        kparams.put("objectType", "KalturaExternalRecordingResponseProfileFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaProductPriceFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            subscriptionIdIn=NotImplemented,
            fileIdIn=NotImplemented,
            collectionIdIn=NotImplemented,
            isLowest=NotImplemented,
            couponCodeEqual=NotImplemented,
            programAssetGroupOfferIdIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma separated subscriptions identifiers
        # @var string
        self.subscriptionIdIn = subscriptionIdIn

        # Comma separated media files identifiers
        # @var string
        self.fileIdIn = fileIdIn

        # Comma separated collections identifiers
        # @var string
        self.collectionIdIn = collectionIdIn

        # A flag that indicates if only the lowest price of an item should return
        # @var bool
        self.isLowest = isLowest

        # Discount coupon code
        # @var string
        self.couponCodeEqual = couponCodeEqual

        # Comma separated ProgramAssetGroupOffer identifiers
        # @var string
        self.programAssetGroupOfferIdIn = programAssetGroupOfferIdIn


    PROPERTY_LOADERS = {
        'subscriptionIdIn': getXmlNodeText, 
        'fileIdIn': getXmlNodeText, 
        'collectionIdIn': getXmlNodeText, 
        'isLowest': getXmlNodeBool, 
        'couponCodeEqual': getXmlNodeText, 
        'programAssetGroupOfferIdIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaProductPriceFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaProductPriceFilter")
        kparams.addStringIfDefined("subscriptionIdIn", self.subscriptionIdIn)
        kparams.addStringIfDefined("fileIdIn", self.fileIdIn)
        kparams.addStringIfDefined("collectionIdIn", self.collectionIdIn)
        kparams.addBoolIfDefined("isLowest", self.isLowest)
        kparams.addStringIfDefined("couponCodeEqual", self.couponCodeEqual)
        kparams.addStringIfDefined("programAssetGroupOfferIdIn", self.programAssetGroupOfferIdIn)
        return kparams

    def getSubscriptionIdIn(self):
        return self.subscriptionIdIn

    def setSubscriptionIdIn(self, newSubscriptionIdIn):
        self.subscriptionIdIn = newSubscriptionIdIn

    def getFileIdIn(self):
        return self.fileIdIn

    def setFileIdIn(self, newFileIdIn):
        self.fileIdIn = newFileIdIn

    def getCollectionIdIn(self):
        return self.collectionIdIn

    def setCollectionIdIn(self, newCollectionIdIn):
        self.collectionIdIn = newCollectionIdIn

    def getIsLowest(self):
        return self.isLowest

    def setIsLowest(self, newIsLowest):
        self.isLowest = newIsLowest

    def getCouponCodeEqual(self):
        return self.couponCodeEqual

    def setCouponCodeEqual(self, newCouponCodeEqual):
        self.couponCodeEqual = newCouponCodeEqual

    def getProgramAssetGroupOfferIdIn(self):
        return self.programAssetGroupOfferIdIn

    def setProgramAssetGroupOfferIdIn(self, newProgramAssetGroupOfferIdIn):
        self.programAssetGroupOfferIdIn = newProgramAssetGroupOfferIdIn


# @package Kaltura
# @subpackage Client
class KalturaRecordingContextFilter(KalturaFilter):
    """Filtering assets"""

    def __init__(self,
            orderBy=NotImplemented,
            assetIdIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma separated asset ids
        # @var string
        self.assetIdIn = assetIdIn


    PROPERTY_LOADERS = {
        'assetIdIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRecordingContextFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaRecordingContextFilter")
        kparams.addStringIfDefined("assetIdIn", self.assetIdIn)
        return kparams

    def getAssetIdIn(self):
        return self.assetIdIn

    def setAssetIdIn(self, newAssetIdIn):
        self.assetIdIn = newAssetIdIn


# @package Kaltura
# @subpackage Client
class KalturaTransactionHistoryFilter(KalturaFilter):
    """Transactions filter"""

    def __init__(self,
            orderBy=NotImplemented,
            entityReferenceEqual=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            entitlementIdEqual=NotImplemented,
            externalIdEqual=NotImplemented,
            billingItemsTypeEqual=NotImplemented,
            billingActionEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Reference type to filter by
        # @var KalturaEntityReferenceBy
        self.entityReferenceEqual = entityReferenceEqual

        # Filter transactions later than specific date
        # @var int
        self.startDateGreaterThanOrEqual = startDateGreaterThanOrEqual

        # Filter transactions earlier than specific date
        # @var int
        self.endDateLessThanOrEqual = endDateLessThanOrEqual

        # Filter transaction by entitlement id
        # @var int
        self.entitlementIdEqual = entitlementIdEqual

        # Filter transaction by external Id
        # @var string
        self.externalIdEqual = externalIdEqual

        # Filter transaction by billing item type
        # @var KalturaBillingItemsType
        self.billingItemsTypeEqual = billingItemsTypeEqual

        # Filter transaction by billing action
        # @var KalturaBillingAction
        self.billingActionEqual = billingActionEqual


    PROPERTY_LOADERS = {
        'entityReferenceEqual': (KalturaEnumsFactory.createString, "KalturaEntityReferenceBy"), 
        'startDateGreaterThanOrEqual': getXmlNodeInt, 
        'endDateLessThanOrEqual': getXmlNodeInt, 
        'entitlementIdEqual': getXmlNodeInt, 
        'externalIdEqual': getXmlNodeText, 
        'billingItemsTypeEqual': (KalturaEnumsFactory.createString, "KalturaBillingItemsType"), 
        'billingActionEqual': (KalturaEnumsFactory.createString, "KalturaBillingAction"), 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTransactionHistoryFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaTransactionHistoryFilter")
        kparams.addStringEnumIfDefined("entityReferenceEqual", self.entityReferenceEqual)
        kparams.addIntIfDefined("startDateGreaterThanOrEqual", self.startDateGreaterThanOrEqual)
        kparams.addIntIfDefined("endDateLessThanOrEqual", self.endDateLessThanOrEqual)
        kparams.addIntIfDefined("entitlementIdEqual", self.entitlementIdEqual)
        kparams.addStringIfDefined("externalIdEqual", self.externalIdEqual)
        kparams.addStringEnumIfDefined("billingItemsTypeEqual", self.billingItemsTypeEqual)
        kparams.addStringEnumIfDefined("billingActionEqual", self.billingActionEqual)
        return kparams

    def getEntityReferenceEqual(self):
        return self.entityReferenceEqual

    def setEntityReferenceEqual(self, newEntityReferenceEqual):
        self.entityReferenceEqual = newEntityReferenceEqual

    def getStartDateGreaterThanOrEqual(self):
        return self.startDateGreaterThanOrEqual

    def setStartDateGreaterThanOrEqual(self, newStartDateGreaterThanOrEqual):
        self.startDateGreaterThanOrEqual = newStartDateGreaterThanOrEqual

    def getEndDateLessThanOrEqual(self):
        return self.endDateLessThanOrEqual

    def setEndDateLessThanOrEqual(self, newEndDateLessThanOrEqual):
        self.endDateLessThanOrEqual = newEndDateLessThanOrEqual

    def getEntitlementIdEqual(self):
        return self.entitlementIdEqual

    def setEntitlementIdEqual(self, newEntitlementIdEqual):
        self.entitlementIdEqual = newEntitlementIdEqual

    def getExternalIdEqual(self):
        return self.externalIdEqual

    def setExternalIdEqual(self, newExternalIdEqual):
        self.externalIdEqual = newExternalIdEqual

    def getBillingItemsTypeEqual(self):
        return self.billingItemsTypeEqual

    def setBillingItemsTypeEqual(self, newBillingItemsTypeEqual):
        self.billingItemsTypeEqual = newBillingItemsTypeEqual

    def getBillingActionEqual(self):
        return self.billingActionEqual

    def setBillingActionEqual(self, newBillingActionEqual):
        self.billingActionEqual = newBillingActionEqual


# @package Kaltura
# @subpackage Client
class KalturaAssetCommentFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            assetIdEqual=NotImplemented,
            assetTypeEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Asset Id
        # @var int
        self.assetIdEqual = assetIdEqual

        # Asset Type
        # @var KalturaAssetType
        self.assetTypeEqual = assetTypeEqual


    PROPERTY_LOADERS = {
        'assetIdEqual': getXmlNodeInt, 
        'assetTypeEqual': (KalturaEnumsFactory.createString, "KalturaAssetType"), 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetCommentFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaAssetCommentFilter")
        kparams.addIntIfDefined("assetIdEqual", self.assetIdEqual)
        kparams.addStringEnumIfDefined("assetTypeEqual", self.assetTypeEqual)
        return kparams

    def getAssetIdEqual(self):
        return self.assetIdEqual

    def setAssetIdEqual(self, newAssetIdEqual):
        self.assetIdEqual = newAssetIdEqual

    def getAssetTypeEqual(self):
        return self.assetTypeEqual

    def setAssetTypeEqual(self, newAssetTypeEqual):
        self.assetTypeEqual = newAssetTypeEqual


# @package Kaltura
# @subpackage Client
class KalturaAssetHistoryFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            typeIn=NotImplemented,
            assetIdIn=NotImplemented,
            statusEqual=NotImplemented,
            daysLessThanOrEqual=NotImplemented,
            kSql=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma separated list of asset types to search within.
        #             Possible values: 0 - EPG linear programs entries, any media type ID (according to media type IDs defined dynamically in the system).
        #             If omitted - all types should be included.
        # @var string
        self.typeIn = typeIn

        # Comma separated list of asset identifiers.
        # @var string
        self.assetIdIn = assetIdIn

        # Which type of recently watched media to include in the result - those that finished watching, those that are in progress or both.
        #             If omitted or specified filter = all - return all types.
        #             Allowed values: progress - return medias that are in-progress, done - return medias that finished watching.
        # @var KalturaWatchStatus
        self.statusEqual = statusEqual

        # How many days back to return the watched media. If omitted, default to 7 days
        # @var int
        self.daysLessThanOrEqual = daysLessThanOrEqual

        # KSQL expression
        # @var string
        self.kSql = kSql


    PROPERTY_LOADERS = {
        'typeIn': getXmlNodeText, 
        'assetIdIn': getXmlNodeText, 
        'statusEqual': (KalturaEnumsFactory.createString, "KalturaWatchStatus"), 
        'daysLessThanOrEqual': getXmlNodeInt, 
        'kSql': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetHistoryFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaAssetHistoryFilter")
        kparams.addStringIfDefined("typeIn", self.typeIn)
        kparams.addStringIfDefined("assetIdIn", self.assetIdIn)
        kparams.addStringEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addIntIfDefined("daysLessThanOrEqual", self.daysLessThanOrEqual)
        kparams.addStringIfDefined("kSql", self.kSql)
        return kparams

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn

    def getAssetIdIn(self):
        return self.assetIdIn

    def setAssetIdIn(self, newAssetIdIn):
        self.assetIdIn = newAssetIdIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getDaysLessThanOrEqual(self):
        return self.daysLessThanOrEqual

    def setDaysLessThanOrEqual(self, newDaysLessThanOrEqual):
        self.daysLessThanOrEqual = newDaysLessThanOrEqual

    def getKSql(self):
        return self.kSql

    def setKSql(self, newKSql):
        self.kSql = newKSql


# @package Kaltura
# @subpackage Client
class KalturaAssetHistorySuppressFilter(KalturaRelatedObjectFilter):
    """Kaltura asset image per ratio filter"""

    def __init__(self,
            orderBy=NotImplemented):
        KalturaRelatedObjectFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaRelatedObjectFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetHistorySuppressFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedObjectFilter.toParams(self)
        kparams.put("objectType", "KalturaAssetHistorySuppressFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAssetImagePerRatioFilter(KalturaRelatedObjectFilter):
    """Kaltura asset image per ratio filter"""

    def __init__(self,
            orderBy=NotImplemented):
        KalturaRelatedObjectFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaRelatedObjectFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetImagePerRatioFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedObjectFilter.toParams(self)
        kparams.put("objectType", "KalturaAssetImagePerRatioFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBaseAssetStructFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseAssetStructFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaBaseAssetStructFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAssetStructFilter(KalturaBaseAssetStructFilter):
    """Filtering Asset Structs"""

    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented,
            metaIdEqual=NotImplemented,
            isProtectedEqual=NotImplemented,
            objectVirtualAssetInfoTypeEqual=NotImplemented):
        KalturaBaseAssetStructFilter.__init__(self,
            orderBy)

        # Comma separated identifiers, id = 0 is identified as program AssetStruct
        # @var string
        self.idIn = idIn

        # Filter Asset Structs that contain a specific meta id
        # @var int
        self.metaIdEqual = metaIdEqual

        # Filter Asset Structs by isProtectedEqual value
        # @var bool
        self.isProtectedEqual = isProtectedEqual

        # Filter Asset Structs by object virtual asset info type value
        # @var KalturaObjectVirtualAssetInfoType
        self.objectVirtualAssetInfoTypeEqual = objectVirtualAssetInfoTypeEqual


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
        'metaIdEqual': getXmlNodeInt, 
        'isProtectedEqual': getXmlNodeBool, 
        'objectVirtualAssetInfoTypeEqual': (KalturaEnumsFactory.createString, "KalturaObjectVirtualAssetInfoType"), 
    }

    def fromXml(self, node):
        KalturaBaseAssetStructFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetStructFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseAssetStructFilter.toParams(self)
        kparams.put("objectType", "KalturaAssetStructFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addIntIfDefined("metaIdEqual", self.metaIdEqual)
        kparams.addBoolIfDefined("isProtectedEqual", self.isProtectedEqual)
        kparams.addStringEnumIfDefined("objectVirtualAssetInfoTypeEqual", self.objectVirtualAssetInfoTypeEqual)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getMetaIdEqual(self):
        return self.metaIdEqual

    def setMetaIdEqual(self, newMetaIdEqual):
        self.metaIdEqual = newMetaIdEqual

    def getIsProtectedEqual(self):
        return self.isProtectedEqual

    def setIsProtectedEqual(self, newIsProtectedEqual):
        self.isProtectedEqual = newIsProtectedEqual

    def getObjectVirtualAssetInfoTypeEqual(self):
        return self.objectVirtualAssetInfoTypeEqual

    def setObjectVirtualAssetInfoTypeEqual(self, newObjectVirtualAssetInfoTypeEqual):
        self.objectVirtualAssetInfoTypeEqual = newObjectVirtualAssetInfoTypeEqual


# @package Kaltura
# @subpackage Client
class KalturaLinearAssetStructFilter(KalturaBaseAssetStructFilter):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaBaseAssetStructFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBaseAssetStructFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLinearAssetStructFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseAssetStructFilter.toParams(self)
        kparams.put("objectType", "KalturaLinearAssetStructFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAssetStructMetaFilter(KalturaFilter):
    """Filtering Asset Struct Metas"""

    def __init__(self,
            orderBy=NotImplemented,
            assetStructIdEqual=NotImplemented,
            metaIdEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Filter Asset Struct metas that contain a specific asset struct id
        # @var int
        self.assetStructIdEqual = assetStructIdEqual

        # Filter Asset Struct metas that contain a specific meta id
        # @var int
        self.metaIdEqual = metaIdEqual


    PROPERTY_LOADERS = {
        'assetStructIdEqual': getXmlNodeInt, 
        'metaIdEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetStructMetaFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaAssetStructMetaFilter")
        kparams.addIntIfDefined("assetStructIdEqual", self.assetStructIdEqual)
        kparams.addIntIfDefined("metaIdEqual", self.metaIdEqual)
        return kparams

    def getAssetStructIdEqual(self):
        return self.assetStructIdEqual

    def setAssetStructIdEqual(self, newAssetStructIdEqual):
        self.assetStructIdEqual = newAssetStructIdEqual

    def getMetaIdEqual(self):
        return self.metaIdEqual

    def setMetaIdEqual(self, newMetaIdEqual):
        self.metaIdEqual = newMetaIdEqual


# @package Kaltura
# @subpackage Client
class KalturaSlimAsset(KalturaObjectBase):
    """Slim Asset Details"""

    def __init__(self,
            id=NotImplemented,
            type=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Internal identifier of the asset
        # @var string
        # @insertonly
        self.id = id

        # The type of the asset. Possible values: media, recording, epg
        # @var KalturaAssetType
        # @insertonly
        self.type = type


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'type': (KalturaEnumsFactory.createString, "KalturaAssetType"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSlimAsset.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSlimAsset")
        kparams.addStringIfDefined("id", self.id)
        kparams.addStringEnumIfDefined("type", self.type)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType


# @package Kaltura
# @subpackage Client
class KalturaBookmarkFilter(KalturaFilter):
    """Filtering Assets requests"""

    def __init__(self,
            orderBy=NotImplemented,
            assetIdIn=NotImplemented,
            assetTypeEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma separated list of assets identifiers
        # @var string
        self.assetIdIn = assetIdIn

        # Asset type
        # @var KalturaAssetType
        self.assetTypeEqual = assetTypeEqual


    PROPERTY_LOADERS = {
        'assetIdIn': getXmlNodeText, 
        'assetTypeEqual': (KalturaEnumsFactory.createString, "KalturaAssetType"), 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBookmarkFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaBookmarkFilter")
        kparams.addStringIfDefined("assetIdIn", self.assetIdIn)
        kparams.addStringEnumIfDefined("assetTypeEqual", self.assetTypeEqual)
        return kparams

    def getAssetIdIn(self):
        return self.assetIdIn

    def setAssetIdIn(self, newAssetIdIn):
        self.assetIdIn = newAssetIdIn

    def getAssetTypeEqual(self):
        return self.assetTypeEqual

    def setAssetTypeEqual(self, newAssetTypeEqual):
        self.assetTypeEqual = newAssetTypeEqual


# @package Kaltura
# @subpackage Client
class KalturaBaseOTTUser(KalturaObjectBase):
    """Slim user data"""

    def __init__(self,
            id=NotImplemented,
            username=NotImplemented,
            firstName=NotImplemented,
            lastName=NotImplemented):
        KalturaObjectBase.__init__(self)

        # User identifier
        # @var string
        # @readonly
        self.id = id

        # Username
        # @var string
        self.username = username

        # First name
        # @var string
        self.firstName = firstName

        # Last name
        # @var string
        self.lastName = lastName


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'username': getXmlNodeText, 
        'firstName': getXmlNodeText, 
        'lastName': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseOTTUser.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBaseOTTUser")
        kparams.addStringIfDefined("username", self.username)
        kparams.addStringIfDefined("firstName", self.firstName)
        kparams.addStringIfDefined("lastName", self.lastName)
        return kparams

    def getId(self):
        return self.id

    def getUsername(self):
        return self.username

    def setUsername(self, newUsername):
        self.username = newUsername

    def getFirstName(self):
        return self.firstName

    def setFirstName(self, newFirstName):
        self.firstName = newFirstName

    def getLastName(self):
        return self.lastName

    def setLastName(self, newLastName):
        self.lastName = newLastName


# @package Kaltura
# @subpackage Client
class KalturaCountry(KalturaObjectBase):
    """Country details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            code=NotImplemented,
            mainLanguageCode=NotImplemented,
            languagesCode=NotImplemented,
            currency=NotImplemented,
            currencySign=NotImplemented,
            vatPercent=NotImplemented,
            timeZoneId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Country identifier
        # @var int
        # @readonly
        self.id = id

        # Country name
        # @var string
        self.name = name

        # Country code
        # @var string
        self.code = code

        # The main language code in the country
        # @var string
        self.mainLanguageCode = mainLanguageCode

        # All the languages code that are supported in the country
        # @var string
        self.languagesCode = languagesCode

        # Currency code
        # @var string
        self.currency = currency

        # Currency Sign
        # @var string
        self.currencySign = currencySign

        # Vat Percent in the country
        # @var float
        self.vatPercent = vatPercent

        # Time zone ID
        # @var string
        self.timeZoneId = timeZoneId


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'code': getXmlNodeText, 
        'mainLanguageCode': getXmlNodeText, 
        'languagesCode': getXmlNodeText, 
        'currency': getXmlNodeText, 
        'currencySign': getXmlNodeText, 
        'vatPercent': getXmlNodeFloat, 
        'timeZoneId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCountry.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCountry")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("code", self.code)
        kparams.addStringIfDefined("mainLanguageCode", self.mainLanguageCode)
        kparams.addStringIfDefined("languagesCode", self.languagesCode)
        kparams.addStringIfDefined("currency", self.currency)
        kparams.addStringIfDefined("currencySign", self.currencySign)
        kparams.addFloatIfDefined("vatPercent", self.vatPercent)
        kparams.addStringIfDefined("timeZoneId", self.timeZoneId)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getCode(self):
        return self.code

    def setCode(self, newCode):
        self.code = newCode

    def getMainLanguageCode(self):
        return self.mainLanguageCode

    def setMainLanguageCode(self, newMainLanguageCode):
        self.mainLanguageCode = newMainLanguageCode

    def getLanguagesCode(self):
        return self.languagesCode

    def setLanguagesCode(self, newLanguagesCode):
        self.languagesCode = newLanguagesCode

    def getCurrency(self):
        return self.currency

    def setCurrency(self, newCurrency):
        self.currency = newCurrency

    def getCurrencySign(self):
        return self.currencySign

    def setCurrencySign(self, newCurrencySign):
        self.currencySign = newCurrencySign

    def getVatPercent(self):
        return self.vatPercent

    def setVatPercent(self, newVatPercent):
        self.vatPercent = newVatPercent

    def getTimeZoneId(self):
        return self.timeZoneId

    def setTimeZoneId(self, newTimeZoneId):
        self.timeZoneId = newTimeZoneId


# @package Kaltura
# @subpackage Client
class KalturaOTTUserType(KalturaObjectBase):
    """User type"""

    def __init__(self,
            id=NotImplemented,
            description=NotImplemented):
        KalturaObjectBase.__init__(self)

        # User type identifier
        # @var int
        # @readonly
        self.id = id

        # User type description
        # @var string
        self.description = description


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'description': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaOTTUserType.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaOTTUserType")
        kparams.addStringIfDefined("description", self.description)
        return kparams

    def getId(self):
        return self.id

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription


# @package Kaltura
# @subpackage Client
class KalturaOTTUser(KalturaBaseOTTUser):
    """User"""

    def __init__(self,
            id=NotImplemented,
            username=NotImplemented,
            firstName=NotImplemented,
            lastName=NotImplemented,
            householdId=NotImplemented,
            email=NotImplemented,
            address=NotImplemented,
            city=NotImplemented,
            countryId=NotImplemented,
            zip=NotImplemented,
            phone=NotImplemented,
            affiliateCode=NotImplemented,
            externalId=NotImplemented,
            userType=NotImplemented,
            dynamicData=NotImplemented,
            isHouseholdMaster=NotImplemented,
            suspensionState=NotImplemented,
            userState=NotImplemented,
            roleIds=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            lastLoginDate=NotImplemented,
            failedLoginCount=NotImplemented):
        KalturaBaseOTTUser.__init__(self,
            id,
            username,
            firstName,
            lastName)

        # Household identifier
        # @var int
        # @readonly
        self.householdId = householdId

        # Email
        # @var string
        self.email = email

        # Address
        # @var string
        self.address = address

        # City
        # @var string
        self.city = city

        # Country identifier
        # @var int
        self.countryId = countryId

        # Zip code
        # @var string
        self.zip = zip

        # Phone
        # @var string
        self.phone = phone

        # Affiliate code
        # @var string
        # @insertonly
        self.affiliateCode = affiliateCode

        # External user identifier
        # @var string
        self.externalId = externalId

        # User type
        # @var KalturaOTTUserType
        self.userType = userType

        # Dynamic data
        # @var map
        self.dynamicData = dynamicData

        # Is the user the household master
        # @var bool
        # @readonly
        self.isHouseholdMaster = isHouseholdMaster

        # Suspension state
        # @var KalturaHouseholdSuspensionState
        # @readonly
        self.suspensionState = suspensionState

        # User state
        # @var KalturaUserState
        # @readonly
        self.userState = userState

        # Comma separated list of role Ids.
        # @var string
        self.roleIds = roleIds

        # User create date
        # @var int
        # @readonly
        self.createDate = createDate

        # User last update date
        # @var int
        # @readonly
        self.updateDate = updateDate

        # The date of the last successful login
        # @var int
        # @readonly
        self.lastLoginDate = lastLoginDate

        # The number of failed login attempts since the last successful login
        # @var int
        # @readonly
        self.failedLoginCount = failedLoginCount


    PROPERTY_LOADERS = {
        'householdId': getXmlNodeInt, 
        'email': getXmlNodeText, 
        'address': getXmlNodeText, 
        'city': getXmlNodeText, 
        'countryId': getXmlNodeInt, 
        'zip': getXmlNodeText, 
        'phone': getXmlNodeText, 
        'affiliateCode': getXmlNodeText, 
        'externalId': getXmlNodeText, 
        'userType': (KalturaObjectFactory.create, 'KalturaOTTUserType'), 
        'dynamicData': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
        'isHouseholdMaster': getXmlNodeBool, 
        'suspensionState': (KalturaEnumsFactory.createString, "KalturaHouseholdSuspensionState"), 
        'userState': (KalturaEnumsFactory.createString, "KalturaUserState"), 
        'roleIds': getXmlNodeText, 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
        'lastLoginDate': getXmlNodeInt, 
        'failedLoginCount': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaBaseOTTUser.fromXml(self, node)
        self.fromXmlImpl(node, KalturaOTTUser.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseOTTUser.toParams(self)
        kparams.put("objectType", "KalturaOTTUser")
        kparams.addStringIfDefined("email", self.email)
        kparams.addStringIfDefined("address", self.address)
        kparams.addStringIfDefined("city", self.city)
        kparams.addIntIfDefined("countryId", self.countryId)
        kparams.addStringIfDefined("zip", self.zip)
        kparams.addStringIfDefined("phone", self.phone)
        kparams.addStringIfDefined("affiliateCode", self.affiliateCode)
        kparams.addStringIfDefined("externalId", self.externalId)
        kparams.addObjectIfDefined("userType", self.userType)
        kparams.addMapIfDefined("dynamicData", self.dynamicData)
        kparams.addStringIfDefined("roleIds", self.roleIds)
        return kparams

    def getHouseholdId(self):
        return self.householdId

    def getEmail(self):
        return self.email

    def setEmail(self, newEmail):
        self.email = newEmail

    def getAddress(self):
        return self.address

    def setAddress(self, newAddress):
        self.address = newAddress

    def getCity(self):
        return self.city

    def setCity(self, newCity):
        self.city = newCity

    def getCountryId(self):
        return self.countryId

    def setCountryId(self, newCountryId):
        self.countryId = newCountryId

    def getZip(self):
        return self.zip

    def setZip(self, newZip):
        self.zip = newZip

    def getPhone(self):
        return self.phone

    def setPhone(self, newPhone):
        self.phone = newPhone

    def getAffiliateCode(self):
        return self.affiliateCode

    def setAffiliateCode(self, newAffiliateCode):
        self.affiliateCode = newAffiliateCode

    def getExternalId(self):
        return self.externalId

    def setExternalId(self, newExternalId):
        self.externalId = newExternalId

    def getUserType(self):
        return self.userType

    def setUserType(self, newUserType):
        self.userType = newUserType

    def getDynamicData(self):
        return self.dynamicData

    def setDynamicData(self, newDynamicData):
        self.dynamicData = newDynamicData

    def getIsHouseholdMaster(self):
        return self.isHouseholdMaster

    def getSuspensionState(self):
        return self.suspensionState

    def getUserState(self):
        return self.userState

    def getRoleIds(self):
        return self.roleIds

    def setRoleIds(self, newRoleIds):
        self.roleIds = newRoleIds

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate

    def getLastLoginDate(self):
        return self.lastLoginDate

    def getFailedLoginCount(self):
        return self.failedLoginCount


# @package Kaltura
# @subpackage Client
class KalturaBookmarkPlayerData(KalturaObjectBase):
    def __init__(self,
            action=NotImplemented,
            averageBitrate=NotImplemented,
            totalBitrate=NotImplemented,
            currentBitrate=NotImplemented,
            fileId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Action
        # @var KalturaBookmarkActionType
        self.action = action

        # Average Bitrate
        # @var int
        self.averageBitrate = averageBitrate

        # Total Bitrate
        # @var int
        self.totalBitrate = totalBitrate

        # Current Bitrate
        # @var int
        self.currentBitrate = currentBitrate

        # Identifier of the file
        # @var int
        self.fileId = fileId


    PROPERTY_LOADERS = {
        'action': (KalturaEnumsFactory.createString, "KalturaBookmarkActionType"), 
        'averageBitrate': getXmlNodeInt, 
        'totalBitrate': getXmlNodeInt, 
        'currentBitrate': getXmlNodeInt, 
        'fileId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBookmarkPlayerData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBookmarkPlayerData")
        kparams.addStringEnumIfDefined("action", self.action)
        kparams.addIntIfDefined("averageBitrate", self.averageBitrate)
        kparams.addIntIfDefined("totalBitrate", self.totalBitrate)
        kparams.addIntIfDefined("currentBitrate", self.currentBitrate)
        kparams.addIntIfDefined("fileId", self.fileId)
        return kparams

    def getAction(self):
        return self.action

    def setAction(self, newAction):
        self.action = newAction

    def getAverageBitrate(self):
        return self.averageBitrate

    def setAverageBitrate(self, newAverageBitrate):
        self.averageBitrate = newAverageBitrate

    def getTotalBitrate(self):
        return self.totalBitrate

    def setTotalBitrate(self, newTotalBitrate):
        self.totalBitrate = newTotalBitrate

    def getCurrentBitrate(self):
        return self.currentBitrate

    def setCurrentBitrate(self, newCurrentBitrate):
        self.currentBitrate = newCurrentBitrate

    def getFileId(self):
        return self.fileId

    def setFileId(self, newFileId):
        self.fileId = newFileId


# @package Kaltura
# @subpackage Client
class KalturaBookmark(KalturaSlimAsset):
    def __init__(self,
            id=NotImplemented,
            type=NotImplemented,
            userId=NotImplemented,
            position=NotImplemented,
            positionOwner=NotImplemented,
            finishedWatching=NotImplemented,
            playerData=NotImplemented,
            programId=NotImplemented,
            isReportingMode=NotImplemented,
            context=NotImplemented):
        KalturaSlimAsset.__init__(self,
            id,
            type)

        # User identifier
        # @var string
        # @readonly
        self.userId = userId

        # The position of the user in the specific asset (in seconds)
        #             For external recordings will always be &#39;0&#39;
        # @var int
        # @insertonly
        self.position = position

        # Indicates who is the owner of this position
        # @var KalturaPositionOwner
        # @readonly
        self.positionOwner = positionOwner

        # Specifies whether the user&#39;s current position exceeded 95% of the duration
        #             For external recordings will always be &#39;True&#39;
        # @var bool
        # @readonly
        self.finishedWatching = finishedWatching

        # Insert only player data
        # @var KalturaBookmarkPlayerData
        self.playerData = playerData

        # Program Id
        # @var int
        self.programId = programId

        # Indicates if the current request is in reporting mode (hit)
        # @var bool
        self.isReportingMode = isReportingMode

        # Playback context type
        # @var KalturaPlaybackContextType
        self.context = context


    PROPERTY_LOADERS = {
        'userId': getXmlNodeText, 
        'position': getXmlNodeInt, 
        'positionOwner': (KalturaEnumsFactory.createString, "KalturaPositionOwner"), 
        'finishedWatching': getXmlNodeBool, 
        'playerData': (KalturaObjectFactory.create, 'KalturaBookmarkPlayerData'), 
        'programId': getXmlNodeInt, 
        'isReportingMode': getXmlNodeBool, 
        'context': (KalturaEnumsFactory.createString, "KalturaPlaybackContextType"), 
    }

    def fromXml(self, node):
        KalturaSlimAsset.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBookmark.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSlimAsset.toParams(self)
        kparams.put("objectType", "KalturaBookmark")
        kparams.addIntIfDefined("position", self.position)
        kparams.addObjectIfDefined("playerData", self.playerData)
        kparams.addIntIfDefined("programId", self.programId)
        kparams.addBoolIfDefined("isReportingMode", self.isReportingMode)
        kparams.addStringEnumIfDefined("context", self.context)
        return kparams

    def getUserId(self):
        return self.userId

    def getPosition(self):
        return self.position

    def setPosition(self, newPosition):
        self.position = newPosition

    def getPositionOwner(self):
        return self.positionOwner

    def getFinishedWatching(self):
        return self.finishedWatching

    def getPlayerData(self):
        return self.playerData

    def setPlayerData(self, newPlayerData):
        self.playerData = newPlayerData

    def getProgramId(self):
        return self.programId

    def setProgramId(self, newProgramId):
        self.programId = newProgramId

    def getIsReportingMode(self):
        return self.isReportingMode

    def setIsReportingMode(self, newIsReportingMode):
        self.isReportingMode = newIsReportingMode

    def getContext(self):
        return self.context

    def setContext(self, newContext):
        self.context = newContext


# @package Kaltura
# @subpackage Client
class KalturaCategoryItemFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryItemFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaCategoryItemFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaCategoryItemAncestorsFilter(KalturaCategoryItemFilter):
    def __init__(self,
            orderBy=NotImplemented,
            id=NotImplemented):
        KalturaCategoryItemFilter.__init__(self,
            orderBy)

        # KSQL expression
        # @var int
        self.id = id


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaCategoryItemFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryItemAncestorsFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCategoryItemFilter.toParams(self)
        kparams.put("objectType", "KalturaCategoryItemAncestorsFilter")
        kparams.addIntIfDefined("id", self.id)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId


# @package Kaltura
# @subpackage Client
class KalturaCategoryItemByIdInFilter(KalturaCategoryItemFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented):
        KalturaCategoryItemFilter.__init__(self,
            orderBy)

        # Category item identifiers
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCategoryItemFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryItemByIdInFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCategoryItemFilter.toParams(self)
        kparams.put("objectType", "KalturaCategoryItemByIdInFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaCategoryItemSearchFilter(KalturaCategoryItemFilter):
    def __init__(self,
            orderBy=NotImplemented,
            kSql=NotImplemented,
            rootOnly=NotImplemented,
            typeEqual=NotImplemented):
        KalturaCategoryItemFilter.__init__(self,
            orderBy)

        # KSQL expression
        # @var string
        self.kSql = kSql

        # Root only
        # @var bool
        self.rootOnly = rootOnly

        # Indicates which category to return by their type.
        # @var string
        self.typeEqual = typeEqual


    PROPERTY_LOADERS = {
        'kSql': getXmlNodeText, 
        'rootOnly': getXmlNodeBool, 
        'typeEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCategoryItemFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryItemSearchFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCategoryItemFilter.toParams(self)
        kparams.put("objectType", "KalturaCategoryItemSearchFilter")
        kparams.addStringIfDefined("kSql", self.kSql)
        kparams.addBoolIfDefined("rootOnly", self.rootOnly)
        kparams.addStringIfDefined("typeEqual", self.typeEqual)
        return kparams

    def getKSql(self):
        return self.kSql

    def setKSql(self, newKSql):
        self.kSql = newKSql

    def getRootOnly(self):
        return self.rootOnly

    def setRootOnly(self, newRootOnly):
        self.rootOnly = newRootOnly

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual


# @package Kaltura
# @subpackage Client
class KalturaCategoryVersionFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryVersionFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaCategoryVersionFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaCategoryVersionFilterByTree(KalturaCategoryVersionFilter):
    def __init__(self,
            orderBy=NotImplemented,
            treeIdEqual=NotImplemented,
            stateEqual=NotImplemented):
        KalturaCategoryVersionFilter.__init__(self,
            orderBy)

        # Category version tree identifier
        # @var int
        self.treeIdEqual = treeIdEqual

        # Category version state
        # @var KalturaCategoryVersionState
        self.stateEqual = stateEqual


    PROPERTY_LOADERS = {
        'treeIdEqual': getXmlNodeInt, 
        'stateEqual': (KalturaEnumsFactory.createString, "KalturaCategoryVersionState"), 
    }

    def fromXml(self, node):
        KalturaCategoryVersionFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryVersionFilterByTree.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCategoryVersionFilter.toParams(self)
        kparams.put("objectType", "KalturaCategoryVersionFilterByTree")
        kparams.addIntIfDefined("treeIdEqual", self.treeIdEqual)
        kparams.addStringEnumIfDefined("stateEqual", self.stateEqual)
        return kparams

    def getTreeIdEqual(self):
        return self.treeIdEqual

    def setTreeIdEqual(self, newTreeIdEqual):
        self.treeIdEqual = newTreeIdEqual

    def getStateEqual(self):
        return self.stateEqual

    def setStateEqual(self, newStateEqual):
        self.stateEqual = newStateEqual


# @package Kaltura
# @subpackage Client
class KalturaChannelsBaseFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaChannelsBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaChannelsBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaChannelsFilter(KalturaChannelsBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idEqual=NotImplemented,
            mediaIdEqual=NotImplemented,
            nameEqual=NotImplemented,
            nameStartsWith=NotImplemented,
            idIn=NotImplemented):
        KalturaChannelsBaseFilter.__init__(self,
            orderBy)

        # channel identifier to filter by
        # @var int
        self.idEqual = idEqual

        # media identifier to filter by
        # @var int
        self.mediaIdEqual = mediaIdEqual

        # Exact channel name to filter by
        # @var string
        self.nameEqual = nameEqual

        # Channel name starts with (auto-complete)
        # @var string
        self.nameStartsWith = nameStartsWith

        # Comma separated channel ids
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'mediaIdEqual': getXmlNodeInt, 
        'nameEqual': getXmlNodeText, 
        'nameStartsWith': getXmlNodeText, 
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaChannelsBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaChannelsFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaChannelsBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaChannelsFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addIntIfDefined("mediaIdEqual", self.mediaIdEqual)
        kparams.addStringIfDefined("nameEqual", self.nameEqual)
        kparams.addStringIfDefined("nameStartsWith", self.nameStartsWith)
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getMediaIdEqual(self):
        return self.mediaIdEqual

    def setMediaIdEqual(self, newMediaIdEqual):
        self.mediaIdEqual = newMediaIdEqual

    def getNameEqual(self):
        return self.nameEqual

    def setNameEqual(self, newNameEqual):
        self.nameEqual = newNameEqual

    def getNameStartsWith(self):
        return self.nameStartsWith

    def setNameStartsWith(self, newNameStartsWith):
        self.nameStartsWith = newNameStartsWith

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaChannelSearchByKsqlFilter(KalturaChannelsBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            kSql=NotImplemented,
            channelStructEqual=NotImplemented):
        KalturaChannelsBaseFilter.__init__(self,
            orderBy)

        # KSQL expression
        # @var string
        self.kSql = kSql

        # channel struct
        # @var KalturaChannelStruct
        self.channelStructEqual = channelStructEqual


    PROPERTY_LOADERS = {
        'kSql': getXmlNodeText, 
        'channelStructEqual': (KalturaEnumsFactory.createString, "KalturaChannelStruct"), 
    }

    def fromXml(self, node):
        KalturaChannelsBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaChannelSearchByKsqlFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaChannelsBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaChannelSearchByKsqlFilter")
        kparams.addStringIfDefined("kSql", self.kSql)
        kparams.addStringEnumIfDefined("channelStructEqual", self.channelStructEqual)
        return kparams

    def getKSql(self):
        return self.kSql

    def setKSql(self, newKSql):
        self.kSql = newKSql

    def getChannelStructEqual(self):
        return self.channelStructEqual

    def setChannelStructEqual(self, newChannelStructEqual):
        self.channelStructEqual = newChannelStructEqual


# @package Kaltura
# @subpackage Client
class KalturaImageFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented,
            imageObjectIdEqual=NotImplemented,
            imageObjectTypeEqual=NotImplemented,
            isDefaultEqual=NotImplemented,
            imageObjectIdIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # IDs to filter by
        # @var string
        self.idIn = idIn

        # ID of the object the is related to, to filter by
        # @var int
        self.imageObjectIdEqual = imageObjectIdEqual

        # Type of the object the image is related to, to filter by
        # @var KalturaImageObjectType
        self.imageObjectTypeEqual = imageObjectTypeEqual

        # Filter images that are default on at least on image type or not default at any
        # @var bool
        self.isDefaultEqual = isDefaultEqual

        # Comma separated imageObject ids list
        # @var string
        self.imageObjectIdIn = imageObjectIdIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
        'imageObjectIdEqual': getXmlNodeInt, 
        'imageObjectTypeEqual': (KalturaEnumsFactory.createString, "KalturaImageObjectType"), 
        'isDefaultEqual': getXmlNodeBool, 
        'imageObjectIdIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaImageFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaImageFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addIntIfDefined("imageObjectIdEqual", self.imageObjectIdEqual)
        kparams.addStringEnumIfDefined("imageObjectTypeEqual", self.imageObjectTypeEqual)
        kparams.addBoolIfDefined("isDefaultEqual", self.isDefaultEqual)
        kparams.addStringIfDefined("imageObjectIdIn", self.imageObjectIdIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getImageObjectIdEqual(self):
        return self.imageObjectIdEqual

    def setImageObjectIdEqual(self, newImageObjectIdEqual):
        self.imageObjectIdEqual = newImageObjectIdEqual

    def getImageObjectTypeEqual(self):
        return self.imageObjectTypeEqual

    def setImageObjectTypeEqual(self, newImageObjectTypeEqual):
        self.imageObjectTypeEqual = newImageObjectTypeEqual

    def getIsDefaultEqual(self):
        return self.isDefaultEqual

    def setIsDefaultEqual(self, newIsDefaultEqual):
        self.isDefaultEqual = newIsDefaultEqual

    def getImageObjectIdIn(self):
        return self.imageObjectIdIn

    def setImageObjectIdIn(self, newImageObjectIdIn):
        self.imageObjectIdIn = newImageObjectIdIn


# @package Kaltura
# @subpackage Client
class KalturaImageTypeFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented,
            ratioIdIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # IDs to filter by
        # @var string
        self.idIn = idIn

        # Ratio IDs to filter by
        # @var string
        self.ratioIdIn = ratioIdIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
        'ratioIdIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaImageTypeFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaImageTypeFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addStringIfDefined("ratioIdIn", self.ratioIdIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getRatioIdIn(self):
        return self.ratioIdIn

    def setRatioIdIn(self, newRatioIdIn):
        self.ratioIdIn = newRatioIdIn


# @package Kaltura
# @subpackage Client
class KalturaLabelFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented,
            labelEqual=NotImplemented,
            labelStartsWith=NotImplemented,
            entityAttributeEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma-separated identifiers of labels
        # @var string
        self.idIn = idIn

        # Filter the label with this value
        # @var string
        self.labelEqual = labelEqual

        # Filter labels which start with this value
        # @var string
        self.labelStartsWith = labelStartsWith

        # Type of entity that labels are associated with
        # @var KalturaEntityAttribute
        self.entityAttributeEqual = entityAttributeEqual


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
        'labelEqual': getXmlNodeText, 
        'labelStartsWith': getXmlNodeText, 
        'entityAttributeEqual': (KalturaEnumsFactory.createString, "KalturaEntityAttribute"), 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLabelFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaLabelFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addStringIfDefined("labelEqual", self.labelEqual)
        kparams.addStringIfDefined("labelStartsWith", self.labelStartsWith)
        kparams.addStringEnumIfDefined("entityAttributeEqual", self.entityAttributeEqual)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getLabelEqual(self):
        return self.labelEqual

    def setLabelEqual(self, newLabelEqual):
        self.labelEqual = newLabelEqual

    def getLabelStartsWith(self):
        return self.labelStartsWith

    def setLabelStartsWith(self, newLabelStartsWith):
        self.labelStartsWith = newLabelStartsWith

    def getEntityAttributeEqual(self):
        return self.entityAttributeEqual

    def setEntityAttributeEqual(self, newEntityAttributeEqual):
        self.entityAttributeEqual = newEntityAttributeEqual


# @package Kaltura
# @subpackage Client
class KalturaMediaFileFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            assetIdEqual=NotImplemented,
            idEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Asset identifier to filter by
        # @var int
        self.assetIdEqual = assetIdEqual

        # Asset file identifier to filter by
        # @var int
        self.idEqual = idEqual


    PROPERTY_LOADERS = {
        'assetIdEqual': getXmlNodeInt, 
        'idEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaFileFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaMediaFileFilter")
        kparams.addIntIfDefined("assetIdEqual", self.assetIdEqual)
        kparams.addIntIfDefined("idEqual", self.idEqual)
        return kparams

    def getAssetIdEqual(self):
        return self.assetIdEqual

    def setAssetIdEqual(self, newAssetIdEqual):
        self.assetIdEqual = newAssetIdEqual

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual


# @package Kaltura
# @subpackage Client
class KalturaPersonalAssetSelectionFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            slotNumberEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # selected assets for specific slot number
        # @var int
        self.slotNumberEqual = slotNumberEqual


    PROPERTY_LOADERS = {
        'slotNumberEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPersonalAssetSelectionFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaPersonalAssetSelectionFilter")
        kparams.addIntIfDefined("slotNumberEqual", self.slotNumberEqual)
        return kparams

    def getSlotNumberEqual(self):
        return self.slotNumberEqual

    def setSlotNumberEqual(self, newSlotNumberEqual):
        self.slotNumberEqual = newSlotNumberEqual


# @package Kaltura
# @subpackage Client
class KalturaStreamingDeviceFilter(KalturaFilter):
    """Filtering streaming devices"""

    def __init__(self,
            orderBy=NotImplemented,
            assetTypeEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # filter by asset type
        # @var KalturaAssetType
        self.assetTypeEqual = assetTypeEqual


    PROPERTY_LOADERS = {
        'assetTypeEqual': (KalturaEnumsFactory.createString, "KalturaAssetType"), 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaStreamingDeviceFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaStreamingDeviceFilter")
        kparams.addStringEnumIfDefined("assetTypeEqual", self.assetTypeEqual)
        return kparams

    def getAssetTypeEqual(self):
        return self.assetTypeEqual

    def setAssetTypeEqual(self, newAssetTypeEqual):
        self.assetTypeEqual = newAssetTypeEqual


# @package Kaltura
# @subpackage Client
class KalturaTagFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            tagEqual=NotImplemented,
            tagStartsWith=NotImplemented,
            typeEqual=NotImplemented,
            languageEqual=NotImplemented,
            idIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Tag to filter by
        # @var string
        self.tagEqual = tagEqual

        # Tag to filter by
        # @var string
        self.tagStartsWith = tagStartsWith

        # Type identifier
        # @var int
        self.typeEqual = typeEqual

        # Language to filter by
        # @var string
        self.languageEqual = languageEqual

        # Comma separated identifiers
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'tagEqual': getXmlNodeText, 
        'tagStartsWith': getXmlNodeText, 
        'typeEqual': getXmlNodeInt, 
        'languageEqual': getXmlNodeText, 
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTagFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaTagFilter")
        kparams.addStringIfDefined("tagEqual", self.tagEqual)
        kparams.addStringIfDefined("tagStartsWith", self.tagStartsWith)
        kparams.addIntIfDefined("typeEqual", self.typeEqual)
        kparams.addStringIfDefined("languageEqual", self.languageEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getTagEqual(self):
        return self.tagEqual

    def setTagEqual(self, newTagEqual):
        self.tagEqual = newTagEqual

    def getTagStartsWith(self):
        return self.tagStartsWith

    def setTagStartsWith(self, newTagStartsWith):
        self.tagStartsWith = newTagStartsWith

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual

    def getLanguageEqual(self):
        return self.languageEqual

    def setLanguageEqual(self, newLanguageEqual):
        self.languageEqual = newLanguageEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaSearchPriorityGroupFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            activeOnlyEqual=NotImplemented,
            idEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Return only search priority groups that are in use
        # @var bool
        self.activeOnlyEqual = activeOnlyEqual

        # Identifier of search priority group to return
        # @var int
        self.idEqual = idEqual


    PROPERTY_LOADERS = {
        'activeOnlyEqual': getXmlNodeBool, 
        'idEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchPriorityGroupFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaSearchPriorityGroupFilter")
        kparams.addBoolIfDefined("activeOnlyEqual", self.activeOnlyEqual)
        kparams.addIntIfDefined("idEqual", self.idEqual)
        return kparams

    def getActiveOnlyEqual(self):
        return self.activeOnlyEqual

    def setActiveOnlyEqual(self, newActiveOnlyEqual):
        self.activeOnlyEqual = newActiveOnlyEqual

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual


# @package Kaltura
# @subpackage Client
class KalturaListGroupsRepresentativesFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            kSql=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Search assets using dynamic criteria. Provided collection of nested expressions with key, comparison operators, value, and logical conjunction.
        # @var string
        self.kSql = kSql


    PROPERTY_LOADERS = {
        'kSql': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaListGroupsRepresentativesFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaListGroupsRepresentativesFilter")
        kparams.addStringIfDefined("kSql", self.kSql)
        return kparams

    def getKSql(self):
        return self.kSql

    def setKSql(self, newKSql):
        self.kSql = newKSql


# @package Kaltura
# @subpackage Client
class KalturaPaymentMethodProfileFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            paymentGatewayIdEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Payment gateway identifier to list the payment methods for
        # @var int
        self.paymentGatewayIdEqual = paymentGatewayIdEqual


    PROPERTY_LOADERS = {
        'paymentGatewayIdEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPaymentMethodProfileFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaPaymentMethodProfileFilter")
        kparams.addIntIfDefined("paymentGatewayIdEqual", self.paymentGatewayIdEqual)
        return kparams

    def getPaymentGatewayIdEqual(self):
        return self.paymentGatewayIdEqual

    def setPaymentGatewayIdEqual(self, newPaymentGatewayIdEqual):
        self.paymentGatewayIdEqual = newPaymentGatewayIdEqual


# @package Kaltura
# @subpackage Client
class KalturaAssetPersonalMarkupSearchFilter(KalturaFilter):
    """Asset Personal Markup search filter"""

    def __init__(self,
            orderBy=NotImplemented,
            assetsIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # all assets to search their personal markups
        # @var array of KalturaSlimAsset
        self.assetsIn = assetsIn


    PROPERTY_LOADERS = {
        'assetsIn': (KalturaObjectFactory.createArray, 'KalturaSlimAsset'), 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetPersonalMarkupSearchFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaAssetPersonalMarkupSearchFilter")
        kparams.addArrayIfDefined("assetsIn", self.assetsIn)
        return kparams

    def getAssetsIn(self):
        return self.assetsIn

    def setAssetsIn(self, newAssetsIn):
        self.assetsIn = newAssetsIn


# @package Kaltura
# @subpackage Client
class KalturaAssetRuleFilter(KalturaFilter):
    """Asset rule filter"""

    def __init__(self,
            orderBy=NotImplemented,
            conditionsContainType=NotImplemented,
            assetApplied=NotImplemented,
            actionsContainType=NotImplemented,
            assetRuleIdEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Indicates which asset rule list to return by it KalturaRuleConditionType.
        #             Default value: KalturaRuleConditionType.COUNTRY
        # @var KalturaRuleConditionType
        self.conditionsContainType = conditionsContainType

        # Indicates if to return an asset rule list that related to specific asset
        # @var KalturaSlimAsset
        self.assetApplied = assetApplied

        # Indicates which asset rule list to return by this KalturaRuleActionType.
        # @var KalturaRuleActionType
        self.actionsContainType = actionsContainType

        # Asset rule id
        # @var int
        self.assetRuleIdEqual = assetRuleIdEqual


    PROPERTY_LOADERS = {
        'conditionsContainType': (KalturaEnumsFactory.createString, "KalturaRuleConditionType"), 
        'assetApplied': (KalturaObjectFactory.create, 'KalturaSlimAsset'), 
        'actionsContainType': (KalturaEnumsFactory.createString, "KalturaRuleActionType"), 
        'assetRuleIdEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetRuleFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaAssetRuleFilter")
        kparams.addStringEnumIfDefined("conditionsContainType", self.conditionsContainType)
        kparams.addObjectIfDefined("assetApplied", self.assetApplied)
        kparams.addStringEnumIfDefined("actionsContainType", self.actionsContainType)
        kparams.addIntIfDefined("assetRuleIdEqual", self.assetRuleIdEqual)
        return kparams

    def getConditionsContainType(self):
        return self.conditionsContainType

    def setConditionsContainType(self, newConditionsContainType):
        self.conditionsContainType = newConditionsContainType

    def getAssetApplied(self):
        return self.assetApplied

    def setAssetApplied(self, newAssetApplied):
        self.assetApplied = newAssetApplied

    def getActionsContainType(self):
        return self.actionsContainType

    def setActionsContainType(self, newActionsContainType):
        self.actionsContainType = newActionsContainType

    def getAssetRuleIdEqual(self):
        return self.assetRuleIdEqual

    def setAssetRuleIdEqual(self, newAssetRuleIdEqual):
        self.assetRuleIdEqual = newAssetRuleIdEqual


# @package Kaltura
# @subpackage Client
class KalturaAssetUserRuleFilter(KalturaFilter):
    """Asset user rule filter"""

    def __init__(self,
            orderBy=NotImplemented,
            attachedUserIdEqualCurrent=NotImplemented,
            actionsContainType=NotImplemented,
            conditionsContainType=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Indicates if to get the asset user rule list for the attached user or for the entire group
        # @var bool
        self.attachedUserIdEqualCurrent = attachedUserIdEqualCurrent

        # Indicates which asset rule list to return by this KalturaRuleActionType.
        # @var KalturaRuleActionType
        self.actionsContainType = actionsContainType

        # Indicates that only asset rules are returned that have exactly one and not more associated condition.
        # @var KalturaRuleConditionType
        self.conditionsContainType = conditionsContainType


    PROPERTY_LOADERS = {
        'attachedUserIdEqualCurrent': getXmlNodeBool, 
        'actionsContainType': (KalturaEnumsFactory.createString, "KalturaRuleActionType"), 
        'conditionsContainType': (KalturaEnumsFactory.createString, "KalturaRuleConditionType"), 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetUserRuleFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaAssetUserRuleFilter")
        kparams.addBoolIfDefined("attachedUserIdEqualCurrent", self.attachedUserIdEqualCurrent)
        kparams.addStringEnumIfDefined("actionsContainType", self.actionsContainType)
        kparams.addStringEnumIfDefined("conditionsContainType", self.conditionsContainType)
        return kparams

    def getAttachedUserIdEqualCurrent(self):
        return self.attachedUserIdEqualCurrent

    def setAttachedUserIdEqualCurrent(self, newAttachedUserIdEqualCurrent):
        self.attachedUserIdEqualCurrent = newAttachedUserIdEqualCurrent

    def getActionsContainType(self):
        return self.actionsContainType

    def setActionsContainType(self, newActionsContainType):
        self.actionsContainType = newActionsContainType

    def getConditionsContainType(self):
        return self.conditionsContainType

    def setConditionsContainType(self, newConditionsContainType):
        self.conditionsContainType = newConditionsContainType


# @package Kaltura
# @subpackage Client
class KalturaCampaignFilter(KalturaFilter):
    """Campaign filter (same as KalturaCampaignSearchFilter with no parameters)"""

    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCampaignFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaCampaignFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaCampaignSearchFilter(KalturaCampaignFilter):
    def __init__(self,
            orderBy=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            stateEqual=NotImplemented,
            hasPromotion=NotImplemented,
            nameEqual=NotImplemented,
            nameContains=NotImplemented,
            stateIn=NotImplemented):
        KalturaCampaignFilter.__init__(self,
            orderBy)

        # start Date Greater Than Or Equal
        # @var int
        self.startDateGreaterThanOrEqual = startDateGreaterThanOrEqual

        # end Date Greater Than Or Equal
        # @var int
        self.endDateLessThanOrEqual = endDateLessThanOrEqual

        # state Equal
        # @var KalturaObjectState
        self.stateEqual = stateEqual

        # has Promotion
        # @var bool
        self.hasPromotion = hasPromotion

        # Filter the Campaign with this name.
        # @var string
        self.nameEqual = nameEqual

        # A string that is included in the Campaign name
        # @var string
        self.nameContains = nameContains

        # Comma separated Campaign State list
        # @var string
        self.stateIn = stateIn


    PROPERTY_LOADERS = {
        'startDateGreaterThanOrEqual': getXmlNodeInt, 
        'endDateLessThanOrEqual': getXmlNodeInt, 
        'stateEqual': (KalturaEnumsFactory.createString, "KalturaObjectState"), 
        'hasPromotion': getXmlNodeBool, 
        'nameEqual': getXmlNodeText, 
        'nameContains': getXmlNodeText, 
        'stateIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCampaignFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCampaignSearchFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCampaignFilter.toParams(self)
        kparams.put("objectType", "KalturaCampaignSearchFilter")
        kparams.addIntIfDefined("startDateGreaterThanOrEqual", self.startDateGreaterThanOrEqual)
        kparams.addIntIfDefined("endDateLessThanOrEqual", self.endDateLessThanOrEqual)
        kparams.addStringEnumIfDefined("stateEqual", self.stateEqual)
        kparams.addBoolIfDefined("hasPromotion", self.hasPromotion)
        kparams.addStringIfDefined("nameEqual", self.nameEqual)
        kparams.addStringIfDefined("nameContains", self.nameContains)
        kparams.addStringIfDefined("stateIn", self.stateIn)
        return kparams

    def getStartDateGreaterThanOrEqual(self):
        return self.startDateGreaterThanOrEqual

    def setStartDateGreaterThanOrEqual(self, newStartDateGreaterThanOrEqual):
        self.startDateGreaterThanOrEqual = newStartDateGreaterThanOrEqual

    def getEndDateLessThanOrEqual(self):
        return self.endDateLessThanOrEqual

    def setEndDateLessThanOrEqual(self, newEndDateLessThanOrEqual):
        self.endDateLessThanOrEqual = newEndDateLessThanOrEqual

    def getStateEqual(self):
        return self.stateEqual

    def setStateEqual(self, newStateEqual):
        self.stateEqual = newStateEqual

    def getHasPromotion(self):
        return self.hasPromotion

    def setHasPromotion(self, newHasPromotion):
        self.hasPromotion = newHasPromotion

    def getNameEqual(self):
        return self.nameEqual

    def setNameEqual(self, newNameEqual):
        self.nameEqual = newNameEqual

    def getNameContains(self):
        return self.nameContains

    def setNameContains(self, newNameContains):
        self.nameContains = newNameContains

    def getStateIn(self):
        return self.stateIn

    def setStateIn(self, newStateIn):
        self.stateIn = newStateIn


# @package Kaltura
# @subpackage Client
class KalturaBatchCampaignSearchFilter(KalturaCampaignSearchFilter):
    def __init__(self,
            orderBy=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            stateEqual=NotImplemented,
            hasPromotion=NotImplemented,
            nameEqual=NotImplemented,
            nameContains=NotImplemented,
            stateIn=NotImplemented):
        KalturaCampaignSearchFilter.__init__(self,
            orderBy,
            startDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            stateEqual,
            hasPromotion,
            nameEqual,
            nameContains,
            stateIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaCampaignSearchFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBatchCampaignSearchFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCampaignSearchFilter.toParams(self)
        kparams.put("objectType", "KalturaBatchCampaignSearchFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaCampaignIdInFilter(KalturaCampaignFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented):
        KalturaCampaignFilter.__init__(self,
            orderBy)

        # campaign identifiers
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCampaignFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCampaignIdInFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCampaignFilter.toParams(self)
        kparams.put("objectType", "KalturaCampaignIdInFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaCampaignSegmentFilter(KalturaCampaignSearchFilter):
    def __init__(self,
            orderBy=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            stateEqual=NotImplemented,
            hasPromotion=NotImplemented,
            nameEqual=NotImplemented,
            nameContains=NotImplemented,
            stateIn=NotImplemented,
            segmentIdEqual=NotImplemented):
        KalturaCampaignSearchFilter.__init__(self,
            orderBy,
            startDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            stateEqual,
            hasPromotion,
            nameEqual,
            nameContains,
            stateIn)

        # segment id to be searched inside campaigns
        # @var int
        self.segmentIdEqual = segmentIdEqual


    PROPERTY_LOADERS = {
        'segmentIdEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaCampaignSearchFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCampaignSegmentFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCampaignSearchFilter.toParams(self)
        kparams.put("objectType", "KalturaCampaignSegmentFilter")
        kparams.addIntIfDefined("segmentIdEqual", self.segmentIdEqual)
        return kparams

    def getSegmentIdEqual(self):
        return self.segmentIdEqual

    def setSegmentIdEqual(self, newSegmentIdEqual):
        self.segmentIdEqual = newSegmentIdEqual


# @package Kaltura
# @subpackage Client
class KalturaTriggerCampaignSearchFilter(KalturaCampaignSearchFilter):
    def __init__(self,
            orderBy=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            stateEqual=NotImplemented,
            hasPromotion=NotImplemented,
            nameEqual=NotImplemented,
            nameContains=NotImplemented,
            stateIn=NotImplemented):
        KalturaCampaignSearchFilter.__init__(self,
            orderBy,
            startDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            stateEqual,
            hasPromotion,
            nameEqual,
            nameContains,
            stateIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaCampaignSearchFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTriggerCampaignSearchFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCampaignSearchFilter.toParams(self)
        kparams.put("objectType", "KalturaTriggerCampaignSearchFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBusinessModuleRuleFilter(KalturaFilter):
    """Business module rule filter"""

    def __init__(self,
            orderBy=NotImplemented,
            businessModuleTypeApplied=NotImplemented,
            businessModuleIdApplied=NotImplemented,
            segmentIdsApplied=NotImplemented,
            actionsContainType=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Business module type the rules applied on
        # @var KalturaTransactionType
        self.businessModuleTypeApplied = businessModuleTypeApplied

        # Business module ID the rules applied on
        # @var int
        self.businessModuleIdApplied = businessModuleIdApplied

        # Comma separated segment IDs the rules applied on
        # @var string
        self.segmentIdsApplied = segmentIdsApplied

        # Indicates which business module rule list to return by their action.
        # @var KalturaRuleActionType
        self.actionsContainType = actionsContainType


    PROPERTY_LOADERS = {
        'businessModuleTypeApplied': (KalturaEnumsFactory.createString, "KalturaTransactionType"), 
        'businessModuleIdApplied': getXmlNodeInt, 
        'segmentIdsApplied': getXmlNodeText, 
        'actionsContainType': (KalturaEnumsFactory.createString, "KalturaRuleActionType"), 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBusinessModuleRuleFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaBusinessModuleRuleFilter")
        kparams.addStringEnumIfDefined("businessModuleTypeApplied", self.businessModuleTypeApplied)
        kparams.addIntIfDefined("businessModuleIdApplied", self.businessModuleIdApplied)
        kparams.addStringIfDefined("segmentIdsApplied", self.segmentIdsApplied)
        kparams.addStringEnumIfDefined("actionsContainType", self.actionsContainType)
        return kparams

    def getBusinessModuleTypeApplied(self):
        return self.businessModuleTypeApplied

    def setBusinessModuleTypeApplied(self, newBusinessModuleTypeApplied):
        self.businessModuleTypeApplied = newBusinessModuleTypeApplied

    def getBusinessModuleIdApplied(self):
        return self.businessModuleIdApplied

    def setBusinessModuleIdApplied(self, newBusinessModuleIdApplied):
        self.businessModuleIdApplied = newBusinessModuleIdApplied

    def getSegmentIdsApplied(self):
        return self.segmentIdsApplied

    def setSegmentIdsApplied(self, newSegmentIdsApplied):
        self.segmentIdsApplied = newSegmentIdsApplied

    def getActionsContainType(self):
        return self.actionsContainType

    def setActionsContainType(self, newActionsContainType):
        self.actionsContainType = newActionsContainType


# @package Kaltura
# @subpackage Client
class KalturaCountryFilter(KalturaFilter):
    """Country filter"""

    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented,
            ipEqual=NotImplemented,
            ipEqualCurrent=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Country identifiers
        # @var string
        self.idIn = idIn

        # Ip to identify the country
        # @var string
        self.ipEqual = ipEqual

        # Indicates if to get the IP from the request
        # @var bool
        self.ipEqualCurrent = ipEqualCurrent


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
        'ipEqual': getXmlNodeText, 
        'ipEqualCurrent': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCountryFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaCountryFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addStringIfDefined("ipEqual", self.ipEqual)
        kparams.addBoolIfDefined("ipEqualCurrent", self.ipEqualCurrent)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getIpEqual(self):
        return self.ipEqual

    def setIpEqual(self, newIpEqual):
        self.ipEqual = newIpEqual

    def getIpEqualCurrent(self):
        return self.ipEqualCurrent

    def setIpEqualCurrent(self, newIpEqualCurrent):
        self.ipEqualCurrent = newIpEqualCurrent


# @package Kaltura
# @subpackage Client
class KalturaCurrencyFilter(KalturaFilter):
    """Currency filter"""

    def __init__(self,
            orderBy=NotImplemented,
            codeIn=NotImplemented,
            excludePartner=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Currency codes
        # @var string
        self.codeIn = codeIn

        # Exclude partner
        # @var bool
        self.excludePartner = excludePartner


    PROPERTY_LOADERS = {
        'codeIn': getXmlNodeText, 
        'excludePartner': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCurrencyFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaCurrencyFilter")
        kparams.addStringIfDefined("codeIn", self.codeIn)
        kparams.addBoolIfDefined("excludePartner", self.excludePartner)
        return kparams

    def getCodeIn(self):
        return self.codeIn

    def setCodeIn(self, newCodeIn):
        self.codeIn = newCodeIn

    def getExcludePartner(self):
        return self.excludePartner

    def setExcludePartner(self, newExcludePartner):
        self.excludePartner = newExcludePartner


# @package Kaltura
# @subpackage Client
class KalturaDeviceBrandFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idEqual=NotImplemented,
            deviceFamilyIdEqual=NotImplemented,
            nameEqual=NotImplemented,
            typeEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Filter the device brand with this identifier.
        # @var int
        self.idEqual = idEqual

        # Filter the device brands with this device family&#39;s identifier.
        # @var int
        self.deviceFamilyIdEqual = deviceFamilyIdEqual

        # Filter the device brand with this name.
        # @var string
        self.nameEqual = nameEqual

        # Filter device brands of this type
        # @var KalturaDeviceBrandType
        self.typeEqual = typeEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'deviceFamilyIdEqual': getXmlNodeInt, 
        'nameEqual': getXmlNodeText, 
        'typeEqual': (KalturaEnumsFactory.createString, "KalturaDeviceBrandType"), 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeviceBrandFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaDeviceBrandFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addIntIfDefined("deviceFamilyIdEqual", self.deviceFamilyIdEqual)
        kparams.addStringIfDefined("nameEqual", self.nameEqual)
        kparams.addStringEnumIfDefined("typeEqual", self.typeEqual)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getDeviceFamilyIdEqual(self):
        return self.deviceFamilyIdEqual

    def setDeviceFamilyIdEqual(self, newDeviceFamilyIdEqual):
        self.deviceFamilyIdEqual = newDeviceFamilyIdEqual

    def getNameEqual(self):
        return self.nameEqual

    def setNameEqual(self, newNameEqual):
        self.nameEqual = newNameEqual

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual


# @package Kaltura
# @subpackage Client
class KalturaDeviceFamilyFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idEqual=NotImplemented,
            nameEqual=NotImplemented,
            typeEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Filter the device family with this identifier.
        # @var int
        self.idEqual = idEqual

        # Filter the device family with this name.
        # @var string
        self.nameEqual = nameEqual

        # Filter device families of this type
        # @var KalturaDeviceFamilyType
        self.typeEqual = typeEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'nameEqual': getXmlNodeText, 
        'typeEqual': (KalturaEnumsFactory.createString, "KalturaDeviceFamilyType"), 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeviceFamilyFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaDeviceFamilyFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("nameEqual", self.nameEqual)
        kparams.addStringEnumIfDefined("typeEqual", self.typeEqual)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getNameEqual(self):
        return self.nameEqual

    def setNameEqual(self, newNameEqual):
        self.nameEqual = newNameEqual

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual


# @package Kaltura
# @subpackage Client
class KalturaEventNotificationFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idEqual=NotImplemented,
            objectIdEqual=NotImplemented,
            eventObjectTypeEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Indicates which event notification to return by their event notifications Id.
        # @var string
        self.idEqual = idEqual

        # Indicates which objectId to return by their event notifications.
        # @var int
        self.objectIdEqual = objectIdEqual

        # Indicates which objectType to return by their event notifications.
        # @var string
        self.eventObjectTypeEqual = eventObjectTypeEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeText, 
        'objectIdEqual': getXmlNodeInt, 
        'eventObjectTypeEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEventNotificationFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaEventNotificationFilter")
        kparams.addStringIfDefined("idEqual", self.idEqual)
        kparams.addIntIfDefined("objectIdEqual", self.objectIdEqual)
        kparams.addStringIfDefined("eventObjectTypeEqual", self.eventObjectTypeEqual)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getObjectIdEqual(self):
        return self.objectIdEqual

    def setObjectIdEqual(self, newObjectIdEqual):
        self.objectIdEqual = newObjectIdEqual

    def getEventObjectTypeEqual(self):
        return self.eventObjectTypeEqual

    def setEventObjectTypeEqual(self, newEventObjectTypeEqual):
        self.eventObjectTypeEqual = newEventObjectTypeEqual


# @package Kaltura
# @subpackage Client
class KalturaExportTaskFilter(KalturaFilter):
    """Bulk export tasks filter"""

    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma separated tasks identifiers
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaExportTaskFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaExportTaskFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaExternalChannelProfileFilter(KalturaFilter):
    """External channel profile filter"""

    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaExternalChannelProfileFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaExternalChannelProfileFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaExternalChannelProfileByIdInFilter(KalturaExternalChannelProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented):
        KalturaExternalChannelProfileFilter.__init__(self,
            orderBy)

        # Comma separated external channel profile ids
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaExternalChannelProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaExternalChannelProfileByIdInFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaExternalChannelProfileFilter.toParams(self)
        kparams.put("objectType", "KalturaExternalChannelProfileByIdInFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaIotFilter(KalturaFilter):
    """Iot settings filter"""

    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIotFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaIotFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaIotProfileFilter(KalturaFilter):
    """Iot settings filter"""

    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIotProfileFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaIotProfileFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaLanguageFilter(KalturaFilter):
    """Language filter"""

    def __init__(self,
            orderBy=NotImplemented,
            codeIn=NotImplemented,
            excludePartner=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Language codes
        # @var string
        self.codeIn = codeIn

        # Exclude partner
        # @var bool
        self.excludePartner = excludePartner


    PROPERTY_LOADERS = {
        'codeIn': getXmlNodeText, 
        'excludePartner': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLanguageFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaLanguageFilter")
        kparams.addStringIfDefined("codeIn", self.codeIn)
        kparams.addBoolIfDefined("excludePartner", self.excludePartner)
        return kparams

    def getCodeIn(self):
        return self.codeIn

    def setCodeIn(self, newCodeIn):
        self.codeIn = newCodeIn

    def getExcludePartner(self):
        return self.excludePartner

    def setExcludePartner(self, newExcludePartner):
        self.excludePartner = newExcludePartner


# @package Kaltura
# @subpackage Client
class KalturaMediaFileDynamicDataFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented,
            mediaFileTypeId=NotImplemented,
            mediaFileTypeKeyName=NotImplemented,
            valueEqual=NotImplemented,
            valueStartsWith=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # A comma-separated list of KalturaMediaFileDynamicData.Id to be searched.
        # @var string
        self.idIn = idIn

        # An integer representing the the mediaFileType holding the keys for which the values should be stored.
        # @var int
        self.mediaFileTypeId = mediaFileTypeId

        # A string representing the key name within the mediaFileType that identifies the list corresponding
        #             to that key name.
        # @var string
        self.mediaFileTypeKeyName = mediaFileTypeKeyName

        # A string representing a specific value to be searched.
        # @var string
        self.valueEqual = valueEqual

        # A string representing the beginning of multiple (zero or more) matching values.
        # @var string
        self.valueStartsWith = valueStartsWith


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
        'mediaFileTypeId': getXmlNodeInt, 
        'mediaFileTypeKeyName': getXmlNodeText, 
        'valueEqual': getXmlNodeText, 
        'valueStartsWith': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaFileDynamicDataFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaMediaFileDynamicDataFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addIntIfDefined("mediaFileTypeId", self.mediaFileTypeId)
        kparams.addStringIfDefined("mediaFileTypeKeyName", self.mediaFileTypeKeyName)
        kparams.addStringIfDefined("valueEqual", self.valueEqual)
        kparams.addStringIfDefined("valueStartsWith", self.valueStartsWith)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getMediaFileTypeId(self):
        return self.mediaFileTypeId

    def setMediaFileTypeId(self, newMediaFileTypeId):
        self.mediaFileTypeId = newMediaFileTypeId

    def getMediaFileTypeKeyName(self):
        return self.mediaFileTypeKeyName

    def setMediaFileTypeKeyName(self, newMediaFileTypeKeyName):
        self.mediaFileTypeKeyName = newMediaFileTypeKeyName

    def getValueEqual(self):
        return self.valueEqual

    def setValueEqual(self, newValueEqual):
        self.valueEqual = newValueEqual

    def getValueStartsWith(self):
        return self.valueStartsWith

    def setValueStartsWith(self, newValueStartsWith):
        self.valueStartsWith = newValueStartsWith


# @package Kaltura
# @subpackage Client
class KalturaMetaFilter(KalturaFilter):
    """Meta filter"""

    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented,
            assetStructIdEqual=NotImplemented,
            dataTypeEqual=NotImplemented,
            multipleValueEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma separated identifiers
        # @var string
        self.idIn = idIn

        # Filter Metas that are contained in a specific asset struct
        # @var int
        self.assetStructIdEqual = assetStructIdEqual

        # Meta data type to filter by
        # @var KalturaMetaDataType
        self.dataTypeEqual = dataTypeEqual

        # Filter metas by multipleValueEqual value
        # @var bool
        self.multipleValueEqual = multipleValueEqual


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
        'assetStructIdEqual': getXmlNodeInt, 
        'dataTypeEqual': (KalturaEnumsFactory.createString, "KalturaMetaDataType"), 
        'multipleValueEqual': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMetaFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaMetaFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addIntIfDefined("assetStructIdEqual", self.assetStructIdEqual)
        kparams.addStringEnumIfDefined("dataTypeEqual", self.dataTypeEqual)
        kparams.addBoolIfDefined("multipleValueEqual", self.multipleValueEqual)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getAssetStructIdEqual(self):
        return self.assetStructIdEqual

    def setAssetStructIdEqual(self, newAssetStructIdEqual):
        self.assetStructIdEqual = newAssetStructIdEqual

    def getDataTypeEqual(self):
        return self.dataTypeEqual

    def setDataTypeEqual(self, newDataTypeEqual):
        self.dataTypeEqual = newDataTypeEqual

    def getMultipleValueEqual(self):
        return self.multipleValueEqual

    def setMultipleValueEqual(self, newMultipleValueEqual):
        self.multipleValueEqual = newMultipleValueEqual


# @package Kaltura
# @subpackage Client
class KalturaParentalRuleFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            entityReferenceEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Reference type to filter by
        # @var KalturaEntityReferenceBy
        self.entityReferenceEqual = entityReferenceEqual


    PROPERTY_LOADERS = {
        'entityReferenceEqual': (KalturaEnumsFactory.createString, "KalturaEntityReferenceBy"), 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaParentalRuleFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaParentalRuleFilter")
        kparams.addStringEnumIfDefined("entityReferenceEqual", self.entityReferenceEqual)
        return kparams

    def getEntityReferenceEqual(self):
        return self.entityReferenceEqual

    def setEntityReferenceEqual(self, newEntityReferenceEqual):
        self.entityReferenceEqual = newEntityReferenceEqual


# @package Kaltura
# @subpackage Client
class KalturaBasePermissionFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBasePermissionFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaBasePermissionFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaPermissionFilter(KalturaBasePermissionFilter):
    """Permissions filter"""

    def __init__(self,
            orderBy=NotImplemented,
            currentUserPermissionsContains=NotImplemented,
            roleIdIn=NotImplemented):
        KalturaBasePermissionFilter.__init__(self,
            orderBy)

        # Indicates whether the results should be filtered by userId using the current
        # @var bool
        self.currentUserPermissionsContains = currentUserPermissionsContains

        # Return permissions by role ID
        # @var int
        self.roleIdIn = roleIdIn


    PROPERTY_LOADERS = {
        'currentUserPermissionsContains': getXmlNodeBool, 
        'roleIdIn': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaBasePermissionFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPermissionFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBasePermissionFilter.toParams(self)
        kparams.put("objectType", "KalturaPermissionFilter")
        kparams.addBoolIfDefined("currentUserPermissionsContains", self.currentUserPermissionsContains)
        kparams.addIntIfDefined("roleIdIn", self.roleIdIn)
        return kparams

    def getCurrentUserPermissionsContains(self):
        return self.currentUserPermissionsContains

    def setCurrentUserPermissionsContains(self, newCurrentUserPermissionsContains):
        self.currentUserPermissionsContains = newCurrentUserPermissionsContains

    def getRoleIdIn(self):
        return self.roleIdIn

    def setRoleIdIn(self, newRoleIdIn):
        self.roleIdIn = newRoleIdIn


# @package Kaltura
# @subpackage Client
class KalturaPermissionByIdInFilter(KalturaBasePermissionFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented):
        KalturaBasePermissionFilter.__init__(self,
            orderBy)

        # Category item identifiers
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBasePermissionFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPermissionByIdInFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBasePermissionFilter.toParams(self)
        kparams.put("objectType", "KalturaPermissionByIdInFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaPermissionItemFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPermissionItemFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaPermissionItemFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaPermissionItemByIdInFilter(KalturaPermissionItemFilter):
    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented):
        KalturaPermissionItemFilter.__init__(self,
            orderBy)

        # Permission item identifiers
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaPermissionItemFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPermissionItemByIdInFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPermissionItemFilter.toParams(self)
        kparams.put("objectType", "KalturaPermissionItemByIdInFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaPermissionItemByApiActionFilter(KalturaPermissionItemFilter):
    """If filter properties are empty will return all API action type permission items"""

    def __init__(self,
            orderBy=NotImplemented,
            serviceEqual=NotImplemented,
            actionEqual=NotImplemented):
        KalturaPermissionItemFilter.__init__(self,
            orderBy)

        # API service name
        # @var string
        self.serviceEqual = serviceEqual

        # API action name
        # @var string
        self.actionEqual = actionEqual


    PROPERTY_LOADERS = {
        'serviceEqual': getXmlNodeText, 
        'actionEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaPermissionItemFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPermissionItemByApiActionFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPermissionItemFilter.toParams(self)
        kparams.put("objectType", "KalturaPermissionItemByApiActionFilter")
        kparams.addStringIfDefined("serviceEqual", self.serviceEqual)
        kparams.addStringIfDefined("actionEqual", self.actionEqual)
        return kparams

    def getServiceEqual(self):
        return self.serviceEqual

    def setServiceEqual(self, newServiceEqual):
        self.serviceEqual = newServiceEqual

    def getActionEqual(self):
        return self.actionEqual

    def setActionEqual(self, newActionEqual):
        self.actionEqual = newActionEqual


# @package Kaltura
# @subpackage Client
class KalturaPermissionItemByArgumentFilter(KalturaPermissionItemByApiActionFilter):
    """If filter properties are empty will return all API argument type permission items"""

    def __init__(self,
            orderBy=NotImplemented,
            serviceEqual=NotImplemented,
            actionEqual=NotImplemented,
            parameterEqual=NotImplemented):
        KalturaPermissionItemByApiActionFilter.__init__(self,
            orderBy,
            serviceEqual,
            actionEqual)

        # Parameter name
        # @var string
        self.parameterEqual = parameterEqual


    PROPERTY_LOADERS = {
        'parameterEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaPermissionItemByApiActionFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPermissionItemByArgumentFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPermissionItemByApiActionFilter.toParams(self)
        kparams.put("objectType", "KalturaPermissionItemByArgumentFilter")
        kparams.addStringIfDefined("parameterEqual", self.parameterEqual)
        return kparams

    def getParameterEqual(self):
        return self.parameterEqual

    def setParameterEqual(self, newParameterEqual):
        self.parameterEqual = newParameterEqual


# @package Kaltura
# @subpackage Client
class KalturaPermissionItemByParameterFilter(KalturaPermissionItemFilter):
    """If filter properties are empty will return all parameter type permission items"""

    def __init__(self,
            orderBy=NotImplemented,
            parameterEqual=NotImplemented,
            objectEqual=NotImplemented):
        KalturaPermissionItemFilter.__init__(self,
            orderBy)

        # Parameter name
        # @var string
        self.parameterEqual = parameterEqual

        # Parameter name
        # @var string
        self.objectEqual = objectEqual


    PROPERTY_LOADERS = {
        'parameterEqual': getXmlNodeText, 
        'objectEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaPermissionItemFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPermissionItemByParameterFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPermissionItemFilter.toParams(self)
        kparams.put("objectType", "KalturaPermissionItemByParameterFilter")
        kparams.addStringIfDefined("parameterEqual", self.parameterEqual)
        kparams.addStringIfDefined("objectEqual", self.objectEqual)
        return kparams

    def getParameterEqual(self):
        return self.parameterEqual

    def setParameterEqual(self, newParameterEqual):
        self.parameterEqual = newParameterEqual

    def getObjectEqual(self):
        return self.objectEqual

    def setObjectEqual(self, newObjectEqual):
        self.objectEqual = newObjectEqual


# @package Kaltura
# @subpackage Client
class KalturaPlaybackProfileFilter(KalturaFilter):
    """User asset rule filter"""

    def __init__(self,
            orderBy=NotImplemented,
            playbackProfileEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Playback profile to filter by
        # @var int
        self.playbackProfileEqual = playbackProfileEqual


    PROPERTY_LOADERS = {
        'playbackProfileEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlaybackProfileFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaPlaybackProfileFilter")
        kparams.addIntIfDefined("playbackProfileEqual", self.playbackProfileEqual)
        return kparams

    def getPlaybackProfileEqual(self):
        return self.playbackProfileEqual

    def setPlaybackProfileEqual(self, newPlaybackProfileEqual):
        self.playbackProfileEqual = newPlaybackProfileEqual


# @package Kaltura
# @subpackage Client
class KalturaBaseRegionFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseRegionFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaBaseRegionFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaRegionFilter(KalturaBaseRegionFilter):
    def __init__(self,
            orderBy=NotImplemented,
            externalIdIn=NotImplemented,
            idIn=NotImplemented,
            parentIdEqual=NotImplemented,
            liveAssetIdEqual=NotImplemented,
            parentOnly=NotImplemented,
            exclusiveLcn=NotImplemented):
        KalturaBaseRegionFilter.__init__(self,
            orderBy)

        # List of comma separated regions external IDs
        # @var string
        self.externalIdIn = externalIdIn

        # List of comma separated regions Ids
        # @var string
        self.idIn = idIn

        # Region parent ID to filter by
        # @var int
        self.parentIdEqual = parentIdEqual

        # Region parent ID to filter by
        # @var int
        self.liveAssetIdEqual = liveAssetIdEqual

        # Parent region to filter by
        # @var bool
        self.parentOnly = parentOnly

        # Retrieves only the channels belonging specifically to the child region
        # @var bool
        self.exclusiveLcn = exclusiveLcn


    PROPERTY_LOADERS = {
        'externalIdIn': getXmlNodeText, 
        'idIn': getXmlNodeText, 
        'parentIdEqual': getXmlNodeInt, 
        'liveAssetIdEqual': getXmlNodeInt, 
        'parentOnly': getXmlNodeBool, 
        'exclusiveLcn': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaBaseRegionFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRegionFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseRegionFilter.toParams(self)
        kparams.put("objectType", "KalturaRegionFilter")
        kparams.addStringIfDefined("externalIdIn", self.externalIdIn)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addIntIfDefined("parentIdEqual", self.parentIdEqual)
        kparams.addIntIfDefined("liveAssetIdEqual", self.liveAssetIdEqual)
        kparams.addBoolIfDefined("parentOnly", self.parentOnly)
        kparams.addBoolIfDefined("exclusiveLcn", self.exclusiveLcn)
        return kparams

    def getExternalIdIn(self):
        return self.externalIdIn

    def setExternalIdIn(self, newExternalIdIn):
        self.externalIdIn = newExternalIdIn

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getParentIdEqual(self):
        return self.parentIdEqual

    def setParentIdEqual(self, newParentIdEqual):
        self.parentIdEqual = newParentIdEqual

    def getLiveAssetIdEqual(self):
        return self.liveAssetIdEqual

    def setLiveAssetIdEqual(self, newLiveAssetIdEqual):
        self.liveAssetIdEqual = newLiveAssetIdEqual

    def getParentOnly(self):
        return self.parentOnly

    def setParentOnly(self, newParentOnly):
        self.parentOnly = newParentOnly

    def getExclusiveLcn(self):
        return self.exclusiveLcn

    def setExclusiveLcn(self, newExclusiveLcn):
        self.exclusiveLcn = newExclusiveLcn


# @package Kaltura
# @subpackage Client
class KalturaDefaultRegionFilter(KalturaBaseRegionFilter):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaBaseRegionFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBaseRegionFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDefaultRegionFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseRegionFilter.toParams(self)
        kparams.put("objectType", "KalturaDefaultRegionFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAddDefaultIfEmptyResponseProfile(KalturaRelatedObjectFilter):
    """Kaltura add default if empty ResponseProfile Filter"""

    def __init__(self,
            orderBy=NotImplemented):
        KalturaRelatedObjectFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaRelatedObjectFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAddDefaultIfEmptyResponseProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedObjectFilter.toParams(self)
        kparams.put("objectType", "KalturaAddDefaultIfEmptyResponseProfile")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSearchHistoryFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchHistoryFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaSearchHistoryFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaTvmRuleFilter(KalturaFilter):
    """Asset user rule filter"""

    def __init__(self,
            orderBy=NotImplemented,
            ruleTypeEqual=NotImplemented,
            nameEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Indicates which tvm rule list to return by their type.
        # @var KalturaTvmRuleType
        self.ruleTypeEqual = ruleTypeEqual

        # Indicates which tvm rule list to return by their name.
        # @var string
        self.nameEqual = nameEqual


    PROPERTY_LOADERS = {
        'ruleTypeEqual': (KalturaEnumsFactory.createString, "KalturaTvmRuleType"), 
        'nameEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTvmRuleFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaTvmRuleFilter")
        kparams.addStringEnumIfDefined("ruleTypeEqual", self.ruleTypeEqual)
        kparams.addStringIfDefined("nameEqual", self.nameEqual)
        return kparams

    def getRuleTypeEqual(self):
        return self.ruleTypeEqual

    def setRuleTypeEqual(self, newRuleTypeEqual):
        self.ruleTypeEqual = newRuleTypeEqual

    def getNameEqual(self):
        return self.nameEqual

    def setNameEqual(self, newNameEqual):
        self.nameEqual = newNameEqual


# @package Kaltura
# @subpackage Client
class KalturaUserAssetRuleFilter(KalturaFilter):
    """User asset rule filter"""

    def __init__(self,
            orderBy=NotImplemented,
            assetIdEqual=NotImplemented,
            assetTypeEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Asset identifier to filter by
        # @var int
        self.assetIdEqual = assetIdEqual

        # Asset type to filter by - 0 = EPG, 1 = media, 2 = npvr
        # @var int
        self.assetTypeEqual = assetTypeEqual


    PROPERTY_LOADERS = {
        'assetIdEqual': getXmlNodeInt, 
        'assetTypeEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserAssetRuleFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaUserAssetRuleFilter")
        kparams.addIntIfDefined("assetIdEqual", self.assetIdEqual)
        kparams.addIntIfDefined("assetTypeEqual", self.assetTypeEqual)
        return kparams

    def getAssetIdEqual(self):
        return self.assetIdEqual

    def setAssetIdEqual(self, newAssetIdEqual):
        self.assetIdEqual = newAssetIdEqual

    def getAssetTypeEqual(self):
        return self.assetTypeEqual

    def setAssetTypeEqual(self, newAssetTypeEqual):
        self.assetTypeEqual = newAssetTypeEqual


# @package Kaltura
# @subpackage Client
class KalturaUserRoleFilter(KalturaFilter):
    """User roles filter"""

    def __init__(self,
            orderBy=NotImplemented,
            idIn=NotImplemented,
            currentUserRoleIdsContains=NotImplemented,
            typeEqual=NotImplemented,
            profileEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # Comma separated roles identifiers
        # @var string
        self.idIn = idIn

        # Indicates whether the results should be filtered by userId using the current
        # @var bool
        self.currentUserRoleIdsContains = currentUserRoleIdsContains

        # User role type
        # @var KalturaUserRoleType
        self.typeEqual = typeEqual

        # User role profile
        # @var KalturaUserRoleProfile
        self.profileEqual = profileEqual


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
        'currentUserRoleIdsContains': getXmlNodeBool, 
        'typeEqual': (KalturaEnumsFactory.createString, "KalturaUserRoleType"), 
        'profileEqual': (KalturaEnumsFactory.createString, "KalturaUserRoleProfile"), 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserRoleFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaUserRoleFilter")
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addBoolIfDefined("currentUserRoleIdsContains", self.currentUserRoleIdsContains)
        kparams.addStringEnumIfDefined("typeEqual", self.typeEqual)
        kparams.addStringEnumIfDefined("profileEqual", self.profileEqual)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getCurrentUserRoleIdsContains(self):
        return self.currentUserRoleIdsContains

    def setCurrentUserRoleIdsContains(self, newCurrentUserRoleIdsContains):
        self.currentUserRoleIdsContains = newCurrentUserRoleIdsContains

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual

    def getProfileEqual(self):
        return self.profileEqual

    def setProfileEqual(self, newProfileEqual):
        self.profileEqual = newProfileEqual


# @package Kaltura
# @subpackage Client
class KalturaEpgFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            dateEqual=NotImplemented,
            liveAssetIdEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy)

        # date in unix timestamp, e.g. 1610928000(January 18, 2021 0:00:00), 1611014400(January 19, 2021 0:00:00)
        # @var int
        self.dateEqual = dateEqual

        # EPG live asset identifier
        # @var int
        self.liveAssetIdEqual = liveAssetIdEqual


    PROPERTY_LOADERS = {
        'dateEqual': getXmlNodeInt, 
        'liveAssetIdEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEpgFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaEpgFilter")
        kparams.addIntIfDefined("dateEqual", self.dateEqual)
        kparams.addIntIfDefined("liveAssetIdEqual", self.liveAssetIdEqual)
        return kparams

    def getDateEqual(self):
        return self.dateEqual

    def setDateEqual(self, newDateEqual):
        self.dateEqual = newDateEqual

    def getLiveAssetIdEqual(self):
        return self.liveAssetIdEqual

    def setLiveAssetIdEqual(self, newLiveAssetIdEqual):
        self.liveAssetIdEqual = newLiveAssetIdEqual


# @package Kaltura
# @subpackage Client
class KalturaPropertySkipCondition(KalturaSkipCondition):
    """Skips current request according to condition on given property"""

    def __init__(self,
            propertyPath=NotImplemented,
            operator=NotImplemented,
            value=NotImplemented):
        KalturaSkipCondition.__init__(self)

        # The property path on which the condition is checked
        # @var string
        self.propertyPath = propertyPath

        # The operator that applies the check to the condition
        # @var KalturaSkipOperators
        self.operator = operator

        # The value on which the condition is checked
        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'propertyPath': getXmlNodeText, 
        'operator': (KalturaEnumsFactory.createString, "KalturaSkipOperators"), 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaSkipCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPropertySkipCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSkipCondition.toParams(self)
        kparams.put("objectType", "KalturaPropertySkipCondition")
        kparams.addStringIfDefined("propertyPath", self.propertyPath)
        kparams.addStringEnumIfDefined("operator", self.operator)
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getPropertyPath(self):
        return self.propertyPath

    def setPropertyPath(self, newPropertyPath):
        self.propertyPath = newPropertyPath

    def getOperator(self):
        return self.operator

    def setOperator(self, newOperator):
        self.operator = newOperator

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaAggregatedPropertySkipCondition(KalturaPropertySkipCondition):
    """Skips current request according to aggregation condition on given property"""

    def __init__(self,
            propertyPath=NotImplemented,
            operator=NotImplemented,
            value=NotImplemented,
            aggregationType=NotImplemented):
        KalturaPropertySkipCondition.__init__(self,
            propertyPath,
            operator,
            value)

        # The aggregation type on which the condition is based on
        # @var KalturaAggregationType
        self.aggregationType = aggregationType


    PROPERTY_LOADERS = {
        'aggregationType': (KalturaEnumsFactory.createString, "KalturaAggregationType"), 
    }

    def fromXml(self, node):
        KalturaPropertySkipCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAggregatedPropertySkipCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPropertySkipCondition.toParams(self)
        kparams.put("objectType", "KalturaAggregatedPropertySkipCondition")
        kparams.addStringEnumIfDefined("aggregationType", self.aggregationType)
        return kparams

    def getAggregationType(self):
        return self.aggregationType

    def setAggregationType(self, newAggregationType):
        self.aggregationType = newAggregationType


# @package Kaltura
# @subpackage Client
class KalturaSkipOnErrorCondition(KalturaSkipCondition):
    """Skips current request if an error occurs according to the selected skip option"""

    def __init__(self,
            condition=NotImplemented):
        KalturaSkipCondition.__init__(self)

        # Indicates which error should be considered to skip the current request
        # @var KalturaSkipOptions
        self.condition = condition


    PROPERTY_LOADERS = {
        'condition': (KalturaEnumsFactory.createString, "KalturaSkipOptions"), 
    }

    def fromXml(self, node):
        KalturaSkipCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSkipOnErrorCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSkipCondition.toParams(self)
        kparams.put("objectType", "KalturaSkipOnErrorCondition")
        kparams.addStringEnumIfDefined("condition", self.condition)
        return kparams

    def getCondition(self):
        return self.condition

    def setCondition(self, newCondition):
        self.condition = newCondition


# @package Kaltura
# @subpackage Client
class KalturaAnnouncement(KalturaObjectBase):
    def __init__(self,
            name=NotImplemented,
            message=NotImplemented,
            enabled=NotImplemented,
            startTime=NotImplemented,
            timezone=NotImplemented,
            status=NotImplemented,
            recipients=NotImplemented,
            id=NotImplemented,
            imageUrl=NotImplemented,
            includeMail=NotImplemented,
            mailTemplate=NotImplemented,
            mailSubject=NotImplemented,
            includeSms=NotImplemented,
            includeIot=NotImplemented,
            includeUserInbox=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Announcement name
        # @var string
        self.name = name

        # Announcement message
        # @var string
        self.message = message

        # Announcement enabled
        # @var bool
        self.enabled = enabled

        # Announcement start time
        # @var int
        self.startTime = startTime

        # Announcement time zone
        # @var string
        self.timezone = timezone

        # Announcement status: NotSent=0/Sending=1/Sent=2/Aborted=3
        # @var KalturaAnnouncementStatus
        # @readonly
        self.status = status

        # Announcement recipients: All=0/LoggedIn=1/Guests=2/Other=3
        # @var KalturaAnnouncementRecipientsType
        self.recipients = recipients

        # Announcement id
        # @var int
        # @readonly
        self.id = id

        # Announcement image URL, relevant for system announcements
        # @var string
        self.imageUrl = imageUrl

        # Include Mail
        # @var bool
        self.includeMail = includeMail

        # Mail Template
        # @var string
        self.mailTemplate = mailTemplate

        # Mail Subject
        # @var string
        self.mailSubject = mailSubject

        # Include SMS
        # @var bool
        self.includeSms = includeSms

        # Include IOT
        # @var bool
        self.includeIot = includeIot

        # Should add to user inbox
        # @var bool
        self.includeUserInbox = includeUserInbox


    PROPERTY_LOADERS = {
        'name': getXmlNodeText, 
        'message': getXmlNodeText, 
        'enabled': getXmlNodeBool, 
        'startTime': getXmlNodeInt, 
        'timezone': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createString, "KalturaAnnouncementStatus"), 
        'recipients': (KalturaEnumsFactory.createString, "KalturaAnnouncementRecipientsType"), 
        'id': getXmlNodeInt, 
        'imageUrl': getXmlNodeText, 
        'includeMail': getXmlNodeBool, 
        'mailTemplate': getXmlNodeText, 
        'mailSubject': getXmlNodeText, 
        'includeSms': getXmlNodeBool, 
        'includeIot': getXmlNodeBool, 
        'includeUserInbox': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAnnouncement.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAnnouncement")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("message", self.message)
        kparams.addBoolIfDefined("enabled", self.enabled)
        kparams.addIntIfDefined("startTime", self.startTime)
        kparams.addStringIfDefined("timezone", self.timezone)
        kparams.addStringEnumIfDefined("recipients", self.recipients)
        kparams.addStringIfDefined("imageUrl", self.imageUrl)
        kparams.addBoolIfDefined("includeMail", self.includeMail)
        kparams.addStringIfDefined("mailTemplate", self.mailTemplate)
        kparams.addStringIfDefined("mailSubject", self.mailSubject)
        kparams.addBoolIfDefined("includeSms", self.includeSms)
        kparams.addBoolIfDefined("includeIot", self.includeIot)
        kparams.addBoolIfDefined("includeUserInbox", self.includeUserInbox)
        return kparams

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getMessage(self):
        return self.message

    def setMessage(self, newMessage):
        self.message = newMessage

    def getEnabled(self):
        return self.enabled

    def setEnabled(self, newEnabled):
        self.enabled = newEnabled

    def getStartTime(self):
        return self.startTime

    def setStartTime(self, newStartTime):
        self.startTime = newStartTime

    def getTimezone(self):
        return self.timezone

    def setTimezone(self, newTimezone):
        self.timezone = newTimezone

    def getStatus(self):
        return self.status

    def getRecipients(self):
        return self.recipients

    def setRecipients(self, newRecipients):
        self.recipients = newRecipients

    def getId(self):
        return self.id

    def getImageUrl(self):
        return self.imageUrl

    def setImageUrl(self, newImageUrl):
        self.imageUrl = newImageUrl

    def getIncludeMail(self):
        return self.includeMail

    def setIncludeMail(self, newIncludeMail):
        self.includeMail = newIncludeMail

    def getMailTemplate(self):
        return self.mailTemplate

    def setMailTemplate(self, newMailTemplate):
        self.mailTemplate = newMailTemplate

    def getMailSubject(self):
        return self.mailSubject

    def setMailSubject(self, newMailSubject):
        self.mailSubject = newMailSubject

    def getIncludeSms(self):
        return self.includeSms

    def setIncludeSms(self, newIncludeSms):
        self.includeSms = newIncludeSms

    def getIncludeIot(self):
        return self.includeIot

    def setIncludeIot(self, newIncludeIot):
        self.includeIot = newIncludeIot

    def getIncludeUserInbox(self):
        return self.includeUserInbox

    def setIncludeUserInbox(self, newIncludeUserInbox):
        self.includeUserInbox = newIncludeUserInbox


# @package Kaltura
# @subpackage Client
class KalturaFilterPager(KalturaObjectBase):
    """The KalturaFilterPager object enables paging management to be applied upon service list actions"""

    def __init__(self,
            pageSize=NotImplemented,
            pageIndex=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The number of objects to retrieve. Possible range 1 <= value <= 50. If omitted or value &lt; 1 - will be set to 25. If a value &gt; 50 provided - will be set to 50
        # @var int
        self.pageSize = pageSize

        # The page number for which {pageSize} of objects should be retrieved
        # @var int
        self.pageIndex = pageIndex


    PROPERTY_LOADERS = {
        'pageSize': getXmlNodeInt, 
        'pageIndex': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterPager.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaFilterPager")
        kparams.addIntIfDefined("pageSize", self.pageSize)
        kparams.addIntIfDefined("pageIndex", self.pageIndex)
        return kparams

    def getPageSize(self):
        return self.pageSize

    def setPageSize(self, newPageSize):
        self.pageSize = newPageSize

    def getPageIndex(self):
        return self.pageIndex

    def setPageIndex(self, newPageIndex):
        self.pageIndex = newPageIndex


# @package Kaltura
# @subpackage Client
class KalturaListResponse(KalturaObjectBase):
    def __init__(self,
            totalCount=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Total items
        # @var int
        self.totalCount = totalCount


    PROPERTY_LOADERS = {
        'totalCount': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaListResponse")
        kparams.addIntIfDefined("totalCount", self.totalCount)
        return kparams

    def getTotalCount(self):
        return self.totalCount

    def setTotalCount(self, newTotalCount):
        self.totalCount = newTotalCount


# @package Kaltura
# @subpackage Client
class KalturaAnnouncementListResponse(KalturaListResponse):
    """List of message announcements from DB."""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Announcements
        # @var array of KalturaAnnouncement
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaAnnouncement'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAnnouncementListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaAnnouncementListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaOTTObjectSupportNullable(KalturaObjectBase):
    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaOTTObjectSupportNullable.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaOTTObjectSupportNullable")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeviceReferenceData(KalturaOTTObjectSupportNullable):
    """Device Information"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            status=NotImplemented):
        KalturaOTTObjectSupportNullable.__init__(self)

        # id
        # @var int
        # @readonly
        self.id = id

        # Name
        # @var string
        self.name = name

        # Status
        # @var bool
        self.status = status


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'status': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaOTTObjectSupportNullable.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeviceReferenceData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOTTObjectSupportNullable.toParams(self)
        kparams.put("objectType", "KalturaDeviceReferenceData")
        kparams.addStringIfDefined("name", self.name)
        kparams.addBoolIfDefined("status", self.status)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus


# @package Kaltura
# @subpackage Client
class KalturaDeviceReferenceDataListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of KalturaDeviceReferenceData
        # @var array of KalturaDeviceReferenceData
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaDeviceReferenceData'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeviceReferenceDataListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaDeviceReferenceDataListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaDeviceManufacturerInformation(KalturaDeviceReferenceData):
    """Device Manufacturer Information"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            status=NotImplemented):
        KalturaDeviceReferenceData.__init__(self,
            id,
            name,
            status)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeviceReferenceData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeviceManufacturerInformation.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeviceReferenceData.toParams(self)
        kparams.put("objectType", "KalturaDeviceManufacturerInformation")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaRegexExpression(KalturaObjectBase):
    """KalturaRegexExpression"""

    def __init__(self,
            expression=NotImplemented,
            description=NotImplemented):
        KalturaObjectBase.__init__(self)

        # regex expression
        # @var string
        self.expression = expression

        # description
        # @var string
        self.description = description


    PROPERTY_LOADERS = {
        'expression': getXmlNodeText, 
        'description': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRegexExpression.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaRegexExpression")
        kparams.addStringIfDefined("expression", self.expression)
        kparams.addStringIfDefined("description", self.description)
        return kparams

    def getExpression(self):
        return self.expression

    def setExpression(self, newExpression):
        self.expression = newExpression

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription


# @package Kaltura
# @subpackage Client
class KalturaPasswordPolicy(KalturaOTTObjectSupportNullable):
    """Password policy settings"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            userRoleIds=NotImplemented,
            historyCount=NotImplemented,
            expiration=NotImplemented,
            complexities=NotImplemented,
            lockoutFailuresCount=NotImplemented):
        KalturaOTTObjectSupportNullable.__init__(self)

        # id
        # @var int
        # @readonly
        self.id = id

        # Name
        # @var string
        self.name = name

        # Comma separated UserRole Ids list which the policy is applied on
        # @var string
        self.userRoleIds = userRoleIds

        # The number of passwords that should be remembered for each user so that they cannot be reused.
        # @var int
        self.historyCount = historyCount

        # When should the password expire (will represent time as days).
        # @var int
        self.expiration = expiration

        # array of  KalturaRegex
        # @var array of KalturaRegexExpression
        self.complexities = complexities

        # the number of passwords failures before the account is locked.
        # @var int
        self.lockoutFailuresCount = lockoutFailuresCount


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'userRoleIds': getXmlNodeText, 
        'historyCount': getXmlNodeInt, 
        'expiration': getXmlNodeInt, 
        'complexities': (KalturaObjectFactory.createArray, 'KalturaRegexExpression'), 
        'lockoutFailuresCount': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaOTTObjectSupportNullable.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPasswordPolicy.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOTTObjectSupportNullable.toParams(self)
        kparams.put("objectType", "KalturaPasswordPolicy")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("userRoleIds", self.userRoleIds)
        kparams.addIntIfDefined("historyCount", self.historyCount)
        kparams.addIntIfDefined("expiration", self.expiration)
        kparams.addArrayIfDefined("complexities", self.complexities)
        kparams.addIntIfDefined("lockoutFailuresCount", self.lockoutFailuresCount)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getUserRoleIds(self):
        return self.userRoleIds

    def setUserRoleIds(self, newUserRoleIds):
        self.userRoleIds = newUserRoleIds

    def getHistoryCount(self):
        return self.historyCount

    def setHistoryCount(self, newHistoryCount):
        self.historyCount = newHistoryCount

    def getExpiration(self):
        return self.expiration

    def setExpiration(self, newExpiration):
        self.expiration = newExpiration

    def getComplexities(self):
        return self.complexities

    def setComplexities(self, newComplexities):
        self.complexities = newComplexities

    def getLockoutFailuresCount(self):
        return self.lockoutFailuresCount

    def setLockoutFailuresCount(self, newLockoutFailuresCount):
        self.lockoutFailuresCount = newLockoutFailuresCount


# @package Kaltura
# @subpackage Client
class KalturaHouseholdSegment(KalturaOTTObjectSupportNullable):
    """Indicates a segment of a household"""

    def __init__(self,
            segmentId=NotImplemented,
            householdId=NotImplemented):
        KalturaOTTObjectSupportNullable.__init__(self)

        # Segment Id
        # @var int
        self.segmentId = segmentId

        # Segment Id
        # @var int
        self.householdId = householdId


    PROPERTY_LOADERS = {
        'segmentId': getXmlNodeInt, 
        'householdId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaOTTObjectSupportNullable.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdSegment.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOTTObjectSupportNullable.toParams(self)
        kparams.put("objectType", "KalturaHouseholdSegment")
        kparams.addIntIfDefined("segmentId", self.segmentId)
        kparams.addIntIfDefined("householdId", self.householdId)
        return kparams

    def getSegmentId(self):
        return self.segmentId

    def setSegmentId(self, newSegmentId):
        self.segmentId = newSegmentId

    def getHouseholdId(self):
        return self.householdId

    def setHouseholdId(self, newHouseholdId):
        self.householdId = newHouseholdId


# @package Kaltura
# @subpackage Client
class KalturaAssetFilePpv(KalturaOTTObjectSupportNullable):
    """Asset file ppv"""

    def __init__(self,
            assetFileId=NotImplemented,
            ppvModuleId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented):
        KalturaOTTObjectSupportNullable.__init__(self)

        # Asset file identifier
        # @var int
        self.assetFileId = assetFileId

        # Ppv module identifier
        # @var int
        self.ppvModuleId = ppvModuleId

        # Start date and time represented as epoch.
        # @var int
        self.startDate = startDate

        # End date and time represented as epoch.
        # @var int
        self.endDate = endDate


    PROPERTY_LOADERS = {
        'assetFileId': getXmlNodeInt, 
        'ppvModuleId': getXmlNodeInt, 
        'startDate': getXmlNodeInt, 
        'endDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaOTTObjectSupportNullable.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetFilePpv.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOTTObjectSupportNullable.toParams(self)
        kparams.put("objectType", "KalturaAssetFilePpv")
        kparams.addIntIfDefined("assetFileId", self.assetFileId)
        kparams.addIntIfDefined("ppvModuleId", self.ppvModuleId)
        kparams.addIntIfDefined("startDate", self.startDate)
        kparams.addIntIfDefined("endDate", self.endDate)
        return kparams

    def getAssetFileId(self):
        return self.assetFileId

    def setAssetFileId(self, newAssetFileId):
        self.assetFileId = newAssetFileId

    def getPpvModuleId(self):
        return self.ppvModuleId

    def setPpvModuleId(self, newPpvModuleId):
        self.ppvModuleId = newPpvModuleId

    def getStartDate(self):
        return self.startDate

    def setStartDate(self, newStartDate):
        self.startDate = newStartDate

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate


# @package Kaltura
# @subpackage Client
class KalturaBaseChannel(KalturaOTTObjectSupportNullable):
    """Slim channel"""

    def __init__(self,
            id=NotImplemented):
        KalturaOTTObjectSupportNullable.__init__(self)

        # Unique identifier for the channel
        # @var int
        self.id = id


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaOTTObjectSupportNullable.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseChannel.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOTTObjectSupportNullable.toParams(self)
        kparams.put("objectType", "KalturaBaseChannel")
        kparams.addIntIfDefined("id", self.id)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId


# @package Kaltura
# @subpackage Client
class KalturaDiscountModule(KalturaObjectBase):
    """Discount module"""

    def __init__(self,
            id=NotImplemented,
            percent=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Discount module identifier
        # @var int
        self.id = id

        # The discount percentage
        # @var float
        self.percent = percent

        # The first date the discount is available
        # @var int
        self.startDate = startDate

        # The last date the discount is available
        # @var int
        self.endDate = endDate


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'percent': getXmlNodeFloat, 
        'startDate': getXmlNodeInt, 
        'endDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDiscountModule.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaDiscountModule")
        kparams.addIntIfDefined("id", self.id)
        kparams.addFloatIfDefined("percent", self.percent)
        kparams.addIntIfDefined("startDate", self.startDate)
        kparams.addIntIfDefined("endDate", self.endDate)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getPercent(self):
        return self.percent

    def setPercent(self, newPercent):
        self.percent = newPercent

    def getStartDate(self):
        return self.startDate

    def setStartDate(self, newStartDate):
        self.startDate = newStartDate

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate


# @package Kaltura
# @subpackage Client
class KalturaUsageModule(KalturaObjectBase):
    """Pricing usage module"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            maxViewsNumber=NotImplemented,
            viewLifeCycle=NotImplemented,
            fullLifeCycle=NotImplemented,
            couponId=NotImplemented,
            waiverPeriod=NotImplemented,
            isWaiverEnabled=NotImplemented,
            isOfflinePlayback=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Usage module identifier
        # @var int
        self.id = id

        # Usage module name
        # @var string
        # @insertonly
        self.name = name

        # The maximum number of times an item in this usage module can be viewed
        # @var int
        # @insertonly
        self.maxViewsNumber = maxViewsNumber

        # The amount time an item is available for viewing since a user started watching the item
        # @var int
        self.viewLifeCycle = viewLifeCycle

        # The amount time an item is available for viewing
        # @var int
        self.fullLifeCycle = fullLifeCycle

        # Identifies a specific coupon linked to this object
        # @var int
        # @readonly
        self.couponId = couponId

        # Time period during which the end user can waive his rights to cancel a purchase. When the time period is passed, the purchase can no longer be cancelled
        # @var int
        self.waiverPeriod = waiverPeriod

        # Indicates whether or not the end user has the right to waive his rights to cancel a purchase
        # @var bool
        self.isWaiverEnabled = isWaiverEnabled

        # Indicates that usage is targeted for offline playback
        # @var bool
        self.isOfflinePlayback = isOfflinePlayback


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'maxViewsNumber': getXmlNodeInt, 
        'viewLifeCycle': getXmlNodeInt, 
        'fullLifeCycle': getXmlNodeInt, 
        'couponId': getXmlNodeInt, 
        'waiverPeriod': getXmlNodeInt, 
        'isWaiverEnabled': getXmlNodeBool, 
        'isOfflinePlayback': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUsageModule.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUsageModule")
        kparams.addIntIfDefined("id", self.id)
        kparams.addStringIfDefined("name", self.name)
        kparams.addIntIfDefined("maxViewsNumber", self.maxViewsNumber)
        kparams.addIntIfDefined("viewLifeCycle", self.viewLifeCycle)
        kparams.addIntIfDefined("fullLifeCycle", self.fullLifeCycle)
        kparams.addIntIfDefined("waiverPeriod", self.waiverPeriod)
        kparams.addBoolIfDefined("isWaiverEnabled", self.isWaiverEnabled)
        kparams.addBoolIfDefined("isOfflinePlayback", self.isOfflinePlayback)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getMaxViewsNumber(self):
        return self.maxViewsNumber

    def setMaxViewsNumber(self, newMaxViewsNumber):
        self.maxViewsNumber = newMaxViewsNumber

    def getViewLifeCycle(self):
        return self.viewLifeCycle

    def setViewLifeCycle(self, newViewLifeCycle):
        self.viewLifeCycle = newViewLifeCycle

    def getFullLifeCycle(self):
        return self.fullLifeCycle

    def setFullLifeCycle(self, newFullLifeCycle):
        self.fullLifeCycle = newFullLifeCycle

    def getCouponId(self):
        return self.couponId

    def getWaiverPeriod(self):
        return self.waiverPeriod

    def setWaiverPeriod(self, newWaiverPeriod):
        self.waiverPeriod = newWaiverPeriod

    def getIsWaiverEnabled(self):
        return self.isWaiverEnabled

    def setIsWaiverEnabled(self, newIsWaiverEnabled):
        self.isWaiverEnabled = newIsWaiverEnabled

    def getIsOfflinePlayback(self):
        return self.isOfflinePlayback

    def setIsOfflinePlayback(self, newIsOfflinePlayback):
        self.isOfflinePlayback = newIsOfflinePlayback


# @package Kaltura
# @subpackage Client
class KalturaCouponsGroup(KalturaObjectBase):
    """Coupons group details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            maxUsesNumber=NotImplemented,
            maxUsesNumberOnRenewableSub=NotImplemented,
            couponGroupType=NotImplemented,
            maxHouseholdUses=NotImplemented,
            discountId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Coupon group identifier
        # @var string
        self.id = id

        # Coupon group name
        # @var string
        self.name = name

        # The first date the coupons in this coupons group are valid
        # @var int
        self.startDate = startDate

        # The last date the coupons in this coupons group are valid
        # @var int
        self.endDate = endDate

        # Maximum number of uses for each coupon in the group
        # @var int
        self.maxUsesNumber = maxUsesNumber

        # Maximum number of uses for each coupon in the group on a renewable subscription
        # @var int
        self.maxUsesNumberOnRenewableSub = maxUsesNumberOnRenewableSub

        # Type of the coupon group
        # @var KalturaCouponGroupType
        self.couponGroupType = couponGroupType

        # Maximum number of uses per household for each coupon in the group
        # @var int
        self.maxHouseholdUses = maxHouseholdUses

        # Discount ID
        # @var int
        self.discountId = discountId


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'name': getXmlNodeText, 
        'startDate': getXmlNodeInt, 
        'endDate': getXmlNodeInt, 
        'maxUsesNumber': getXmlNodeInt, 
        'maxUsesNumberOnRenewableSub': getXmlNodeInt, 
        'couponGroupType': (KalturaEnumsFactory.createString, "KalturaCouponGroupType"), 
        'maxHouseholdUses': getXmlNodeInt, 
        'discountId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCouponsGroup.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCouponsGroup")
        kparams.addStringIfDefined("id", self.id)
        kparams.addStringIfDefined("name", self.name)
        kparams.addIntIfDefined("startDate", self.startDate)
        kparams.addIntIfDefined("endDate", self.endDate)
        kparams.addIntIfDefined("maxUsesNumber", self.maxUsesNumber)
        kparams.addIntIfDefined("maxUsesNumberOnRenewableSub", self.maxUsesNumberOnRenewableSub)
        kparams.addStringEnumIfDefined("couponGroupType", self.couponGroupType)
        kparams.addIntIfDefined("maxHouseholdUses", self.maxHouseholdUses)
        kparams.addIntIfDefined("discountId", self.discountId)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getStartDate(self):
        return self.startDate

    def setStartDate(self, newStartDate):
        self.startDate = newStartDate

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate

    def getMaxUsesNumber(self):
        return self.maxUsesNumber

    def setMaxUsesNumber(self, newMaxUsesNumber):
        self.maxUsesNumber = newMaxUsesNumber

    def getMaxUsesNumberOnRenewableSub(self):
        return self.maxUsesNumberOnRenewableSub

    def setMaxUsesNumberOnRenewableSub(self, newMaxUsesNumberOnRenewableSub):
        self.maxUsesNumberOnRenewableSub = newMaxUsesNumberOnRenewableSub

    def getCouponGroupType(self):
        return self.couponGroupType

    def setCouponGroupType(self, newCouponGroupType):
        self.couponGroupType = newCouponGroupType

    def getMaxHouseholdUses(self):
        return self.maxHouseholdUses

    def setMaxHouseholdUses(self, newMaxHouseholdUses):
        self.maxHouseholdUses = newMaxHouseholdUses

    def getDiscountId(self):
        return self.discountId

    def setDiscountId(self, newDiscountId):
        self.discountId = newDiscountId


# @package Kaltura
# @subpackage Client
class KalturaCollectionCouponGroup(KalturaObjectBase):
    """Coupons group details"""

    def __init__(self,
            id=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Coupon group identifier
        # @var int
        self.id = id

        # The first date the coupons in this coupons group are valid
        # @var int
        self.startDate = startDate

        # The last date the coupons in this coupons group are valid
        # @var int
        self.endDate = endDate


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'startDate': getXmlNodeInt, 
        'endDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCollectionCouponGroup.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCollectionCouponGroup")
        kparams.addIntIfDefined("id", self.id)
        kparams.addIntIfDefined("startDate", self.startDate)
        kparams.addIntIfDefined("endDate", self.endDate)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getStartDate(self):
        return self.startDate

    def setStartDate(self, newStartDate):
        self.startDate = newStartDate

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate


# @package Kaltura
# @subpackage Client
class KalturaProductCode(KalturaObjectBase):
    """Product Code"""

    def __init__(self,
            inappProvider=NotImplemented,
            code=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Provider Name
        # @var string
        self.inappProvider = inappProvider

        # Product Code
        # @var string
        self.code = code


    PROPERTY_LOADERS = {
        'inappProvider': getXmlNodeText, 
        'code': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaProductCode.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaProductCode")
        kparams.addStringIfDefined("inappProvider", self.inappProvider)
        kparams.addStringIfDefined("code", self.code)
        return kparams

    def getInappProvider(self):
        return self.inappProvider

    def setInappProvider(self, newInappProvider):
        self.inappProvider = newInappProvider

    def getCode(self):
        return self.code

    def setCode(self, newCode):
        self.code = newCode


# @package Kaltura
# @subpackage Client
class KalturaCollection(KalturaOTTObjectSupportNullable):
    """Collection"""

    def __init__(self,
            id=NotImplemented,
            channels=NotImplemented,
            channelsIds=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            discountModule=NotImplemented,
            discountModuleId=NotImplemented,
            name=NotImplemented,
            multilingualName=NotImplemented,
            description=NotImplemented,
            multilingualDescription=NotImplemented,
            usageModule=NotImplemented,
            usageModuleId=NotImplemented,
            couponsGroups=NotImplemented,
            collectionCouponGroup=NotImplemented,
            externalId=NotImplemented,
            productCodes=NotImplemented,
            priceDetailsId=NotImplemented,
            isActive=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            virtualAssetId=NotImplemented,
            fileTypes=NotImplemented,
            fileTypesIds=NotImplemented,
            assetUserRuleId=NotImplemented):
        KalturaOTTObjectSupportNullable.__init__(self)

        # Collection identifier
        # @var string
        self.id = id

        # A list of channels associated with this collection 
        #             This property will deprecated soon. Please use ChannelsIds instead of it.
        # @var array of KalturaBaseChannel
        # @readonly
        self.channels = channels

        # Comma separated channels Ids associated with this collection
        # @var string
        self.channelsIds = channelsIds

        # The first date the collection is available for purchasing
        # @var int
        self.startDate = startDate

        # The last date the collection is available for purchasing
        # @var int
        self.endDate = endDate

        # The internal discount module for the collection
        #             This property will deprecated soon. Please use DiscountModuleId instead of it.
        # @var KalturaDiscountModule
        # @readonly
        self.discountModule = discountModule

        # The internal discount module identifier for the collection
        # @var int
        self.discountModuleId = discountModuleId

        # Name of the collection
        # @var string
        # @readonly
        self.name = name

        # Name of the collection
        # @var array of KalturaTranslationToken
        self.multilingualName = multilingualName

        # description of the collection
        # @var string
        # @readonly
        self.description = description

        # description of the collection
        # @var array of KalturaTranslationToken
        self.multilingualDescription = multilingualDescription

        # Collection usage module
        #             This property will deprecated soon. Please use usageModuleId instead of it.
        # @var KalturaUsageModule
        # @readonly
        self.usageModule = usageModule

        # The internal usage module identifier for the collection
        # @var int
        self.usageModuleId = usageModuleId

        # List of Coupons group
        #             This property will deprecated soon. Please use CollectionCouponGroup instead of it.
        # @var array of KalturaCouponsGroup
        # @readonly
        self.couponsGroups = couponsGroups

        # List of collection Coupons group
        # @var array of KalturaCollectionCouponGroup
        self.collectionCouponGroup = collectionCouponGroup

        # External ID
        # @var string
        self.externalId = externalId

        # List of Collection product codes
        # @var array of KalturaProductCode
        self.productCodes = productCodes

        # The ID of the price details associated with this collection
        # @var int
        self.priceDetailsId = priceDetailsId

        # Is active collection
        # @var bool
        self.isActive = isActive

        # Specifies when was the collection created. Date and time represented as epoch.
        # @var int
        # @readonly
        self.createDate = createDate

        # Specifies when was the collection last updated. Date and time represented as epoch.
        # @var int
        # @readonly
        self.updateDate = updateDate

        # Virtual asset id
        # @var int
        # @readonly
        self.virtualAssetId = virtualAssetId

        # A list of file types identifiers that are supported in this collection
        # @var array of KalturaIntegerValue
        # @readonly
        self.fileTypes = fileTypes

        # Comma separated file types identifiers that are supported in this collection
        # @var string
        self.fileTypesIds = fileTypesIds

        # Asset user rule identifier
        # @var int
        self.assetUserRuleId = assetUserRuleId


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'channels': (KalturaObjectFactory.createArray, 'KalturaBaseChannel'), 
        'channelsIds': getXmlNodeText, 
        'startDate': getXmlNodeInt, 
        'endDate': getXmlNodeInt, 
        'discountModule': (KalturaObjectFactory.create, 'KalturaDiscountModule'), 
        'discountModuleId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'multilingualName': (KalturaObjectFactory.createArray, 'KalturaTranslationToken'), 
        'description': getXmlNodeText, 
        'multilingualDescription': (KalturaObjectFactory.createArray, 'KalturaTranslationToken'), 
        'usageModule': (KalturaObjectFactory.create, 'KalturaUsageModule'), 
        'usageModuleId': getXmlNodeInt, 
        'couponsGroups': (KalturaObjectFactory.createArray, 'KalturaCouponsGroup'), 
        'collectionCouponGroup': (KalturaObjectFactory.createArray, 'KalturaCollectionCouponGroup'), 
        'externalId': getXmlNodeText, 
        'productCodes': (KalturaObjectFactory.createArray, 'KalturaProductCode'), 
        'priceDetailsId': getXmlNodeInt, 
        'isActive': getXmlNodeBool, 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
        'virtualAssetId': getXmlNodeInt, 
        'fileTypes': (KalturaObjectFactory.createArray, 'KalturaIntegerValue'), 
        'fileTypesIds': getXmlNodeText, 
        'assetUserRuleId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaOTTObjectSupportNullable.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCollection.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOTTObjectSupportNullable.toParams(self)
        kparams.put("objectType", "KalturaCollection")
        kparams.addStringIfDefined("id", self.id)
        kparams.addStringIfDefined("channelsIds", self.channelsIds)
        kparams.addIntIfDefined("startDate", self.startDate)
        kparams.addIntIfDefined("endDate", self.endDate)
        kparams.addIntIfDefined("discountModuleId", self.discountModuleId)
        kparams.addArrayIfDefined("multilingualName", self.multilingualName)
        kparams.addArrayIfDefined("multilingualDescription", self.multilingualDescription)
        kparams.addIntIfDefined("usageModuleId", self.usageModuleId)
        kparams.addArrayIfDefined("collectionCouponGroup", self.collectionCouponGroup)
        kparams.addStringIfDefined("externalId", self.externalId)
        kparams.addArrayIfDefined("productCodes", self.productCodes)
        kparams.addIntIfDefined("priceDetailsId", self.priceDetailsId)
        kparams.addBoolIfDefined("isActive", self.isActive)
        kparams.addStringIfDefined("fileTypesIds", self.fileTypesIds)
        kparams.addIntIfDefined("assetUserRuleId", self.assetUserRuleId)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getChannels(self):
        return self.channels

    def getChannelsIds(self):
        return self.channelsIds

    def setChannelsIds(self, newChannelsIds):
        self.channelsIds = newChannelsIds

    def getStartDate(self):
        return self.startDate

    def setStartDate(self, newStartDate):
        self.startDate = newStartDate

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate

    def getDiscountModule(self):
        return self.discountModule

    def getDiscountModuleId(self):
        return self.discountModuleId

    def setDiscountModuleId(self, newDiscountModuleId):
        self.discountModuleId = newDiscountModuleId

    def getName(self):
        return self.name

    def getMultilingualName(self):
        return self.multilingualName

    def setMultilingualName(self, newMultilingualName):
        self.multilingualName = newMultilingualName

    def getDescription(self):
        return self.description

    def getMultilingualDescription(self):
        return self.multilingualDescription

    def setMultilingualDescription(self, newMultilingualDescription):
        self.multilingualDescription = newMultilingualDescription

    def getUsageModule(self):
        return self.usageModule

    def getUsageModuleId(self):
        return self.usageModuleId

    def setUsageModuleId(self, newUsageModuleId):
        self.usageModuleId = newUsageModuleId

    def getCouponsGroups(self):
        return self.couponsGroups

    def getCollectionCouponGroup(self):
        return self.collectionCouponGroup

    def setCollectionCouponGroup(self, newCollectionCouponGroup):
        self.collectionCouponGroup = newCollectionCouponGroup

    def getExternalId(self):
        return self.externalId

    def setExternalId(self, newExternalId):
        self.externalId = newExternalId

    def getProductCodes(self):
        return self.productCodes

    def setProductCodes(self, newProductCodes):
        self.productCodes = newProductCodes

    def getPriceDetailsId(self):
        return self.priceDetailsId

    def setPriceDetailsId(self, newPriceDetailsId):
        self.priceDetailsId = newPriceDetailsId

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate

    def getVirtualAssetId(self):
        return self.virtualAssetId

    def getFileTypes(self):
        return self.fileTypes

    def getFileTypesIds(self):
        return self.fileTypesIds

    def setFileTypesIds(self, newFileTypesIds):
        self.fileTypesIds = newFileTypesIds

    def getAssetUserRuleId(self):
        return self.assetUserRuleId

    def setAssetUserRuleId(self, newAssetUserRuleId):
        self.assetUserRuleId = newAssetUserRuleId


# @package Kaltura
# @subpackage Client
class KalturaMediaImage(KalturaObjectBase):
    """Image details"""

    def __init__(self,
            ratio=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            url=NotImplemented,
            version=NotImplemented,
            id=NotImplemented,
            isDefault=NotImplemented,
            imageTypeId=NotImplemented,
            imageTypeName=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Image aspect ratio
        # @var string
        self.ratio = ratio

        # Image width
        # @var int
        self.width = width

        # Image height
        # @var int
        self.height = height

        # Image URL
        # @var string
        self.url = url

        # Image Version
        # @var int
        self.version = version

        # Image ID
        # @var string
        # @readonly
        self.id = id

        # Determined whether image was taken from default configuration or not
        # @var bool
        self.isDefault = isDefault

        # Image type identifier
        # @var int
        self.imageTypeId = imageTypeId

        # Image type Name
        # @var string
        self.imageTypeName = imageTypeName


    PROPERTY_LOADERS = {
        'ratio': getXmlNodeText, 
        'width': getXmlNodeInt, 
        'height': getXmlNodeInt, 
        'url': getXmlNodeText, 
        'version': getXmlNodeInt, 
        'id': getXmlNodeText, 
        'isDefault': getXmlNodeBool, 
        'imageTypeId': getXmlNodeInt, 
        'imageTypeName': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaImage.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaMediaImage")
        kparams.addStringIfDefined("ratio", self.ratio)
        kparams.addIntIfDefined("width", self.width)
        kparams.addIntIfDefined("height", self.height)
        kparams.addStringIfDefined("url", self.url)
        kparams.addIntIfDefined("version", self.version)
        kparams.addBoolIfDefined("isDefault", self.isDefault)
        kparams.addIntIfDefined("imageTypeId", self.imageTypeId)
        kparams.addStringIfDefined("imageTypeName", self.imageTypeName)
        return kparams

    def getRatio(self):
        return self.ratio

    def setRatio(self, newRatio):
        self.ratio = newRatio

    def getWidth(self):
        return self.width

    def setWidth(self, newWidth):
        self.width = newWidth

    def getHeight(self):
        return self.height

    def setHeight(self, newHeight):
        self.height = newHeight

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl

    def getVersion(self):
        return self.version

    def setVersion(self, newVersion):
        self.version = newVersion

    def getId(self):
        return self.id

    def getIsDefault(self):
        return self.isDefault

    def setIsDefault(self, newIsDefault):
        self.isDefault = newIsDefault

    def getImageTypeId(self):
        return self.imageTypeId

    def setImageTypeId(self, newImageTypeId):
        self.imageTypeId = newImageTypeId

    def getImageTypeName(self):
        return self.imageTypeName

    def setImageTypeName(self, newImageTypeName):
        self.imageTypeName = newImageTypeName


# @package Kaltura
# @subpackage Client
class KalturaChannelOrder(KalturaObjectBase):
    """Channel order details"""

    def __init__(self,
            dynamicOrderBy=NotImplemented,
            orderBy=NotImplemented,
            period=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Channel dynamic order by (meta)
        # @var KalturaDynamicOrderBy
        self.dynamicOrderBy = dynamicOrderBy

        # Channel order by
        # @var KalturaChannelOrderBy
        self.orderBy = orderBy

        # Sliding window period in minutes, used only when ordering by LIKES_DESC / VOTES_DESC / RATINGS_DESC / VIEWS_DESC
        # @var int
        self.period = period


    PROPERTY_LOADERS = {
        'dynamicOrderBy': (KalturaObjectFactory.create, 'KalturaDynamicOrderBy'), 
        'orderBy': (KalturaEnumsFactory.createString, "KalturaChannelOrderBy"), 
        'period': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaChannelOrder.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaChannelOrder")
        kparams.addObjectIfDefined("dynamicOrderBy", self.dynamicOrderBy)
        kparams.addStringEnumIfDefined("orderBy", self.orderBy)
        kparams.addIntIfDefined("period", self.period)
        return kparams

    def getDynamicOrderBy(self):
        return self.dynamicOrderBy

    def setDynamicOrderBy(self, newDynamicOrderBy):
        self.dynamicOrderBy = newDynamicOrderBy

    def getOrderBy(self):
        return self.orderBy

    def setOrderBy(self, newOrderBy):
        self.orderBy = newOrderBy

    def getPeriod(self):
        return self.period

    def setPeriod(self, newPeriod):
        self.period = newPeriod


# @package Kaltura
# @subpackage Client
class KalturaBaseChannelOrder(KalturaObjectBase):
    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseChannelOrder.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBaseChannelOrder")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaChannel(KalturaBaseChannel):
    """Channel details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            multilingualName=NotImplemented,
            oldName=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            multilingualDescription=NotImplemented,
            oldDescription=NotImplemented,
            isActive=NotImplemented,
            orderBy=NotImplemented,
            orderingParametersEqual=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            supportSegmentBasedOrdering=NotImplemented,
            assetUserRuleId=NotImplemented,
            metaData=NotImplemented,
            virtualAssetId=NotImplemented):
        KalturaBaseChannel.__init__(self,
            id)

        # Channel name
        # @var string
        # @readonly
        self.name = name

        # Channel name
        # @var array of KalturaTranslationToken
        self.multilingualName = multilingualName

        # Channel name
        # @var string
        self.oldName = oldName

        # Channel system name
        # @var string
        self.systemName = systemName

        # Cannel description
        # @var string
        # @readonly
        self.description = description

        # Cannel description
        # @var array of KalturaTranslationToken
        self.multilingualDescription = multilingualDescription

        # Cannel description
        # @var string
        self.oldDescription = oldDescription

        # active status
        # @var bool
        self.isActive = isActive

        # Channel order by
        # @var KalturaChannelOrder
        self.orderBy = orderBy

        # Parameters for asset list sorting.
        # @var array of KalturaBaseChannelOrder
        self.orderingParametersEqual = orderingParametersEqual

        # Specifies when was the Channel was created. Date and time represented as epoch.
        # @var int
        # @readonly
        self.createDate = createDate

        # Specifies when was the Channel last updated. Date and time represented as epoch.
        # @var int
        # @readonly
        self.updateDate = updateDate

        # Specifies whether the assets in this channel will be ordered based on their match to the user&#39;s segments (see BEO-5524)
        # @var bool
        self.supportSegmentBasedOrdering = supportSegmentBasedOrdering

        # Asset user rule identifier
        # @var int
        self.assetUserRuleId = assetUserRuleId

        # key/value map field for extra data
        # @var map
        self.metaData = metaData

        # Virtual asset id
        # @var int
        # @readonly
        self.virtualAssetId = virtualAssetId


    PROPERTY_LOADERS = {
        'name': getXmlNodeText, 
        'multilingualName': (KalturaObjectFactory.createArray, 'KalturaTranslationToken'), 
        'oldName': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'description': getXmlNodeText, 
        'multilingualDescription': (KalturaObjectFactory.createArray, 'KalturaTranslationToken'), 
        'oldDescription': getXmlNodeText, 
        'isActive': getXmlNodeBool, 
        'orderBy': (KalturaObjectFactory.create, 'KalturaChannelOrder'), 
        'orderingParametersEqual': (KalturaObjectFactory.createArray, 'KalturaBaseChannelOrder'), 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
        'supportSegmentBasedOrdering': getXmlNodeBool, 
        'assetUserRuleId': getXmlNodeInt, 
        'metaData': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
        'virtualAssetId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaBaseChannel.fromXml(self, node)
        self.fromXmlImpl(node, KalturaChannel.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseChannel.toParams(self)
        kparams.put("objectType", "KalturaChannel")
        kparams.addArrayIfDefined("multilingualName", self.multilingualName)
        kparams.addStringIfDefined("oldName", self.oldName)
        kparams.addStringIfDefined("systemName", self.systemName)
        kparams.addArrayIfDefined("multilingualDescription", self.multilingualDescription)
        kparams.addStringIfDefined("oldDescription", self.oldDescription)
        kparams.addBoolIfDefined("isActive", self.isActive)
        kparams.addObjectIfDefined("orderBy", self.orderBy)
        kparams.addArrayIfDefined("orderingParametersEqual", self.orderingParametersEqual)
        kparams.addBoolIfDefined("supportSegmentBasedOrdering", self.supportSegmentBasedOrdering)
        kparams.addIntIfDefined("assetUserRuleId", self.assetUserRuleId)
        kparams.addMapIfDefined("metaData", self.metaData)
        return kparams

    def getName(self):
        return self.name

    def getMultilingualName(self):
        return self.multilingualName

    def setMultilingualName(self, newMultilingualName):
        self.multilingualName = newMultilingualName

    def getOldName(self):
        return self.oldName

    def setOldName(self, newOldName):
        self.oldName = newOldName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getDescription(self):
        return self.description

    def getMultilingualDescription(self):
        return self.multilingualDescription

    def setMultilingualDescription(self, newMultilingualDescription):
        self.multilingualDescription = newMultilingualDescription

    def getOldDescription(self):
        return self.oldDescription

    def setOldDescription(self, newOldDescription):
        self.oldDescription = newOldDescription

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive

    def getOrderBy(self):
        return self.orderBy

    def setOrderBy(self, newOrderBy):
        self.orderBy = newOrderBy

    def getOrderingParametersEqual(self):
        return self.orderingParametersEqual

    def setOrderingParametersEqual(self, newOrderingParametersEqual):
        self.orderingParametersEqual = newOrderingParametersEqual

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate

    def getSupportSegmentBasedOrdering(self):
        return self.supportSegmentBasedOrdering

    def setSupportSegmentBasedOrdering(self, newSupportSegmentBasedOrdering):
        self.supportSegmentBasedOrdering = newSupportSegmentBasedOrdering

    def getAssetUserRuleId(self):
        return self.assetUserRuleId

    def setAssetUserRuleId(self, newAssetUserRuleId):
        self.assetUserRuleId = newAssetUserRuleId

    def getMetaData(self):
        return self.metaData

    def setMetaData(self, newMetaData):
        self.metaData = newMetaData

    def getVirtualAssetId(self):
        return self.virtualAssetId


# @package Kaltura
# @subpackage Client
class KalturaDynamicChannel(KalturaChannel):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            multilingualName=NotImplemented,
            oldName=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            multilingualDescription=NotImplemented,
            oldDescription=NotImplemented,
            isActive=NotImplemented,
            orderBy=NotImplemented,
            orderingParametersEqual=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            supportSegmentBasedOrdering=NotImplemented,
            assetUserRuleId=NotImplemented,
            metaData=NotImplemented,
            virtualAssetId=NotImplemented,
            kSql=NotImplemented,
            assetTypes=NotImplemented,
            groupBy=NotImplemented):
        KalturaChannel.__init__(self,
            id,
            name,
            multilingualName,
            oldName,
            systemName,
            description,
            multilingualDescription,
            oldDescription,
            isActive,
            orderBy,
            orderingParametersEqual,
            createDate,
            updateDate,
            supportSegmentBasedOrdering,
            assetUserRuleId,
            metaData,
            virtualAssetId)

        # Search assets using dynamic criteria. Provided collection of nested expressions with key, comparison operators, value, and logical conjunction.
        #             Possible keys: any Tag or Meta defined in the system and the following reserved keys: start_date, end_date. 
        #             epg_id, media_id - for specific asset IDs.
        #             geo_block - only valid value is &quot;true&quot;: When enabled, only assets that are not restriced to the user by geo-block rules will return.
        #             parental_rules - only valid value is &quot;true&quot;: When enabled, only assets that the user doesn&#39;t need to provide PIN code will return.
        #             user_interests - only valid value is &quot;true&quot;. When enabled, only assets that the user defined as his interests (by tags and metas) will return.
        #             epg_channel_id - the channel identifier of the EPG program. *****Deprecated, please use linear_media_id instead*****
        #             linear_media_id - the linear media identifier of the EPG program.
        #             entitled_assets - valid values: &quot;free&quot;, &quot;entitled&quot;, &quot;both&quot;. free - gets only free to watch assets. entitled - only those that the user is implicitly entitled to watch.
        #             Comparison operators: for numerical fields =, &gt;, &gt;=, &lt;, &lt;=, : (in). 
        #             For alpha-numerical fields =, != (not), ~ (like), !~, ^ (any word starts with), ^= (phrase starts with), + (exists), !+ (not exists).
        #             Logical conjunction: and, or. 
        #             Search values are limited to 20 characters each.
        #             (maximum length of entire filter is 4096 characters)
        # @var string
        self.kSql = kSql

        # Asset types in the channel.
        #             -26 is EPG
        # @var array of KalturaIntegerValue
        self.assetTypes = assetTypes

        # Channel group by
        # @var KalturaAssetGroupBy
        self.groupBy = groupBy


    PROPERTY_LOADERS = {
        'kSql': getXmlNodeText, 
        'assetTypes': (KalturaObjectFactory.createArray, 'KalturaIntegerValue'), 
        'groupBy': (KalturaObjectFactory.create, 'KalturaAssetGroupBy'), 
    }

    def fromXml(self, node):
        KalturaChannel.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDynamicChannel.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaChannel.toParams(self)
        kparams.put("objectType", "KalturaDynamicChannel")
        kparams.addStringIfDefined("kSql", self.kSql)
        kparams.addArrayIfDefined("assetTypes", self.assetTypes)
        kparams.addObjectIfDefined("groupBy", self.groupBy)
        return kparams

    def getKSql(self):
        return self.kSql

    def setKSql(self, newKSql):
        self.kSql = newKSql

    def getAssetTypes(self):
        return self.assetTypes

    def setAssetTypes(self, newAssetTypes):
        self.assetTypes = newAssetTypes

    def getGroupBy(self):
        return self.groupBy

    def setGroupBy(self, newGroupBy):
        self.groupBy = newGroupBy


# @package Kaltura
# @subpackage Client
class KalturaManualCollectionAsset(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            type=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Internal identifier of the asset
        # @var string
        self.id = id

        # The type of the asset. Possible values: media, epg
        # @var KalturaManualCollectionAssetType
        self.type = type


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'type': (KalturaEnumsFactory.createString, "KalturaManualCollectionAssetType"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaManualCollectionAsset.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaManualCollectionAsset")
        kparams.addStringIfDefined("id", self.id)
        kparams.addStringEnumIfDefined("type", self.type)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType


# @package Kaltura
# @subpackage Client
class KalturaManualChannel(KalturaChannel):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            multilingualName=NotImplemented,
            oldName=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            multilingualDescription=NotImplemented,
            oldDescription=NotImplemented,
            isActive=NotImplemented,
            orderBy=NotImplemented,
            orderingParametersEqual=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            supportSegmentBasedOrdering=NotImplemented,
            assetUserRuleId=NotImplemented,
            metaData=NotImplemented,
            virtualAssetId=NotImplemented,
            mediaIds=NotImplemented,
            assets=NotImplemented):
        KalturaChannel.__init__(self,
            id,
            name,
            multilingualName,
            oldName,
            systemName,
            description,
            multilingualDescription,
            oldDescription,
            isActive,
            orderBy,
            orderingParametersEqual,
            createDate,
            updateDate,
            supportSegmentBasedOrdering,
            assetUserRuleId,
            metaData,
            virtualAssetId)

        # A list of comma separated media ids associated with this channel, according to the order of the medias in the channel.
        # @var string
        self.mediaIds = mediaIds

        # List of assets identifier
        # @var array of KalturaManualCollectionAsset
        self.assets = assets


    PROPERTY_LOADERS = {
        'mediaIds': getXmlNodeText, 
        'assets': (KalturaObjectFactory.createArray, 'KalturaManualCollectionAsset'), 
    }

    def fromXml(self, node):
        KalturaChannel.fromXml(self, node)
        self.fromXmlImpl(node, KalturaManualChannel.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaChannel.toParams(self)
        kparams.put("objectType", "KalturaManualChannel")
        kparams.addStringIfDefined("mediaIds", self.mediaIds)
        kparams.addArrayIfDefined("assets", self.assets)
        return kparams

    def getMediaIds(self):
        return self.mediaIds

    def setMediaIds(self, newMediaIds):
        self.mediaIds = newMediaIds

    def getAssets(self):
        return self.assets

    def setAssets(self, newAssets):
        self.assets = newAssets


# @package Kaltura
# @subpackage Client
class KalturaChannelDynamicOrder(KalturaBaseChannelOrder):
    def __init__(self,
            name=NotImplemented,
            orderBy=NotImplemented):
        KalturaBaseChannelOrder.__init__(self)

        # Value
        # @var string
        self.name = name

        # Order By
        # @var KalturaMetaTagOrderBy
        self.orderBy = orderBy


    PROPERTY_LOADERS = {
        'name': getXmlNodeText, 
        'orderBy': (KalturaEnumsFactory.createString, "KalturaMetaTagOrderBy"), 
    }

    def fromXml(self, node):
        KalturaBaseChannelOrder.fromXml(self, node)
        self.fromXmlImpl(node, KalturaChannelDynamicOrder.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseChannelOrder.toParams(self)
        kparams.put("objectType", "KalturaChannelDynamicOrder")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringEnumIfDefined("orderBy", self.orderBy)
        return kparams

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getOrderBy(self):
        return self.orderBy

    def setOrderBy(self, newOrderBy):
        self.orderBy = newOrderBy


# @package Kaltura
# @subpackage Client
class KalturaChannelFieldOrder(KalturaBaseChannelOrder):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaBaseChannelOrder.__init__(self)

        # Order By
        # @var KalturaChannelFieldOrderByType
        self.orderBy = orderBy


    PROPERTY_LOADERS = {
        'orderBy': (KalturaEnumsFactory.createString, "KalturaChannelFieldOrderByType"), 
    }

    def fromXml(self, node):
        KalturaBaseChannelOrder.fromXml(self, node)
        self.fromXmlImpl(node, KalturaChannelFieldOrder.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseChannelOrder.toParams(self)
        kparams.put("objectType", "KalturaChannelFieldOrder")
        kparams.addStringEnumIfDefined("orderBy", self.orderBy)
        return kparams

    def getOrderBy(self):
        return self.orderBy

    def setOrderBy(self, newOrderBy):
        self.orderBy = newOrderBy


# @package Kaltura
# @subpackage Client
class KalturaChannelSlidingWindowOrder(KalturaBaseChannelOrder):
    def __init__(self,
            period=NotImplemented,
            orderBy=NotImplemented):
        KalturaBaseChannelOrder.__init__(self)

        # Sliding window period in minutes
        # @var int
        self.period = period

        # Order By
        # @var KalturaChannelSlidingWindowOrderByType
        self.orderBy = orderBy


    PROPERTY_LOADERS = {
        'period': getXmlNodeInt, 
        'orderBy': (KalturaEnumsFactory.createString, "KalturaChannelSlidingWindowOrderByType"), 
    }

    def fromXml(self, node):
        KalturaBaseChannelOrder.fromXml(self, node)
        self.fromXmlImpl(node, KalturaChannelSlidingWindowOrder.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseChannelOrder.toParams(self)
        kparams.put("objectType", "KalturaChannelSlidingWindowOrder")
        kparams.addIntIfDefined("period", self.period)
        kparams.addStringEnumIfDefined("orderBy", self.orderBy)
        return kparams

    def getPeriod(self):
        return self.period

    def setPeriod(self, newPeriod):
        self.period = newPeriod

    def getOrderBy(self):
        return self.orderBy

    def setOrderBy(self, newOrderBy):
        self.orderBy = newOrderBy


# @package Kaltura
# @subpackage Client
class KalturaPricePlan(KalturaUsageModule):
    """Price plan"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            maxViewsNumber=NotImplemented,
            viewLifeCycle=NotImplemented,
            fullLifeCycle=NotImplemented,
            couponId=NotImplemented,
            waiverPeriod=NotImplemented,
            isWaiverEnabled=NotImplemented,
            isOfflinePlayback=NotImplemented,
            isRenewable=NotImplemented,
            renewalsNumber=NotImplemented,
            discountId=NotImplemented,
            priceDetailsId=NotImplemented):
        KalturaUsageModule.__init__(self,
            id,
            name,
            maxViewsNumber,
            viewLifeCycle,
            fullLifeCycle,
            couponId,
            waiverPeriod,
            isWaiverEnabled,
            isOfflinePlayback)

        # Denotes whether or not this object can be renewed
        # @var bool
        self.isRenewable = isRenewable

        # Defines the number of times the module will be renewed (for the life_cycle period)
        # @var int
        self.renewalsNumber = renewalsNumber

        # The discount module identifier of the price plan
        # @var int
        self.discountId = discountId

        # The ID of the price details associated with this price plan
        # @var int
        self.priceDetailsId = priceDetailsId


    PROPERTY_LOADERS = {
        'isRenewable': getXmlNodeBool, 
        'renewalsNumber': getXmlNodeInt, 
        'discountId': getXmlNodeInt, 
        'priceDetailsId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaUsageModule.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPricePlan.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUsageModule.toParams(self)
        kparams.put("objectType", "KalturaPricePlan")
        kparams.addBoolIfDefined("isRenewable", self.isRenewable)
        kparams.addIntIfDefined("renewalsNumber", self.renewalsNumber)
        kparams.addIntIfDefined("discountId", self.discountId)
        kparams.addIntIfDefined("priceDetailsId", self.priceDetailsId)
        return kparams

    def getIsRenewable(self):
        return self.isRenewable

    def setIsRenewable(self, newIsRenewable):
        self.isRenewable = newIsRenewable

    def getRenewalsNumber(self):
        return self.renewalsNumber

    def setRenewalsNumber(self, newRenewalsNumber):
        self.renewalsNumber = newRenewalsNumber

    def getDiscountId(self):
        return self.discountId

    def setDiscountId(self, newDiscountId):
        self.discountId = newDiscountId

    def getPriceDetailsId(self):
        return self.priceDetailsId

    def setPriceDetailsId(self, newPriceDetailsId):
        self.priceDetailsId = newPriceDetailsId


# @package Kaltura
# @subpackage Client
class KalturaProgramAssetGroupOffer(KalturaOTTObjectSupportNullable):
    """Program asset group offer details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            multilingualName=NotImplemented,
            priceDetailsId=NotImplemented,
            fileTypesIds=NotImplemented,
            description=NotImplemented,
            multilingualDescription=NotImplemented,
            virtualAssetId=NotImplemented,
            isActive=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            expiryDate=NotImplemented,
            externalId=NotImplemented,
            externalOfferId=NotImplemented):
        KalturaOTTObjectSupportNullable.__init__(self)

        # Unique Kaltura internal identifier for the module
        # @var int
        self.id = id

        # Name of the Program asset group offer
        # @var string
        # @readonly
        self.name = name

        # Name of the Program asset group offer
        # @var array of KalturaTranslationToken
        self.multilingualName = multilingualName

        # ID of the KalturaPriceDetails object which contains details of the price to be paid for purchasing this KalturaProgramAssetGroupOffer.
        # @var int
        self.priceDetailsId = priceDetailsId

        # Comma separated file types identifiers that are supported in this Program asset group offer.
        #             The subset of KalturaMediaFiles of the live linear channel on which the associated Program Assets are carried to which households entitled to this
        #             Program Asset Group Offer are entitled to view E.g.may be used to restrict entitlement only to HD flavour of the Program Asset(and not the UHD flavour)
        #             If this parameter is empty, the Household shall be entitled to all KalturaMediaFiles associated with the KalturaLiveAsset.
        # @var string
        self.fileTypesIds = fileTypesIds

        # A list of the descriptions of the Program asset group offer on different languages (language code and translation)
        # @var string
        # @readonly
        self.description = description

        # A list of the descriptions of the Program asset group offer on different languages (language code and translation)
        # @var array of KalturaTranslationToken
        self.multilingualDescription = multilingualDescription

        # The id of the paired asset
        # @var int
        # @readonly
        self.virtualAssetId = virtualAssetId

        # Indicates whether the PAGO is active or not (includes whether the PAGO can be purchased and whether it is returned in list API response for regular users)
        # @var bool
        self.isActive = isActive

        # Specifies when was the pago created. Date and time represented as epoch.
        # @var int
        # @readonly
        self.createDate = createDate

        # Specifies when was the pago last updated. Date and time represented as epoch.
        # @var int
        # @readonly
        self.updateDate = updateDate

        # The date/time at which the Program Asset Group Offer is first purchasable by households. Date and time represented as epoch.
        # @var int
        self.startDate = startDate

        # The date/time at which the Program Asset Group Offer is last purchasable by households.Date and time represented as epoch.
        # @var int
        self.endDate = endDate

        # The last date/time at which the system will attempt to locate Program Assets that may be associated with this offer.Date and time represented as epoch.
        # @var int
        self.expiryDate = expiryDate

        # External identifier
        # @var string
        self.externalId = externalId

        # Identifies the Program Assets which will be entitled by Households that purchase this offer. Must be a unique value in the context of an account.
        # @var string
        self.externalOfferId = externalOfferId


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'multilingualName': (KalturaObjectFactory.createArray, 'KalturaTranslationToken'), 
        'priceDetailsId': getXmlNodeInt, 
        'fileTypesIds': getXmlNodeText, 
        'description': getXmlNodeText, 
        'multilingualDescription': (KalturaObjectFactory.createArray, 'KalturaTranslationToken'), 
        'virtualAssetId': getXmlNodeInt, 
        'isActive': getXmlNodeBool, 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
        'startDate': getXmlNodeInt, 
        'endDate': getXmlNodeInt, 
        'expiryDate': getXmlNodeInt, 
        'externalId': getXmlNodeText, 
        'externalOfferId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaOTTObjectSupportNullable.fromXml(self, node)
        self.fromXmlImpl(node, KalturaProgramAssetGroupOffer.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOTTObjectSupportNullable.toParams(self)
        kparams.put("objectType", "KalturaProgramAssetGroupOffer")
        kparams.addIntIfDefined("id", self.id)
        kparams.addArrayIfDefined("multilingualName", self.multilingualName)
        kparams.addIntIfDefined("priceDetailsId", self.priceDetailsId)
        kparams.addStringIfDefined("fileTypesIds", self.fileTypesIds)
        kparams.addArrayIfDefined("multilingualDescription", self.multilingualDescription)
        kparams.addBoolIfDefined("isActive", self.isActive)
        kparams.addIntIfDefined("startDate", self.startDate)
        kparams.addIntIfDefined("endDate", self.endDate)
        kparams.addIntIfDefined("expiryDate", self.expiryDate)
        kparams.addStringIfDefined("externalId", self.externalId)
        kparams.addStringIfDefined("externalOfferId", self.externalOfferId)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getName(self):
        return self.name

    def getMultilingualName(self):
        return self.multilingualName

    def setMultilingualName(self, newMultilingualName):
        self.multilingualName = newMultilingualName

    def getPriceDetailsId(self):
        return self.priceDetailsId

    def setPriceDetailsId(self, newPriceDetailsId):
        self.priceDetailsId = newPriceDetailsId

    def getFileTypesIds(self):
        return self.fileTypesIds

    def setFileTypesIds(self, newFileTypesIds):
        self.fileTypesIds = newFileTypesIds

    def getDescription(self):
        return self.description

    def getMultilingualDescription(self):
        return self.multilingualDescription

    def setMultilingualDescription(self, newMultilingualDescription):
        self.multilingualDescription = newMultilingualDescription

    def getVirtualAssetId(self):
        return self.virtualAssetId

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate

    def getStartDate(self):
        return self.startDate

    def setStartDate(self, newStartDate):
        self.startDate = newStartDate

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate

    def getExpiryDate(self):
        return self.expiryDate

    def setExpiryDate(self, newExpiryDate):
        self.expiryDate = newExpiryDate

    def getExternalId(self):
        return self.externalId

    def setExternalId(self, newExternalId):
        self.externalId = newExternalId

    def getExternalOfferId(self):
        return self.externalOfferId

    def setExternalOfferId(self, newExternalOfferId):
        self.externalOfferId = newExternalOfferId


# @package Kaltura
# @subpackage Client
class KalturaPrice(KalturaObjectBase):
    """Price"""

    def __init__(self,
            currencyId=NotImplemented,
            amount=NotImplemented,
            currency=NotImplemented,
            currencySign=NotImplemented,
            countryId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Currency ID
        # @var int
        # @readonly
        self.currencyId = currencyId

        # Price
        # @var float
        self.amount = amount

        # Currency
        # @var string
        self.currency = currency

        # Currency Sign
        # @var string
        self.currencySign = currencySign

        # Country ID
        # @var int
        self.countryId = countryId


    PROPERTY_LOADERS = {
        'currencyId': getXmlNodeInt, 
        'amount': getXmlNodeFloat, 
        'currency': getXmlNodeText, 
        'currencySign': getXmlNodeText, 
        'countryId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPrice.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPrice")
        kparams.addFloatIfDefined("amount", self.amount)
        kparams.addStringIfDefined("currency", self.currency)
        kparams.addStringIfDefined("currencySign", self.currencySign)
        kparams.addIntIfDefined("countryId", self.countryId)
        return kparams

    def getCurrencyId(self):
        return self.currencyId

    def getAmount(self):
        return self.amount

    def setAmount(self, newAmount):
        self.amount = newAmount

    def getCurrency(self):
        return self.currency

    def setCurrency(self, newCurrency):
        self.currency = newCurrency

    def getCurrencySign(self):
        return self.currencySign

    def setCurrencySign(self, newCurrencySign):
        self.currencySign = newCurrencySign

    def getCountryId(self):
        return self.countryId

    def setCountryId(self, newCountryId):
        self.countryId = newCountryId


# @package Kaltura
# @subpackage Client
class KalturaPriceDetails(KalturaObjectBase):
    """Price details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            price=NotImplemented,
            multiCurrencyPrice=NotImplemented,
            descriptions=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The price code identifier
        # @var int
        # @readonly
        self.id = id

        # The price code name
        # @var string
        self.name = name

        # The price
        # @var KalturaPrice
        # @readonly
        self.price = price

        # Multi currency prices for all countries and currencies
        # @var array of KalturaPrice
        self.multiCurrencyPrice = multiCurrencyPrice

        # A list of the descriptions for this price on different languages (language code and translation)
        # @var array of KalturaTranslationToken
        self.descriptions = descriptions


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'price': (KalturaObjectFactory.create, 'KalturaPrice'), 
        'multiCurrencyPrice': (KalturaObjectFactory.createArray, 'KalturaPrice'), 
        'descriptions': (KalturaObjectFactory.createArray, 'KalturaTranslationToken'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPriceDetails.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPriceDetails")
        kparams.addStringIfDefined("name", self.name)
        kparams.addArrayIfDefined("multiCurrencyPrice", self.multiCurrencyPrice)
        kparams.addArrayIfDefined("descriptions", self.descriptions)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getPrice(self):
        return self.price

    def getMultiCurrencyPrice(self):
        return self.multiCurrencyPrice

    def setMultiCurrencyPrice(self, newMultiCurrencyPrice):
        self.multiCurrencyPrice = newMultiCurrencyPrice

    def getDescriptions(self):
        return self.descriptions

    def setDescriptions(self, newDescriptions):
        self.descriptions = newDescriptions


# @package Kaltura
# @subpackage Client
class KalturaPreviewModule(KalturaObjectBase):
    """Preview module"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            lifeCycle=NotImplemented,
            nonRenewablePeriod=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Preview module identifier
        # @var int
        # @readonly
        self.id = id

        # Preview module name
        # @var string
        self.name = name

        # Preview module life cycle - for how long the preview module is active
        # @var int
        self.lifeCycle = lifeCycle

        # The time you can&#39;t buy the item to which the preview module is assigned to again
        # @var int
        self.nonRenewablePeriod = nonRenewablePeriod


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'lifeCycle': getXmlNodeInt, 
        'nonRenewablePeriod': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPreviewModule.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPreviewModule")
        kparams.addStringIfDefined("name", self.name)
        kparams.addIntIfDefined("lifeCycle", self.lifeCycle)
        kparams.addIntIfDefined("nonRenewablePeriod", self.nonRenewablePeriod)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getLifeCycle(self):
        return self.lifeCycle

    def setLifeCycle(self, newLifeCycle):
        self.lifeCycle = newLifeCycle

    def getNonRenewablePeriod(self):
        return self.nonRenewablePeriod

    def setNonRenewablePeriod(self, newNonRenewablePeriod):
        self.nonRenewablePeriod = newNonRenewablePeriod


# @package Kaltura
# @subpackage Client
class KalturaPremiumService(KalturaObjectBase):
    """Premium service"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Service identifier
        # @var int
        self.id = id

        # Service name / description
        # @var string
        self.name = name


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPremiumService.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPremiumService")
        kparams.addIntIfDefined("id", self.id)
        kparams.addStringIfDefined("name", self.name)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName


# @package Kaltura
# @subpackage Client
class KalturaSubscriptionCouponGroup(KalturaObjectBase):
    """Coupons group details"""

    def __init__(self,
            id=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Coupon group identifier
        # @var int
        self.id = id

        # The first date the coupons in this coupons group are valid
        # @var int
        self.startDate = startDate

        # The last date the coupons in this coupons group are valid
        # @var int
        self.endDate = endDate


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'startDate': getXmlNodeInt, 
        'endDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSubscriptionCouponGroup.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSubscriptionCouponGroup")
        kparams.addIntIfDefined("id", self.id)
        kparams.addIntIfDefined("startDate", self.startDate)
        kparams.addIntIfDefined("endDate", self.endDate)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getStartDate(self):
        return self.startDate

    def setStartDate(self, newStartDate):
        self.startDate = newStartDate

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate


# @package Kaltura
# @subpackage Client
class KalturaSubscription(KalturaOTTObjectSupportNullable):
    """Subscription details"""

    def __init__(self,
            id=NotImplemented,
            channels=NotImplemented,
            channelsIds=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            fileTypes=NotImplemented,
            fileTypesIds=NotImplemented,
            isRenewable=NotImplemented,
            renewalsNumber=NotImplemented,
            isInfiniteRenewal=NotImplemented,
            price=NotImplemented,
            discountModule=NotImplemented,
            internalDiscountModuleId=NotImplemented,
            name=NotImplemented,
            multilingualName=NotImplemented,
            description=NotImplemented,
            multilingualDescription=NotImplemented,
            mediaId=NotImplemented,
            prorityInOrder=NotImplemented,
            pricePlanIds=NotImplemented,
            previewModule=NotImplemented,
            previewModuleId=NotImplemented,
            householdLimitationsId=NotImplemented,
            gracePeriodMinutes=NotImplemented,
            premiumServices=NotImplemented,
            maxViewsNumber=NotImplemented,
            viewLifeCycle=NotImplemented,
            waiverPeriod=NotImplemented,
            isWaiverEnabled=NotImplemented,
            userTypes=NotImplemented,
            couponsGroups=NotImplemented,
            subscriptionCouponGroup=NotImplemented,
            productCodes=NotImplemented,
            dependencyType=NotImplemented,
            externalId=NotImplemented,
            isCancellationBlocked=NotImplemented,
            preSaleDate=NotImplemented,
            adsPolicy=NotImplemented,
            adsParam=NotImplemented,
            isActive=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented):
        KalturaOTTObjectSupportNullable.__init__(self)

        # Subscription identifier
        # @var string
        self.id = id

        # A list of channels associated with this subscription
        # @var array of KalturaBaseChannel
        # @readonly
        self.channels = channels

        # Comma separated channels Ids associated with this subscription
        # @var string
        self.channelsIds = channelsIds

        # The first date the subscription is available for purchasing
        # @var int
        self.startDate = startDate

        # The last date the subscription is available for purchasing
        # @var int
        self.endDate = endDate

        # A list of file types identifiers that are supported in this subscription
        # @var array of KalturaIntegerValue
        # @readonly
        self.fileTypes = fileTypes

        # Comma separated file types identifiers that are supported in this subscription
        # @var string
        self.fileTypesIds = fileTypesIds

        # Denotes whether or not this subscription can be renewed
        # @var bool
        # @readonly
        self.isRenewable = isRenewable

        # Defines the number of times this subscription will be renewed
        # @var int
        # @readonly
        self.renewalsNumber = renewalsNumber

        # Indicates whether the subscription will renew forever
        # @var bool
        # @readonly
        self.isInfiniteRenewal = isInfiniteRenewal

        # The price of the subscription
        # @var KalturaPriceDetails
        # @readonly
        self.price = price

        # The internal discount module for the subscription
        # @var KalturaDiscountModule
        # @readonly
        self.discountModule = discountModule

        # The internal discount module identifier for the subscription
        # @var int
        self.internalDiscountModuleId = internalDiscountModuleId

        # Name of the subscription
        # @var string
        # @readonly
        self.name = name

        # Name of the subscription
        # @var array of KalturaTranslationToken
        self.multilingualName = multilingualName

        # description of the subscription
        # @var string
        # @readonly
        self.description = description

        # description of the subscription
        # @var array of KalturaTranslationToken
        self.multilingualDescription = multilingualDescription

        # Identifier of the media associated with the subscription
        # @var int
        # @readonly
        self.mediaId = mediaId

        # Subscription order (when returned in methods that retrieve subscriptions)
        # @var int
        self.prorityInOrder = prorityInOrder

        # Comma separated subscription price plan IDs
        # @var string
        self.pricePlanIds = pricePlanIds

        # Subscription preview module
        # @var KalturaPreviewModule
        # @readonly
        self.previewModule = previewModule

        # Subscription preview module identifier
        # @var int
        self.previewModuleId = previewModuleId

        # The household limitation module identifier associated with this subscription
        # @var int
        self.householdLimitationsId = householdLimitationsId

        # The subscription grace period in minutes
        # @var int
        self.gracePeriodMinutes = gracePeriodMinutes

        # List of premium services included in the subscription
        # @var array of KalturaPremiumService
        self.premiumServices = premiumServices

        # The maximum number of times an item in this usage module can be viewed
        # @var int
        # @readonly
        self.maxViewsNumber = maxViewsNumber

        # The amount time an item is available for viewing since a user started watching the item
        # @var int
        # @readonly
        self.viewLifeCycle = viewLifeCycle

        # Time period during which the end user can waive his rights to cancel a purchase. When the time period is passed, the purchase can no longer be cancelled
        # @var int
        # @readonly
        self.waiverPeriod = waiverPeriod

        # Indicates whether or not the end user has the right to waive his rights to cancel a purchase
        # @var bool
        # @readonly
        self.isWaiverEnabled = isWaiverEnabled

        # List of permitted user types for the subscription
        # @var array of KalturaOTTUserType
        # @readonly
        self.userTypes = userTypes

        # List of Coupons group
        # @var array of KalturaCouponsGroup
        # @readonly
        self.couponsGroups = couponsGroups

        # List of subscription Coupons group
        # @var array of KalturaSubscriptionCouponGroup
        self.subscriptionCouponGroup = subscriptionCouponGroup

        # List of Subscription product codes
        # @var array of KalturaProductCode
        self.productCodes = productCodes

        # Dependency Type
        # @var KalturaSubscriptionDependencyType
        self.dependencyType = dependencyType

        # External ID
        # @var string
        self.externalId = externalId

        # Is cancellation blocked for the subscription
        # @var bool
        self.isCancellationBlocked = isCancellationBlocked

        # The Pre-Sale date the subscription is available for purchasing
        # @var int
        self.preSaleDate = preSaleDate

        # Ads policy
        # @var KalturaAdsPolicy
        self.adsPolicy = adsPolicy

        # The parameters to pass to the ads server
        # @var string
        self.adsParam = adsParam

        # Is active subscription
        # @var bool
        self.isActive = isActive

        # Specifies when was the Subscription created. Date and time represented as epoch.
        # @var int
        # @readonly
        self.createDate = createDate

        # Specifies when was the Subscription last updated. Date and time represented as epoch.
        # @var int
        # @readonly
        self.updateDate = updateDate


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'channels': (KalturaObjectFactory.createArray, 'KalturaBaseChannel'), 
        'channelsIds': getXmlNodeText, 
        'startDate': getXmlNodeInt, 
        'endDate': getXmlNodeInt, 
        'fileTypes': (KalturaObjectFactory.createArray, 'KalturaIntegerValue'), 
        'fileTypesIds': getXmlNodeText, 
        'isRenewable': getXmlNodeBool, 
        'renewalsNumber': getXmlNodeInt, 
        'isInfiniteRenewal': getXmlNodeBool, 
        'price': (KalturaObjectFactory.create, 'KalturaPriceDetails'), 
        'discountModule': (KalturaObjectFactory.create, 'KalturaDiscountModule'), 
        'internalDiscountModuleId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'multilingualName': (KalturaObjectFactory.createArray, 'KalturaTranslationToken'), 
        'description': getXmlNodeText, 
        'multilingualDescription': (KalturaObjectFactory.createArray, 'KalturaTranslationToken'), 
        'mediaId': getXmlNodeInt, 
        'prorityInOrder': getXmlNodeInt, 
        'pricePlanIds': getXmlNodeText, 
        'previewModule': (KalturaObjectFactory.create, 'KalturaPreviewModule'), 
        'previewModuleId': getXmlNodeInt, 
        'householdLimitationsId': getXmlNodeInt, 
        'gracePeriodMinutes': getXmlNodeInt, 
        'premiumServices': (KalturaObjectFactory.createArray, 'KalturaPremiumService'), 
        'maxViewsNumber': getXmlNodeInt, 
        'viewLifeCycle': getXmlNodeInt, 
        'waiverPeriod': getXmlNodeInt, 
        'isWaiverEnabled': getXmlNodeBool, 
        'userTypes': (KalturaObjectFactory.createArray, 'KalturaOTTUserType'), 
        'couponsGroups': (KalturaObjectFactory.createArray, 'KalturaCouponsGroup'), 
        'subscriptionCouponGroup': (KalturaObjectFactory.createArray, 'KalturaSubscriptionCouponGroup'), 
        'productCodes': (KalturaObjectFactory.createArray, 'KalturaProductCode'), 
        'dependencyType': (KalturaEnumsFactory.createString, "KalturaSubscriptionDependencyType"), 
        'externalId': getXmlNodeText, 
        'isCancellationBlocked': getXmlNodeBool, 
        'preSaleDate': getXmlNodeInt, 
        'adsPolicy': (KalturaEnumsFactory.createString, "KalturaAdsPolicy"), 
        'adsParam': getXmlNodeText, 
        'isActive': getXmlNodeBool, 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaOTTObjectSupportNullable.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSubscription.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOTTObjectSupportNullable.toParams(self)
        kparams.put("objectType", "KalturaSubscription")
        kparams.addStringIfDefined("id", self.id)
        kparams.addStringIfDefined("channelsIds", self.channelsIds)
        kparams.addIntIfDefined("startDate", self.startDate)
        kparams.addIntIfDefined("endDate", self.endDate)
        kparams.addStringIfDefined("fileTypesIds", self.fileTypesIds)
        kparams.addIntIfDefined("internalDiscountModuleId", self.internalDiscountModuleId)
        kparams.addArrayIfDefined("multilingualName", self.multilingualName)
        kparams.addArrayIfDefined("multilingualDescription", self.multilingualDescription)
        kparams.addIntIfDefined("prorityInOrder", self.prorityInOrder)
        kparams.addStringIfDefined("pricePlanIds", self.pricePlanIds)
        kparams.addIntIfDefined("previewModuleId", self.previewModuleId)
        kparams.addIntIfDefined("householdLimitationsId", self.householdLimitationsId)
        kparams.addIntIfDefined("gracePeriodMinutes", self.gracePeriodMinutes)
        kparams.addArrayIfDefined("premiumServices", self.premiumServices)
        kparams.addArrayIfDefined("subscriptionCouponGroup", self.subscriptionCouponGroup)
        kparams.addArrayIfDefined("productCodes", self.productCodes)
        kparams.addStringEnumIfDefined("dependencyType", self.dependencyType)
        kparams.addStringIfDefined("externalId", self.externalId)
        kparams.addBoolIfDefined("isCancellationBlocked", self.isCancellationBlocked)
        kparams.addIntIfDefined("preSaleDate", self.preSaleDate)
        kparams.addStringEnumIfDefined("adsPolicy", self.adsPolicy)
        kparams.addStringIfDefined("adsParam", self.adsParam)
        kparams.addBoolIfDefined("isActive", self.isActive)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getChannels(self):
        return self.channels

    def getChannelsIds(self):
        return self.channelsIds

    def setChannelsIds(self, newChannelsIds):
        self.channelsIds = newChannelsIds

    def getStartDate(self):
        return self.startDate

    def setStartDate(self, newStartDate):
        self.startDate = newStartDate

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate

    def getFileTypes(self):
        return self.fileTypes

    def getFileTypesIds(self):
        return self.fileTypesIds

    def setFileTypesIds(self, newFileTypesIds):
        self.fileTypesIds = newFileTypesIds

    def getIsRenewable(self):
        return self.isRenewable

    def getRenewalsNumber(self):
        return self.renewalsNumber

    def getIsInfiniteRenewal(self):
        return self.isInfiniteRenewal

    def getPrice(self):
        return self.price

    def getDiscountModule(self):
        return self.discountModule

    def getInternalDiscountModuleId(self):
        return self.internalDiscountModuleId

    def setInternalDiscountModuleId(self, newInternalDiscountModuleId):
        self.internalDiscountModuleId = newInternalDiscountModuleId

    def getName(self):
        return self.name

    def getMultilingualName(self):
        return self.multilingualName

    def setMultilingualName(self, newMultilingualName):
        self.multilingualName = newMultilingualName

    def getDescription(self):
        return self.description

    def getMultilingualDescription(self):
        return self.multilingualDescription

    def setMultilingualDescription(self, newMultilingualDescription):
        self.multilingualDescription = newMultilingualDescription

    def getMediaId(self):
        return self.mediaId

    def getProrityInOrder(self):
        return self.prorityInOrder

    def setProrityInOrder(self, newProrityInOrder):
        self.prorityInOrder = newProrityInOrder

    def getPricePlanIds(self):
        return self.pricePlanIds

    def setPricePlanIds(self, newPricePlanIds):
        self.pricePlanIds = newPricePlanIds

    def getPreviewModule(self):
        return self.previewModule

    def getPreviewModuleId(self):
        return self.previewModuleId

    def setPreviewModuleId(self, newPreviewModuleId):
        self.previewModuleId = newPreviewModuleId

    def getHouseholdLimitationsId(self):
        return self.householdLimitationsId

    def setHouseholdLimitationsId(self, newHouseholdLimitationsId):
        self.householdLimitationsId = newHouseholdLimitationsId

    def getGracePeriodMinutes(self):
        return self.gracePeriodMinutes

    def setGracePeriodMinutes(self, newGracePeriodMinutes):
        self.gracePeriodMinutes = newGracePeriodMinutes

    def getPremiumServices(self):
        return self.premiumServices

    def setPremiumServices(self, newPremiumServices):
        self.premiumServices = newPremiumServices

    def getMaxViewsNumber(self):
        return self.maxViewsNumber

    def getViewLifeCycle(self):
        return self.viewLifeCycle

    def getWaiverPeriod(self):
        return self.waiverPeriod

    def getIsWaiverEnabled(self):
        return self.isWaiverEnabled

    def getUserTypes(self):
        return self.userTypes

    def getCouponsGroups(self):
        return self.couponsGroups

    def getSubscriptionCouponGroup(self):
        return self.subscriptionCouponGroup

    def setSubscriptionCouponGroup(self, newSubscriptionCouponGroup):
        self.subscriptionCouponGroup = newSubscriptionCouponGroup

    def getProductCodes(self):
        return self.productCodes

    def setProductCodes(self, newProductCodes):
        self.productCodes = newProductCodes

    def getDependencyType(self):
        return self.dependencyType

    def setDependencyType(self, newDependencyType):
        self.dependencyType = newDependencyType

    def getExternalId(self):
        return self.externalId

    def setExternalId(self, newExternalId):
        self.externalId = newExternalId

    def getIsCancellationBlocked(self):
        return self.isCancellationBlocked

    def setIsCancellationBlocked(self, newIsCancellationBlocked):
        self.isCancellationBlocked = newIsCancellationBlocked

    def getPreSaleDate(self):
        return self.preSaleDate

    def setPreSaleDate(self, newPreSaleDate):
        self.preSaleDate = newPreSaleDate

    def getAdsPolicy(self):
        return self.adsPolicy

    def setAdsPolicy(self, newAdsPolicy):
        self.adsPolicy = newAdsPolicy

    def getAdsParam(self):
        return self.adsParam

    def setAdsParam(self, newAdsParam):
        self.adsParam = newAdsParam

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate


# @package Kaltura
# @subpackage Client
class KalturaDiscount(KalturaPrice):
    """Discount"""

    def __init__(self,
            currencyId=NotImplemented,
            amount=NotImplemented,
            currency=NotImplemented,
            currencySign=NotImplemented,
            countryId=NotImplemented,
            percentage=NotImplemented):
        KalturaPrice.__init__(self,
            currencyId,
            amount,
            currency,
            currencySign,
            countryId)

        # The discount percentage
        # @var float
        self.percentage = percentage


    PROPERTY_LOADERS = {
        'percentage': getXmlNodeFloat, 
    }

    def fromXml(self, node):
        KalturaPrice.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDiscount.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPrice.toParams(self)
        kparams.put("objectType", "KalturaDiscount")
        kparams.addFloatIfDefined("percentage", self.percentage)
        return kparams

    def getPercentage(self):
        return self.percentage

    def setPercentage(self, newPercentage):
        self.percentage = newPercentage


# @package Kaltura
# @subpackage Client
class KalturaHouseholdPremiumService(KalturaPremiumService):
    """Houshold premium service"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented):
        KalturaPremiumService.__init__(self,
            id,
            name)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaPremiumService.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdPremiumService.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPremiumService.toParams(self)
        kparams.put("objectType", "KalturaHouseholdPremiumService")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaNpvrPremiumService(KalturaPremiumService):
    """Npvr Premium Service"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            quotaInMinutes=NotImplemented):
        KalturaPremiumService.__init__(self,
            id,
            name)

        # Quota in minutes
        # @var int
        self.quotaInMinutes = quotaInMinutes


    PROPERTY_LOADERS = {
        'quotaInMinutes': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaPremiumService.fromXml(self, node)
        self.fromXmlImpl(node, KalturaNpvrPremiumService.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPremiumService.toParams(self)
        kparams.put("objectType", "KalturaNpvrPremiumService")
        kparams.addIntIfDefined("quotaInMinutes", self.quotaInMinutes)
        return kparams

    def getQuotaInMinutes(self):
        return self.quotaInMinutes

    def setQuotaInMinutes(self, newQuotaInMinutes):
        self.quotaInMinutes = newQuotaInMinutes


# @package Kaltura
# @subpackage Client
class KalturaSmsAdapterProfile(KalturaOTTObjectSupportNullable):
    """Sms adapter profile"""

    def __init__(self,
            id=NotImplemented,
            adapterUrl=NotImplemented,
            sharedSecret=NotImplemented,
            isActive=NotImplemented,
            settings=NotImplemented,
            externalIdentifier=NotImplemented,
            name=NotImplemented):
        KalturaOTTObjectSupportNullable.__init__(self)

        # id
        # @var int
        # @readonly
        self.id = id

        # adapter url
        # @var string
        self.adapterUrl = adapterUrl

        # Shared Secret
        # @var string
        self.sharedSecret = sharedSecret

        # SSO Adapter is active status
        # @var int
        self.isActive = isActive

        # SSO Adapter extra parameters
        # @var map
        self.settings = settings

        # SSO Adapter external identifier
        # @var string
        self.externalIdentifier = externalIdentifier

        # Name
        # @var string
        self.name = name


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'adapterUrl': getXmlNodeText, 
        'sharedSecret': getXmlNodeText, 
        'isActive': getXmlNodeInt, 
        'settings': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
        'externalIdentifier': getXmlNodeText, 
        'name': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaOTTObjectSupportNullable.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSmsAdapterProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOTTObjectSupportNullable.toParams(self)
        kparams.put("objectType", "KalturaSmsAdapterProfile")
        kparams.addStringIfDefined("adapterUrl", self.adapterUrl)
        kparams.addStringIfDefined("sharedSecret", self.sharedSecret)
        kparams.addIntIfDefined("isActive", self.isActive)
        kparams.addMapIfDefined("settings", self.settings)
        kparams.addStringIfDefined("externalIdentifier", self.externalIdentifier)
        kparams.addStringIfDefined("name", self.name)
        return kparams

    def getId(self):
        return self.id

    def getAdapterUrl(self):
        return self.adapterUrl

    def setAdapterUrl(self, newAdapterUrl):
        self.adapterUrl = newAdapterUrl

    def getSharedSecret(self):
        return self.sharedSecret

    def setSharedSecret(self, newSharedSecret):
        self.sharedSecret = newSharedSecret

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive

    def getSettings(self):
        return self.settings

    def setSettings(self, newSettings):
        self.settings = newSettings

    def getExternalIdentifier(self):
        return self.externalIdentifier

    def setExternalIdentifier(self, newExternalIdentifier):
        self.externalIdentifier = newExternalIdentifier

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName


# @package Kaltura
# @subpackage Client
class KalturaDynamicList(KalturaOTTObjectSupportNullable):
    def __init__(self,
            id=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            name=NotImplemented):
        KalturaOTTObjectSupportNullable.__init__(self)

        # ID
        # @var int
        # @readonly
        self.id = id

        # Create date of the DynamicList
        # @var int
        # @readonly
        self.createDate = createDate

        # Update date of the DynamicList
        # @var int
        # @readonly
        self.updateDate = updateDate

        # Name
        # @var string
        self.name = name


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
        'name': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaOTTObjectSupportNullable.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDynamicList.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOTTObjectSupportNullable.toParams(self)
        kparams.put("objectType", "KalturaDynamicList")
        kparams.addStringIfDefined("name", self.name)
        return kparams

    def getId(self):
        return self.id

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName


# @package Kaltura
# @subpackage Client
class KalturaUdidDynamicList(KalturaDynamicList):
    def __init__(self,
            id=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            name=NotImplemented):
        KalturaDynamicList.__init__(self,
            id,
            createDate,
            updateDate,
            name)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDynamicList.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUdidDynamicList.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDynamicList.toParams(self)
        kparams.put("objectType", "KalturaUdidDynamicList")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaHouseholdCoupon(KalturaOTTObjectSupportNullable):
    """Household Coupon details"""

    def __init__(self,
            code=NotImplemented,
            lastUsageDate=NotImplemented):
        KalturaOTTObjectSupportNullable.__init__(self)

        # Coupon code
        # @var string
        self.code = code

        # Last Usage Date
        # @var int
        self.lastUsageDate = lastUsageDate


    PROPERTY_LOADERS = {
        'code': getXmlNodeText, 
        'lastUsageDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaOTTObjectSupportNullable.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdCoupon.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOTTObjectSupportNullable.toParams(self)
        kparams.put("objectType", "KalturaHouseholdCoupon")
        kparams.addStringIfDefined("code", self.code)
        kparams.addIntIfDefined("lastUsageDate", self.lastUsageDate)
        return kparams

    def getCode(self):
        return self.code

    def setCode(self, newCode):
        self.code = newCode

    def getLastUsageDate(self):
        return self.lastUsageDate

    def setLastUsageDate(self, newLastUsageDate):
        self.lastUsageDate = newLastUsageDate


# @package Kaltura
# @subpackage Client
class KalturaPluginData(KalturaObjectBase):
    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPluginData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPluginData")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDrmPlaybackPluginData(KalturaPluginData):
    def __init__(self,
            scheme=NotImplemented,
            licenseURL=NotImplemented,
            dynamicData=NotImplemented):
        KalturaPluginData.__init__(self)

        # Scheme
        # @var KalturaDrmSchemeName
        self.scheme = scheme

        # License URL
        # @var string
        self.licenseURL = licenseURL

        # Dynamic data
        # @var map
        self.dynamicData = dynamicData


    PROPERTY_LOADERS = {
        'scheme': (KalturaEnumsFactory.createString, "KalturaDrmSchemeName"), 
        'licenseURL': getXmlNodeText, 
        'dynamicData': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
    }

    def fromXml(self, node):
        KalturaPluginData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDrmPlaybackPluginData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPluginData.toParams(self)
        kparams.put("objectType", "KalturaDrmPlaybackPluginData")
        kparams.addStringEnumIfDefined("scheme", self.scheme)
        kparams.addStringIfDefined("licenseURL", self.licenseURL)
        kparams.addMapIfDefined("dynamicData", self.dynamicData)
        return kparams

    def getScheme(self):
        return self.scheme

    def setScheme(self, newScheme):
        self.scheme = newScheme

    def getLicenseURL(self):
        return self.licenseURL

    def setLicenseURL(self, newLicenseURL):
        self.licenseURL = newLicenseURL

    def getDynamicData(self):
        return self.dynamicData

    def setDynamicData(self, newDynamicData):
        self.dynamicData = newDynamicData


# @package Kaltura
# @subpackage Client
class KalturaCustomDrmPlaybackPluginData(KalturaDrmPlaybackPluginData):
    def __init__(self,
            scheme=NotImplemented,
            licenseURL=NotImplemented,
            dynamicData=NotImplemented,
            data=NotImplemented):
        KalturaDrmPlaybackPluginData.__init__(self,
            scheme,
            licenseURL,
            dynamicData)

        # Custom DRM license data
        # @var string
        self.data = data


    PROPERTY_LOADERS = {
        'data': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaDrmPlaybackPluginData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCustomDrmPlaybackPluginData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDrmPlaybackPluginData.toParams(self)
        kparams.put("objectType", "KalturaCustomDrmPlaybackPluginData")
        kparams.addStringIfDefined("data", self.data)
        return kparams

    def getData(self):
        return self.data

    def setData(self, newData):
        self.data = newData


# @package Kaltura
# @subpackage Client
class KalturaHouseholdDevice(KalturaOTTObjectSupportNullable):
    """Device details"""

    def __init__(self,
            householdId=NotImplemented,
            udid=NotImplemented,
            name=NotImplemented,
            brandId=NotImplemented,
            activatedOn=NotImplemented,
            status=NotImplemented,
            deviceFamilyId=NotImplemented,
            drm=NotImplemented,
            externalId=NotImplemented,
            macAddress=NotImplemented,
            dynamicData=NotImplemented,
            model=NotImplemented,
            manufacturer=NotImplemented,
            manufacturerId=NotImplemented,
            lastActivityTime=NotImplemented):
        KalturaOTTObjectSupportNullable.__init__(self)

        # Household identifier
        # @var int
        self.householdId = householdId

        # Device UDID
        # @var string
        # @insertonly
        self.udid = udid

        # Device name
        # @var string
        self.name = name

        # Device brand identifier
        # @var int
        self.brandId = brandId

        # Device activation date (epoch)
        # @var int
        self.activatedOn = activatedOn

        # Device state
        # @var KalturaDeviceStatus
        # @readonly
        self.status = status

        # Device family id
        # @var int
        # @readonly
        self.deviceFamilyId = deviceFamilyId

        # Device DRM data
        # @var KalturaCustomDrmPlaybackPluginData
        # @readonly
        self.drm = drm

        # external Id
        # @var string
        self.externalId = externalId

        # mac address
        # @var string
        self.macAddress = macAddress

        # Dynamic data
        # @var map
        self.dynamicData = dynamicData

        # model
        # @var string
        self.model = model

        # manufacturer
        # @var string
        self.manufacturer = manufacturer

        # manufacturer Id, read only
        # @var int
        # @readonly
        self.manufacturerId = manufacturerId

        # Last Activity Time, read only
        # @var int
        # @readonly
        self.lastActivityTime = lastActivityTime


    PROPERTY_LOADERS = {
        'householdId': getXmlNodeInt, 
        'udid': getXmlNodeText, 
        'name': getXmlNodeText, 
        'brandId': getXmlNodeInt, 
        'activatedOn': getXmlNodeInt, 
        'status': (KalturaEnumsFactory.createString, "KalturaDeviceStatus"), 
        'deviceFamilyId': getXmlNodeInt, 
        'drm': (KalturaObjectFactory.create, 'KalturaCustomDrmPlaybackPluginData'), 
        'externalId': getXmlNodeText, 
        'macAddress': getXmlNodeText, 
        'dynamicData': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
        'model': getXmlNodeText, 
        'manufacturer': getXmlNodeText, 
        'manufacturerId': getXmlNodeInt, 
        'lastActivityTime': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaOTTObjectSupportNullable.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdDevice.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOTTObjectSupportNullable.toParams(self)
        kparams.put("objectType", "KalturaHouseholdDevice")
        kparams.addIntIfDefined("householdId", self.householdId)
        kparams.addStringIfDefined("udid", self.udid)
        kparams.addStringIfDefined("name", self.name)
        kparams.addIntIfDefined("brandId", self.brandId)
        kparams.addIntIfDefined("activatedOn", self.activatedOn)
        kparams.addStringIfDefined("externalId", self.externalId)
        kparams.addStringIfDefined("macAddress", self.macAddress)
        kparams.addMapIfDefined("dynamicData", self.dynamicData)
        kparams.addStringIfDefined("model", self.model)
        kparams.addStringIfDefined("manufacturer", self.manufacturer)
        return kparams

    def getHouseholdId(self):
        return self.householdId

    def setHouseholdId(self, newHouseholdId):
        self.householdId = newHouseholdId

    def getUdid(self):
        return self.udid

    def setUdid(self, newUdid):
        self.udid = newUdid

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getBrandId(self):
        return self.brandId

    def setBrandId(self, newBrandId):
        self.brandId = newBrandId

    def getActivatedOn(self):
        return self.activatedOn

    def setActivatedOn(self, newActivatedOn):
        self.activatedOn = newActivatedOn

    def getStatus(self):
        return self.status

    def getDeviceFamilyId(self):
        return self.deviceFamilyId

    def getDrm(self):
        return self.drm

    def getExternalId(self):
        return self.externalId

    def setExternalId(self, newExternalId):
        self.externalId = newExternalId

    def getMacAddress(self):
        return self.macAddress

    def setMacAddress(self, newMacAddress):
        self.macAddress = newMacAddress

    def getDynamicData(self):
        return self.dynamicData

    def setDynamicData(self, newDynamicData):
        self.dynamicData = newDynamicData

    def getModel(self):
        return self.model

    def setModel(self, newModel):
        self.model = newModel

    def getManufacturer(self):
        return self.manufacturer

    def setManufacturer(self, newManufacturer):
        self.manufacturer = newManufacturer

    def getManufacturerId(self):
        return self.manufacturerId

    def getLastActivityTime(self):
        return self.lastActivityTime


# @package Kaltura
# @subpackage Client
class KalturaFairPlayPlaybackPluginData(KalturaDrmPlaybackPluginData):
    def __init__(self,
            scheme=NotImplemented,
            licenseURL=NotImplemented,
            dynamicData=NotImplemented,
            certificate=NotImplemented):
        KalturaDrmPlaybackPluginData.__init__(self,
            scheme,
            licenseURL,
            dynamicData)

        # Custom data string
        # @var string
        self.certificate = certificate


    PROPERTY_LOADERS = {
        'certificate': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaDrmPlaybackPluginData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFairPlayPlaybackPluginData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDrmPlaybackPluginData.toParams(self)
        kparams.put("objectType", "KalturaFairPlayPlaybackPluginData")
        kparams.addStringIfDefined("certificate", self.certificate)
        return kparams

    def getCertificate(self):
        return self.certificate

    def setCertificate(self, newCertificate):
        self.certificate = newCertificate


# @package Kaltura
# @subpackage Client
class KalturaUnifiedChannel(KalturaOTTObjectSupportNullable):
    def __init__(self,
            id=NotImplemented,
            type=NotImplemented):
        KalturaOTTObjectSupportNullable.__init__(self)

        # Channel&#160;identifier
        # @var int
        self.id = id

        # Channel Type
        # @var KalturaChannelType
        self.type = type


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'type': (KalturaEnumsFactory.createString, "KalturaChannelType"), 
    }

    def fromXml(self, node):
        KalturaOTTObjectSupportNullable.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUnifiedChannel.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOTTObjectSupportNullable.toParams(self)
        kparams.put("objectType", "KalturaUnifiedChannel")
        kparams.addIntIfDefined("id", self.id)
        kparams.addStringEnumIfDefined("type", self.type)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType


# @package Kaltura
# @subpackage Client
class KalturaCategoryItem(KalturaOTTObjectSupportNullable):
    """Category details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            multilingualName=NotImplemented,
            parentId=NotImplemented,
            childrenIds=NotImplemented,
            unifiedChannels=NotImplemented,
            dynamicData=NotImplemented,
            updateDate=NotImplemented,
            isActive=NotImplemented,
            startDateInSeconds=NotImplemented,
            endDateInSeconds=NotImplemented,
            type=NotImplemented,
            versionId=NotImplemented,
            virtualAssetId=NotImplemented,
            referenceId=NotImplemented):
        KalturaOTTObjectSupportNullable.__init__(self)

        # Unique identifier for the category
        # @var int
        # @readonly
        self.id = id

        # Category name
        # @var string
        # @readonly
        self.name = name

        # Category name
        # @var array of KalturaTranslationToken
        self.multilingualName = multilingualName

        # Category parent identifier
        # @var int
        # @readonly
        self.parentId = parentId

        # Comma separated list of child categories&#39; Ids.
        # @var string
        self.childrenIds = childrenIds

        # List of unified Channels.
        # @var array of KalturaUnifiedChannel
        self.unifiedChannels = unifiedChannels

        # Dynamic data
        # @var map
        self.dynamicData = dynamicData

        # Specifies when was the Category last updated. Date and time represented as epoch.
        # @var int
        # @readonly
        self.updateDate = updateDate

        # Category active status
        # @var bool
        self.isActive = isActive

        # Start date in seconds
        # @var int
        self.startDateInSeconds = startDateInSeconds

        # End date in seconds
        # @var int
        self.endDateInSeconds = endDateInSeconds

        # Category type
        # @var string
        # @insertonly
        self.type = type

        # Unique identifier for the category version
        # @var int
        # @readonly
        self.versionId = versionId

        # Virtual asset id
        # @var int
        # @readonly
        self.virtualAssetId = virtualAssetId

        # Category reference identifier
        # @var string
        self.referenceId = referenceId


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'multilingualName': (KalturaObjectFactory.createArray, 'KalturaTranslationToken'), 
        'parentId': getXmlNodeInt, 
        'childrenIds': getXmlNodeText, 
        'unifiedChannels': (KalturaObjectFactory.createArray, 'KalturaUnifiedChannel'), 
        'dynamicData': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
        'updateDate': getXmlNodeInt, 
        'isActive': getXmlNodeBool, 
        'startDateInSeconds': getXmlNodeInt, 
        'endDateInSeconds': getXmlNodeInt, 
        'type': getXmlNodeText, 
        'versionId': getXmlNodeInt, 
        'virtualAssetId': getXmlNodeInt, 
        'referenceId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaOTTObjectSupportNullable.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryItem.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOTTObjectSupportNullable.toParams(self)
        kparams.put("objectType", "KalturaCategoryItem")
        kparams.addArrayIfDefined("multilingualName", self.multilingualName)
        kparams.addStringIfDefined("childrenIds", self.childrenIds)
        kparams.addArrayIfDefined("unifiedChannels", self.unifiedChannels)
        kparams.addMapIfDefined("dynamicData", self.dynamicData)
        kparams.addBoolIfDefined("isActive", self.isActive)
        kparams.addIntIfDefined("startDateInSeconds", self.startDateInSeconds)
        kparams.addIntIfDefined("endDateInSeconds", self.endDateInSeconds)
        kparams.addStringIfDefined("type", self.type)
        kparams.addStringIfDefined("referenceId", self.referenceId)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def getMultilingualName(self):
        return self.multilingualName

    def setMultilingualName(self, newMultilingualName):
        self.multilingualName = newMultilingualName

    def getParentId(self):
        return self.parentId

    def getChildrenIds(self):
        return self.childrenIds

    def setChildrenIds(self, newChildrenIds):
        self.childrenIds = newChildrenIds

    def getUnifiedChannels(self):
        return self.unifiedChannels

    def setUnifiedChannels(self, newUnifiedChannels):
        self.unifiedChannels = newUnifiedChannels

    def getDynamicData(self):
        return self.dynamicData

    def setDynamicData(self, newDynamicData):
        self.dynamicData = newDynamicData

    def getUpdateDate(self):
        return self.updateDate

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive

    def getStartDateInSeconds(self):
        return self.startDateInSeconds

    def setStartDateInSeconds(self, newStartDateInSeconds):
        self.startDateInSeconds = newStartDateInSeconds

    def getEndDateInSeconds(self):
        return self.endDateInSeconds

    def setEndDateInSeconds(self, newEndDateInSeconds):
        self.endDateInSeconds = newEndDateInSeconds

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getVersionId(self):
        return self.versionId

    def getVirtualAssetId(self):
        return self.virtualAssetId

    def getReferenceId(self):
        return self.referenceId

    def setReferenceId(self, newReferenceId):
        self.referenceId = newReferenceId


# @package Kaltura
# @subpackage Client
class KalturaUnifiedChannelInfo(KalturaUnifiedChannel):
    def __init__(self,
            id=NotImplemented,
            type=NotImplemented,
            name=NotImplemented,
            startDateInSeconds=NotImplemented,
            endDateInSeconds=NotImplemented):
        KalturaUnifiedChannel.__init__(self,
            id,
            type)

        # Channel&#160;name
        # @var string
        self.name = name

        # Start date in seconds
        # @var int
        self.startDateInSeconds = startDateInSeconds

        # End date in seconds
        # @var int
        self.endDateInSeconds = endDateInSeconds


    PROPERTY_LOADERS = {
        'name': getXmlNodeText, 
        'startDateInSeconds': getXmlNodeInt, 
        'endDateInSeconds': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaUnifiedChannel.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUnifiedChannelInfo.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUnifiedChannel.toParams(self)
        kparams.put("objectType", "KalturaUnifiedChannelInfo")
        kparams.addStringIfDefined("name", self.name)
        kparams.addIntIfDefined("startDateInSeconds", self.startDateInSeconds)
        kparams.addIntIfDefined("endDateInSeconds", self.endDateInSeconds)
        return kparams

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getStartDateInSeconds(self):
        return self.startDateInSeconds

    def setStartDateInSeconds(self, newStartDateInSeconds):
        self.startDateInSeconds = newStartDateInSeconds

    def getEndDateInSeconds(self):
        return self.endDateInSeconds

    def setEndDateInSeconds(self, newEndDateInSeconds):
        self.endDateInSeconds = newEndDateInSeconds


# @package Kaltura
# @subpackage Client
class KalturaCategoryVersion(KalturaOTTObjectSupportNullable):
    """Category details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            treeId=NotImplemented,
            state=NotImplemented,
            baseVersionId=NotImplemented,
            categoryRootId=NotImplemented,
            defaultDate=NotImplemented,
            updaterId=NotImplemented,
            comment=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented):
        KalturaOTTObjectSupportNullable.__init__(self)

        # Unique identifier for the category version
        # @var int
        # @readonly
        self.id = id

        # Category version name
        # @var string
        self.name = name

        # Category tree identifier
        # @var int
        # @readonly
        self.treeId = treeId

        # The category version state
        # @var KalturaCategoryVersionState
        # @readonly
        self.state = state

        # The version id that this version was created from
        # @var int
        # @insertonly
        self.baseVersionId = baseVersionId

        # The root of category item id that was created for this version
        # @var int
        # @readonly
        self.categoryRootId = categoryRootId

        # The date that this version became default represented as epoch.
        # @var int
        # @readonly
        self.defaultDate = defaultDate

        # Last updater user id.
        # @var int
        # @readonly
        self.updaterId = updaterId

        # Comment.
        # @var string
        self.comment = comment

        # The date that this version was created represented as epoch.
        # @var int
        # @readonly
        self.createDate = createDate

        # The date that this version was last updated represented as epoch.
        # @var int
        # @readonly
        self.updateDate = updateDate


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'treeId': getXmlNodeInt, 
        'state': (KalturaEnumsFactory.createString, "KalturaCategoryVersionState"), 
        'baseVersionId': getXmlNodeInt, 
        'categoryRootId': getXmlNodeInt, 
        'defaultDate': getXmlNodeInt, 
        'updaterId': getXmlNodeInt, 
        'comment': getXmlNodeText, 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaOTTObjectSupportNullable.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryVersion.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOTTObjectSupportNullable.toParams(self)
        kparams.put("objectType", "KalturaCategoryVersion")
        kparams.addStringIfDefined("name", self.name)
        kparams.addIntIfDefined("baseVersionId", self.baseVersionId)
        kparams.addStringIfDefined("comment", self.comment)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getTreeId(self):
        return self.treeId

    def getState(self):
        return self.state

    def getBaseVersionId(self):
        return self.baseVersionId

    def setBaseVersionId(self, newBaseVersionId):
        self.baseVersionId = newBaseVersionId

    def getCategoryRootId(self):
        return self.categoryRootId

    def getDefaultDate(self):
        return self.defaultDate

    def getUpdaterId(self):
        return self.updaterId

    def getComment(self):
        return self.comment

    def setComment(self, newComment):
        self.comment = newComment

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate


# @package Kaltura
# @subpackage Client
class KalturaRule(KalturaOTTObjectSupportNullable):
    """Rule base"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            label=NotImplemented):
        KalturaOTTObjectSupportNullable.__init__(self)

        # ID
        # @var int
        # @readonly
        self.id = id

        # Name
        # @var string
        self.name = name

        # Description
        # @var string
        self.description = description

        # Label
        # @var string
        self.label = label


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'description': getXmlNodeText, 
        'label': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaOTTObjectSupportNullable.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRule.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOTTObjectSupportNullable.toParams(self)
        kparams.put("objectType", "KalturaRule")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("description", self.description)
        kparams.addStringIfDefined("label", self.label)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getLabel(self):
        return self.label

    def setLabel(self, newLabel):
        self.label = newLabel


# @package Kaltura
# @subpackage Client
class KalturaAssetRuleBase(KalturaRule):
    """Asset rule base"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            label=NotImplemented):
        KalturaRule.__init__(self,
            id,
            name,
            description,
            label)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaRule.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetRuleBase.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRule.toParams(self)
        kparams.put("objectType", "KalturaAssetRuleBase")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaCondition(KalturaObjectBase):
    """Condition"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The type of the condition
        # @var KalturaRuleConditionType
        # @readonly
        self.type = type

        # Description
        # @var string
        self.description = description


    PROPERTY_LOADERS = {
        'type': (KalturaEnumsFactory.createString, "KalturaRuleConditionType"), 
        'description': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCondition")
        kparams.addStringIfDefined("description", self.description)
        return kparams

    def getType(self):
        return self.type

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription


# @package Kaltura
# @subpackage Client
class KalturaRuleAction(KalturaObjectBase):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The type of the action
        # @var KalturaRuleActionType
        # @readonly
        self.type = type

        # Description
        # @var string
        self.description = description


    PROPERTY_LOADERS = {
        'type': (KalturaEnumsFactory.createString, "KalturaRuleActionType"), 
        'description': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRuleAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaRuleAction")
        kparams.addStringIfDefined("description", self.description)
        return kparams

    def getType(self):
        return self.type

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription


# @package Kaltura
# @subpackage Client
class KalturaAssetRuleAction(KalturaRuleAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented):
        KalturaRuleAction.__init__(self,
            type,
            description)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetRuleAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRuleAction.toParams(self)
        kparams.put("objectType", "KalturaAssetRuleAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAssetRule(KalturaAssetRuleBase):
    """Asset rule"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            label=NotImplemented,
            conditions=NotImplemented,
            actions=NotImplemented,
            status=NotImplemented):
        KalturaAssetRuleBase.__init__(self,
            id,
            name,
            description,
            label)

        # List of conditions for the rule
        # @var array of KalturaCondition
        self.conditions = conditions

        # List of actions for the rule
        # @var array of KalturaAssetRuleAction
        self.actions = actions

        # List of actions for the rule
        # @var KalturaAssetRuleStatus
        # @readonly
        self.status = status


    PROPERTY_LOADERS = {
        'conditions': (KalturaObjectFactory.createArray, 'KalturaCondition'), 
        'actions': (KalturaObjectFactory.createArray, 'KalturaAssetRuleAction'), 
        'status': (KalturaEnumsFactory.createString, "KalturaAssetRuleStatus"), 
    }

    def fromXml(self, node):
        KalturaAssetRuleBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetRule.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetRuleBase.toParams(self)
        kparams.put("objectType", "KalturaAssetRule")
        kparams.addArrayIfDefined("conditions", self.conditions)
        kparams.addArrayIfDefined("actions", self.actions)
        return kparams

    def getConditions(self):
        return self.conditions

    def setConditions(self, newConditions):
        self.conditions = newConditions

    def getActions(self):
        return self.actions

    def setActions(self, newActions):
        self.actions = newActions

    def getStatus(self):
        return self.status


# @package Kaltura
# @subpackage Client
class KalturaAssetConditionBase(KalturaCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetConditionBase.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaAssetConditionBase")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAssetUserRuleAction(KalturaRuleAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented):
        KalturaRuleAction.__init__(self,
            type,
            description)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetUserRuleAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRuleAction.toParams(self)
        kparams.put("objectType", "KalturaAssetUserRuleAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAssetUserRule(KalturaAssetRuleBase):
    """Asset user rule"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            label=NotImplemented,
            conditions=NotImplemented,
            actions=NotImplemented):
        KalturaAssetRuleBase.__init__(self,
            id,
            name,
            description,
            label)

        # List of conditions for the user rule
        # @var array of KalturaAssetConditionBase
        self.conditions = conditions

        # List of actions for the user rule
        # @var array of KalturaAssetUserRuleAction
        self.actions = actions


    PROPERTY_LOADERS = {
        'conditions': (KalturaObjectFactory.createArray, 'KalturaAssetConditionBase'), 
        'actions': (KalturaObjectFactory.createArray, 'KalturaAssetUserRuleAction'), 
    }

    def fromXml(self, node):
        KalturaAssetRuleBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetUserRule.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetRuleBase.toParams(self)
        kparams.put("objectType", "KalturaAssetUserRule")
        kparams.addArrayIfDefined("conditions", self.conditions)
        kparams.addArrayIfDefined("actions", self.actions)
        return kparams

    def getConditions(self):
        return self.conditions

    def setConditions(self, newConditions):
        self.conditions = newConditions

    def getActions(self):
        return self.actions

    def setActions(self, newActions):
        self.actions = newActions


# @package Kaltura
# @subpackage Client
class KalturaAssetCondition(KalturaAssetConditionBase):
    """Asset Condition"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            ksql=NotImplemented):
        KalturaAssetConditionBase.__init__(self,
            type,
            description)

        # KSQL
        # @var string
        self.ksql = ksql


    PROPERTY_LOADERS = {
        'ksql': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaAssetConditionBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetConditionBase.toParams(self)
        kparams.put("objectType", "KalturaAssetCondition")
        kparams.addStringIfDefined("ksql", self.ksql)
        return kparams

    def getKsql(self):
        return self.ksql

    def setKsql(self, newKsql):
        self.ksql = newKsql


# @package Kaltura
# @subpackage Client
class KalturaConcurrencyCondition(KalturaAssetCondition):
    """Asset Condition"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            ksql=NotImplemented,
            limit=NotImplemented,
            concurrencyLimitationType=NotImplemented):
        KalturaAssetCondition.__init__(self,
            type,
            description,
            ksql)

        # Concurrency limitation
        # @var int
        self.limit = limit

        # Concurrency limitation type
        # @var KalturaConcurrencyLimitationType
        self.concurrencyLimitationType = concurrencyLimitationType


    PROPERTY_LOADERS = {
        'limit': getXmlNodeInt, 
        'concurrencyLimitationType': (KalturaEnumsFactory.createString, "KalturaConcurrencyLimitationType"), 
    }

    def fromXml(self, node):
        KalturaAssetCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConcurrencyCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetCondition.toParams(self)
        kparams.put("objectType", "KalturaConcurrencyCondition")
        kparams.addIntIfDefined("limit", self.limit)
        kparams.addStringEnumIfDefined("concurrencyLimitationType", self.concurrencyLimitationType)
        return kparams

    def getLimit(self):
        return self.limit

    def setLimit(self, newLimit):
        self.limit = newLimit

    def getConcurrencyLimitationType(self):
        return self.concurrencyLimitationType

    def setConcurrencyLimitationType(self, newConcurrencyLimitationType):
        self.concurrencyLimitationType = newConcurrencyLimitationType


# @package Kaltura
# @subpackage Client
class KalturaStringValueArray(KalturaObjectBase):
    def __init__(self,
            objects=NotImplemented):
        KalturaObjectBase.__init__(self)

        # List of string values
        # @var array of KalturaStringValue
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaStringValue'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaStringValueArray.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaStringValueArray")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaAssetShopCondition(KalturaAssetConditionBase):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            value=NotImplemented,
            values=NotImplemented):
        KalturaAssetConditionBase.__init__(self,
            type,
            description)

        # Shop marker&#39;s value
        # @var string
        self.value = value

        # Shop marker&#39;s values
        # @var KalturaStringValueArray
        self.values = values


    PROPERTY_LOADERS = {
        'value': getXmlNodeText, 
        'values': (KalturaObjectFactory.create, 'KalturaStringValueArray'), 
    }

    def fromXml(self, node):
        KalturaAssetConditionBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetShopCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetConditionBase.toParams(self)
        kparams.put("objectType", "KalturaAssetShopCondition")
        kparams.addStringIfDefined("value", self.value)
        kparams.addObjectIfDefined("values", self.values)
        return kparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue

    def getValues(self):
        return self.values

    def setValues(self, newValues):
        self.values = newValues


# @package Kaltura
# @subpackage Client
class KalturaSubscriptionCondition(KalturaCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            idIn=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description)

        # Comma separated subscription IDs list
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSubscriptionCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaSubscriptionCondition")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaAssetSubscriptionCondition(KalturaSubscriptionCondition):
    """AssetSubscription Condition - indicates which assets this rule is applied on by their subscriptions"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            idIn=NotImplemented):
        KalturaSubscriptionCondition.__init__(self,
            type,
            description,
            idIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaSubscriptionCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetSubscriptionCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSubscriptionCondition.toParams(self)
        kparams.put("objectType", "KalturaAssetSubscriptionCondition")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaUserSubscriptionCondition(KalturaSubscriptionCondition):
    """UserSubscription Condition - indicates which users this rule is applied on by their subscriptions"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            idIn=NotImplemented):
        KalturaSubscriptionCondition.__init__(self,
            type,
            description,
            idIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaSubscriptionCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserSubscriptionCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSubscriptionCondition.toParams(self)
        kparams.put("objectType", "KalturaUserSubscriptionCondition")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBusinessModuleCondition(KalturaCondition):
    """Business module condition"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            businessModuleType=NotImplemented,
            businessModuleId=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description)

        # Business module type
        # @var KalturaTransactionType
        self.businessModuleType = businessModuleType

        # Business module ID
        # @var int
        self.businessModuleId = businessModuleId


    PROPERTY_LOADERS = {
        'businessModuleType': (KalturaEnumsFactory.createString, "KalturaTransactionType"), 
        'businessModuleId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBusinessModuleCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaBusinessModuleCondition")
        kparams.addStringEnumIfDefined("businessModuleType", self.businessModuleType)
        kparams.addIntIfDefined("businessModuleId", self.businessModuleId)
        return kparams

    def getBusinessModuleType(self):
        return self.businessModuleType

    def setBusinessModuleType(self, newBusinessModuleType):
        self.businessModuleType = newBusinessModuleType

    def getBusinessModuleId(self):
        return self.businessModuleId

    def setBusinessModuleId(self, newBusinessModuleId):
        self.businessModuleId = newBusinessModuleId


# @package Kaltura
# @subpackage Client
class KalturaChannelCondition(KalturaCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            idIn=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description)

        # Comma separated channel IDs list
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaChannelCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaChannelCondition")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaNotCondition(KalturaCondition):
    """Not condition"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description)

        # Indicates whether to apply not on the other properties in the condition
        # @var bool
        self.not_ = not_


    PROPERTY_LOADERS = {
        'not_': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaNotCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaNotCondition")
        kparams.addBoolIfDefined("not", self.not_)
        return kparams

    def getNot_(self):
        return self.not_

    def setNot_(self, newNot_):
        self.not_ = newNot_


# @package Kaltura
# @subpackage Client
class KalturaCountryCondition(KalturaNotCondition):
    """Country condition"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            countries=NotImplemented):
        KalturaNotCondition.__init__(self,
            type,
            description,
            not_)

        # Comma separated countries IDs list
        # @var string
        self.countries = countries


    PROPERTY_LOADERS = {
        'countries': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaNotCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCountryCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaNotCondition.toParams(self)
        kparams.put("objectType", "KalturaCountryCondition")
        kparams.addStringIfDefined("countries", self.countries)
        return kparams

    def getCountries(self):
        return self.countries

    def setCountries(self, newCountries):
        self.countries = newCountries


# @package Kaltura
# @subpackage Client
class KalturaDateCondition(KalturaNotCondition):
    """Date condition"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented):
        KalturaNotCondition.__init__(self,
            type,
            description,
            not_)

        # Start date
        # @var int
        self.startDate = startDate

        # End date
        # @var int
        self.endDate = endDate


    PROPERTY_LOADERS = {
        'startDate': getXmlNodeInt, 
        'endDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaNotCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDateCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaNotCondition.toParams(self)
        kparams.put("objectType", "KalturaDateCondition")
        kparams.addIntIfDefined("startDate", self.startDate)
        kparams.addIntIfDefined("endDate", self.endDate)
        return kparams

    def getStartDate(self):
        return self.startDate

    def setStartDate(self, newStartDate):
        self.startDate = newStartDate

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate


# @package Kaltura
# @subpackage Client
class KalturaHeaderCondition(KalturaNotCondition):
    """Header condition"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            key=NotImplemented,
            value=NotImplemented):
        KalturaNotCondition.__init__(self,
            type,
            description,
            not_)

        # Header key
        # @var string
        self.key = key

        # Header value
        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'key': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaNotCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHeaderCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaNotCondition.toParams(self)
        kparams.put("objectType", "KalturaHeaderCondition")
        kparams.addStringIfDefined("key", self.key)
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getKey(self):
        return self.key

    def setKey(self, newKey):
        self.key = newKey

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaOrCondition(KalturaNotCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            conditions=NotImplemented):
        KalturaNotCondition.__init__(self,
            type,
            description,
            not_)

        # List of conditions with or between them
        # @var array of KalturaCondition
        self.conditions = conditions


    PROPERTY_LOADERS = {
        'conditions': (KalturaObjectFactory.createArray, 'KalturaCondition'), 
    }

    def fromXml(self, node):
        KalturaNotCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaOrCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaNotCondition.toParams(self)
        kparams.put("objectType", "KalturaOrCondition")
        kparams.addArrayIfDefined("conditions", self.conditions)
        return kparams

    def getConditions(self):
        return self.conditions

    def setConditions(self, newConditions):
        self.conditions = newConditions


# @package Kaltura
# @subpackage Client
class KalturaDeviceBrandCondition(KalturaCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            idIn=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description)

        # Comma separated Device Brand IDs list
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeviceBrandCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaDeviceBrandCondition")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaDeviceDynamicDataCondition(KalturaCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            key=NotImplemented,
            value=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description)

        # key
        # @var string
        self.key = key

        # value
        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'key': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeviceDynamicDataCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaDeviceDynamicDataCondition")
        kparams.addStringIfDefined("key", self.key)
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getKey(self):
        return self.key

    def setKey(self, newKey):
        self.key = newKey

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaDeviceFamilyCondition(KalturaCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            idIn=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description)

        # Comma separated Device Family IDs list
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeviceFamilyCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaDeviceFamilyCondition")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaDeviceManufacturerCondition(KalturaCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            idIn=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description)

        # Comma separated Device Manufacturer IDs list
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeviceManufacturerCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaDeviceManufacturerCondition")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaDeviceModelCondition(KalturaCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            regexEqual=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description)

        # regex of device model that is compared to
        # @var string
        self.regexEqual = regexEqual


    PROPERTY_LOADERS = {
        'regexEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeviceModelCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaDeviceModelCondition")
        kparams.addStringIfDefined("regexEqual", self.regexEqual)
        return kparams

    def getRegexEqual(self):
        return self.regexEqual

    def setRegexEqual(self, newRegexEqual):
        self.regexEqual = newRegexEqual


# @package Kaltura
# @subpackage Client
class KalturaDynamicKeysCondition(KalturaCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            key=NotImplemented,
            values=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description)

        # key
        # @var string
        self.key = key

        # comma-separated values
        # @var string
        self.values = values


    PROPERTY_LOADERS = {
        'key': getXmlNodeText, 
        'values': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDynamicKeysCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaDynamicKeysCondition")
        kparams.addStringIfDefined("key", self.key)
        kparams.addStringIfDefined("values", self.values)
        return kparams

    def getKey(self):
        return self.key

    def setKey(self, newKey):
        self.key = newKey

    def getValues(self):
        return self.values

    def setValues(self, newValues):
        self.values = newValues


# @package Kaltura
# @subpackage Client
class KalturaFileTypeCondition(KalturaCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            idIn=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description)

        # Comma separated filetype IDs list
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFileTypeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaFileTypeCondition")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaIpRangeCondition(KalturaCondition):
    """IP range condition"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            fromIP=NotImplemented,
            toIP=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description)

        # From IP address range
        # @var string
        self.fromIP = fromIP

        # TO IP address range
        # @var string
        self.toIP = toIP


    PROPERTY_LOADERS = {
        'fromIP': getXmlNodeText, 
        'toIP': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIpRangeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaIpRangeCondition")
        kparams.addStringIfDefined("fromIP", self.fromIP)
        kparams.addStringIfDefined("toIP", self.toIP)
        return kparams

    def getFromIP(self):
        return self.fromIP

    def setFromIP(self, newFromIP):
        self.fromIP = newFromIP

    def getToIP(self):
        return self.toIP

    def setToIP(self, newToIP):
        self.toIP = newToIP


# @package Kaltura
# @subpackage Client
class KalturaIpV6RangeCondition(KalturaCondition):
    """IP V6 range condition"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            fromIP=NotImplemented,
            toIP=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description)

        # From IP address range
        # @var string
        self.fromIP = fromIP

        # TO IP address range
        # @var string
        self.toIP = toIP


    PROPERTY_LOADERS = {
        'fromIP': getXmlNodeText, 
        'toIP': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIpV6RangeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaIpV6RangeCondition")
        kparams.addStringIfDefined("fromIP", self.fromIP)
        kparams.addStringIfDefined("toIP", self.toIP)
        return kparams

    def getFromIP(self):
        return self.fromIP

    def setFromIP(self, newFromIP):
        self.fromIP = newFromIP

    def getToIP(self):
        return self.toIP

    def setToIP(self, newToIP):
        self.toIP = newToIP


# @package Kaltura
# @subpackage Client
class KalturaSegmentsCondition(KalturaCondition):
    """Segments condition"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            segmentsIds=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description)

        # Comma separated segments IDs list
        # @var string
        self.segmentsIds = segmentsIds


    PROPERTY_LOADERS = {
        'segmentsIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSegmentsCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaSegmentsCondition")
        kparams.addStringIfDefined("segmentsIds", self.segmentsIds)
        return kparams

    def getSegmentsIds(self):
        return self.segmentsIds

    def setSegmentsIds(self, newSegmentsIds):
        self.segmentsIds = newSegmentsIds


# @package Kaltura
# @subpackage Client
class KalturaUdidDynamicListCondition(KalturaCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            id=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description)

        # KalturaUdidDynamicList.id
        # @var int
        self.id = id


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUdidDynamicListCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaUdidDynamicListCondition")
        kparams.addIntIfDefined("id", self.id)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId


# @package Kaltura
# @subpackage Client
class KalturaUserRoleCondition(KalturaCondition):
    """UserRole Condition - indicates which users this rule is applied on by their roles"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            idIn=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description)

        # Comma separated user role IDs list
        # @var string
        self.idIn = idIn


    PROPERTY_LOADERS = {
        'idIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserRoleCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaUserRoleCondition")
        kparams.addStringIfDefined("idIn", self.idIn)
        return kparams

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn


# @package Kaltura
# @subpackage Client
class KalturaUserSessionProfileCondition(KalturaCondition):
    """UserSessionProfile Condition"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            id=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description)

        # UserSessionProfile id
        # @var int
        self.id = id


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserSessionProfileCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaUserSessionProfileCondition")
        kparams.addIntIfDefined("id", self.id)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId


# @package Kaltura
# @subpackage Client
class KalturaAccessControlBlockAction(KalturaAssetRuleAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented):
        KalturaAssetRuleAction.__init__(self,
            type,
            description)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaAssetRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAccessControlBlockAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetRuleAction.toParams(self)
        kparams.put("objectType", "KalturaAccessControlBlockAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAllowPlaybackAction(KalturaAssetRuleAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented):
        KalturaAssetRuleAction.__init__(self,
            type,
            description)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaAssetRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAllowPlaybackAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetRuleAction.toParams(self)
        kparams.put("objectType", "KalturaAllowPlaybackAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaApplyPlaybackAdapterAction(KalturaAssetRuleAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            adapterId=NotImplemented):
        KalturaAssetRuleAction.__init__(self,
            type,
            description)

        # Playback Adapter Identifier
        # @var int
        self.adapterId = adapterId


    PROPERTY_LOADERS = {
        'adapterId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaAssetRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaApplyPlaybackAdapterAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetRuleAction.toParams(self)
        kparams.put("objectType", "KalturaApplyPlaybackAdapterAction")
        kparams.addIntIfDefined("adapterId", self.adapterId)
        return kparams

    def getAdapterId(self):
        return self.adapterId

    def setAdapterId(self, newAdapterId):
        self.adapterId = newAdapterId


# @package Kaltura
# @subpackage Client
class KalturaAssetLifeCycleTransitionAction(KalturaAssetRuleAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            assetLifeCycleRuleActionType=NotImplemented,
            assetLifeCycleRuleTransitionType=NotImplemented):
        KalturaAssetRuleAction.__init__(self,
            type,
            description)

        # Asset LifeCycle Rule Action Type
        # @var KalturaAssetLifeCycleRuleActionType
        self.assetLifeCycleRuleActionType = assetLifeCycleRuleActionType

        # Asset LifeCycle Rule Transition Type
        # @var KalturaAssetLifeCycleRuleTransitionType
        # @readonly
        self.assetLifeCycleRuleTransitionType = assetLifeCycleRuleTransitionType


    PROPERTY_LOADERS = {
        'assetLifeCycleRuleActionType': (KalturaEnumsFactory.createString, "KalturaAssetLifeCycleRuleActionType"), 
        'assetLifeCycleRuleTransitionType': (KalturaEnumsFactory.createString, "KalturaAssetLifeCycleRuleTransitionType"), 
    }

    def fromXml(self, node):
        KalturaAssetRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetLifeCycleTransitionAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetRuleAction.toParams(self)
        kparams.put("objectType", "KalturaAssetLifeCycleTransitionAction")
        kparams.addStringEnumIfDefined("assetLifeCycleRuleActionType", self.assetLifeCycleRuleActionType)
        return kparams

    def getAssetLifeCycleRuleActionType(self):
        return self.assetLifeCycleRuleActionType

    def setAssetLifeCycleRuleActionType(self, newAssetLifeCycleRuleActionType):
        self.assetLifeCycleRuleActionType = newAssetLifeCycleRuleActionType

    def getAssetLifeCycleRuleTransitionType(self):
        return self.assetLifeCycleRuleTransitionType


# @package Kaltura
# @subpackage Client
class KalturaAssetLifeCycleBuisnessModuleTransitionAction(KalturaAssetLifeCycleTransitionAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            assetLifeCycleRuleActionType=NotImplemented,
            assetLifeCycleRuleTransitionType=NotImplemented,
            fileTypeIds=NotImplemented,
            ppvIds=NotImplemented):
        KalturaAssetLifeCycleTransitionAction.__init__(self,
            type,
            description,
            assetLifeCycleRuleActionType,
            assetLifeCycleRuleTransitionType)

        # Comma separated list of fileType Ids.
        # @var string
        self.fileTypeIds = fileTypeIds

        # Comma separated list of ppv Ids.
        # @var string
        self.ppvIds = ppvIds


    PROPERTY_LOADERS = {
        'fileTypeIds': getXmlNodeText, 
        'ppvIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaAssetLifeCycleTransitionAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetLifeCycleBuisnessModuleTransitionAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetLifeCycleTransitionAction.toParams(self)
        kparams.put("objectType", "KalturaAssetLifeCycleBuisnessModuleTransitionAction")
        kparams.addStringIfDefined("fileTypeIds", self.fileTypeIds)
        kparams.addStringIfDefined("ppvIds", self.ppvIds)
        return kparams

    def getFileTypeIds(self):
        return self.fileTypeIds

    def setFileTypeIds(self, newFileTypeIds):
        self.fileTypeIds = newFileTypeIds

    def getPpvIds(self):
        return self.ppvIds

    def setPpvIds(self, newPpvIds):
        self.ppvIds = newPpvIds


# @package Kaltura
# @subpackage Client
class KalturaAssetLifeCycleTagTransitionAction(KalturaAssetLifeCycleTransitionAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            assetLifeCycleRuleActionType=NotImplemented,
            assetLifeCycleRuleTransitionType=NotImplemented,
            tagIds=NotImplemented):
        KalturaAssetLifeCycleTransitionAction.__init__(self,
            type,
            description,
            assetLifeCycleRuleActionType,
            assetLifeCycleRuleTransitionType)

        # Comma separated list of tag Ids.
        # @var string
        self.tagIds = tagIds


    PROPERTY_LOADERS = {
        'tagIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaAssetLifeCycleTransitionAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetLifeCycleTagTransitionAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetLifeCycleTransitionAction.toParams(self)
        kparams.put("objectType", "KalturaAssetLifeCycleTagTransitionAction")
        kparams.addStringIfDefined("tagIds", self.tagIds)
        return kparams

    def getTagIds(self):
        return self.tagIds

    def setTagIds(self, newTagIds):
        self.tagIds = newTagIds


# @package Kaltura
# @subpackage Client
class KalturaBlockPlaybackAction(KalturaAssetRuleAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented):
        KalturaAssetRuleAction.__init__(self,
            type,
            description)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaAssetRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBlockPlaybackAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetRuleAction.toParams(self)
        kparams.put("objectType", "KalturaBlockPlaybackAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaTimeOffsetRuleAction(KalturaAssetRuleAction):
    """Time offset action"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            offset=NotImplemented,
            timeZone=NotImplemented):
        KalturaAssetRuleAction.__init__(self,
            type,
            description)

        # Offset in seconds
        # @var int
        self.offset = offset

        # Indicates whether to add time zone offset to the time
        # @var bool
        self.timeZone = timeZone


    PROPERTY_LOADERS = {
        'offset': getXmlNodeInt, 
        'timeZone': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaAssetRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTimeOffsetRuleAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetRuleAction.toParams(self)
        kparams.put("objectType", "KalturaTimeOffsetRuleAction")
        kparams.addIntIfDefined("offset", self.offset)
        kparams.addBoolIfDefined("timeZone", self.timeZone)
        return kparams

    def getOffset(self):
        return self.offset

    def setOffset(self, newOffset):
        self.offset = newOffset

    def getTimeZone(self):
        return self.timeZone

    def setTimeZone(self, newTimeZone):
        self.timeZone = newTimeZone


# @package Kaltura
# @subpackage Client
class KalturaEndDateOffsetRuleAction(KalturaTimeOffsetRuleAction):
    """End date offset action"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            offset=NotImplemented,
            timeZone=NotImplemented):
        KalturaTimeOffsetRuleAction.__init__(self,
            type,
            description,
            offset,
            timeZone)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaTimeOffsetRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEndDateOffsetRuleAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaTimeOffsetRuleAction.toParams(self)
        kparams.put("objectType", "KalturaEndDateOffsetRuleAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaStartDateOffsetRuleAction(KalturaTimeOffsetRuleAction):
    """Start date offset action"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            offset=NotImplemented,
            timeZone=NotImplemented):
        KalturaTimeOffsetRuleAction.__init__(self,
            type,
            description,
            offset,
            timeZone)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaTimeOffsetRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaStartDateOffsetRuleAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaTimeOffsetRuleAction.toParams(self)
        kparams.put("objectType", "KalturaStartDateOffsetRuleAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFilterAction(KalturaAssetRuleAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented):
        KalturaAssetRuleAction.__init__(self,
            type,
            description)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaAssetRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetRuleAction.toParams(self)
        kparams.put("objectType", "KalturaFilterAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByAudioCodecAction(KalturaFilterAction):
    """FilterFile By AudioCodec"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            audioCodecIn=NotImplemented):
        KalturaFilterAction.__init__(self,
            type,
            description)

        # List of comma separated audioCodecs
        # @var string
        self.audioCodecIn = audioCodecIn


    PROPERTY_LOADERS = {
        'audioCodecIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilterAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByAudioCodecAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByAudioCodecAction")
        kparams.addStringIfDefined("audioCodecIn", self.audioCodecIn)
        return kparams

    def getAudioCodecIn(self):
        return self.audioCodecIn

    def setAudioCodecIn(self, newAudioCodecIn):
        self.audioCodecIn = newAudioCodecIn


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByAudioCodecInDiscoveryAction(KalturaFilterFileByAudioCodecAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            audioCodecIn=NotImplemented):
        KalturaFilterFileByAudioCodecAction.__init__(self,
            type,
            description,
            audioCodecIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilterFileByAudioCodecAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByAudioCodecInDiscoveryAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterFileByAudioCodecAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByAudioCodecInDiscoveryAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByAudioCodecInPlaybackAction(KalturaFilterFileByAudioCodecAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            audioCodecIn=NotImplemented):
        KalturaFilterFileByAudioCodecAction.__init__(self,
            type,
            description,
            audioCodecIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilterFileByAudioCodecAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByAudioCodecInPlaybackAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterFileByAudioCodecAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByAudioCodecInPlaybackAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByDynamicDataAction(KalturaFilterAction):
    """Filter File By Dynamic Data"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            key=NotImplemented,
            values=NotImplemented):
        KalturaFilterAction.__init__(self,
            type,
            description)

        # Key to be searched
        # @var string
        self.key = key

        # Comma separated values to be searched
        # @var string
        self.values = values


    PROPERTY_LOADERS = {
        'key': getXmlNodeText, 
        'values': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilterAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByDynamicDataAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByDynamicDataAction")
        kparams.addStringIfDefined("key", self.key)
        kparams.addStringIfDefined("values", self.values)
        return kparams

    def getKey(self):
        return self.key

    def setKey(self, newKey):
        self.key = newKey

    def getValues(self):
        return self.values

    def setValues(self, newValues):
        self.values = newValues


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByDynamicDataInDiscoveryAction(KalturaFilterFileByDynamicDataAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            key=NotImplemented,
            values=NotImplemented):
        KalturaFilterFileByDynamicDataAction.__init__(self,
            type,
            description,
            key,
            values)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilterFileByDynamicDataAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByDynamicDataInDiscoveryAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterFileByDynamicDataAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByDynamicDataInDiscoveryAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByDynamicDataInPlaybackAction(KalturaFilterFileByDynamicDataAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            key=NotImplemented,
            values=NotImplemented):
        KalturaFilterFileByDynamicDataAction.__init__(self,
            type,
            description,
            key,
            values)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilterFileByDynamicDataAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByDynamicDataInPlaybackAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterFileByDynamicDataAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByDynamicDataInPlaybackAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByFileTypeIdAction(KalturaFilterAction):
    """FilterFile By FileType"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            fileTypeIdIn=NotImplemented):
        KalturaFilterAction.__init__(self,
            type,
            description)

        # List of comma separated fileTypesIds
        # @var string
        self.fileTypeIdIn = fileTypeIdIn


    PROPERTY_LOADERS = {
        'fileTypeIdIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilterAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByFileTypeIdAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByFileTypeIdAction")
        kparams.addStringIfDefined("fileTypeIdIn", self.fileTypeIdIn)
        return kparams

    def getFileTypeIdIn(self):
        return self.fileTypeIdIn

    def setFileTypeIdIn(self, newFileTypeIdIn):
        self.fileTypeIdIn = newFileTypeIdIn


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByFileTypeIdForAssetTypeAction(KalturaFilterFileByFileTypeIdAction):
    """Filter file By FileType For AssetType"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            fileTypeIdIn=NotImplemented,
            assetTypeIn=NotImplemented):
        KalturaFilterFileByFileTypeIdAction.__init__(self,
            type,
            description,
            fileTypeIdIn)

        # List of comma separated assetTypes
        # @var string
        self.assetTypeIn = assetTypeIn


    PROPERTY_LOADERS = {
        'assetTypeIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilterFileByFileTypeIdAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByFileTypeIdForAssetTypeAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterFileByFileTypeIdAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByFileTypeIdForAssetTypeAction")
        kparams.addStringIfDefined("assetTypeIn", self.assetTypeIn)
        return kparams

    def getAssetTypeIn(self):
        return self.assetTypeIn

    def setAssetTypeIn(self, newAssetTypeIn):
        self.assetTypeIn = newAssetTypeIn


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByFileTypeIdForAssetTypeInDiscoveryAction(KalturaFilterFileByFileTypeIdForAssetTypeAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            fileTypeIdIn=NotImplemented,
            assetTypeIn=NotImplemented):
        KalturaFilterFileByFileTypeIdForAssetTypeAction.__init__(self,
            type,
            description,
            fileTypeIdIn,
            assetTypeIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilterFileByFileTypeIdForAssetTypeAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByFileTypeIdForAssetTypeInDiscoveryAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterFileByFileTypeIdForAssetTypeAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByFileTypeIdForAssetTypeInDiscoveryAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByFileTypeIdForAssetTypeInPlaybackAction(KalturaFilterFileByFileTypeIdForAssetTypeAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            fileTypeIdIn=NotImplemented,
            assetTypeIn=NotImplemented):
        KalturaFilterFileByFileTypeIdForAssetTypeAction.__init__(self,
            type,
            description,
            fileTypeIdIn,
            assetTypeIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilterFileByFileTypeIdForAssetTypeAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByFileTypeIdForAssetTypeInPlaybackAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterFileByFileTypeIdForAssetTypeAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByFileTypeIdForAssetTypeInPlaybackAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByFileTypeIdInDiscoveryAction(KalturaFilterFileByFileTypeIdAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            fileTypeIdIn=NotImplemented):
        KalturaFilterFileByFileTypeIdAction.__init__(self,
            type,
            description,
            fileTypeIdIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilterFileByFileTypeIdAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByFileTypeIdInDiscoveryAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterFileByFileTypeIdAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByFileTypeIdInDiscoveryAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByFileTypeIdInPlaybackAction(KalturaFilterFileByFileTypeIdAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            fileTypeIdIn=NotImplemented):
        KalturaFilterFileByFileTypeIdAction.__init__(self,
            type,
            description,
            fileTypeIdIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilterFileByFileTypeIdAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByFileTypeIdInPlaybackAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterFileByFileTypeIdAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByFileTypeIdInPlaybackAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByLabelAction(KalturaFilterAction):
    """FilterFile By Label"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            labelIn=NotImplemented):
        KalturaFilterAction.__init__(self,
            type,
            description)

        # List of comma separated labels
        # @var string
        self.labelIn = labelIn


    PROPERTY_LOADERS = {
        'labelIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilterAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByLabelAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByLabelAction")
        kparams.addStringIfDefined("labelIn", self.labelIn)
        return kparams

    def getLabelIn(self):
        return self.labelIn

    def setLabelIn(self, newLabelIn):
        self.labelIn = newLabelIn


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByLabelInDiscoveryAction(KalturaFilterFileByLabelAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            labelIn=NotImplemented):
        KalturaFilterFileByLabelAction.__init__(self,
            type,
            description,
            labelIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilterFileByLabelAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByLabelInDiscoveryAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterFileByLabelAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByLabelInDiscoveryAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByLabelInPlaybackAction(KalturaFilterFileByLabelAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            labelIn=NotImplemented):
        KalturaFilterFileByLabelAction.__init__(self,
            type,
            description,
            labelIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilterFileByLabelAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByLabelInPlaybackAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterFileByLabelAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByLabelInPlaybackAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByQualityAction(KalturaFilterAction):
    """Filter Files By their Quality"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            qualityIn=NotImplemented):
        KalturaFilterAction.__init__(self,
            type,
            description)

        # List of comma separated qualities
        # @var string
        self.qualityIn = qualityIn


    PROPERTY_LOADERS = {
        'qualityIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilterAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByQualityAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByQualityAction")
        kparams.addStringIfDefined("qualityIn", self.qualityIn)
        return kparams

    def getQualityIn(self):
        return self.qualityIn

    def setQualityIn(self, newQualityIn):
        self.qualityIn = newQualityIn


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByQualityInDiscoveryAction(KalturaFilterFileByQualityAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            qualityIn=NotImplemented):
        KalturaFilterFileByQualityAction.__init__(self,
            type,
            description,
            qualityIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilterFileByQualityAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByQualityInDiscoveryAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterFileByQualityAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByQualityInDiscoveryAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByQualityInPlaybackAction(KalturaFilterFileByQualityAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            qualityIn=NotImplemented):
        KalturaFilterFileByQualityAction.__init__(self,
            type,
            description,
            qualityIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilterFileByQualityAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByQualityInPlaybackAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterFileByQualityAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByQualityInPlaybackAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByStreamerTypeAction(KalturaFilterAction):
    """FilterFile By StreamerType"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            streamerTypeIn=NotImplemented):
        KalturaFilterAction.__init__(self,
            type,
            description)

        # List of comma separated streamerTypes
        # @var string
        self.streamerTypeIn = streamerTypeIn


    PROPERTY_LOADERS = {
        'streamerTypeIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilterAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByStreamerTypeAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByStreamerTypeAction")
        kparams.addStringIfDefined("streamerTypeIn", self.streamerTypeIn)
        return kparams

    def getStreamerTypeIn(self):
        return self.streamerTypeIn

    def setStreamerTypeIn(self, newStreamerTypeIn):
        self.streamerTypeIn = newStreamerTypeIn


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByStreamerTypeInDiscovery(KalturaFilterFileByStreamerTypeAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            streamerTypeIn=NotImplemented):
        KalturaFilterFileByStreamerTypeAction.__init__(self,
            type,
            description,
            streamerTypeIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilterFileByStreamerTypeAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByStreamerTypeInDiscovery.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterFileByStreamerTypeAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByStreamerTypeInDiscovery")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByStreamerTypeInPlayback(KalturaFilterFileByStreamerTypeAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            streamerTypeIn=NotImplemented):
        KalturaFilterFileByStreamerTypeAction.__init__(self,
            type,
            description,
            streamerTypeIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilterFileByStreamerTypeAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByStreamerTypeInPlayback.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterFileByStreamerTypeAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByStreamerTypeInPlayback")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByVideoCodecAction(KalturaFilterAction):
    """FilterFile By VideoCode"""

    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            videoCodecIn=NotImplemented):
        KalturaFilterAction.__init__(self,
            type,
            description)

        # List of comma separated videoCodecs
        # @var string
        self.videoCodecIn = videoCodecIn


    PROPERTY_LOADERS = {
        'videoCodecIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilterAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByVideoCodecAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByVideoCodecAction")
        kparams.addStringIfDefined("videoCodecIn", self.videoCodecIn)
        return kparams

    def getVideoCodecIn(self):
        return self.videoCodecIn

    def setVideoCodecIn(self, newVideoCodecIn):
        self.videoCodecIn = newVideoCodecIn


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByVideoCodecInDiscoveryAction(KalturaFilterFileByVideoCodecAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            videoCodecIn=NotImplemented):
        KalturaFilterFileByVideoCodecAction.__init__(self,
            type,
            description,
            videoCodecIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilterFileByVideoCodecAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByVideoCodecInDiscoveryAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterFileByVideoCodecAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByVideoCodecInDiscoveryAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFilterFileByVideoCodecInPlayback(KalturaFilterFileByVideoCodecAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            videoCodecIn=NotImplemented):
        KalturaFilterFileByVideoCodecAction.__init__(self,
            type,
            description,
            videoCodecIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilterFileByVideoCodecAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterFileByVideoCodecInPlayback.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterFileByVideoCodecAction.toParams(self)
        kparams.put("objectType", "KalturaFilterFileByVideoCodecInPlayback")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFilterAssetByKsqlAction(KalturaFilterAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            ksql=NotImplemented):
        KalturaFilterAction.__init__(self,
            type,
            description)

        # ksql to filter assets by
        # @var string
        self.ksql = ksql


    PROPERTY_LOADERS = {
        'ksql': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilterAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterAssetByKsqlAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilterAction.toParams(self)
        kparams.put("objectType", "KalturaFilterAssetByKsqlAction")
        kparams.addStringIfDefined("ksql", self.ksql)
        return kparams

    def getKsql(self):
        return self.ksql

    def setKsql(self, newKsql):
        self.ksql = newKsql


# @package Kaltura
# @subpackage Client
class KalturaBusinessModuleRuleAction(KalturaRuleAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented):
        KalturaRuleAction.__init__(self,
            type,
            description)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBusinessModuleRuleAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRuleAction.toParams(self)
        kparams.put("objectType", "KalturaBusinessModuleRuleAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaApplyDiscountModuleAction(KalturaBusinessModuleRuleAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            discountModuleId=NotImplemented):
        KalturaBusinessModuleRuleAction.__init__(self,
            type,
            description)

        # Discount module ID
        # @var int
        self.discountModuleId = discountModuleId


    PROPERTY_LOADERS = {
        'discountModuleId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaBusinessModuleRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaApplyDiscountModuleAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBusinessModuleRuleAction.toParams(self)
        kparams.put("objectType", "KalturaApplyDiscountModuleAction")
        kparams.addIntIfDefined("discountModuleId", self.discountModuleId)
        return kparams

    def getDiscountModuleId(self):
        return self.discountModuleId

    def setDiscountModuleId(self, newDiscountModuleId):
        self.discountModuleId = newDiscountModuleId


# @package Kaltura
# @subpackage Client
class KalturaApplyFreePlaybackAction(KalturaBusinessModuleRuleAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented):
        KalturaBusinessModuleRuleAction.__init__(self,
            type,
            description)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBusinessModuleRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaApplyFreePlaybackAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBusinessModuleRuleAction.toParams(self)
        kparams.put("objectType", "KalturaApplyFreePlaybackAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAssetUserRuleBlockAction(KalturaAssetUserRuleAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented):
        KalturaAssetUserRuleAction.__init__(self,
            type,
            description)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaAssetUserRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetUserRuleBlockAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetUserRuleAction.toParams(self)
        kparams.put("objectType", "KalturaAssetUserRuleBlockAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAssetUserRuleFilterAction(KalturaAssetUserRuleAction):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            applyOnChannel=NotImplemented):
        KalturaAssetUserRuleAction.__init__(self,
            type,
            description)

        # Indicates whether to apply on channel
        # @var bool
        self.applyOnChannel = applyOnChannel


    PROPERTY_LOADERS = {
        'applyOnChannel': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaAssetUserRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetUserRuleFilterAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetUserRuleAction.toParams(self)
        kparams.put("objectType", "KalturaAssetUserRuleFilterAction")
        kparams.addBoolIfDefined("applyOnChannel", self.applyOnChannel)
        return kparams

    def getApplyOnChannel(self):
        return self.applyOnChannel

    def setApplyOnChannel(self, newApplyOnChannel):
        self.applyOnChannel = newApplyOnChannel


# @package Kaltura
# @subpackage Client
class KalturaBusinessModuleRule(KalturaRule):
    """Business module rule"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            label=NotImplemented,
            conditions=NotImplemented,
            actions=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented):
        KalturaRule.__init__(self,
            id,
            name,
            description,
            label)

        # List of conditions for the rule
        # @var array of KalturaCondition
        self.conditions = conditions

        # List of actions for the rule
        # @var array of KalturaBusinessModuleRuleAction
        self.actions = actions

        # Create date of the rule
        # @var int
        # @readonly
        self.createDate = createDate

        # Update date of the rule
        # @var int
        # @readonly
        self.updateDate = updateDate


    PROPERTY_LOADERS = {
        'conditions': (KalturaObjectFactory.createArray, 'KalturaCondition'), 
        'actions': (KalturaObjectFactory.createArray, 'KalturaBusinessModuleRuleAction'), 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaRule.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBusinessModuleRule.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRule.toParams(self)
        kparams.put("objectType", "KalturaBusinessModuleRule")
        kparams.addArrayIfDefined("conditions", self.conditions)
        kparams.addArrayIfDefined("actions", self.actions)
        return kparams

    def getConditions(self):
        return self.conditions

    def setConditions(self, newConditions):
        self.conditions = newConditions

    def getActions(self):
        return self.actions

    def setActions(self, newActions):
        self.actions = newActions

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate


# @package Kaltura
# @subpackage Client
class KalturaTvmRule(KalturaRule):
    """TVM rule"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            label=NotImplemented,
            createDate=NotImplemented,
            ruleType=NotImplemented):
        KalturaRule.__init__(self,
            id,
            name,
            description,
            label)

        # Specifies when was the tvm rule was created. Date and time represented as epoch.
        # @var int
        # @readonly
        self.createDate = createDate

        # Specifies the tvm rule type.
        # @var KalturaTvmRuleType
        # @readonly
        self.ruleType = ruleType


    PROPERTY_LOADERS = {
        'createDate': getXmlNodeInt, 
        'ruleType': (KalturaEnumsFactory.createString, "KalturaTvmRuleType"), 
    }

    def fromXml(self, node):
        KalturaRule.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTvmRule.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRule.toParams(self)
        kparams.put("objectType", "KalturaTvmRule")
        return kparams

    def getCreateDate(self):
        return self.createDate

    def getRuleType(self):
        return self.ruleType


# @package Kaltura
# @subpackage Client
class KalturaTvmDeviceRule(KalturaTvmRule):
    """TVM geo rule"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            label=NotImplemented,
            createDate=NotImplemented,
            ruleType=NotImplemented,
            deviceBrandIds=NotImplemented):
        KalturaTvmRule.__init__(self,
            id,
            name,
            description,
            label,
            createDate,
            ruleType)

        # Comma separated list of country Ids.
        # @var string
        self.deviceBrandIds = deviceBrandIds


    PROPERTY_LOADERS = {
        'deviceBrandIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaTvmRule.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTvmDeviceRule.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaTvmRule.toParams(self)
        kparams.put("objectType", "KalturaTvmDeviceRule")
        kparams.addStringIfDefined("deviceBrandIds", self.deviceBrandIds)
        return kparams

    def getDeviceBrandIds(self):
        return self.deviceBrandIds

    def setDeviceBrandIds(self, newDeviceBrandIds):
        self.deviceBrandIds = newDeviceBrandIds


# @package Kaltura
# @subpackage Client
class KalturaTvmGeoRule(KalturaTvmRule):
    """TVM geo rule"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            label=NotImplemented,
            createDate=NotImplemented,
            ruleType=NotImplemented,
            onlyOrBut=NotImplemented,
            countryIds=NotImplemented,
            proxyRuleId=NotImplemented,
            proxyRuleName=NotImplemented,
            proxyLevelId=NotImplemented,
            proxyLevelName=NotImplemented):
        KalturaTvmRule.__init__(self,
            id,
            name,
            description,
            label,
            createDate,
            ruleType)

        # Indicates if the rule is relevent ONLY for the country ids or except country ids here. - is that true?
        # @var bool
        self.onlyOrBut = onlyOrBut

        # Comma separated list of country Ids.
        # @var string
        self.countryIds = countryIds

        # proxyRuleId - what is that?
        # @var int
        self.proxyRuleId = proxyRuleId

        # proxyRuleName - what is that?
        # @var string
        self.proxyRuleName = proxyRuleName

        # proxyLevelId - what is that?
        # @var int
        self.proxyLevelId = proxyLevelId

        # proxyLevelName - what is that?
        # @var string
        self.proxyLevelName = proxyLevelName


    PROPERTY_LOADERS = {
        'onlyOrBut': getXmlNodeBool, 
        'countryIds': getXmlNodeText, 
        'proxyRuleId': getXmlNodeInt, 
        'proxyRuleName': getXmlNodeText, 
        'proxyLevelId': getXmlNodeInt, 
        'proxyLevelName': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaTvmRule.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTvmGeoRule.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaTvmRule.toParams(self)
        kparams.put("objectType", "KalturaTvmGeoRule")
        kparams.addBoolIfDefined("onlyOrBut", self.onlyOrBut)
        kparams.addStringIfDefined("countryIds", self.countryIds)
        kparams.addIntIfDefined("proxyRuleId", self.proxyRuleId)
        kparams.addStringIfDefined("proxyRuleName", self.proxyRuleName)
        kparams.addIntIfDefined("proxyLevelId", self.proxyLevelId)
        kparams.addStringIfDefined("proxyLevelName", self.proxyLevelName)
        return kparams

    def getOnlyOrBut(self):
        return self.onlyOrBut

    def setOnlyOrBut(self, newOnlyOrBut):
        self.onlyOrBut = newOnlyOrBut

    def getCountryIds(self):
        return self.countryIds

    def setCountryIds(self, newCountryIds):
        self.countryIds = newCountryIds

    def getProxyRuleId(self):
        return self.proxyRuleId

    def setProxyRuleId(self, newProxyRuleId):
        self.proxyRuleId = newProxyRuleId

    def getProxyRuleName(self):
        return self.proxyRuleName

    def setProxyRuleName(self, newProxyRuleName):
        self.proxyRuleName = newProxyRuleName

    def getProxyLevelId(self):
        return self.proxyLevelId

    def setProxyLevelId(self, newProxyLevelId):
        self.proxyLevelId = newProxyLevelId

    def getProxyLevelName(self):
        return self.proxyLevelName

    def setProxyLevelName(self, newProxyLevelName):
        self.proxyLevelName = newProxyLevelName


# @package Kaltura
# @subpackage Client
class KalturaBasePromotion(KalturaObjectBase):
    """Base Promotion"""

    def __init__(self,
            conditions=NotImplemented):
        KalturaObjectBase.__init__(self)

        # These conditions define the Promotion that applies on
        # @var array of KalturaCondition
        self.conditions = conditions


    PROPERTY_LOADERS = {
        'conditions': (KalturaObjectFactory.createArray, 'KalturaCondition'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBasePromotion.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBasePromotion")
        kparams.addArrayIfDefined("conditions", self.conditions)
        return kparams

    def getConditions(self):
        return self.conditions

    def setConditions(self, newConditions):
        self.conditions = newConditions


# @package Kaltura
# @subpackage Client
class KalturaCampaign(KalturaOTTObjectSupportNullable):
    """Campaign"""

    def __init__(self,
            id=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            state=NotImplemented,
            promotion=NotImplemented,
            message=NotImplemented,
            collectionIdIn=NotImplemented):
        KalturaOTTObjectSupportNullable.__init__(self)

        # ID
        # @var int
        # @readonly
        self.id = id

        # Create date of the rule
        # @var int
        # @readonly
        self.createDate = createDate

        # Update date of the rule
        # @var int
        # @readonly
        self.updateDate = updateDate

        # Start date of the rule
        # @var int
        self.startDate = startDate

        # End date of the rule
        # @var int
        self.endDate = endDate

        # Name
        # @var string
        self.name = name

        # systemName
        # @var string
        self.systemName = systemName

        # Description
        # @var string
        self.description = description

        # state
        # @var KalturaObjectState
        # @readonly
        self.state = state

        # The Promotion that is promoted to the user
        # @var KalturaBasePromotion
        self.promotion = promotion

        # Free text message to the user that gives information about the campaign.
        # @var string
        self.message = message

        # Comma separated collection IDs list
        # @var string
        self.collectionIdIn = collectionIdIn


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
        'startDate': getXmlNodeInt, 
        'endDate': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'description': getXmlNodeText, 
        'state': (KalturaEnumsFactory.createString, "KalturaObjectState"), 
        'promotion': (KalturaObjectFactory.create, 'KalturaBasePromotion'), 
        'message': getXmlNodeText, 
        'collectionIdIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaOTTObjectSupportNullable.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCampaign.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOTTObjectSupportNullable.toParams(self)
        kparams.put("objectType", "KalturaCampaign")
        kparams.addIntIfDefined("startDate", self.startDate)
        kparams.addIntIfDefined("endDate", self.endDate)
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("systemName", self.systemName)
        kparams.addStringIfDefined("description", self.description)
        kparams.addObjectIfDefined("promotion", self.promotion)
        kparams.addStringIfDefined("message", self.message)
        kparams.addStringIfDefined("collectionIdIn", self.collectionIdIn)
        return kparams

    def getId(self):
        return self.id

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate

    def getStartDate(self):
        return self.startDate

    def setStartDate(self, newStartDate):
        self.startDate = newStartDate

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getState(self):
        return self.state

    def getPromotion(self):
        return self.promotion

    def setPromotion(self, newPromotion):
        self.promotion = newPromotion

    def getMessage(self):
        return self.message

    def setMessage(self, newMessage):
        self.message = newMessage

    def getCollectionIdIn(self):
        return self.collectionIdIn

    def setCollectionIdIn(self, newCollectionIdIn):
        self.collectionIdIn = newCollectionIdIn


# @package Kaltura
# @subpackage Client
class KalturaBatchCampaign(KalturaCampaign):
    """Campaign"""

    def __init__(self,
            id=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            state=NotImplemented,
            promotion=NotImplemented,
            message=NotImplemented,
            collectionIdIn=NotImplemented,
            populationConditions=NotImplemented):
        KalturaCampaign.__init__(self,
            id,
            createDate,
            updateDate,
            startDate,
            endDate,
            name,
            systemName,
            description,
            state,
            promotion,
            message,
            collectionIdIn)

        # These conditions define the population that apply one the campaign
        # @var array of KalturaCondition
        self.populationConditions = populationConditions


    PROPERTY_LOADERS = {
        'populationConditions': (KalturaObjectFactory.createArray, 'KalturaCondition'), 
    }

    def fromXml(self, node):
        KalturaCampaign.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBatchCampaign.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCampaign.toParams(self)
        kparams.put("objectType", "KalturaBatchCampaign")
        kparams.addArrayIfDefined("populationConditions", self.populationConditions)
        return kparams

    def getPopulationConditions(self):
        return self.populationConditions

    def setPopulationConditions(self, newPopulationConditions):
        self.populationConditions = newPopulationConditions


# @package Kaltura
# @subpackage Client
class KalturaTriggerCampaign(KalturaCampaign):
    """Campaign"""

    def __init__(self,
            id=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            state=NotImplemented,
            promotion=NotImplemented,
            message=NotImplemented,
            collectionIdIn=NotImplemented,
            service=NotImplemented,
            action=NotImplemented,
            triggerConditions=NotImplemented):
        KalturaCampaign.__init__(self,
            id,
            createDate,
            updateDate,
            startDate,
            endDate,
            name,
            systemName,
            description,
            state,
            promotion,
            message,
            collectionIdIn)

        # service
        # @var KalturaApiService
        self.service = service

        # action
        # @var KalturaApiAction
        self.action = action

        # List of conditions for the trigger (conditions on the object)
        # @var array of KalturaCondition
        self.triggerConditions = triggerConditions


    PROPERTY_LOADERS = {
        'service': (KalturaEnumsFactory.createString, "KalturaApiService"), 
        'action': (KalturaEnumsFactory.createString, "KalturaApiAction"), 
        'triggerConditions': (KalturaObjectFactory.createArray, 'KalturaCondition'), 
    }

    def fromXml(self, node):
        KalturaCampaign.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTriggerCampaign.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCampaign.toParams(self)
        kparams.put("objectType", "KalturaTriggerCampaign")
        kparams.addStringEnumIfDefined("service", self.service)
        kparams.addStringEnumIfDefined("action", self.action)
        kparams.addArrayIfDefined("triggerConditions", self.triggerConditions)
        return kparams

    def getService(self):
        return self.service

    def setService(self, newService):
        self.service = newService

    def getAction(self):
        return self.action

    def setAction(self, newAction):
        self.action = newAction

    def getTriggerConditions(self):
        return self.triggerConditions

    def setTriggerConditions(self, newTriggerConditions):
        self.triggerConditions = newTriggerConditions


# @package Kaltura
# @subpackage Client
class KalturaCouponPromotion(KalturaBasePromotion):
    """Coupon promotion"""

    def __init__(self,
            conditions=NotImplemented,
            couponGroupId=NotImplemented):
        KalturaBasePromotion.__init__(self,
            conditions)

        # CouponGroup identifier
        # @var int
        self.couponGroupId = couponGroupId


    PROPERTY_LOADERS = {
        'couponGroupId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaBasePromotion.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCouponPromotion.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBasePromotion.toParams(self)
        kparams.put("objectType", "KalturaCouponPromotion")
        kparams.addIntIfDefined("couponGroupId", self.couponGroupId)
        return kparams

    def getCouponGroupId(self):
        return self.couponGroupId

    def setCouponGroupId(self, newCouponGroupId):
        self.couponGroupId = newCouponGroupId


# @package Kaltura
# @subpackage Client
class KalturaPromotion(KalturaBasePromotion):
    """Promotion"""

    def __init__(self,
            conditions=NotImplemented,
            discountModuleId=NotImplemented,
            numberOfRecurring=NotImplemented,
            maxDiscountUsages=NotImplemented):
        KalturaBasePromotion.__init__(self,
            conditions)

        # The discount module id that is promoted to the user
        # @var int
        self.discountModuleId = discountModuleId

        # the numer of recurring for this promotion
        # @var int
        self.numberOfRecurring = numberOfRecurring

        # The number of times a household can use the discount module in this campaign.
        #             If omitted than no limitation is enforced on the number of usages.
        # @var int
        self.maxDiscountUsages = maxDiscountUsages


    PROPERTY_LOADERS = {
        'discountModuleId': getXmlNodeInt, 
        'numberOfRecurring': getXmlNodeInt, 
        'maxDiscountUsages': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaBasePromotion.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPromotion.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBasePromotion.toParams(self)
        kparams.put("objectType", "KalturaPromotion")
        kparams.addIntIfDefined("discountModuleId", self.discountModuleId)
        kparams.addIntIfDefined("numberOfRecurring", self.numberOfRecurring)
        kparams.addIntIfDefined("maxDiscountUsages", self.maxDiscountUsages)
        return kparams

    def getDiscountModuleId(self):
        return self.discountModuleId

    def setDiscountModuleId(self, newDiscountModuleId):
        self.discountModuleId = newDiscountModuleId

    def getNumberOfRecurring(self):
        return self.numberOfRecurring

    def setNumberOfRecurring(self, newNumberOfRecurring):
        self.numberOfRecurring = newNumberOfRecurring

    def getMaxDiscountUsages(self):
        return self.maxDiscountUsages

    def setMaxDiscountUsages(self, newMaxDiscountUsages):
        self.maxDiscountUsages = newMaxDiscountUsages


# @package Kaltura
# @subpackage Client
class KalturaEventNotification(KalturaOTTObjectSupportNullable):
    """Household Coupon details"""

    def __init__(self,
            id=NotImplemented,
            objectId=NotImplemented,
            eventObjectType=NotImplemented,
            message=NotImplemented,
            status=NotImplemented,
            actionType=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented):
        KalturaOTTObjectSupportNullable.__init__(self)

        # Identifier
        # @var string
        self.id = id

        # Object identifier
        # @var int
        self.objectId = objectId

        # Event object type
        # @var string
        self.eventObjectType = eventObjectType

        # Message
        # @var string
        self.message = message

        # Status
        # @var KalturaEventNotificationStatus
        self.status = status

        # Action type
        # @var string
        self.actionType = actionType

        # Create date
        # @var int
        # @readonly
        self.createDate = createDate

        # Update date
        # @var int
        # @readonly
        self.updateDate = updateDate


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'objectId': getXmlNodeInt, 
        'eventObjectType': getXmlNodeText, 
        'message': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createString, "KalturaEventNotificationStatus"), 
        'actionType': getXmlNodeText, 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaOTTObjectSupportNullable.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEventNotification.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOTTObjectSupportNullable.toParams(self)
        kparams.put("objectType", "KalturaEventNotification")
        kparams.addStringIfDefined("id", self.id)
        kparams.addIntIfDefined("objectId", self.objectId)
        kparams.addStringIfDefined("eventObjectType", self.eventObjectType)
        kparams.addStringIfDefined("message", self.message)
        kparams.addStringEnumIfDefined("status", self.status)
        kparams.addStringIfDefined("actionType", self.actionType)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getObjectId(self):
        return self.objectId

    def setObjectId(self, newObjectId):
        self.objectId = newObjectId

    def getEventObjectType(self):
        return self.eventObjectType

    def setEventObjectType(self, newEventObjectType):
        self.eventObjectType = newEventObjectType

    def getMessage(self):
        return self.message

    def setMessage(self, newMessage):
        self.message = newMessage

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getActionType(self):
        return self.actionType

    def setActionType(self, newActionType):
        self.actionType = newActionType

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate


# @package Kaltura
# @subpackage Client
class KalturaIot(KalturaOTTObjectSupportNullable):
    """IOT DEVICE"""

    def __init__(self,
            udid=NotImplemented,
            accessKey=NotImplemented,
            accessSecretKey=NotImplemented,
            username=NotImplemented,
            userPassword=NotImplemented,
            identityId=NotImplemented,
            thingArn=NotImplemented,
            thingId=NotImplemented,
            principal=NotImplemented,
            endPoint=NotImplemented,
            extendedEndPoint=NotImplemented,
            identityPoolId=NotImplemented):
        KalturaOTTObjectSupportNullable.__init__(self)

        # id
        # @var string
        self.udid = udid

        # accessKey
        # @var string
        self.accessKey = accessKey

        # accessSecretKey
        # @var string
        self.accessSecretKey = accessSecretKey

        # Username
        # @var string
        self.username = username

        # UserPassword
        # @var string
        self.userPassword = userPassword

        # IdentityId
        # @var string
        self.identityId = identityId

        # ThingArn
        # @var string
        self.thingArn = thingArn

        # ThingId
        # @var string
        self.thingId = thingId

        # Principal
        # @var string
        self.principal = principal

        # EndPoint
        # @var string
        self.endPoint = endPoint

        # ExtendedEndPoint
        # @var string
        self.extendedEndPoint = extendedEndPoint

        # IdentityPoolId
        # @var string
        self.identityPoolId = identityPoolId


    PROPERTY_LOADERS = {
        'udid': getXmlNodeText, 
        'accessKey': getXmlNodeText, 
        'accessSecretKey': getXmlNodeText, 
        'username': getXmlNodeText, 
        'userPassword': getXmlNodeText, 
        'identityId': getXmlNodeText, 
        'thingArn': getXmlNodeText, 
        'thingId': getXmlNodeText, 
        'principal': getXmlNodeText, 
        'endPoint': getXmlNodeText, 
        'extendedEndPoint': getXmlNodeText, 
        'identityPoolId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaOTTObjectSupportNullable.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIot.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOTTObjectSupportNullable.toParams(self)
        kparams.put("objectType", "KalturaIot")
        kparams.addStringIfDefined("udid", self.udid)
        kparams.addStringIfDefined("accessKey", self.accessKey)
        kparams.addStringIfDefined("accessSecretKey", self.accessSecretKey)
        kparams.addStringIfDefined("username", self.username)
        kparams.addStringIfDefined("userPassword", self.userPassword)
        kparams.addStringIfDefined("identityId", self.identityId)
        kparams.addStringIfDefined("thingArn", self.thingArn)
        kparams.addStringIfDefined("thingId", self.thingId)
        kparams.addStringIfDefined("principal", self.principal)
        kparams.addStringIfDefined("endPoint", self.endPoint)
        kparams.addStringIfDefined("extendedEndPoint", self.extendedEndPoint)
        kparams.addStringIfDefined("identityPoolId", self.identityPoolId)
        return kparams

    def getUdid(self):
        return self.udid

    def setUdid(self, newUdid):
        self.udid = newUdid

    def getAccessKey(self):
        return self.accessKey

    def setAccessKey(self, newAccessKey):
        self.accessKey = newAccessKey

    def getAccessSecretKey(self):
        return self.accessSecretKey

    def setAccessSecretKey(self, newAccessSecretKey):
        self.accessSecretKey = newAccessSecretKey

    def getUsername(self):
        return self.username

    def setUsername(self, newUsername):
        self.username = newUsername

    def getUserPassword(self):
        return self.userPassword

    def setUserPassword(self, newUserPassword):
        self.userPassword = newUserPassword

    def getIdentityId(self):
        return self.identityId

    def setIdentityId(self, newIdentityId):
        self.identityId = newIdentityId

    def getThingArn(self):
        return self.thingArn

    def setThingArn(self, newThingArn):
        self.thingArn = newThingArn

    def getThingId(self):
        return self.thingId

    def setThingId(self, newThingId):
        self.thingId = newThingId

    def getPrincipal(self):
        return self.principal

    def setPrincipal(self, newPrincipal):
        self.principal = newPrincipal

    def getEndPoint(self):
        return self.endPoint

    def setEndPoint(self, newEndPoint):
        self.endPoint = newEndPoint

    def getExtendedEndPoint(self):
        return self.extendedEndPoint

    def setExtendedEndPoint(self, newExtendedEndPoint):
        self.extendedEndPoint = newExtendedEndPoint

    def getIdentityPoolId(self):
        return self.identityPoolId

    def setIdentityPoolId(self, newIdentityPoolId):
        self.identityPoolId = newIdentityPoolId


# @package Kaltura
# @subpackage Client
class KalturaIotProfileAws(KalturaOTTObjectSupportNullable):
    """kalturaIotProfileAws"""

    def __init__(self,
            iotEndPoint=NotImplemented,
            accessKeyId=NotImplemented,
            secretAccessKey=NotImplemented,
            userPoolId=NotImplemented,
            clientId=NotImplemented,
            identityPoolId=NotImplemented,
            region=NotImplemented,
            updateDate=NotImplemented):
        KalturaOTTObjectSupportNullable.__init__(self)

        # iotEndPoint
        # @var string
        self.iotEndPoint = iotEndPoint

        # accessKeyId
        # @var string
        self.accessKeyId = accessKeyId

        # secretAccessKey
        # @var string
        self.secretAccessKey = secretAccessKey

        # userPoolId
        # @var string
        self.userPoolId = userPoolId

        # clientId
        # @var string
        self.clientId = clientId

        # identityPoolId
        # @var string
        self.identityPoolId = identityPoolId

        # region
        # @var string
        self.region = region

        # updateDate
        # @var int
        self.updateDate = updateDate


    PROPERTY_LOADERS = {
        'iotEndPoint': getXmlNodeText, 
        'accessKeyId': getXmlNodeText, 
        'secretAccessKey': getXmlNodeText, 
        'userPoolId': getXmlNodeText, 
        'clientId': getXmlNodeText, 
        'identityPoolId': getXmlNodeText, 
        'region': getXmlNodeText, 
        'updateDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaOTTObjectSupportNullable.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIotProfileAws.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOTTObjectSupportNullable.toParams(self)
        kparams.put("objectType", "KalturaIotProfileAws")
        kparams.addStringIfDefined("iotEndPoint", self.iotEndPoint)
        kparams.addStringIfDefined("accessKeyId", self.accessKeyId)
        kparams.addStringIfDefined("secretAccessKey", self.secretAccessKey)
        kparams.addStringIfDefined("userPoolId", self.userPoolId)
        kparams.addStringIfDefined("clientId", self.clientId)
        kparams.addStringIfDefined("identityPoolId", self.identityPoolId)
        kparams.addStringIfDefined("region", self.region)
        kparams.addIntIfDefined("updateDate", self.updateDate)
        return kparams

    def getIotEndPoint(self):
        return self.iotEndPoint

    def setIotEndPoint(self, newIotEndPoint):
        self.iotEndPoint = newIotEndPoint

    def getAccessKeyId(self):
        return self.accessKeyId

    def setAccessKeyId(self, newAccessKeyId):
        self.accessKeyId = newAccessKeyId

    def getSecretAccessKey(self):
        return self.secretAccessKey

    def setSecretAccessKey(self, newSecretAccessKey):
        self.secretAccessKey = newSecretAccessKey

    def getUserPoolId(self):
        return self.userPoolId

    def setUserPoolId(self, newUserPoolId):
        self.userPoolId = newUserPoolId

    def getClientId(self):
        return self.clientId

    def setClientId(self, newClientId):
        self.clientId = newClientId

    def getIdentityPoolId(self):
        return self.identityPoolId

    def setIdentityPoolId(self, newIdentityPoolId):
        self.identityPoolId = newIdentityPoolId

    def getRegion(self):
        return self.region

    def setRegion(self, newRegion):
        self.region = newRegion

    def getUpdateDate(self):
        return self.updateDate

    def setUpdateDate(self, newUpdateDate):
        self.updateDate = newUpdateDate


# @package Kaltura
# @subpackage Client
class KalturaAssetFile(KalturaObjectBase):
    """Asset file details"""

    def __init__(self,
            url=NotImplemented):
        KalturaObjectBase.__init__(self)

        # URL of the media file to be played
        # @var string
        self.url = url


    PROPERTY_LOADERS = {
        'url': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetFile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAssetFile")
        kparams.addStringIfDefined("url", self.url)
        return kparams

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl


# @package Kaltura
# @subpackage Client
class KalturaBusinessModuleDetails(KalturaObjectBase):
    def __init__(self,
            businessModuleId=NotImplemented,
            businessModuleType=NotImplemented):
        KalturaObjectBase.__init__(self)

        # BusinessModuleId
        # @var int
        self.businessModuleId = businessModuleId

        # BusinessModuleType
        # @var KalturaTransactionType
        self.businessModuleType = businessModuleType


    PROPERTY_LOADERS = {
        'businessModuleId': getXmlNodeInt, 
        'businessModuleType': (KalturaEnumsFactory.createString, "KalturaTransactionType"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBusinessModuleDetails.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBusinessModuleDetails")
        kparams.addIntIfDefined("businessModuleId", self.businessModuleId)
        kparams.addStringEnumIfDefined("businessModuleType", self.businessModuleType)
        return kparams

    def getBusinessModuleId(self):
        return self.businessModuleId

    def setBusinessModuleId(self, newBusinessModuleId):
        self.businessModuleId = newBusinessModuleId

    def getBusinessModuleType(self):
        return self.businessModuleType

    def setBusinessModuleType(self, newBusinessModuleType):
        self.businessModuleType = newBusinessModuleType


# @package Kaltura
# @subpackage Client
class KalturaMediaFile(KalturaAssetFile):
    """Media file details"""

    def __init__(self,
            url=NotImplemented,
            assetId=NotImplemented,
            id=NotImplemented,
            type=NotImplemented,
            typeId=NotImplemented,
            altUrl=NotImplemented,
            duration=NotImplemented,
            externalId=NotImplemented,
            altExternalId=NotImplemented,
            fileSize=NotImplemented,
            additionalData=NotImplemented,
            altStreamingCode=NotImplemented,
            alternativeCdnAdapaterProfileId=NotImplemented,
            endDate=NotImplemented,
            startDate=NotImplemented,
            externalStoreId=NotImplemented,
            isDefaultLanguage=NotImplemented,
            language=NotImplemented,
            orderNum=NotImplemented,
            outputProtecationLevel=NotImplemented,
            cdnAdapaterProfileId=NotImplemented,
            status=NotImplemented,
            catalogEndDate=NotImplemented,
            opl=NotImplemented,
            businessModuleDetails=NotImplemented,
            labels=NotImplemented,
            dynamicData=NotImplemented):
        KalturaAssetFile.__init__(self,
            url)

        # Unique identifier for the asset
        # @var int
        self.assetId = assetId

        # File unique identifier
        # @var int
        # @readonly
        self.id = id

        # Deprecated - Device types as defined in the system
        # @var string
        # @readonly
        self.type = type

        # Device types identifier as defined in the system
        # @var int
        self.typeId = typeId

        # URL of the media file to be played
        # @var string
        self.altUrl = altUrl

        # Duration of the media file
        # @var int
        self.duration = duration

        # External identifier for the media file
        # @var string
        self.externalId = externalId

        # Alternative external identifier for the media file
        # @var string
        self.altExternalId = altExternalId

        # File size
        # @var int
        self.fileSize = fileSize

        # Additional Data
        # @var string
        self.additionalData = additionalData

        # Alternative streaming code
        # @var string
        self.altStreamingCode = altStreamingCode

        # Alternative cdn adapter profile identifier
        # @var int
        self.alternativeCdnAdapaterProfileId = alternativeCdnAdapaterProfileId

        # EndDate
        # @var int
        self.endDate = endDate

        # StartDate
        # @var int
        self.startDate = startDate

        # ExternalStoreId
        # @var string
        self.externalStoreId = externalStoreId

        # IsDefaultLanguage
        # @var bool
        self.isDefaultLanguage = isDefaultLanguage

        # Language
        # @var string
        self.language = language

        # OrderNum
        # @var int
        self.orderNum = orderNum

        # OutputProtecationLevel
        # @var string
        self.outputProtecationLevel = outputProtecationLevel

        # cdn adapter profile identifier
        # @var int
        self.cdnAdapaterProfileId = cdnAdapaterProfileId

        # The media file status
        # @var bool
        self.status = status

        # Catalog end date
        # @var int
        self.catalogEndDate = catalogEndDate

        # OPL
        # @var string
        self.opl = opl

        # businessModuleDetails
        # @var KalturaBusinessModuleDetails
        self.businessModuleDetails = businessModuleDetails

        # Labels associated with the media file
        # @var string
        self.labels = labels

        # List of KalturaMediaFile&#39;s dynamic data keys
        # @var map
        self.dynamicData = dynamicData


    PROPERTY_LOADERS = {
        'assetId': getXmlNodeInt, 
        'id': getXmlNodeInt, 
        'type': getXmlNodeText, 
        'typeId': getXmlNodeInt, 
        'altUrl': getXmlNodeText, 
        'duration': getXmlNodeInt, 
        'externalId': getXmlNodeText, 
        'altExternalId': getXmlNodeText, 
        'fileSize': getXmlNodeInt, 
        'additionalData': getXmlNodeText, 
        'altStreamingCode': getXmlNodeText, 
        'alternativeCdnAdapaterProfileId': getXmlNodeInt, 
        'endDate': getXmlNodeInt, 
        'startDate': getXmlNodeInt, 
        'externalStoreId': getXmlNodeText, 
        'isDefaultLanguage': getXmlNodeBool, 
        'language': getXmlNodeText, 
        'orderNum': getXmlNodeInt, 
        'outputProtecationLevel': getXmlNodeText, 
        'cdnAdapaterProfileId': getXmlNodeInt, 
        'status': getXmlNodeBool, 
        'catalogEndDate': getXmlNodeInt, 
        'opl': getXmlNodeText, 
        'businessModuleDetails': (KalturaObjectFactory.create, 'KalturaBusinessModuleDetails'), 
        'labels': getXmlNodeText, 
        'dynamicData': (KalturaObjectFactory.createMap, 'KalturaStringValueArray'), 
    }

    def fromXml(self, node):
        KalturaAssetFile.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaFile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetFile.toParams(self)
        kparams.put("objectType", "KalturaMediaFile")
        kparams.addIntIfDefined("assetId", self.assetId)
        kparams.addIntIfDefined("typeId", self.typeId)
        kparams.addStringIfDefined("altUrl", self.altUrl)
        kparams.addIntIfDefined("duration", self.duration)
        kparams.addStringIfDefined("externalId", self.externalId)
        kparams.addStringIfDefined("altExternalId", self.altExternalId)
        kparams.addIntIfDefined("fileSize", self.fileSize)
        kparams.addStringIfDefined("additionalData", self.additionalData)
        kparams.addStringIfDefined("altStreamingCode", self.altStreamingCode)
        kparams.addIntIfDefined("alternativeCdnAdapaterProfileId", self.alternativeCdnAdapaterProfileId)
        kparams.addIntIfDefined("endDate", self.endDate)
        kparams.addIntIfDefined("startDate", self.startDate)
        kparams.addStringIfDefined("externalStoreId", self.externalStoreId)
        kparams.addBoolIfDefined("isDefaultLanguage", self.isDefaultLanguage)
        kparams.addStringIfDefined("language", self.language)
        kparams.addIntIfDefined("orderNum", self.orderNum)
        kparams.addStringIfDefined("outputProtecationLevel", self.outputProtecationLevel)
        kparams.addIntIfDefined("cdnAdapaterProfileId", self.cdnAdapaterProfileId)
        kparams.addBoolIfDefined("status", self.status)
        kparams.addIntIfDefined("catalogEndDate", self.catalogEndDate)
        kparams.addStringIfDefined("opl", self.opl)
        kparams.addObjectIfDefined("businessModuleDetails", self.businessModuleDetails)
        kparams.addStringIfDefined("labels", self.labels)
        kparams.addMapIfDefined("dynamicData", self.dynamicData)
        return kparams

    def getAssetId(self):
        return self.assetId

    def setAssetId(self, newAssetId):
        self.assetId = newAssetId

    def getId(self):
        return self.id

    def getType(self):
        return self.type

    def getTypeId(self):
        return self.typeId

    def setTypeId(self, newTypeId):
        self.typeId = newTypeId

    def getAltUrl(self):
        return self.altUrl

    def setAltUrl(self, newAltUrl):
        self.altUrl = newAltUrl

    def getDuration(self):
        return self.duration

    def setDuration(self, newDuration):
        self.duration = newDuration

    def getExternalId(self):
        return self.externalId

    def setExternalId(self, newExternalId):
        self.externalId = newExternalId

    def getAltExternalId(self):
        return self.altExternalId

    def setAltExternalId(self, newAltExternalId):
        self.altExternalId = newAltExternalId

    def getFileSize(self):
        return self.fileSize

    def setFileSize(self, newFileSize):
        self.fileSize = newFileSize

    def getAdditionalData(self):
        return self.additionalData

    def setAdditionalData(self, newAdditionalData):
        self.additionalData = newAdditionalData

    def getAltStreamingCode(self):
        return self.altStreamingCode

    def setAltStreamingCode(self, newAltStreamingCode):
        self.altStreamingCode = newAltStreamingCode

    def getAlternativeCdnAdapaterProfileId(self):
        return self.alternativeCdnAdapaterProfileId

    def setAlternativeCdnAdapaterProfileId(self, newAlternativeCdnAdapaterProfileId):
        self.alternativeCdnAdapaterProfileId = newAlternativeCdnAdapaterProfileId

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate

    def getStartDate(self):
        return self.startDate

    def setStartDate(self, newStartDate):
        self.startDate = newStartDate

    def getExternalStoreId(self):
        return self.externalStoreId

    def setExternalStoreId(self, newExternalStoreId):
        self.externalStoreId = newExternalStoreId

    def getIsDefaultLanguage(self):
        return self.isDefaultLanguage

    def setIsDefaultLanguage(self, newIsDefaultLanguage):
        self.isDefaultLanguage = newIsDefaultLanguage

    def getLanguage(self):
        return self.language

    def setLanguage(self, newLanguage):
        self.language = newLanguage

    def getOrderNum(self):
        return self.orderNum

    def setOrderNum(self, newOrderNum):
        self.orderNum = newOrderNum

    def getOutputProtecationLevel(self):
        return self.outputProtecationLevel

    def setOutputProtecationLevel(self, newOutputProtecationLevel):
        self.outputProtecationLevel = newOutputProtecationLevel

    def getCdnAdapaterProfileId(self):
        return self.cdnAdapaterProfileId

    def setCdnAdapaterProfileId(self, newCdnAdapaterProfileId):
        self.cdnAdapaterProfileId = newCdnAdapaterProfileId

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getCatalogEndDate(self):
        return self.catalogEndDate

    def setCatalogEndDate(self, newCatalogEndDate):
        self.catalogEndDate = newCatalogEndDate

    def getOpl(self):
        return self.opl

    def setOpl(self, newOpl):
        self.opl = newOpl

    def getBusinessModuleDetails(self):
        return self.businessModuleDetails

    def setBusinessModuleDetails(self, newBusinessModuleDetails):
        self.businessModuleDetails = newBusinessModuleDetails

    def getLabels(self):
        return self.labels

    def setLabels(self, newLabels):
        self.labels = newLabels

    def getDynamicData(self):
        return self.dynamicData

    def setDynamicData(self, newDynamicData):
        self.dynamicData = newDynamicData


# @package Kaltura
# @subpackage Client
class KalturaBuzzScore(KalturaObjectBase):
    """Buzz score"""

    def __init__(self,
            normalizedAvgScore=NotImplemented,
            updateDate=NotImplemented,
            avgScore=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Normalized average score
        # @var float
        self.normalizedAvgScore = normalizedAvgScore

        # Update date
        # @var int
        self.updateDate = updateDate

        # Average score
        # @var float
        self.avgScore = avgScore


    PROPERTY_LOADERS = {
        'normalizedAvgScore': getXmlNodeFloat, 
        'updateDate': getXmlNodeInt, 
        'avgScore': getXmlNodeFloat, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBuzzScore.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBuzzScore")
        kparams.addFloatIfDefined("normalizedAvgScore", self.normalizedAvgScore)
        kparams.addIntIfDefined("updateDate", self.updateDate)
        kparams.addFloatIfDefined("avgScore", self.avgScore)
        return kparams

    def getNormalizedAvgScore(self):
        return self.normalizedAvgScore

    def setNormalizedAvgScore(self, newNormalizedAvgScore):
        self.normalizedAvgScore = newNormalizedAvgScore

    def getUpdateDate(self):
        return self.updateDate

    def setUpdateDate(self, newUpdateDate):
        self.updateDate = newUpdateDate

    def getAvgScore(self):
        return self.avgScore

    def setAvgScore(self, newAvgScore):
        self.avgScore = newAvgScore


# @package Kaltura
# @subpackage Client
class KalturaAssetStatistics(KalturaObjectBase):
    """Asset statistics"""

    def __init__(self,
            assetId=NotImplemented,
            likes=NotImplemented,
            views=NotImplemented,
            ratingCount=NotImplemented,
            rating=NotImplemented,
            buzzScore=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Unique identifier for the asset
        # @var int
        self.assetId = assetId

        # Total number of likes for this asset
        # @var int
        self.likes = likes

        # Total number of views for this asset
        # @var int
        self.views = views

        # Number of people that rated the asset
        # @var int
        self.ratingCount = ratingCount

        # Average rating for the asset
        # @var float
        self.rating = rating

        # Buzz score
        # @var KalturaBuzzScore
        self.buzzScore = buzzScore


    PROPERTY_LOADERS = {
        'assetId': getXmlNodeInt, 
        'likes': getXmlNodeInt, 
        'views': getXmlNodeInt, 
        'ratingCount': getXmlNodeInt, 
        'rating': getXmlNodeFloat, 
        'buzzScore': (KalturaObjectFactory.create, 'KalturaBuzzScore'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetStatistics.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAssetStatistics")
        kparams.addIntIfDefined("assetId", self.assetId)
        kparams.addIntIfDefined("likes", self.likes)
        kparams.addIntIfDefined("views", self.views)
        kparams.addIntIfDefined("ratingCount", self.ratingCount)
        kparams.addFloatIfDefined("rating", self.rating)
        kparams.addObjectIfDefined("buzzScore", self.buzzScore)
        return kparams

    def getAssetId(self):
        return self.assetId

    def setAssetId(self, newAssetId):
        self.assetId = newAssetId

    def getLikes(self):
        return self.likes

    def setLikes(self, newLikes):
        self.likes = newLikes

    def getViews(self):
        return self.views

    def setViews(self, newViews):
        self.views = newViews

    def getRatingCount(self):
        return self.ratingCount

    def setRatingCount(self, newRatingCount):
        self.ratingCount = newRatingCount

    def getRating(self):
        return self.rating

    def setRating(self, newRating):
        self.rating = newRating

    def getBuzzScore(self):
        return self.buzzScore

    def setBuzzScore(self, newBuzzScore):
        self.buzzScore = newBuzzScore


# @package Kaltura
# @subpackage Client
class KalturaMultilingualStringValueArray(KalturaObjectBase):
    """Array of translated strings"""

    def __init__(self,
            objects=NotImplemented):
        KalturaObjectBase.__init__(self)

        # List of string values
        # @var array of KalturaMultilingualStringValue
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaMultilingualStringValue'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMultilingualStringValueArray.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaMultilingualStringValueArray")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaFavorite(KalturaObjectBase):
    """Favorite details"""

    def __init__(self,
            assetId=NotImplemented,
            extraData=NotImplemented,
            createDate=NotImplemented):
        KalturaObjectBase.__init__(self)

        # AssetInfo Model
        # @var int
        self.assetId = assetId

        # Extra Value
        # @var string
        self.extraData = extraData

        # Specifies when was the favorite created. Date and time represented as epoch.
        # @var int
        # @readonly
        self.createDate = createDate


    PROPERTY_LOADERS = {
        'assetId': getXmlNodeInt, 
        'extraData': getXmlNodeText, 
        'createDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFavorite.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaFavorite")
        kparams.addIntIfDefined("assetId", self.assetId)
        kparams.addStringIfDefined("extraData", self.extraData)
        return kparams

    def getAssetId(self):
        return self.assetId

    def setAssetId(self, newAssetId):
        self.assetId = newAssetId

    def getExtraData(self):
        return self.extraData

    def setExtraData(self, newExtraData):
        self.extraData = newExtraData

    def getCreateDate(self):
        return self.createDate


# @package Kaltura
# @subpackage Client
class KalturaFavoriteListResponse(KalturaListResponse):
    """Favorite list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of favorites
        # @var array of KalturaFavorite
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaFavorite'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFavoriteListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaFavoriteListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaPlaybackSource(KalturaMediaFile):
    def __init__(self,
            url=NotImplemented,
            assetId=NotImplemented,
            id=NotImplemented,
            type=NotImplemented,
            typeId=NotImplemented,
            altUrl=NotImplemented,
            duration=NotImplemented,
            externalId=NotImplemented,
            altExternalId=NotImplemented,
            fileSize=NotImplemented,
            additionalData=NotImplemented,
            altStreamingCode=NotImplemented,
            alternativeCdnAdapaterProfileId=NotImplemented,
            endDate=NotImplemented,
            startDate=NotImplemented,
            externalStoreId=NotImplemented,
            isDefaultLanguage=NotImplemented,
            language=NotImplemented,
            orderNum=NotImplemented,
            outputProtecationLevel=NotImplemented,
            cdnAdapaterProfileId=NotImplemented,
            status=NotImplemented,
            catalogEndDate=NotImplemented,
            opl=NotImplemented,
            businessModuleDetails=NotImplemented,
            labels=NotImplemented,
            dynamicData=NotImplemented,
            format=NotImplemented,
            protocols=NotImplemented,
            drm=NotImplemented,
            isTokenized=NotImplemented,
            businessModuleId=NotImplemented,
            businessModuleType=NotImplemented):
        KalturaMediaFile.__init__(self,
            url,
            assetId,
            id,
            type,
            typeId,
            altUrl,
            duration,
            externalId,
            altExternalId,
            fileSize,
            additionalData,
            altStreamingCode,
            alternativeCdnAdapaterProfileId,
            endDate,
            startDate,
            externalStoreId,
            isDefaultLanguage,
            language,
            orderNum,
            outputProtecationLevel,
            cdnAdapaterProfileId,
            status,
            catalogEndDate,
            opl,
            businessModuleDetails,
            labels,
            dynamicData)

        # Source format according to delivery profile streamer type (applehttp, mpegdash etc.)
        # @var string
        self.format = format

        # Comma separated string according to deliveryProfile media protocols (&#39;http,https&#39; etc.)
        # @var string
        self.protocols = protocols

        # DRM data object containing relevant license URL ,scheme name and certificate
        # @var array of KalturaDrmPlaybackPluginData
        self.drm = drm

        # Is Tokenized
        # @var bool
        self.isTokenized = isTokenized

        # Business Module Id
        # @var int
        # @readonly
        self.businessModuleId = businessModuleId

        # Business Module Type
        # @var KalturaTransactionType
        # @readonly
        self.businessModuleType = businessModuleType


    PROPERTY_LOADERS = {
        'format': getXmlNodeText, 
        'protocols': getXmlNodeText, 
        'drm': (KalturaObjectFactory.createArray, 'KalturaDrmPlaybackPluginData'), 
        'isTokenized': getXmlNodeBool, 
        'businessModuleId': getXmlNodeInt, 
        'businessModuleType': (KalturaEnumsFactory.createString, "KalturaTransactionType"), 
    }

    def fromXml(self, node):
        KalturaMediaFile.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlaybackSource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaMediaFile.toParams(self)
        kparams.put("objectType", "KalturaPlaybackSource")
        kparams.addStringIfDefined("format", self.format)
        kparams.addStringIfDefined("protocols", self.protocols)
        kparams.addArrayIfDefined("drm", self.drm)
        kparams.addBoolIfDefined("isTokenized", self.isTokenized)
        return kparams

    def getFormat(self):
        return self.format

    def setFormat(self, newFormat):
        self.format = newFormat

    def getProtocols(self):
        return self.protocols

    def setProtocols(self, newProtocols):
        self.protocols = newProtocols

    def getDrm(self):
        return self.drm

    def setDrm(self, newDrm):
        self.drm = newDrm

    def getIsTokenized(self):
        return self.isTokenized

    def setIsTokenized(self, newIsTokenized):
        self.isTokenized = newIsTokenized

    def getBusinessModuleId(self):
        return self.businessModuleId

    def getBusinessModuleType(self):
        return self.businessModuleType


# @package Kaltura
# @subpackage Client
class KalturaDiscoveryMediaFile(KalturaMediaFile):
    """Media file in discovery context"""

    def __init__(self,
            url=NotImplemented,
            assetId=NotImplemented,
            id=NotImplemented,
            type=NotImplemented,
            typeId=NotImplemented,
            altUrl=NotImplemented,
            duration=NotImplemented,
            externalId=NotImplemented,
            altExternalId=NotImplemented,
            fileSize=NotImplemented,
            additionalData=NotImplemented,
            altStreamingCode=NotImplemented,
            alternativeCdnAdapaterProfileId=NotImplemented,
            endDate=NotImplemented,
            startDate=NotImplemented,
            externalStoreId=NotImplemented,
            isDefaultLanguage=NotImplemented,
            language=NotImplemented,
            orderNum=NotImplemented,
            outputProtecationLevel=NotImplemented,
            cdnAdapaterProfileId=NotImplemented,
            status=NotImplemented,
            catalogEndDate=NotImplemented,
            opl=NotImplemented,
            businessModuleDetails=NotImplemented,
            labels=NotImplemented,
            dynamicData=NotImplemented,
            isPlaybackable=NotImplemented):
        KalturaMediaFile.__init__(self,
            url,
            assetId,
            id,
            type,
            typeId,
            altUrl,
            duration,
            externalId,
            altExternalId,
            fileSize,
            additionalData,
            altStreamingCode,
            alternativeCdnAdapaterProfileId,
            endDate,
            startDate,
            externalStoreId,
            isDefaultLanguage,
            language,
            orderNum,
            outputProtecationLevel,
            cdnAdapaterProfileId,
            status,
            catalogEndDate,
            opl,
            businessModuleDetails,
            labels,
            dynamicData)

        # show, if file could be played
        # @var bool
        self.isPlaybackable = isPlaybackable


    PROPERTY_LOADERS = {
        'isPlaybackable': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaMediaFile.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDiscoveryMediaFile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaMediaFile.toParams(self)
        kparams.put("objectType", "KalturaDiscoveryMediaFile")
        kparams.addBoolIfDefined("isPlaybackable", self.isPlaybackable)
        return kparams

    def getIsPlaybackable(self):
        return self.isPlaybackable

    def setIsPlaybackable(self, newIsPlaybackable):
        self.isPlaybackable = newIsPlaybackable


# @package Kaltura
# @subpackage Client
class KalturaOTTUserListResponse(KalturaListResponse):
    """Users list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of users
        # @var array of KalturaOTTUser
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaOTTUser'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaOTTUserListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaOTTUserListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaPartner(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented):
        KalturaObjectBase.__init__(self)

        # PartnerId
        # @var int
        self.id = id

        # PartnerName
        # @var string
        self.name = name

        # Creat date represented as epoch
        # @var int
        self.createDate = createDate

        # Update date represented as epoch
        # @var int
        self.updateDate = updateDate


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPartner.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPartner")
        kparams.addIntIfDefined("id", self.id)
        kparams.addStringIfDefined("name", self.name)
        kparams.addIntIfDefined("createDate", self.createDate)
        kparams.addIntIfDefined("updateDate", self.updateDate)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getCreateDate(self):
        return self.createDate

    def setCreateDate(self, newCreateDate):
        self.createDate = newCreateDate

    def getUpdateDate(self):
        return self.updateDate

    def setUpdateDate(self, newUpdateDate):
        self.updateDate = newUpdateDate


# @package Kaltura
# @subpackage Client
class KalturaPartnerListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of Partners
        # @var array of KalturaPartner
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaPartner'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPartnerListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaPartnerListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaPasswordPolicyListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of objects
        # @var array of KalturaPasswordPolicy
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaPasswordPolicy'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPasswordPolicyListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaPasswordPolicyListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaSSOAdapterProfile(KalturaObjectBase):
    """SSO adapter configuration"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            isActive=NotImplemented,
            adapterUrl=NotImplemented,
            settings=NotImplemented,
            externalIdentifier=NotImplemented,
            sharedSecret=NotImplemented):
        KalturaObjectBase.__init__(self)

        # SSO Adapter id
        # @var int
        # @readonly
        self.id = id

        # SSO Adapter name
        # @var string
        self.name = name

        # SSO Adapter is active status
        # @var int
        self.isActive = isActive

        # SSO Adapter URL
        # @var string
        self.adapterUrl = adapterUrl

        # SSO Adapter extra parameters
        # @var map
        self.settings = settings

        # SSO Adapter external identifier
        # @var string
        self.externalIdentifier = externalIdentifier

        # Shared Secret
        # @var string
        self.sharedSecret = sharedSecret


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'isActive': getXmlNodeInt, 
        'adapterUrl': getXmlNodeText, 
        'settings': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
        'externalIdentifier': getXmlNodeText, 
        'sharedSecret': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSSOAdapterProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSSOAdapterProfile")
        kparams.addStringIfDefined("name", self.name)
        kparams.addIntIfDefined("isActive", self.isActive)
        kparams.addStringIfDefined("adapterUrl", self.adapterUrl)
        kparams.addMapIfDefined("settings", self.settings)
        kparams.addStringIfDefined("externalIdentifier", self.externalIdentifier)
        kparams.addStringIfDefined("sharedSecret", self.sharedSecret)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive

    def getAdapterUrl(self):
        return self.adapterUrl

    def setAdapterUrl(self, newAdapterUrl):
        self.adapterUrl = newAdapterUrl

    def getSettings(self):
        return self.settings

    def setSettings(self, newSettings):
        self.settings = newSettings

    def getExternalIdentifier(self):
        return self.externalIdentifier

    def setExternalIdentifier(self, newExternalIdentifier):
        self.externalIdentifier = newExternalIdentifier

    def getSharedSecret(self):
        return self.sharedSecret

    def setSharedSecret(self, newSharedSecret):
        self.sharedSecret = newSharedSecret


# @package Kaltura
# @subpackage Client
class KalturaSSOAdapterProfileListResponse(KalturaListResponse):
    """ssoAdapterProfile list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of payment-gateway profiles
        # @var array of KalturaSSOAdapterProfile
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaSSOAdapterProfile'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSSOAdapterProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaSSOAdapterProfileListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaUserInterestTopic(KalturaObjectBase):
    """User interest topic"""

    def __init__(self,
            metaId=NotImplemented,
            value=NotImplemented,
            parentTopic=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Meta identifier
        # @var string
        self.metaId = metaId

        # Meta Value
        # @var string
        self.value = value

        # Parent topic
        # @var KalturaUserInterestTopic
        self.parentTopic = parentTopic


    PROPERTY_LOADERS = {
        'metaId': getXmlNodeText, 
        'value': getXmlNodeText, 
        'parentTopic': (KalturaObjectFactory.create, 'KalturaObjectBase'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserInterestTopic.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUserInterestTopic")
        kparams.addStringIfDefined("metaId", self.metaId)
        kparams.addStringIfDefined("value", self.value)
        kparams.addObjectIfDefined("parentTopic", self.parentTopic)
        return kparams

    def getMetaId(self):
        return self.metaId

    def setMetaId(self, newMetaId):
        self.metaId = newMetaId

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue

    def getParentTopic(self):
        return self.parentTopic

    def setParentTopic(self, newParentTopic):
        self.parentTopic = newParentTopic


# @package Kaltura
# @subpackage Client
class KalturaUserInterest(KalturaObjectBase):
    """User Interest"""

    def __init__(self,
            id=NotImplemented,
            topic=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Identifier
        # @var string
        # @readonly
        self.id = id

        # Topic
        # @var KalturaUserInterestTopic
        self.topic = topic


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'topic': (KalturaObjectFactory.create, 'KalturaUserInterestTopic'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserInterest.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUserInterest")
        kparams.addObjectIfDefined("topic", self.topic)
        return kparams

    def getId(self):
        return self.id

    def getTopic(self):
        return self.topic

    def setTopic(self, newTopic):
        self.topic = newTopic


# @package Kaltura
# @subpackage Client
class KalturaUserInterestListResponse(KalturaListResponse):
    """User interest list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of UserInterests
        # @var array of KalturaUserInterest
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaUserInterest'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserInterestListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaUserInterestListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaUserSessionProfileExpression(KalturaObjectBase):
    """Define KalturaUserSessionProfileExpression"""

    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserSessionProfileExpression.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUserSessionProfileExpression")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaUserSessionProfile(KalturaObjectBase):
    """User Session Profile"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            expression=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The user session profile id.
        # @var int
        # @readonly
        self.id = id

        # The user session profile name for presentation.
        # @var string
        self.name = name

        # expression
        # @var KalturaUserSessionProfileExpression
        self.expression = expression


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'expression': (KalturaObjectFactory.create, 'KalturaUserSessionProfileExpression'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserSessionProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUserSessionProfile")
        kparams.addStringIfDefined("name", self.name)
        kparams.addObjectIfDefined("expression", self.expression)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getExpression(self):
        return self.expression

    def setExpression(self, newExpression):
        self.expression = newExpression


# @package Kaltura
# @subpackage Client
class KalturaUserSessionProfileListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of KalturaUserSessionProfile
        # @var array of KalturaUserSessionProfile
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaUserSessionProfile'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserSessionProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaUserSessionProfileListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaExpressionAnd(KalturaUserSessionProfileExpression):
    """And Expression"""

    def __init__(self,
            expressions=NotImplemented):
        KalturaUserSessionProfileExpression.__init__(self)

        # expressions with and relation between them
        # @var array of KalturaUserSessionProfileExpression
        self.expressions = expressions


    PROPERTY_LOADERS = {
        'expressions': (KalturaObjectFactory.createArray, 'KalturaUserSessionProfileExpression'), 
    }

    def fromXml(self, node):
        KalturaUserSessionProfileExpression.fromXml(self, node)
        self.fromXmlImpl(node, KalturaExpressionAnd.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUserSessionProfileExpression.toParams(self)
        kparams.put("objectType", "KalturaExpressionAnd")
        kparams.addArrayIfDefined("expressions", self.expressions)
        return kparams

    def getExpressions(self):
        return self.expressions

    def setExpressions(self, newExpressions):
        self.expressions = newExpressions


# @package Kaltura
# @subpackage Client
class KalturaExpressionNot(KalturaUserSessionProfileExpression):
    """Not Expression"""

    def __init__(self,
            expression=NotImplemented):
        KalturaUserSessionProfileExpression.__init__(self)

        # expression
        # @var KalturaUserSessionProfileExpression
        self.expression = expression


    PROPERTY_LOADERS = {
        'expression': (KalturaObjectFactory.create, 'KalturaUserSessionProfileExpression'), 
    }

    def fromXml(self, node):
        KalturaUserSessionProfileExpression.fromXml(self, node)
        self.fromXmlImpl(node, KalturaExpressionNot.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUserSessionProfileExpression.toParams(self)
        kparams.put("objectType", "KalturaExpressionNot")
        kparams.addObjectIfDefined("expression", self.expression)
        return kparams

    def getExpression(self):
        return self.expression

    def setExpression(self, newExpression):
        self.expression = newExpression


# @package Kaltura
# @subpackage Client
class KalturaExpressionOr(KalturaUserSessionProfileExpression):
    """Or Expression"""

    def __init__(self,
            expressions=NotImplemented):
        KalturaUserSessionProfileExpression.__init__(self)

        # expressions with or relation between them
        # @var array of KalturaUserSessionProfileExpression
        self.expressions = expressions


    PROPERTY_LOADERS = {
        'expressions': (KalturaObjectFactory.createArray, 'KalturaUserSessionProfileExpression'), 
    }

    def fromXml(self, node):
        KalturaUserSessionProfileExpression.fromXml(self, node)
        self.fromXmlImpl(node, KalturaExpressionOr.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUserSessionProfileExpression.toParams(self)
        kparams.put("objectType", "KalturaExpressionOr")
        kparams.addArrayIfDefined("expressions", self.expressions)
        return kparams

    def getExpressions(self):
        return self.expressions

    def setExpressions(self, newExpressions):
        self.expressions = newExpressions


# @package Kaltura
# @subpackage Client
class KalturaUserSessionCondition(KalturaUserSessionProfileExpression):
    """SimpleExpression hold single condition"""

    def __init__(self,
            condition=NotImplemented):
        KalturaUserSessionProfileExpression.__init__(self)

        # expression
        # @var KalturaCondition
        self.condition = condition


    PROPERTY_LOADERS = {
        'condition': (KalturaObjectFactory.create, 'KalturaCondition'), 
    }

    def fromXml(self, node):
        KalturaUserSessionProfileExpression.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserSessionCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUserSessionProfileExpression.toParams(self)
        kparams.put("objectType", "KalturaUserSessionCondition")
        kparams.addObjectIfDefined("condition", self.condition)
        return kparams

    def getCondition(self):
        return self.condition

    def setCondition(self, newCondition):
        self.condition = newCondition


# @package Kaltura
# @subpackage Client
class KalturaMessage(KalturaObjectBase):
    """Message"""

    def __init__(self,
            code=NotImplemented,
            message=NotImplemented,
            args=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Massage code
        # @var int
        self.code = code

        # Message details
        # @var string
        self.message = message

        # Message args
        # @var map
        self.args = args


    PROPERTY_LOADERS = {
        'code': getXmlNodeInt, 
        'message': getXmlNodeText, 
        'args': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMessage.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaMessage")
        kparams.addIntIfDefined("code", self.code)
        kparams.addStringIfDefined("message", self.message)
        kparams.addMapIfDefined("args", self.args)
        return kparams

    def getCode(self):
        return self.code

    def setCode(self, newCode):
        self.code = newCode

    def getMessage(self):
        return self.message

    def setMessage(self, newMessage):
        self.message = newMessage

    def getArgs(self):
        return self.args

    def setArgs(self, newArgs):
        self.args = newArgs


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadResult(KalturaObjectBase):
    """Bulk Upload Result"""

    def __init__(self,
            objectId=NotImplemented,
            index=NotImplemented,
            bulkUploadId=NotImplemented,
            status=NotImplemented,
            errors=NotImplemented,
            warnings=NotImplemented):
        KalturaObjectBase.__init__(self)

        # the result ObjectId (assetId, userId etc)
        # @var int
        # @readonly
        self.objectId = objectId

        # result index
        # @var int
        # @readonly
        self.index = index

        # Bulk upload identifier
        # @var int
        # @readonly
        self.bulkUploadId = bulkUploadId

        # status
        # @var KalturaBulkUploadResultStatus
        # @readonly
        self.status = status

        # A list of errors
        # @var array of KalturaMessage
        # @readonly
        self.errors = errors

        # A list of warnings
        # @var array of KalturaMessage
        # @readonly
        self.warnings = warnings


    PROPERTY_LOADERS = {
        'objectId': getXmlNodeInt, 
        'index': getXmlNodeInt, 
        'bulkUploadId': getXmlNodeInt, 
        'status': (KalturaEnumsFactory.createString, "KalturaBulkUploadResultStatus"), 
        'errors': (KalturaObjectFactory.createArray, 'KalturaMessage'), 
        'warnings': (KalturaObjectFactory.createArray, 'KalturaMessage'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadResult.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadResult")
        return kparams

    def getObjectId(self):
        return self.objectId

    def getIndex(self):
        return self.index

    def getBulkUploadId(self):
        return self.bulkUploadId

    def getStatus(self):
        return self.status

    def getErrors(self):
        return self.errors

    def getWarnings(self):
        return self.warnings


# @package Kaltura
# @subpackage Client
class KalturaBulkUpload(KalturaObjectBase):
    """Bulk Upload"""

    def __init__(self,
            id=NotImplemented,
            fileName=NotImplemented,
            status=NotImplemented,
            action=NotImplemented,
            numOfObjects=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            uploadedByUserId=NotImplemented,
            results=NotImplemented,
            errors=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Bulk identifier
        # @var int
        # @readonly
        self.id = id

        # File Name
        # @var string
        # @readonly
        self.fileName = fileName

        # Status
        # @var KalturaBulkUploadJobStatus
        # @readonly
        self.status = status

        # Action
        # @var KalturaBulkUploadJobAction
        # @readonly
        self.action = action

        # Total number of objects in file
        # @var int
        # @readonly
        self.numOfObjects = numOfObjects

        # Specifies when was the bulk action created. Date and time represented as epoch
        # @var int
        # @readonly
        self.createDate = createDate

        # Specifies when was the bulk action last updated. Date and time represented as epoch
        # @var int
        # @readonly
        self.updateDate = updateDate

        # The user who uploaded this bulk
        # @var int
        # @readonly
        self.uploadedByUserId = uploadedByUserId

        # A list of results
        # @var array of KalturaBulkUploadResult
        # @readonly
        self.results = results

        # A list of errors
        # @var array of KalturaMessage
        # @readonly
        self.errors = errors


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'fileName': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createString, "KalturaBulkUploadJobStatus"), 
        'action': (KalturaEnumsFactory.createString, "KalturaBulkUploadJobAction"), 
        'numOfObjects': getXmlNodeInt, 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
        'uploadedByUserId': getXmlNodeInt, 
        'results': (KalturaObjectFactory.createArray, 'KalturaBulkUploadResult'), 
        'errors': (KalturaObjectFactory.createArray, 'KalturaMessage'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUpload.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBulkUpload")
        return kparams

    def getId(self):
        return self.id

    def getFileName(self):
        return self.fileName

    def getStatus(self):
        return self.status

    def getAction(self):
        return self.action

    def getNumOfObjects(self):
        return self.numOfObjects

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate

    def getUploadedByUserId(self):
        return self.uploadedByUserId

    def getResults(self):
        return self.results

    def getErrors(self):
        return self.errors


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadListResponse(KalturaListResponse):
    """Asset wrapper"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # bulk upload items
        # @var array of KalturaBulkUpload
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaBulkUpload'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadAssetResult(KalturaBulkUploadResult):
    def __init__(self,
            objectId=NotImplemented,
            index=NotImplemented,
            bulkUploadId=NotImplemented,
            status=NotImplemented,
            errors=NotImplemented,
            warnings=NotImplemented,
            type=NotImplemented,
            externalId=NotImplemented):
        KalturaBulkUploadResult.__init__(self,
            objectId,
            index,
            bulkUploadId,
            status,
            errors,
            warnings)

        # Identifies the asset type (EPG, Recording, Movie, TV Series, etc). 
        #             Possible values: 0 - EPG linear programs, 1 - Recording; or any asset type ID according to the asset types IDs defined in the system.
        # @var int
        # @readonly
        self.type = type

        # External identifier for the asset
        # @var string
        # @readonly
        self.externalId = externalId


    PROPERTY_LOADERS = {
        'type': getXmlNodeInt, 
        'externalId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBulkUploadResult.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadAssetResult.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadResult.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadAssetResult")
        return kparams

    def getType(self):
        return self.type

    def getExternalId(self):
        return self.externalId


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadMediaAssetResult(KalturaBulkUploadAssetResult):
    def __init__(self,
            objectId=NotImplemented,
            index=NotImplemented,
            bulkUploadId=NotImplemented,
            status=NotImplemented,
            errors=NotImplemented,
            warnings=NotImplemented,
            type=NotImplemented,
            externalId=NotImplemented):
        KalturaBulkUploadAssetResult.__init__(self,
            objectId,
            index,
            bulkUploadId,
            status,
            errors,
            warnings,
            type,
            externalId)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBulkUploadAssetResult.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadMediaAssetResult.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadAssetResult.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadMediaAssetResult")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadLiveAssetResult(KalturaBulkUploadMediaAssetResult):
    def __init__(self,
            objectId=NotImplemented,
            index=NotImplemented,
            bulkUploadId=NotImplemented,
            status=NotImplemented,
            errors=NotImplemented,
            warnings=NotImplemented,
            type=NotImplemented,
            externalId=NotImplemented):
        KalturaBulkUploadMediaAssetResult.__init__(self,
            objectId,
            index,
            bulkUploadId,
            status,
            errors,
            warnings,
            type,
            externalId)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBulkUploadMediaAssetResult.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadLiveAssetResult.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadMediaAssetResult.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadLiveAssetResult")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadDynamicListResult(KalturaBulkUploadResult):
    def __init__(self,
            objectId=NotImplemented,
            index=NotImplemented,
            bulkUploadId=NotImplemented,
            status=NotImplemented,
            errors=NotImplemented,
            warnings=NotImplemented):
        KalturaBulkUploadResult.__init__(self,
            objectId,
            index,
            bulkUploadId,
            status,
            errors,
            warnings)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBulkUploadResult.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadDynamicListResult.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadResult.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadDynamicListResult")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadUdidDynamicListResult(KalturaBulkUploadDynamicListResult):
    def __init__(self,
            objectId=NotImplemented,
            index=NotImplemented,
            bulkUploadId=NotImplemented,
            status=NotImplemented,
            errors=NotImplemented,
            warnings=NotImplemented,
            udid=NotImplemented):
        KalturaBulkUploadDynamicListResult.__init__(self,
            objectId,
            index,
            bulkUploadId,
            status,
            errors,
            warnings)

        # The udid from the excel to add to DynamicLis values
        # @var string
        # @readonly
        self.udid = udid


    PROPERTY_LOADERS = {
        'udid': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBulkUploadDynamicListResult.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadUdidDynamicListResult.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadDynamicListResult.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadUdidDynamicListResult")
        return kparams

    def getUdid(self):
        return self.udid


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadProgramAssetResult(KalturaBulkUploadResult):
    def __init__(self,
            objectId=NotImplemented,
            index=NotImplemented,
            bulkUploadId=NotImplemented,
            status=NotImplemented,
            errors=NotImplemented,
            warnings=NotImplemented,
            programId=NotImplemented,
            programExternalId=NotImplemented,
            liveAssetId=NotImplemented):
        KalturaBulkUploadResult.__init__(self,
            objectId,
            index,
            bulkUploadId,
            status,
            errors,
            warnings)

        # The programID that was created
        # @var int
        # @readonly
        self.programId = programId

        # The external program Id as was sent in the bulk xml file
        # @var string
        # @readonly
        self.programExternalId = programExternalId

        # The  live asset Id that was identified according liveAssetExternalId that was sent in bulk xml file
        # @var int
        # @readonly
        self.liveAssetId = liveAssetId


    PROPERTY_LOADERS = {
        'programId': getXmlNodeInt, 
        'programExternalId': getXmlNodeText, 
        'liveAssetId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaBulkUploadResult.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadProgramAssetResult.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadResult.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadProgramAssetResult")
        return kparams

    def getProgramId(self):
        return self.programId

    def getProgramExternalId(self):
        return self.programExternalId

    def getLiveAssetId(self):
        return self.liveAssetId


# @package Kaltura
# @subpackage Client
class KalturaSocialAction(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            actionType=NotImplemented,
            time=NotImplemented,
            assetId=NotImplemented,
            assetType=NotImplemented,
            url=NotImplemented):
        KalturaObjectBase.__init__(self)

        # social action document id
        # @var string
        # @readonly
        self.id = id

        # Action type
        # @var KalturaSocialActionType
        self.actionType = actionType

        # EPOC based timestamp for when the action occurred
        # @var int
        self.time = time

        # ID of the asset that was acted upon
        # @var int
        self.assetId = assetId

        # Type of the asset that was acted upon, currently only VOD (media)
        # @var KalturaAssetType
        self.assetType = assetType

        # The value of the url
        # @var string
        self.url = url


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'actionType': (KalturaEnumsFactory.createString, "KalturaSocialActionType"), 
        'time': getXmlNodeInt, 
        'assetId': getXmlNodeInt, 
        'assetType': (KalturaEnumsFactory.createString, "KalturaAssetType"), 
        'url': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSocialAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSocialAction")
        kparams.addStringEnumIfDefined("actionType", self.actionType)
        kparams.addIntIfDefined("time", self.time)
        kparams.addIntIfDefined("assetId", self.assetId)
        kparams.addStringEnumIfDefined("assetType", self.assetType)
        kparams.addStringIfDefined("url", self.url)
        return kparams

    def getId(self):
        return self.id

    def getActionType(self):
        return self.actionType

    def setActionType(self, newActionType):
        self.actionType = newActionType

    def getTime(self):
        return self.time

    def setTime(self, newTime):
        self.time = newTime

    def getAssetId(self):
        return self.assetId

    def setAssetId(self, newAssetId):
        self.assetId = newAssetId

    def getAssetType(self):
        return self.assetType

    def setAssetType(self, newAssetType):
        self.assetType = newAssetType

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl


# @package Kaltura
# @subpackage Client
class KalturaSocialActionListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # The social actions
        # @var array of KalturaSocialAction
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaSocialAction'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSocialActionListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaSocialActionListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaSocialActionRate(KalturaSocialAction):
    def __init__(self,
            id=NotImplemented,
            actionType=NotImplemented,
            time=NotImplemented,
            assetId=NotImplemented,
            assetType=NotImplemented,
            url=NotImplemented,
            rate=NotImplemented):
        KalturaSocialAction.__init__(self,
            id,
            actionType,
            time,
            assetId,
            assetType,
            url)

        # The value of the rating
        # @var int
        self.rate = rate


    PROPERTY_LOADERS = {
        'rate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaSocialAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSocialActionRate.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSocialAction.toParams(self)
        kparams.put("objectType", "KalturaSocialActionRate")
        kparams.addIntIfDefined("rate", self.rate)
        return kparams

    def getRate(self):
        return self.rate

    def setRate(self, newRate):
        self.rate = newRate


# @package Kaltura
# @subpackage Client
class KalturaSocialComment(KalturaObjectBase):
    def __init__(self,
            header=NotImplemented,
            text=NotImplemented,
            createDate=NotImplemented,
            writer=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Comment header
        # @var string
        self.header = header

        # Comment body
        # @var string
        self.text = text

        # Comment creation date
        # @var int
        self.createDate = createDate

        # The writer of the comment
        # @var string
        self.writer = writer


    PROPERTY_LOADERS = {
        'header': getXmlNodeText, 
        'text': getXmlNodeText, 
        'createDate': getXmlNodeInt, 
        'writer': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSocialComment.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSocialComment")
        kparams.addStringIfDefined("header", self.header)
        kparams.addStringIfDefined("text", self.text)
        kparams.addIntIfDefined("createDate", self.createDate)
        kparams.addStringIfDefined("writer", self.writer)
        return kparams

    def getHeader(self):
        return self.header

    def setHeader(self, newHeader):
        self.header = newHeader

    def getText(self):
        return self.text

    def setText(self, newText):
        self.text = newText

    def getCreateDate(self):
        return self.createDate

    def setCreateDate(self, newCreateDate):
        self.createDate = newCreateDate

    def getWriter(self):
        return self.writer

    def setWriter(self, newWriter):
        self.writer = newWriter


# @package Kaltura
# @subpackage Client
class KalturaSocialCommentListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Social comments list
        # @var array of KalturaSocialComment
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaSocialComment'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSocialCommentListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaSocialCommentListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaSocialNetworkComment(KalturaSocialComment):
    def __init__(self,
            header=NotImplemented,
            text=NotImplemented,
            createDate=NotImplemented,
            writer=NotImplemented,
            likeCounter=NotImplemented,
            authorImageUrl=NotImplemented):
        KalturaSocialComment.__init__(self,
            header,
            text,
            createDate,
            writer)

        # Number of likes
        # @var string
        self.likeCounter = likeCounter

        # The URL of the profile picture of the author of the comment
        # @var string
        self.authorImageUrl = authorImageUrl


    PROPERTY_LOADERS = {
        'likeCounter': getXmlNodeText, 
        'authorImageUrl': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaSocialComment.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSocialNetworkComment.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSocialComment.toParams(self)
        kparams.put("objectType", "KalturaSocialNetworkComment")
        kparams.addStringIfDefined("likeCounter", self.likeCounter)
        kparams.addStringIfDefined("authorImageUrl", self.authorImageUrl)
        return kparams

    def getLikeCounter(self):
        return self.likeCounter

    def setLikeCounter(self, newLikeCounter):
        self.likeCounter = newLikeCounter

    def getAuthorImageUrl(self):
        return self.authorImageUrl

    def setAuthorImageUrl(self, newAuthorImageUrl):
        self.authorImageUrl = newAuthorImageUrl


# @package Kaltura
# @subpackage Client
class KalturaFacebookPost(KalturaSocialNetworkComment):
    def __init__(self,
            header=NotImplemented,
            text=NotImplemented,
            createDate=NotImplemented,
            writer=NotImplemented,
            likeCounter=NotImplemented,
            authorImageUrl=NotImplemented,
            comments=NotImplemented,
            link=NotImplemented):
        KalturaSocialNetworkComment.__init__(self,
            header,
            text,
            createDate,
            writer,
            likeCounter,
            authorImageUrl)

        # List of comments on the post
        # @var array of KalturaSocialNetworkComment
        self.comments = comments

        # A link associated to the post
        # @var string
        self.link = link


    PROPERTY_LOADERS = {
        'comments': (KalturaObjectFactory.createArray, 'KalturaSocialNetworkComment'), 
        'link': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaSocialNetworkComment.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFacebookPost.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSocialNetworkComment.toParams(self)
        kparams.put("objectType", "KalturaFacebookPost")
        kparams.addArrayIfDefined("comments", self.comments)
        kparams.addStringIfDefined("link", self.link)
        return kparams

    def getComments(self):
        return self.comments

    def setComments(self, newComments):
        self.comments = newComments

    def getLink(self):
        return self.link

    def setLink(self, newLink):
        self.link = newLink


# @package Kaltura
# @subpackage Client
class KalturaTwitterTwit(KalturaSocialNetworkComment):
    def __init__(self,
            header=NotImplemented,
            text=NotImplemented,
            createDate=NotImplemented,
            writer=NotImplemented,
            likeCounter=NotImplemented,
            authorImageUrl=NotImplemented):
        KalturaSocialNetworkComment.__init__(self,
            header,
            text,
            createDate,
            writer,
            likeCounter,
            authorImageUrl)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaSocialNetworkComment.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTwitterTwit.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSocialNetworkComment.toParams(self)
        kparams.put("objectType", "KalturaTwitterTwit")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAssetComment(KalturaSocialComment):
    """Asset Comment"""

    def __init__(self,
            header=NotImplemented,
            text=NotImplemented,
            createDate=NotImplemented,
            writer=NotImplemented,
            id=NotImplemented,
            assetId=NotImplemented,
            assetType=NotImplemented,
            subHeader=NotImplemented):
        KalturaSocialComment.__init__(self,
            header,
            text,
            createDate,
            writer)

        # Comment ID
        # @var int
        self.id = id

        # Asset identifier
        # @var int
        self.assetId = assetId

        # Asset Type
        # @var KalturaAssetType
        self.assetType = assetType

        # Sub Header
        # @var string
        self.subHeader = subHeader


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'assetId': getXmlNodeInt, 
        'assetType': (KalturaEnumsFactory.createString, "KalturaAssetType"), 
        'subHeader': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaSocialComment.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetComment.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSocialComment.toParams(self)
        kparams.put("objectType", "KalturaAssetComment")
        kparams.addIntIfDefined("id", self.id)
        kparams.addIntIfDefined("assetId", self.assetId)
        kparams.addStringEnumIfDefined("assetType", self.assetType)
        kparams.addStringIfDefined("subHeader", self.subHeader)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getAssetId(self):
        return self.assetId

    def setAssetId(self, newAssetId):
        self.assetId = newAssetId

    def getAssetType(self):
        return self.assetType

    def setAssetType(self, newAssetType):
        self.assetType = newAssetType

    def getSubHeader(self):
        return self.subHeader

    def setSubHeader(self, newSubHeader):
        self.subHeader = newSubHeader


# @package Kaltura
# @subpackage Client
class KalturaSocialFriendActivity(KalturaObjectBase):
    def __init__(self,
            userFullName=NotImplemented,
            userPictureUrl=NotImplemented,
            socialAction=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The full name of the user who did the social action
        # @var string
        self.userFullName = userFullName

        # The URL of the profile picture of the user who did the social action
        # @var string
        self.userPictureUrl = userPictureUrl

        # The social action
        # @var KalturaSocialAction
        self.socialAction = socialAction


    PROPERTY_LOADERS = {
        'userFullName': getXmlNodeText, 
        'userPictureUrl': getXmlNodeText, 
        'socialAction': (KalturaObjectFactory.create, 'KalturaSocialAction'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSocialFriendActivity.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSocialFriendActivity")
        kparams.addStringIfDefined("userFullName", self.userFullName)
        kparams.addStringIfDefined("userPictureUrl", self.userPictureUrl)
        kparams.addObjectIfDefined("socialAction", self.socialAction)
        return kparams

    def getUserFullName(self):
        return self.userFullName

    def setUserFullName(self, newUserFullName):
        self.userFullName = newUserFullName

    def getUserPictureUrl(self):
        return self.userPictureUrl

    def setUserPictureUrl(self, newUserPictureUrl):
        self.userPictureUrl = newUserPictureUrl

    def getSocialAction(self):
        return self.socialAction

    def setSocialAction(self, newSocialAction):
        self.socialAction = newSocialAction


# @package Kaltura
# @subpackage Client
class KalturaSocialFriendActivityListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Social friends activity
        # @var array of KalturaSocialFriendActivity
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaSocialFriendActivity'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSocialFriendActivityListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaSocialFriendActivityListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaHouseholdSegmentListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of objects
        # @var array of KalturaHouseholdSegment
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaHouseholdSegment'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdSegmentListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaHouseholdSegmentListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaBaseSegmentCondition(KalturaObjectBase):
    """Base class that defines segment condition"""

    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseSegmentCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBaseSegmentCondition")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBaseSegmentAction(KalturaObjectBase):
    """Base class that defines segment action"""

    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseSegmentAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBaseSegmentAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBaseSegmentValue(KalturaObjectBase):
    """Base class that defines segment value"""

    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseSegmentValue.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBaseSegmentValue")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSegmentationType(KalturaObjectBase):
    """Segmentation type - defines at least one segment"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            conditions=NotImplemented,
            conditionsOperator=NotImplemented,
            actions=NotImplemented,
            value=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            executeDate=NotImplemented,
            version=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Id of segmentation type
        # @var int
        # @readonly
        self.id = id

        # Name of segmentation type
        # @var string
        self.name = name

        # Description of segmentation type
        # @var string
        self.description = description

        # Segmentation conditions - can be empty
        # @var array of KalturaBaseSegmentCondition
        self.conditions = conditions

        # Boolean operator between segmentation type&#39;s conditions - defaults to &quot;And&quot;
        # @var KalturaBooleanOperator
        self.conditionsOperator = conditionsOperator

        # Segmentation conditions - can be empty
        # @var array of KalturaBaseSegmentAction
        self.actions = actions

        # Segmentation values - can be empty (so only one segment will be created)
        # @var KalturaBaseSegmentValue
        self.value = value

        # Create date of segmentation type
        # @var int
        # @readonly
        self.createDate = createDate

        # Update date of segmentation type
        # @var int
        # @readonly
        self.updateDate = updateDate

        # Last date of execution of segmentation type
        # @var int
        # @readonly
        self.executeDate = executeDate

        # Segmentation type version
        # @var int
        # @readonly
        self.version = version


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'description': getXmlNodeText, 
        'conditions': (KalturaObjectFactory.createArray, 'KalturaBaseSegmentCondition'), 
        'conditionsOperator': (KalturaEnumsFactory.createString, "KalturaBooleanOperator"), 
        'actions': (KalturaObjectFactory.createArray, 'KalturaBaseSegmentAction'), 
        'value': (KalturaObjectFactory.create, 'KalturaBaseSegmentValue'), 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
        'executeDate': getXmlNodeInt, 
        'version': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSegmentationType.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSegmentationType")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("description", self.description)
        kparams.addArrayIfDefined("conditions", self.conditions)
        kparams.addStringEnumIfDefined("conditionsOperator", self.conditionsOperator)
        kparams.addArrayIfDefined("actions", self.actions)
        kparams.addObjectIfDefined("value", self.value)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getConditions(self):
        return self.conditions

    def setConditions(self, newConditions):
        self.conditions = newConditions

    def getConditionsOperator(self):
        return self.conditionsOperator

    def setConditionsOperator(self, newConditionsOperator):
        self.conditionsOperator = newConditionsOperator

    def getActions(self):
        return self.actions

    def setActions(self, newActions):
        self.actions = newActions

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate

    def getExecuteDate(self):
        return self.executeDate

    def getVersion(self):
        return self.version


# @package Kaltura
# @subpackage Client
class KalturaSegmentationTypeListResponse(KalturaListResponse):
    """List of segmentation types"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Segmentation Types
        # @var array of KalturaSegmentationType
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaSegmentationType'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSegmentationTypeListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaSegmentationTypeListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaContentActionCondition(KalturaObjectBase):
    """Segmentation condition regarding content actions"""

    def __init__(self,
            action=NotImplemented,
            length=NotImplemented,
            lengthType=NotImplemented,
            multiplier=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The relevant action to be examined
        # @var KalturaContentAction
        self.action = action

        # Optional - if action required specific length to be considered (in percentage or minutes)
        # @var int
        self.length = length

        # Optional - if action required specific length to be considered (in percentage or minutes)
        # @var KalturaContentActionConditionLengthType
        self.lengthType = lengthType

        # Score multiplier - how much is a single action worth when considering the action
        # @var int
        self.multiplier = multiplier


    PROPERTY_LOADERS = {
        'action': (KalturaEnumsFactory.createString, "KalturaContentAction"), 
        'length': getXmlNodeInt, 
        'lengthType': (KalturaEnumsFactory.createString, "KalturaContentActionConditionLengthType"), 
        'multiplier': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaContentActionCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaContentActionCondition")
        kparams.addStringEnumIfDefined("action", self.action)
        kparams.addIntIfDefined("length", self.length)
        kparams.addStringEnumIfDefined("lengthType", self.lengthType)
        kparams.addIntIfDefined("multiplier", self.multiplier)
        return kparams

    def getAction(self):
        return self.action

    def setAction(self, newAction):
        self.action = newAction

    def getLength(self):
        return self.length

    def setLength(self, newLength):
        self.length = newLength

    def getLengthType(self):
        return self.lengthType

    def setLengthType(self, newLengthType):
        self.lengthType = newLengthType

    def getMultiplier(self):
        return self.multiplier

    def setMultiplier(self, newMultiplier):
        self.multiplier = newMultiplier


# @package Kaltura
# @subpackage Client
class KalturaContentScoreCondition(KalturaBaseSegmentCondition):
    """Defines a condition which is essentially a combination of several content-based actions, each has their own score multiplier"""

    def __init__(self,
            minScore=NotImplemented,
            maxScore=NotImplemented,
            days=NotImplemented,
            field=NotImplemented,
            values=NotImplemented,
            actions=NotImplemented):
        KalturaBaseSegmentCondition.__init__(self)

        # The minimum score to be met
        # @var int
        self.minScore = minScore

        # The maximum score to be met
        # @var int
        self.maxScore = maxScore

        # How many days back should the actions be considered
        # @var int
        self.days = days

        # If condition should be applied on specific field (and not the one of the segment value)
        # @var string
        self.field = field

        # If condition should be applied on specific field (and not the one of the segment value) - 
        #             list of values to be considered together
        # @var array of KalturaStringValue
        self.values = values

        # List of the actions that consist the condition
        # @var array of KalturaContentActionCondition
        self.actions = actions


    PROPERTY_LOADERS = {
        'minScore': getXmlNodeInt, 
        'maxScore': getXmlNodeInt, 
        'days': getXmlNodeInt, 
        'field': getXmlNodeText, 
        'values': (KalturaObjectFactory.createArray, 'KalturaStringValue'), 
        'actions': (KalturaObjectFactory.createArray, 'KalturaContentActionCondition'), 
    }

    def fromXml(self, node):
        KalturaBaseSegmentCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaContentScoreCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSegmentCondition.toParams(self)
        kparams.put("objectType", "KalturaContentScoreCondition")
        kparams.addIntIfDefined("minScore", self.minScore)
        kparams.addIntIfDefined("maxScore", self.maxScore)
        kparams.addIntIfDefined("days", self.days)
        kparams.addStringIfDefined("field", self.field)
        kparams.addArrayIfDefined("values", self.values)
        kparams.addArrayIfDefined("actions", self.actions)
        return kparams

    def getMinScore(self):
        return self.minScore

    def setMinScore(self, newMinScore):
        self.minScore = newMinScore

    def getMaxScore(self):
        return self.maxScore

    def setMaxScore(self, newMaxScore):
        self.maxScore = newMaxScore

    def getDays(self):
        return self.days

    def setDays(self, newDays):
        self.days = newDays

    def getField(self):
        return self.field

    def setField(self, newField):
        self.field = newField

    def getValues(self):
        return self.values

    def setValues(self, newValues):
        self.values = newValues

    def getActions(self):
        return self.actions

    def setActions(self, newActions):
        self.actions = newActions


# @package Kaltura
# @subpackage Client
class KalturaMonetizationCondition(KalturaBaseSegmentCondition):
    """Defines a condition which is essentially a combination of several monetization-based actions, each has their own score multiplier"""

    def __init__(self,
            minValue=NotImplemented,
            maxValue=NotImplemented,
            days=NotImplemented,
            type=NotImplemented,
            operator=NotImplemented,
            businessModuleIdIn=NotImplemented,
            currencyCode=NotImplemented):
        KalturaBaseSegmentCondition.__init__(self)

        # The minimum value to be met
        # @var int
        self.minValue = minValue

        # The maximum value to be met
        # @var int
        self.maxValue = maxValue

        # How many days back should the actions be considered
        # @var int
        self.days = days

        # Purchase type
        # @var KalturaMonetizationType
        self.type = type

        # Mathermtical operator to calculate
        # @var KalturaMathemticalOperatorType
        self.operator = operator

        # Comma saperated list of business module IDs
        # @var string
        self.businessModuleIdIn = businessModuleIdIn

        # Which currency code should be taken into consideration
        # @var string
        self.currencyCode = currencyCode


    PROPERTY_LOADERS = {
        'minValue': getXmlNodeInt, 
        'maxValue': getXmlNodeInt, 
        'days': getXmlNodeInt, 
        'type': (KalturaEnumsFactory.createString, "KalturaMonetizationType"), 
        'operator': (KalturaEnumsFactory.createString, "KalturaMathemticalOperatorType"), 
        'businessModuleIdIn': getXmlNodeText, 
        'currencyCode': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBaseSegmentCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMonetizationCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSegmentCondition.toParams(self)
        kparams.put("objectType", "KalturaMonetizationCondition")
        kparams.addIntIfDefined("minValue", self.minValue)
        kparams.addIntIfDefined("maxValue", self.maxValue)
        kparams.addIntIfDefined("days", self.days)
        kparams.addStringEnumIfDefined("type", self.type)
        kparams.addStringEnumIfDefined("operator", self.operator)
        kparams.addStringIfDefined("businessModuleIdIn", self.businessModuleIdIn)
        kparams.addStringIfDefined("currencyCode", self.currencyCode)
        return kparams

    def getMinValue(self):
        return self.minValue

    def setMinValue(self, newMinValue):
        self.minValue = newMinValue

    def getMaxValue(self):
        return self.maxValue

    def setMaxValue(self, newMaxValue):
        self.maxValue = newMaxValue

    def getDays(self):
        return self.days

    def setDays(self, newDays):
        self.days = newDays

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getOperator(self):
        return self.operator

    def setOperator(self, newOperator):
        self.operator = newOperator

    def getBusinessModuleIdIn(self):
        return self.businessModuleIdIn

    def setBusinessModuleIdIn(self, newBusinessModuleIdIn):
        self.businessModuleIdIn = newBusinessModuleIdIn

    def getCurrencyCode(self):
        return self.currencyCode

    def setCurrencyCode(self, newCurrencyCode):
        self.currencyCode = newCurrencyCode


# @package Kaltura
# @subpackage Client
class KalturaUserDataCondition(KalturaBaseSegmentCondition):
    """User data condition for segmentation"""

    def __init__(self,
            field=NotImplemented,
            value=NotImplemented):
        KalturaBaseSegmentCondition.__init__(self)

        # Field name
        # @var string
        self.field = field

        # Value
        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'field': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBaseSegmentCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserDataCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSegmentCondition.toParams(self)
        kparams.put("objectType", "KalturaUserDataCondition")
        kparams.addStringIfDefined("field", self.field)
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getField(self):
        return self.field

    def setField(self, newField):
        self.field = newField

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaAssetOrderSegmentAction(KalturaBaseSegmentAction):
    """Asset order segment action"""

    def __init__(self,
            name=NotImplemented,
            values=NotImplemented):
        KalturaBaseSegmentAction.__init__(self)

        # Action name
        # @var string
        self.name = name

        # Action values
        # @var array of KalturaStringValue
        self.values = values


    PROPERTY_LOADERS = {
        'name': getXmlNodeText, 
        'values': (KalturaObjectFactory.createArray, 'KalturaStringValue'), 
    }

    def fromXml(self, node):
        KalturaBaseSegmentAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetOrderSegmentAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSegmentAction.toParams(self)
        kparams.put("objectType", "KalturaAssetOrderSegmentAction")
        kparams.addStringIfDefined("name", self.name)
        kparams.addArrayIfDefined("values", self.values)
        return kparams

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getValues(self):
        return self.values

    def setValues(self, newValues):
        self.values = newValues


# @package Kaltura
# @subpackage Client
class KalturaKsqlSegmentAction(KalturaBaseSegmentAction):
    """Segment action with ksql"""

    def __init__(self,
            ksql=NotImplemented):
        KalturaBaseSegmentAction.__init__(self)

        # KSQL
        # @var string
        self.ksql = ksql


    PROPERTY_LOADERS = {
        'ksql': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBaseSegmentAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaKsqlSegmentAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSegmentAction.toParams(self)
        kparams.put("objectType", "KalturaKsqlSegmentAction")
        kparams.addStringIfDefined("ksql", self.ksql)
        return kparams

    def getKsql(self):
        return self.ksql

    def setKsql(self, newKsql):
        self.ksql = newKsql


# @package Kaltura
# @subpackage Client
class KalturaBlockSubscriptionSegmentAction(KalturaKsqlSegmentAction):
    """segment block subscription action"""

    def __init__(self,
            ksql=NotImplemented):
        KalturaKsqlSegmentAction.__init__(self,
            ksql)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaKsqlSegmentAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBlockSubscriptionSegmentAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaKsqlSegmentAction.toParams(self)
        kparams.put("objectType", "KalturaBlockSubscriptionSegmentAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSegmentAssetFilterAction(KalturaKsqlSegmentAction):
    """Asset filter action"""

    def __init__(self,
            ksql=NotImplemented):
        KalturaKsqlSegmentAction.__init__(self,
            ksql)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaKsqlSegmentAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSegmentAssetFilterAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaKsqlSegmentAction.toParams(self)
        kparams.put("objectType", "KalturaSegmentAssetFilterAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSegmentAssetFilterSegmentAction(KalturaSegmentAssetFilterAction):
    """segment asset filter for segment action"""

    def __init__(self,
            ksql=NotImplemented):
        KalturaSegmentAssetFilterAction.__init__(self,
            ksql)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaSegmentAssetFilterAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSegmentAssetFilterSegmentAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSegmentAssetFilterAction.toParams(self)
        kparams.put("objectType", "KalturaSegmentAssetFilterSegmentAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSegmentAssetFilterSubscriptionAction(KalturaSegmentAssetFilterAction):
    """segment asset filter for subscription action"""

    def __init__(self,
            ksql=NotImplemented):
        KalturaSegmentAssetFilterAction.__init__(self,
            ksql)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaSegmentAssetFilterAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSegmentAssetFilterSubscriptionAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSegmentAssetFilterAction.toParams(self)
        kparams.put("objectType", "KalturaSegmentAssetFilterSubscriptionAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSegmentBlockCancelSubscriptionAction(KalturaBlockSubscriptionSegmentAction):
    """segment block subscription for cancel action"""

    def __init__(self,
            ksql=NotImplemented):
        KalturaBlockSubscriptionSegmentAction.__init__(self,
            ksql)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBlockSubscriptionSegmentAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSegmentBlockCancelSubscriptionAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBlockSubscriptionSegmentAction.toParams(self)
        kparams.put("objectType", "KalturaSegmentBlockCancelSubscriptionAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSegmentBlockPlaybackSubscriptionAction(KalturaBlockSubscriptionSegmentAction):
    """segment block subscription for playback action"""

    def __init__(self,
            ksql=NotImplemented):
        KalturaBlockSubscriptionSegmentAction.__init__(self,
            ksql)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBlockSubscriptionSegmentAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSegmentBlockPlaybackSubscriptionAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBlockSubscriptionSegmentAction.toParams(self)
        kparams.put("objectType", "KalturaSegmentBlockPlaybackSubscriptionAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSegmentBlockPurchaseSubscriptionAction(KalturaBlockSubscriptionSegmentAction):
    """segment block subscription for purchase action"""

    def __init__(self,
            ksql=NotImplemented):
        KalturaBlockSubscriptionSegmentAction.__init__(self,
            ksql)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBlockSubscriptionSegmentAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSegmentBlockPurchaseSubscriptionAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBlockSubscriptionSegmentAction.toParams(self)
        kparams.put("objectType", "KalturaSegmentBlockPurchaseSubscriptionAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSegmentSource(KalturaObjectBase):
    """Defines which sort is relevant to the condition or the segmentation"""

    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSegmentSource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSegmentSource")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSegmentValue(KalturaObjectBase):
    """Specific segment value"""

    def __init__(self,
            id=NotImplemented,
            systematicName=NotImplemented,
            name=NotImplemented,
            value=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Id of segment
        # @var int
        # @readonly
        self.id = id

        # Systematic name of segment
        # @var string
        self.systematicName = systematicName

        # Name of segment
        # @var string
        self.name = name

        # The value of the segment
        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'systematicName': getXmlNodeText, 
        'name': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSegmentValue.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSegmentValue")
        kparams.addStringIfDefined("systematicName", self.systematicName)
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getId(self):
        return self.id

    def getSystematicName(self):
        return self.systematicName

    def setSystematicName(self, newSystematicName):
        self.systematicName = newSystematicName

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaSegmentValues(KalturaBaseSegmentValue):
    """Segmentation type which takes certain values of a tag/meta as segments"""

    def __init__(self,
            source=NotImplemented,
            values=NotImplemented):
        KalturaBaseSegmentValue.__init__(self)

        # Segment values source
        # @var KalturaSegmentSource
        self.source = source

        # List of segment values
        # @var array of KalturaSegmentValue
        self.values = values


    PROPERTY_LOADERS = {
        'source': (KalturaObjectFactory.create, 'KalturaSegmentSource'), 
        'values': (KalturaObjectFactory.createArray, 'KalturaSegmentValue'), 
    }

    def fromXml(self, node):
        KalturaBaseSegmentValue.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSegmentValues.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSegmentValue.toParams(self)
        kparams.put("objectType", "KalturaSegmentValues")
        kparams.addObjectIfDefined("source", self.source)
        kparams.addArrayIfDefined("values", self.values)
        return kparams

    def getSource(self):
        return self.source

    def setSource(self, newSource):
        self.source = newSource

    def getValues(self):
        return self.values

    def setValues(self, newValues):
        self.values = newValues


# @package Kaltura
# @subpackage Client
class KalturaSegmentAllValues(KalturaSegmentValues):
    """Segmentation type which takes all values of a tag/meta as segments"""

    def __init__(self,
            source=NotImplemented,
            values=NotImplemented,
            nameFormat=NotImplemented):
        KalturaSegmentValues.__init__(self,
            source,
            values)

        # Segment names&#39; format - they will be automatically generated
        # @var string
        self.nameFormat = nameFormat


    PROPERTY_LOADERS = {
        'nameFormat': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaSegmentValues.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSegmentAllValues.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSegmentValues.toParams(self)
        kparams.put("objectType", "KalturaSegmentAllValues")
        kparams.addStringIfDefined("nameFormat", self.nameFormat)
        return kparams

    def getNameFormat(self):
        return self.nameFormat

    def setNameFormat(self, newNameFormat):
        self.nameFormat = newNameFormat


# @package Kaltura
# @subpackage Client
class KalturaContentSource(KalturaSegmentSource):
    """Content based source (meta, tag etc.)"""

    def __init__(self,
            field=NotImplemented):
        KalturaSegmentSource.__init__(self)

        # Topic (meta or tag) name
        # @var string
        self.field = field


    PROPERTY_LOADERS = {
        'field': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaSegmentSource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaContentSource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSegmentSource.toParams(self)
        kparams.put("objectType", "KalturaContentSource")
        kparams.addStringIfDefined("field", self.field)
        return kparams

    def getField(self):
        return self.field

    def setField(self, newField):
        self.field = newField


# @package Kaltura
# @subpackage Client
class KalturaMonetizationSource(KalturaSegmentSource):
    """Monetization based source (purchases etc.)"""

    def __init__(self,
            type=NotImplemented,
            operator=NotImplemented,
            days=NotImplemented):
        KalturaSegmentSource.__init__(self)

        # Purchase type
        # @var KalturaMonetizationType
        self.type = type

        # Mathermtical operator to calculate
        # @var KalturaMathemticalOperatorType
        self.operator = operator

        # Days to consider when checking the users&#39; purchaes
        # @var int
        self.days = days


    PROPERTY_LOADERS = {
        'type': (KalturaEnumsFactory.createString, "KalturaMonetizationType"), 
        'operator': (KalturaEnumsFactory.createString, "KalturaMathemticalOperatorType"), 
        'days': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaSegmentSource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMonetizationSource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSegmentSource.toParams(self)
        kparams.put("objectType", "KalturaMonetizationSource")
        kparams.addStringEnumIfDefined("type", self.type)
        kparams.addStringEnumIfDefined("operator", self.operator)
        kparams.addIntIfDefined("days", self.days)
        return kparams

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getOperator(self):
        return self.operator

    def setOperator(self, newOperator):
        self.operator = newOperator

    def getDays(self):
        return self.days

    def setDays(self, newDays):
        self.days = newDays


# @package Kaltura
# @subpackage Client
class KalturaUserDynamicDataSource(KalturaSegmentSource):
    """User dynamic data source"""

    def __init__(self,
            field=NotImplemented):
        KalturaSegmentSource.__init__(self)

        # Field name
        # @var string
        self.field = field


    PROPERTY_LOADERS = {
        'field': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaSegmentSource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserDynamicDataSource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSegmentSource.toParams(self)
        kparams.put("objectType", "KalturaUserDynamicDataSource")
        kparams.addStringIfDefined("field", self.field)
        return kparams

    def getField(self):
        return self.field

    def setField(self, newField):
        self.field = newField


# @package Kaltura
# @subpackage Client
class KalturaSegmentRange(KalturaObjectBase):
    """Segment that is based on a range of values"""

    def __init__(self,
            id=NotImplemented,
            systematicName=NotImplemented,
            name=NotImplemented,
            gte=NotImplemented,
            gt=NotImplemented,
            lte=NotImplemented,
            lt=NotImplemented,
            equals=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Id of segment
        # @var int
        # @readonly
        self.id = id

        # Systematic name of segment
        # @var string
        self.systematicName = systematicName

        # Specific segment name
        # @var string
        self.name = name

        # Greater than or equals &gt;=
        # @var float
        self.gte = gte

        # Greater than &gt;
        # @var float
        self.gt = gt

        # Less than or equals
        # @var float
        self.lte = lte

        # Less than
        # @var float
        self.lt = lt

        # Equals
        # @var float
        self.equals = equals


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'systematicName': getXmlNodeText, 
        'name': getXmlNodeText, 
        'gte': getXmlNodeFloat, 
        'gt': getXmlNodeFloat, 
        'lte': getXmlNodeFloat, 
        'lt': getXmlNodeFloat, 
        'equals': getXmlNodeFloat, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSegmentRange.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSegmentRange")
        kparams.addStringIfDefined("systematicName", self.systematicName)
        kparams.addStringIfDefined("name", self.name)
        kparams.addFloatIfDefined("gte", self.gte)
        kparams.addFloatIfDefined("gt", self.gt)
        kparams.addFloatIfDefined("lte", self.lte)
        kparams.addFloatIfDefined("lt", self.lt)
        kparams.addFloatIfDefined("equals", self.equals)
        return kparams

    def getId(self):
        return self.id

    def getSystematicName(self):
        return self.systematicName

    def setSystematicName(self, newSystematicName):
        self.systematicName = newSystematicName

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getGte(self):
        return self.gte

    def setGte(self, newGte):
        self.gte = newGte

    def getGt(self):
        return self.gt

    def setGt(self, newGt):
        self.gt = newGt

    def getLte(self):
        return self.lte

    def setLte(self, newLte):
        self.lte = newLte

    def getLt(self):
        return self.lt

    def setLt(self, newLt):
        self.lt = newLt

    def getEquals(self):
        return self.equals

    def setEquals(self, newEquals):
        self.equals = newEquals


# @package Kaltura
# @subpackage Client
class KalturaSegmentRanges(KalturaBaseSegmentValue):
    """Segmentation type that takes different ranges as segments"""

    def __init__(self,
            source=NotImplemented,
            ranges=NotImplemented):
        KalturaBaseSegmentValue.__init__(self)

        # Range source
        # @var KalturaSegmentSource
        self.source = source

        # List of ranges for segmentation
        # @var array of KalturaSegmentRange
        self.ranges = ranges


    PROPERTY_LOADERS = {
        'source': (KalturaObjectFactory.create, 'KalturaSegmentSource'), 
        'ranges': (KalturaObjectFactory.createArray, 'KalturaSegmentRange'), 
    }

    def fromXml(self, node):
        KalturaBaseSegmentValue.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSegmentRanges.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSegmentValue.toParams(self)
        kparams.put("objectType", "KalturaSegmentRanges")
        kparams.addObjectIfDefined("source", self.source)
        kparams.addArrayIfDefined("ranges", self.ranges)
        return kparams

    def getSource(self):
        return self.source

    def setSource(self, newSource):
        self.source = newSource

    def getRanges(self):
        return self.ranges

    def setRanges(self, newRanges):
        self.ranges = newRanges


# @package Kaltura
# @subpackage Client
class KalturaSingleSegmentValue(KalturaBaseSegmentValue):
    def __init__(self,
            id=NotImplemented,
            affectedUsers=NotImplemented,
            affectedHouseholds=NotImplemented):
        KalturaBaseSegmentValue.__init__(self)

        # Id of segment
        # @var int
        # @readonly
        self.id = id

        # The amount of users that are being affected by this Segmentation type
        # @var int
        # @readonly
        self.affectedUsers = affectedUsers

        # The amount of households that are being affected by this Segmentation type
        # @var int
        # @readonly
        self.affectedHouseholds = affectedHouseholds


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'affectedUsers': getXmlNodeInt, 
        'affectedHouseholds': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaBaseSegmentValue.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSingleSegmentValue.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSegmentValue.toParams(self)
        kparams.put("objectType", "KalturaSingleSegmentValue")
        return kparams

    def getId(self):
        return self.id

    def getAffectedUsers(self):
        return self.affectedUsers

    def getAffectedHouseholds(self):
        return self.affectedHouseholds


# @package Kaltura
# @subpackage Client
class KalturaUserSegment(KalturaObjectBase):
    """Indicates a segment of a user"""

    def __init__(self,
            segmentId=NotImplemented,
            userId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Segment Id
        # @var int
        self.segmentId = segmentId

        # User Id of segment
        # @var string
        self.userId = userId


    PROPERTY_LOADERS = {
        'segmentId': getXmlNodeInt, 
        'userId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserSegment.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUserSegment")
        kparams.addIntIfDefined("segmentId", self.segmentId)
        kparams.addStringIfDefined("userId", self.userId)
        return kparams

    def getSegmentId(self):
        return self.segmentId

    def setSegmentId(self, newSegmentId):
        self.segmentId = newSegmentId

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId


# @package Kaltura
# @subpackage Client
class KalturaUserSegmentListResponse(KalturaListResponse):
    """List of user segments"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Segmentation Types
        # @var array of KalturaUserSegment
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaUserSegment'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserSegmentListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaUserSegmentListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaAssetFilePpvListResponse(KalturaListResponse):
    """Asset file ppv list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of asset files ppvs
        # @var array of KalturaAssetFilePpv
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaAssetFilePpv'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetFilePpvListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaAssetFilePpvListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaCollectionListResponse(KalturaListResponse):
    """Collections list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of collections
        # @var array of KalturaCollection
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaCollection'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCollectionListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaCollectionListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaCoupon(KalturaObjectBase):
    """Coupon details container"""

    def __init__(self,
            couponsGroup=NotImplemented,
            status=NotImplemented,
            totalUses=NotImplemented,
            leftUses=NotImplemented,
            couponCode=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Coupons group details
        # @var KalturaCouponsGroup
        # @readonly
        self.couponsGroup = couponsGroup

        # Coupon status
        # @var KalturaCouponStatus
        # @readonly
        self.status = status

        # Total available coupon uses
        # @var int
        # @readonly
        self.totalUses = totalUses

        # Left coupon uses
        # @var int
        # @readonly
        self.leftUses = leftUses

        # Coupon code
        # @var string
        # @readonly
        self.couponCode = couponCode


    PROPERTY_LOADERS = {
        'couponsGroup': (KalturaObjectFactory.create, 'KalturaCouponsGroup'), 
        'status': (KalturaEnumsFactory.createString, "KalturaCouponStatus"), 
        'totalUses': getXmlNodeInt, 
        'leftUses': getXmlNodeInt, 
        'couponCode': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCoupon.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCoupon")
        return kparams

    def getCouponsGroup(self):
        return self.couponsGroup

    def getStatus(self):
        return self.status

    def getTotalUses(self):
        return self.totalUses

    def getLeftUses(self):
        return self.leftUses

    def getCouponCode(self):
        return self.couponCode


# @package Kaltura
# @subpackage Client
class KalturaCouponListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of Coupons
        # @var array of KalturaCoupon
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaCoupon'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCouponListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaCouponListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaCouponsGroupListResponse(KalturaListResponse):
    """Coupons group list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of coupons groups
        # @var array of KalturaCouponsGroup
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaCouponsGroup'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCouponsGroupListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaCouponsGroupListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaDiscountDetails(KalturaObjectBase):
    """Discount details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            multiCurrencyDiscount=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            whenAlgoTimes=NotImplemented,
            whenAlgoType=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The discount ID
        # @var int
        # @readonly
        self.id = id

        # The price code name
        # @var string
        self.name = name

        # Multi currency discounts for all countries and currencies
        # @var array of KalturaDiscount
        self.multiCurrencyDiscount = multiCurrencyDiscount

        # Start date represented as epoch
        # @var int
        self.startDate = startDate

        # End date represented as epoch
        # @var int
        self.endDate = endDate

        # End date represented as epoch
        # @var int
        self.whenAlgoTimes = whenAlgoTimes

        # End date represented as epoch
        # @var int
        self.whenAlgoType = whenAlgoType


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'multiCurrencyDiscount': (KalturaObjectFactory.createArray, 'KalturaDiscount'), 
        'startDate': getXmlNodeInt, 
        'endDate': getXmlNodeInt, 
        'whenAlgoTimes': getXmlNodeInt, 
        'whenAlgoType': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDiscountDetails.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaDiscountDetails")
        kparams.addStringIfDefined("name", self.name)
        kparams.addArrayIfDefined("multiCurrencyDiscount", self.multiCurrencyDiscount)
        kparams.addIntIfDefined("startDate", self.startDate)
        kparams.addIntIfDefined("endDate", self.endDate)
        kparams.addIntIfDefined("whenAlgoTimes", self.whenAlgoTimes)
        kparams.addIntIfDefined("whenAlgoType", self.whenAlgoType)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getMultiCurrencyDiscount(self):
        return self.multiCurrencyDiscount

    def setMultiCurrencyDiscount(self, newMultiCurrencyDiscount):
        self.multiCurrencyDiscount = newMultiCurrencyDiscount

    def getStartDate(self):
        return self.startDate

    def setStartDate(self, newStartDate):
        self.startDate = newStartDate

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate

    def getWhenAlgoTimes(self):
        return self.whenAlgoTimes

    def setWhenAlgoTimes(self, newWhenAlgoTimes):
        self.whenAlgoTimes = newWhenAlgoTimes

    def getWhenAlgoType(self):
        return self.whenAlgoType

    def setWhenAlgoType(self, newWhenAlgoType):
        self.whenAlgoType = newWhenAlgoType


# @package Kaltura
# @subpackage Client
class KalturaDiscountDetailsListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of discount details
        # @var array of KalturaDiscountDetails
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaDiscountDetails'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDiscountDetailsListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaDiscountDetailsListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaPromotionInfo(KalturaObjectBase):
    def __init__(self,
            campaignId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Campaign Id
        # @var int
        self.campaignId = campaignId


    PROPERTY_LOADERS = {
        'campaignId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPromotionInfo.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPromotionInfo")
        kparams.addIntIfDefined("campaignId", self.campaignId)
        return kparams

    def getCampaignId(self):
        return self.campaignId

    def setCampaignId(self, newCampaignId):
        self.campaignId = newCampaignId


# @package Kaltura
# @subpackage Client
class KalturaProductPrice(KalturaObjectBase):
    def __init__(self,
            productId=NotImplemented,
            productType=NotImplemented,
            price=NotImplemented,
            fullPrice=NotImplemented,
            purchaseStatus=NotImplemented,
            promotionInfo=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Product identifier
        # @var string
        self.productId = productId

        # Product Type
        # @var KalturaTransactionType
        self.productType = productType

        # Product price
        # @var KalturaPrice
        self.price = price

        # The full price of the item (with no discounts)
        # @var KalturaPrice
        self.fullPrice = fullPrice

        # Product purchase status
        # @var KalturaPurchaseStatus
        self.purchaseStatus = purchaseStatus

        # Promotion Info
        # @var KalturaPromotionInfo
        self.promotionInfo = promotionInfo


    PROPERTY_LOADERS = {
        'productId': getXmlNodeText, 
        'productType': (KalturaEnumsFactory.createString, "KalturaTransactionType"), 
        'price': (KalturaObjectFactory.create, 'KalturaPrice'), 
        'fullPrice': (KalturaObjectFactory.create, 'KalturaPrice'), 
        'purchaseStatus': (KalturaEnumsFactory.createString, "KalturaPurchaseStatus"), 
        'promotionInfo': (KalturaObjectFactory.create, 'KalturaPromotionInfo'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaProductPrice.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaProductPrice")
        kparams.addStringIfDefined("productId", self.productId)
        kparams.addStringEnumIfDefined("productType", self.productType)
        kparams.addObjectIfDefined("price", self.price)
        kparams.addObjectIfDefined("fullPrice", self.fullPrice)
        kparams.addStringEnumIfDefined("purchaseStatus", self.purchaseStatus)
        kparams.addObjectIfDefined("promotionInfo", self.promotionInfo)
        return kparams

    def getProductId(self):
        return self.productId

    def setProductId(self, newProductId):
        self.productId = newProductId

    def getProductType(self):
        return self.productType

    def setProductType(self, newProductType):
        self.productType = newProductType

    def getPrice(self):
        return self.price

    def setPrice(self, newPrice):
        self.price = newPrice

    def getFullPrice(self):
        return self.fullPrice

    def setFullPrice(self, newFullPrice):
        self.fullPrice = newFullPrice

    def getPurchaseStatus(self):
        return self.purchaseStatus

    def setPurchaseStatus(self, newPurchaseStatus):
        self.purchaseStatus = newPurchaseStatus

    def getPromotionInfo(self):
        return self.promotionInfo

    def setPromotionInfo(self, newPromotionInfo):
        self.promotionInfo = newPromotionInfo


# @package Kaltura
# @subpackage Client
class KalturaCollectionPrice(KalturaProductPrice):
    """Collection price details"""

    def __init__(self,
            productId=NotImplemented,
            productType=NotImplemented,
            price=NotImplemented,
            fullPrice=NotImplemented,
            purchaseStatus=NotImplemented,
            promotionInfo=NotImplemented):
        KalturaProductPrice.__init__(self,
            productId,
            productType,
            price,
            fullPrice,
            purchaseStatus,
            promotionInfo)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaProductPrice.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCollectionPrice.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaProductPrice.toParams(self)
        kparams.put("objectType", "KalturaCollectionPrice")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaPpvPrice(KalturaProductPrice):
    """PPV price details"""

    def __init__(self,
            productId=NotImplemented,
            productType=NotImplemented,
            price=NotImplemented,
            fullPrice=NotImplemented,
            purchaseStatus=NotImplemented,
            promotionInfo=NotImplemented,
            fileId=NotImplemented,
            ppvModuleId=NotImplemented,
            isSubscriptionOnly=NotImplemented,
            subscriptionId=NotImplemented,
            collectionId=NotImplemented,
            prePaidId=NotImplemented,
            ppvDescriptions=NotImplemented,
            purchaseUserId=NotImplemented,
            purchasedMediaFileId=NotImplemented,
            relatedMediaFileIds=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            discountEndDate=NotImplemented,
            firstDeviceName=NotImplemented,
            isInCancelationPeriod=NotImplemented,
            ppvProductCode=NotImplemented):
        KalturaProductPrice.__init__(self,
            productId,
            productType,
            price,
            fullPrice,
            purchaseStatus,
            promotionInfo)

        # Media file identifier
        # @var int
        self.fileId = fileId

        # The associated PPV module identifier
        # @var string
        self.ppvModuleId = ppvModuleId

        # Denotes whether this object is available only as part of a subscription or can be sold separately
        # @var bool
        self.isSubscriptionOnly = isSubscriptionOnly

        # The identifier of the relevant subscription
        # @var string
        self.subscriptionId = subscriptionId

        # The identifier of the relevant collection
        # @var string
        self.collectionId = collectionId

        # The identifier of the relevant pre paid
        # @var string
        self.prePaidId = prePaidId

        # A list of the descriptions of the PPV module on different languages (language code and translation)
        # @var array of KalturaTranslationToken
        self.ppvDescriptions = ppvDescriptions

        # If the item already purchased - the identifier of the user (in the household) who purchased this item
        # @var string
        self.purchaseUserId = purchaseUserId

        # If the item already purchased - the identifier of the purchased file
        # @var int
        self.purchasedMediaFileId = purchasedMediaFileId

        # Related media files identifiers (different types)
        # @var array of KalturaIntegerValue
        self.relatedMediaFileIds = relatedMediaFileIds

        # If the item already purchased - since when the user can start watching the item
        # @var int
        self.startDate = startDate

        # If the item already purchased - until when the user can watch the item
        # @var int
        self.endDate = endDate

        # Discount end date
        # @var int
        self.discountEndDate = discountEndDate

        # If the item already purchased and played - the name of the device on which it was first played
        # @var string
        self.firstDeviceName = firstDeviceName

        # If waiver period is enabled - donates whether the user is still in the cancelation window
        # @var bool
        self.isInCancelationPeriod = isInCancelationPeriod

        # The PPV product code
        # @var string
        self.ppvProductCode = ppvProductCode


    PROPERTY_LOADERS = {
        'fileId': getXmlNodeInt, 
        'ppvModuleId': getXmlNodeText, 
        'isSubscriptionOnly': getXmlNodeBool, 
        'subscriptionId': getXmlNodeText, 
        'collectionId': getXmlNodeText, 
        'prePaidId': getXmlNodeText, 
        'ppvDescriptions': (KalturaObjectFactory.createArray, 'KalturaTranslationToken'), 
        'purchaseUserId': getXmlNodeText, 
        'purchasedMediaFileId': getXmlNodeInt, 
        'relatedMediaFileIds': (KalturaObjectFactory.createArray, 'KalturaIntegerValue'), 
        'startDate': getXmlNodeInt, 
        'endDate': getXmlNodeInt, 
        'discountEndDate': getXmlNodeInt, 
        'firstDeviceName': getXmlNodeText, 
        'isInCancelationPeriod': getXmlNodeBool, 
        'ppvProductCode': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaProductPrice.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPpvPrice.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaProductPrice.toParams(self)
        kparams.put("objectType", "KalturaPpvPrice")
        kparams.addIntIfDefined("fileId", self.fileId)
        kparams.addStringIfDefined("ppvModuleId", self.ppvModuleId)
        kparams.addBoolIfDefined("isSubscriptionOnly", self.isSubscriptionOnly)
        kparams.addStringIfDefined("subscriptionId", self.subscriptionId)
        kparams.addStringIfDefined("collectionId", self.collectionId)
        kparams.addStringIfDefined("prePaidId", self.prePaidId)
        kparams.addArrayIfDefined("ppvDescriptions", self.ppvDescriptions)
        kparams.addStringIfDefined("purchaseUserId", self.purchaseUserId)
        kparams.addIntIfDefined("purchasedMediaFileId", self.purchasedMediaFileId)
        kparams.addArrayIfDefined("relatedMediaFileIds", self.relatedMediaFileIds)
        kparams.addIntIfDefined("startDate", self.startDate)
        kparams.addIntIfDefined("endDate", self.endDate)
        kparams.addIntIfDefined("discountEndDate", self.discountEndDate)
        kparams.addStringIfDefined("firstDeviceName", self.firstDeviceName)
        kparams.addBoolIfDefined("isInCancelationPeriod", self.isInCancelationPeriod)
        kparams.addStringIfDefined("ppvProductCode", self.ppvProductCode)
        return kparams

    def getFileId(self):
        return self.fileId

    def setFileId(self, newFileId):
        self.fileId = newFileId

    def getPpvModuleId(self):
        return self.ppvModuleId

    def setPpvModuleId(self, newPpvModuleId):
        self.ppvModuleId = newPpvModuleId

    def getIsSubscriptionOnly(self):
        return self.isSubscriptionOnly

    def setIsSubscriptionOnly(self, newIsSubscriptionOnly):
        self.isSubscriptionOnly = newIsSubscriptionOnly

    def getSubscriptionId(self):
        return self.subscriptionId

    def setSubscriptionId(self, newSubscriptionId):
        self.subscriptionId = newSubscriptionId

    def getCollectionId(self):
        return self.collectionId

    def setCollectionId(self, newCollectionId):
        self.collectionId = newCollectionId

    def getPrePaidId(self):
        return self.prePaidId

    def setPrePaidId(self, newPrePaidId):
        self.prePaidId = newPrePaidId

    def getPpvDescriptions(self):
        return self.ppvDescriptions

    def setPpvDescriptions(self, newPpvDescriptions):
        self.ppvDescriptions = newPpvDescriptions

    def getPurchaseUserId(self):
        return self.purchaseUserId

    def setPurchaseUserId(self, newPurchaseUserId):
        self.purchaseUserId = newPurchaseUserId

    def getPurchasedMediaFileId(self):
        return self.purchasedMediaFileId

    def setPurchasedMediaFileId(self, newPurchasedMediaFileId):
        self.purchasedMediaFileId = newPurchasedMediaFileId

    def getRelatedMediaFileIds(self):
        return self.relatedMediaFileIds

    def setRelatedMediaFileIds(self, newRelatedMediaFileIds):
        self.relatedMediaFileIds = newRelatedMediaFileIds

    def getStartDate(self):
        return self.startDate

    def setStartDate(self, newStartDate):
        self.startDate = newStartDate

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate

    def getDiscountEndDate(self):
        return self.discountEndDate

    def setDiscountEndDate(self, newDiscountEndDate):
        self.discountEndDate = newDiscountEndDate

    def getFirstDeviceName(self):
        return self.firstDeviceName

    def setFirstDeviceName(self, newFirstDeviceName):
        self.firstDeviceName = newFirstDeviceName

    def getIsInCancelationPeriod(self):
        return self.isInCancelationPeriod

    def setIsInCancelationPeriod(self, newIsInCancelationPeriod):
        self.isInCancelationPeriod = newIsInCancelationPeriod

    def getPpvProductCode(self):
        return self.ppvProductCode

    def setPpvProductCode(self, newPpvProductCode):
        self.ppvProductCode = newPpvProductCode


# @package Kaltura
# @subpackage Client
class KalturaProgramAssetGroupOfferPrice(KalturaProductPrice):
    """ProgramAssetGroupOffer price details"""

    def __init__(self,
            productId=NotImplemented,
            productType=NotImplemented,
            price=NotImplemented,
            fullPrice=NotImplemented,
            purchaseStatus=NotImplemented,
            promotionInfo=NotImplemented):
        KalturaProductPrice.__init__(self,
            productId,
            productType,
            price,
            fullPrice,
            purchaseStatus,
            promotionInfo)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaProductPrice.fromXml(self, node)
        self.fromXmlImpl(node, KalturaProgramAssetGroupOfferPrice.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaProductPrice.toParams(self)
        kparams.put("objectType", "KalturaProgramAssetGroupOfferPrice")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSubscriptionPrice(KalturaProductPrice):
    """Subscription price details"""

    def __init__(self,
            productId=NotImplemented,
            productType=NotImplemented,
            price=NotImplemented,
            fullPrice=NotImplemented,
            purchaseStatus=NotImplemented,
            promotionInfo=NotImplemented,
            endDate=NotImplemented):
        KalturaProductPrice.__init__(self,
            productId,
            productType,
            price,
            fullPrice,
            purchaseStatus,
            promotionInfo)

        # If the item related to unified billing cycle purchased - until when the this price is relevant
        # @var int
        self.endDate = endDate


    PROPERTY_LOADERS = {
        'endDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaProductPrice.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSubscriptionPrice.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaProductPrice.toParams(self)
        kparams.put("objectType", "KalturaSubscriptionPrice")
        kparams.addIntIfDefined("endDate", self.endDate)
        return kparams

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate


# @package Kaltura
# @subpackage Client
class KalturaPpv(KalturaObjectBase):
    """PPV details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            price=NotImplemented,
            priceDetailsId=NotImplemented,
            fileTypes=NotImplemented,
            fileTypesIds=NotImplemented,
            discountModule=NotImplemented,
            discountId=NotImplemented,
            couponsGroup=NotImplemented,
            couponsGroupId=NotImplemented,
            descriptions=NotImplemented,
            productCode=NotImplemented,
            isSubscriptionOnly=NotImplemented,
            firstDeviceLimitation=NotImplemented,
            usageModule=NotImplemented,
            usageModuleId=NotImplemented,
            adsPolicy=NotImplemented,
            isActive=NotImplemented,
            updateDate=NotImplemented,
            createDate=NotImplemented,
            virtualAssetId=NotImplemented,
            assetUserRuleId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # PPV identifier
        # @var string
        self.id = id

        # the name for the ppv
        # @var string
        self.name = name

        # This property will deprecated soon. Please use PriceId instead of it.
        # @var KalturaPriceDetails
        # @readonly
        self.price = price

        # The price if of the ppv
        # @var int
        self.priceDetailsId = priceDetailsId

        # This property will deprecated soon. Please use fileTypesIds instead of it.
        # @var array of KalturaIntegerValue
        # @readonly
        self.fileTypes = fileTypes

        # Comma separated file types identifiers that are supported in this subscription
        # @var string
        self.fileTypesIds = fileTypesIds

        # This property will deprecated soon. Please use DiscountId instead of it.
        # @var KalturaDiscountModule
        # @readonly
        self.discountModule = discountModule

        # The discount id for the ppv
        # @var int
        self.discountId = discountId

        # This property will deprecated soon. Please use CouponsGroupId instead of it.
        # @var KalturaCouponsGroup
        # @readonly
        self.couponsGroup = couponsGroup

        # Coupons group id for the ppv
        # @var int
        self.couponsGroupId = couponsGroupId

        # A list of the descriptions of the ppv on different languages (language code and translation)
        # @var array of KalturaTranslationToken
        self.descriptions = descriptions

        # Product code for the ppv
        # @var string
        self.productCode = productCode

        # Indicates whether or not this ppv can be purchased standalone or only as part of a subscription
        # @var bool
        self.isSubscriptionOnly = isSubscriptionOnly

        # Indicates whether or not this ppv can be consumed only on the first device
        # @var bool
        self.firstDeviceLimitation = firstDeviceLimitation

        # This property will deprecated soon. Please use UsageModuleId instead of it.
        # @var KalturaUsageModule
        # @readonly
        self.usageModule = usageModule

        # PPV usage module Id
        # @var int
        self.usageModuleId = usageModuleId

        # adsPolicy
        # @var KalturaAdsPolicy
        self.adsPolicy = adsPolicy

        # Is active ppv
        # @var bool
        self.isActive = isActive

        # Specifies when was the ppv last updated. Date and time represented as epoch.
        # @var int
        # @readonly
        self.updateDate = updateDate

        # Specifies when was the ppv created. Date and time represented as epoch.
        # @var int
        # @readonly
        self.createDate = createDate

        # Virtual asset id
        # @var int
        # @readonly
        self.virtualAssetId = virtualAssetId

        # Asset user rule identifier
        # @var int
        self.assetUserRuleId = assetUserRuleId


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'name': getXmlNodeText, 
        'price': (KalturaObjectFactory.create, 'KalturaPriceDetails'), 
        'priceDetailsId': getXmlNodeInt, 
        'fileTypes': (KalturaObjectFactory.createArray, 'KalturaIntegerValue'), 
        'fileTypesIds': getXmlNodeText, 
        'discountModule': (KalturaObjectFactory.create, 'KalturaDiscountModule'), 
        'discountId': getXmlNodeInt, 
        'couponsGroup': (KalturaObjectFactory.create, 'KalturaCouponsGroup'), 
        'couponsGroupId': getXmlNodeInt, 
        'descriptions': (KalturaObjectFactory.createArray, 'KalturaTranslationToken'), 
        'productCode': getXmlNodeText, 
        'isSubscriptionOnly': getXmlNodeBool, 
        'firstDeviceLimitation': getXmlNodeBool, 
        'usageModule': (KalturaObjectFactory.create, 'KalturaUsageModule'), 
        'usageModuleId': getXmlNodeInt, 
        'adsPolicy': (KalturaEnumsFactory.createString, "KalturaAdsPolicy"), 
        'isActive': getXmlNodeBool, 
        'updateDate': getXmlNodeInt, 
        'createDate': getXmlNodeInt, 
        'virtualAssetId': getXmlNodeInt, 
        'assetUserRuleId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPpv.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPpv")
        kparams.addStringIfDefined("id", self.id)
        kparams.addStringIfDefined("name", self.name)
        kparams.addIntIfDefined("priceDetailsId", self.priceDetailsId)
        kparams.addStringIfDefined("fileTypesIds", self.fileTypesIds)
        kparams.addIntIfDefined("discountId", self.discountId)
        kparams.addIntIfDefined("couponsGroupId", self.couponsGroupId)
        kparams.addArrayIfDefined("descriptions", self.descriptions)
        kparams.addStringIfDefined("productCode", self.productCode)
        kparams.addBoolIfDefined("isSubscriptionOnly", self.isSubscriptionOnly)
        kparams.addBoolIfDefined("firstDeviceLimitation", self.firstDeviceLimitation)
        kparams.addIntIfDefined("usageModuleId", self.usageModuleId)
        kparams.addStringEnumIfDefined("adsPolicy", self.adsPolicy)
        kparams.addBoolIfDefined("isActive", self.isActive)
        kparams.addIntIfDefined("assetUserRuleId", self.assetUserRuleId)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getPrice(self):
        return self.price

    def getPriceDetailsId(self):
        return self.priceDetailsId

    def setPriceDetailsId(self, newPriceDetailsId):
        self.priceDetailsId = newPriceDetailsId

    def getFileTypes(self):
        return self.fileTypes

    def getFileTypesIds(self):
        return self.fileTypesIds

    def setFileTypesIds(self, newFileTypesIds):
        self.fileTypesIds = newFileTypesIds

    def getDiscountModule(self):
        return self.discountModule

    def getDiscountId(self):
        return self.discountId

    def setDiscountId(self, newDiscountId):
        self.discountId = newDiscountId

    def getCouponsGroup(self):
        return self.couponsGroup

    def getCouponsGroupId(self):
        return self.couponsGroupId

    def setCouponsGroupId(self, newCouponsGroupId):
        self.couponsGroupId = newCouponsGroupId

    def getDescriptions(self):
        return self.descriptions

    def setDescriptions(self, newDescriptions):
        self.descriptions = newDescriptions

    def getProductCode(self):
        return self.productCode

    def setProductCode(self, newProductCode):
        self.productCode = newProductCode

    def getIsSubscriptionOnly(self):
        return self.isSubscriptionOnly

    def setIsSubscriptionOnly(self, newIsSubscriptionOnly):
        self.isSubscriptionOnly = newIsSubscriptionOnly

    def getFirstDeviceLimitation(self):
        return self.firstDeviceLimitation

    def setFirstDeviceLimitation(self, newFirstDeviceLimitation):
        self.firstDeviceLimitation = newFirstDeviceLimitation

    def getUsageModule(self):
        return self.usageModule

    def getUsageModuleId(self):
        return self.usageModuleId

    def setUsageModuleId(self, newUsageModuleId):
        self.usageModuleId = newUsageModuleId

    def getAdsPolicy(self):
        return self.adsPolicy

    def setAdsPolicy(self, newAdsPolicy):
        self.adsPolicy = newAdsPolicy

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive

    def getUpdateDate(self):
        return self.updateDate

    def getCreateDate(self):
        return self.createDate

    def getVirtualAssetId(self):
        return self.virtualAssetId

    def getAssetUserRuleId(self):
        return self.assetUserRuleId

    def setAssetUserRuleId(self, newAssetUserRuleId):
        self.assetUserRuleId = newAssetUserRuleId


# @package Kaltura
# @subpackage Client
class KalturaPpvListResponse(KalturaListResponse):
    """Prices list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of PPV
        # @var array of KalturaPpv
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaPpv'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPpvListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaPpvListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaPreviewModuleListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of Preview Module
        # @var array of KalturaPreviewModule
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaPreviewModule'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPreviewModuleListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaPreviewModuleListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaPriceDetailsListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of price details
        # @var array of KalturaPriceDetails
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaPriceDetails'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPriceDetailsListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaPriceDetailsListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaPricePlanListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of price plans
        # @var array of KalturaPricePlan
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaPricePlan'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPricePlanListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaPricePlanListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaProductPriceListResponse(KalturaListResponse):
    """Prices list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of prices
        # @var array of KalturaProductPrice
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaProductPrice'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaProductPriceListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaProductPriceListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaProductsPriceListResponse(KalturaListResponse):
    """Prices list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of prices
        # @var array of KalturaProductPrice
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaProductPrice'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaProductsPriceListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaProductsPriceListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaProgramAssetGroupOfferListResponse(KalturaListResponse):
    """ProgramAssetGroupOffer list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of collections
        # @var array of KalturaProgramAssetGroupOffer
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaProgramAssetGroupOffer'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaProgramAssetGroupOfferListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaProgramAssetGroupOfferListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaSubscriptionListResponse(KalturaListResponse):
    """Subscriptions list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of subscriptions
        # @var array of KalturaSubscription
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaSubscription'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSubscriptionListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaSubscriptionListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaSubscriptionSet(KalturaObjectBase):
    """Subscription details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            subscriptionIds=NotImplemented):
        KalturaObjectBase.__init__(self)

        # SubscriptionSet identifier
        # @var int
        # @readonly
        self.id = id

        # SubscriptionSet name
        # @var string
        self.name = name

        # Type of the Subscription Set
        # @var KalturaSubscriptionSetType
        # @readonly
        self.type = type

        # A list of comma separated subscription ids associated with this set ordered by priority ascending
        # @var string
        self.subscriptionIds = subscriptionIds


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'type': (KalturaEnumsFactory.createString, "KalturaSubscriptionSetType"), 
        'subscriptionIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSubscriptionSet.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSubscriptionSet")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("subscriptionIds", self.subscriptionIds)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getType(self):
        return self.type

    def getSubscriptionIds(self):
        return self.subscriptionIds

    def setSubscriptionIds(self, newSubscriptionIds):
        self.subscriptionIds = newSubscriptionIds


# @package Kaltura
# @subpackage Client
class KalturaSubscriptionSetListResponse(KalturaListResponse):
    """SubscriptionSets list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of subscriptionSets
        # @var array of KalturaSubscriptionSet
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaSubscriptionSet'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSubscriptionSetListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaSubscriptionSetListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaSubscriptionDependencySet(KalturaSubscriptionSet):
    """Subscription Dependency Set"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            subscriptionIds=NotImplemented,
            baseSubscriptionId=NotImplemented):
        KalturaSubscriptionSet.__init__(self,
            id,
            name,
            type,
            subscriptionIds)

        # Base Subscription identifier
        # @var int
        self.baseSubscriptionId = baseSubscriptionId


    PROPERTY_LOADERS = {
        'baseSubscriptionId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaSubscriptionSet.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSubscriptionDependencySet.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSubscriptionSet.toParams(self)
        kparams.put("objectType", "KalturaSubscriptionDependencySet")
        kparams.addIntIfDefined("baseSubscriptionId", self.baseSubscriptionId)
        return kparams

    def getBaseSubscriptionId(self):
        return self.baseSubscriptionId

    def setBaseSubscriptionId(self, newBaseSubscriptionId):
        self.baseSubscriptionId = newBaseSubscriptionId


# @package Kaltura
# @subpackage Client
class KalturaSubscriptionSwitchSet(KalturaSubscriptionSet):
    """Subscription details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            subscriptionIds=NotImplemented):
        KalturaSubscriptionSet.__init__(self,
            id,
            name,
            type,
            subscriptionIds)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaSubscriptionSet.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSubscriptionSwitchSet.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSubscriptionSet.toParams(self)
        kparams.put("objectType", "KalturaSubscriptionSwitchSet")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaUsageModuleListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of usage modules
        # @var array of KalturaUsageModule
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaUsageModule'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUsageModuleListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaUsageModuleListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaPartnerConfiguration(KalturaObjectBase):
    """Partner  base configuration"""

    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPartnerConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPartnerConfiguration")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaPartnerConfigurationListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Partner Configurations
        # @var array of KalturaPartnerConfiguration
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaPartnerConfiguration'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPartnerConfigurationListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaPartnerConfigurationListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaBasePartnerConfiguration(KalturaPartnerConfiguration):
    def __init__(self,
            ksExpirationSeconds=NotImplemented,
            appTokenSessionMaxDurationSeconds=NotImplemented,
            anonymousKSExpirationSeconds=NotImplemented,
            refreshExpirationForPinLoginSeconds=NotImplemented,
            appTokenMaxExpirySeconds=NotImplemented,
            autoRefreshAppToken=NotImplemented,
            uploadTokenExpirySeconds=NotImplemented,
            apptokenUserValidationDisabled=NotImplemented,
            epgFeatureVersion=NotImplemented):
        KalturaPartnerConfiguration.__init__(self)

        # KSExpirationSeconds
        # @var int
        self.ksExpirationSeconds = ksExpirationSeconds

        # AppTokenSessionMaxDurationSeconds
        # @var int
        self.appTokenSessionMaxDurationSeconds = appTokenSessionMaxDurationSeconds

        # AnonymousKSExpirationSeconds
        # @var int
        self.anonymousKSExpirationSeconds = anonymousKSExpirationSeconds

        # RefreshExpirationForPinLoginSeconds
        # @var int
        self.refreshExpirationForPinLoginSeconds = refreshExpirationForPinLoginSeconds

        # AppTokenMaxExpirySeconds
        # @var int
        self.appTokenMaxExpirySeconds = appTokenMaxExpirySeconds

        # AutoRefreshAppToken
        # @var bool
        self.autoRefreshAppToken = autoRefreshAppToken

        # uploadTokenExpirySeconds
        # @var int
        self.uploadTokenExpirySeconds = uploadTokenExpirySeconds

        # apptokenUserValidationDisabled
        # @var bool
        self.apptokenUserValidationDisabled = apptokenUserValidationDisabled

        # epgFeatureVersion
        #             defines the epg feature version from version 1 to version 3
        #             if not provided v2 will be used
        # @var int
        self.epgFeatureVersion = epgFeatureVersion


    PROPERTY_LOADERS = {
        'ksExpirationSeconds': getXmlNodeInt, 
        'appTokenSessionMaxDurationSeconds': getXmlNodeInt, 
        'anonymousKSExpirationSeconds': getXmlNodeInt, 
        'refreshExpirationForPinLoginSeconds': getXmlNodeInt, 
        'appTokenMaxExpirySeconds': getXmlNodeInt, 
        'autoRefreshAppToken': getXmlNodeBool, 
        'uploadTokenExpirySeconds': getXmlNodeInt, 
        'apptokenUserValidationDisabled': getXmlNodeBool, 
        'epgFeatureVersion': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaPartnerConfiguration.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBasePartnerConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPartnerConfiguration.toParams(self)
        kparams.put("objectType", "KalturaBasePartnerConfiguration")
        kparams.addIntIfDefined("ksExpirationSeconds", self.ksExpirationSeconds)
        kparams.addIntIfDefined("appTokenSessionMaxDurationSeconds", self.appTokenSessionMaxDurationSeconds)
        kparams.addIntIfDefined("anonymousKSExpirationSeconds", self.anonymousKSExpirationSeconds)
        kparams.addIntIfDefined("refreshExpirationForPinLoginSeconds", self.refreshExpirationForPinLoginSeconds)
        kparams.addIntIfDefined("appTokenMaxExpirySeconds", self.appTokenMaxExpirySeconds)
        kparams.addBoolIfDefined("autoRefreshAppToken", self.autoRefreshAppToken)
        kparams.addIntIfDefined("uploadTokenExpirySeconds", self.uploadTokenExpirySeconds)
        kparams.addBoolIfDefined("apptokenUserValidationDisabled", self.apptokenUserValidationDisabled)
        kparams.addIntIfDefined("epgFeatureVersion", self.epgFeatureVersion)
        return kparams

    def getKsExpirationSeconds(self):
        return self.ksExpirationSeconds

    def setKsExpirationSeconds(self, newKsExpirationSeconds):
        self.ksExpirationSeconds = newKsExpirationSeconds

    def getAppTokenSessionMaxDurationSeconds(self):
        return self.appTokenSessionMaxDurationSeconds

    def setAppTokenSessionMaxDurationSeconds(self, newAppTokenSessionMaxDurationSeconds):
        self.appTokenSessionMaxDurationSeconds = newAppTokenSessionMaxDurationSeconds

    def getAnonymousKSExpirationSeconds(self):
        return self.anonymousKSExpirationSeconds

    def setAnonymousKSExpirationSeconds(self, newAnonymousKSExpirationSeconds):
        self.anonymousKSExpirationSeconds = newAnonymousKSExpirationSeconds

    def getRefreshExpirationForPinLoginSeconds(self):
        return self.refreshExpirationForPinLoginSeconds

    def setRefreshExpirationForPinLoginSeconds(self, newRefreshExpirationForPinLoginSeconds):
        self.refreshExpirationForPinLoginSeconds = newRefreshExpirationForPinLoginSeconds

    def getAppTokenMaxExpirySeconds(self):
        return self.appTokenMaxExpirySeconds

    def setAppTokenMaxExpirySeconds(self, newAppTokenMaxExpirySeconds):
        self.appTokenMaxExpirySeconds = newAppTokenMaxExpirySeconds

    def getAutoRefreshAppToken(self):
        return self.autoRefreshAppToken

    def setAutoRefreshAppToken(self, newAutoRefreshAppToken):
        self.autoRefreshAppToken = newAutoRefreshAppToken

    def getUploadTokenExpirySeconds(self):
        return self.uploadTokenExpirySeconds

    def setUploadTokenExpirySeconds(self, newUploadTokenExpirySeconds):
        self.uploadTokenExpirySeconds = newUploadTokenExpirySeconds

    def getApptokenUserValidationDisabled(self):
        return self.apptokenUserValidationDisabled

    def setApptokenUserValidationDisabled(self, newApptokenUserValidationDisabled):
        self.apptokenUserValidationDisabled = newApptokenUserValidationDisabled

    def getEpgFeatureVersion(self):
        return self.epgFeatureVersion

    def setEpgFeatureVersion(self, newEpgFeatureVersion):
        self.epgFeatureVersion = newEpgFeatureVersion


# @package Kaltura
# @subpackage Client
class KalturaBillingPartnerConfig(KalturaPartnerConfiguration):
    """Partner billing configuration"""

    def __init__(self,
            value=NotImplemented,
            type=NotImplemented):
        KalturaPartnerConfiguration.__init__(self)

        # configuration value
        # @var string
        self.value = value

        # partner configuration type
        # @var KalturaPartnerConfigurationType
        self.type = type


    PROPERTY_LOADERS = {
        'value': getXmlNodeText, 
        'type': (KalturaEnumsFactory.createString, "KalturaPartnerConfigurationType"), 
    }

    def fromXml(self, node):
        KalturaPartnerConfiguration.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBillingPartnerConfig.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPartnerConfiguration.toParams(self)
        kparams.put("objectType", "KalturaBillingPartnerConfig")
        kparams.addStringIfDefined("value", self.value)
        kparams.addStringEnumIfDefined("type", self.type)
        return kparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType


# @package Kaltura
# @subpackage Client
class KalturaCategoryManagement(KalturaObjectBase):
    """Category management"""

    def __init__(self,
            defaultTreeId=NotImplemented,
            deviceFamilyToCategoryTree=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Default CategoryVersion tree id
        # @var int
        self.defaultTreeId = defaultTreeId

        # Device family to Category TreeId mapping
        # @var map
        self.deviceFamilyToCategoryTree = deviceFamilyToCategoryTree


    PROPERTY_LOADERS = {
        'defaultTreeId': getXmlNodeInt, 
        'deviceFamilyToCategoryTree': (KalturaObjectFactory.createMap, 'KalturaLongValue'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryManagement.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCategoryManagement")
        kparams.addIntIfDefined("defaultTreeId", self.defaultTreeId)
        kparams.addMapIfDefined("deviceFamilyToCategoryTree", self.deviceFamilyToCategoryTree)
        return kparams

    def getDefaultTreeId(self):
        return self.defaultTreeId

    def setDefaultTreeId(self, newDefaultTreeId):
        self.defaultTreeId = newDefaultTreeId

    def getDeviceFamilyToCategoryTree(self):
        return self.deviceFamilyToCategoryTree

    def setDeviceFamilyToCategoryTree(self, newDeviceFamilyToCategoryTree):
        self.deviceFamilyToCategoryTree = newDeviceFamilyToCategoryTree


# @package Kaltura
# @subpackage Client
class KalturaCatalogPartnerConfig(KalturaPartnerConfiguration):
    """Partner catalog configuration"""

    def __init__(self,
            singleMultilingualMode=NotImplemented,
            categoryManagement=NotImplemented,
            epgMultilingualFallbackSupport=NotImplemented,
            uploadExportDatalake=NotImplemented,
            shopMarkerMetaId=NotImplemented):
        KalturaPartnerConfiguration.__init__(self)

        # Single multilingual mode
        # @var bool
        self.singleMultilingualMode = singleMultilingualMode

        # Category management
        # @var KalturaCategoryManagement
        self.categoryManagement = categoryManagement

        # EPG Multilingual Fallback Support
        # @var bool
        self.epgMultilingualFallbackSupport = epgMultilingualFallbackSupport

        # Upload Export Datalake
        # @var bool
        self.uploadExportDatalake = uploadExportDatalake

        # Shop Marker&#39;s identifier
        # @var int
        self.shopMarkerMetaId = shopMarkerMetaId


    PROPERTY_LOADERS = {
        'singleMultilingualMode': getXmlNodeBool, 
        'categoryManagement': (KalturaObjectFactory.create, 'KalturaCategoryManagement'), 
        'epgMultilingualFallbackSupport': getXmlNodeBool, 
        'uploadExportDatalake': getXmlNodeBool, 
        'shopMarkerMetaId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaPartnerConfiguration.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCatalogPartnerConfig.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPartnerConfiguration.toParams(self)
        kparams.put("objectType", "KalturaCatalogPartnerConfig")
        kparams.addBoolIfDefined("singleMultilingualMode", self.singleMultilingualMode)
        kparams.addObjectIfDefined("categoryManagement", self.categoryManagement)
        kparams.addBoolIfDefined("epgMultilingualFallbackSupport", self.epgMultilingualFallbackSupport)
        kparams.addBoolIfDefined("uploadExportDatalake", self.uploadExportDatalake)
        kparams.addIntIfDefined("shopMarkerMetaId", self.shopMarkerMetaId)
        return kparams

    def getSingleMultilingualMode(self):
        return self.singleMultilingualMode

    def setSingleMultilingualMode(self, newSingleMultilingualMode):
        self.singleMultilingualMode = newSingleMultilingualMode

    def getCategoryManagement(self):
        return self.categoryManagement

    def setCategoryManagement(self, newCategoryManagement):
        self.categoryManagement = newCategoryManagement

    def getEpgMultilingualFallbackSupport(self):
        return self.epgMultilingualFallbackSupport

    def setEpgMultilingualFallbackSupport(self, newEpgMultilingualFallbackSupport):
        self.epgMultilingualFallbackSupport = newEpgMultilingualFallbackSupport

    def getUploadExportDatalake(self):
        return self.uploadExportDatalake

    def setUploadExportDatalake(self, newUploadExportDatalake):
        self.uploadExportDatalake = newUploadExportDatalake

    def getShopMarkerMetaId(self):
        return self.shopMarkerMetaId

    def setShopMarkerMetaId(self, newShopMarkerMetaId):
        self.shopMarkerMetaId = newShopMarkerMetaId


# @package Kaltura
# @subpackage Client
class KalturaBookmarkEventThreshold(KalturaObjectBase):
    def __init__(self,
            transactionType=NotImplemented,
            threshold=NotImplemented):
        KalturaObjectBase.__init__(self)

        # bookmark transaction type
        # @var KalturaTransactionType
        self.transactionType = transactionType

        # event threshold in seconds
        # @var int
        self.threshold = threshold


    PROPERTY_LOADERS = {
        'transactionType': (KalturaEnumsFactory.createString, "KalturaTransactionType"), 
        'threshold': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBookmarkEventThreshold.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBookmarkEventThreshold")
        kparams.addStringEnumIfDefined("transactionType", self.transactionType)
        kparams.addIntIfDefined("threshold", self.threshold)
        return kparams

    def getTransactionType(self):
        return self.transactionType

    def setTransactionType(self, newTransactionType):
        self.transactionType = newTransactionType

    def getThreshold(self):
        return self.threshold

    def setThreshold(self, newThreshold):
        self.threshold = newThreshold


# @package Kaltura
# @subpackage Client
class KalturaCommercePartnerConfig(KalturaPartnerConfiguration):
    """partner configuration for commerce"""

    def __init__(self,
            bookmarkEventThresholds=NotImplemented,
            keepSubscriptionAddOns=NotImplemented,
            programAssetEntitlementPaddingStart=NotImplemented,
            programAssetEntitlementPaddingEnd=NotImplemented):
        KalturaPartnerConfiguration.__init__(self)

        # configuration for bookmark event threshold (when to dispatch the event) in seconds.
        # @var array of KalturaBookmarkEventThreshold
        self.bookmarkEventThresholds = bookmarkEventThresholds

        # configuration for keep add-ons after subscription deletion
        # @var bool
        self.keepSubscriptionAddOns = keepSubscriptionAddOns

        # configuration for asset start entitlement padding e.g. asset start time - padding still relevant for asset
        # @var int
        self.programAssetEntitlementPaddingStart = programAssetEntitlementPaddingStart

        # configuration for asset end entitlement padding e.g. asset end time + padding still relevant for asset
        # @var int
        self.programAssetEntitlementPaddingEnd = programAssetEntitlementPaddingEnd


    PROPERTY_LOADERS = {
        'bookmarkEventThresholds': (KalturaObjectFactory.createArray, 'KalturaBookmarkEventThreshold'), 
        'keepSubscriptionAddOns': getXmlNodeBool, 
        'programAssetEntitlementPaddingStart': getXmlNodeInt, 
        'programAssetEntitlementPaddingEnd': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaPartnerConfiguration.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCommercePartnerConfig.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPartnerConfiguration.toParams(self)
        kparams.put("objectType", "KalturaCommercePartnerConfig")
        kparams.addArrayIfDefined("bookmarkEventThresholds", self.bookmarkEventThresholds)
        kparams.addBoolIfDefined("keepSubscriptionAddOns", self.keepSubscriptionAddOns)
        kparams.addIntIfDefined("programAssetEntitlementPaddingStart", self.programAssetEntitlementPaddingStart)
        kparams.addIntIfDefined("programAssetEntitlementPaddingEnd", self.programAssetEntitlementPaddingEnd)
        return kparams

    def getBookmarkEventThresholds(self):
        return self.bookmarkEventThresholds

    def setBookmarkEventThresholds(self, newBookmarkEventThresholds):
        self.bookmarkEventThresholds = newBookmarkEventThresholds

    def getKeepSubscriptionAddOns(self):
        return self.keepSubscriptionAddOns

    def setKeepSubscriptionAddOns(self, newKeepSubscriptionAddOns):
        self.keepSubscriptionAddOns = newKeepSubscriptionAddOns

    def getProgramAssetEntitlementPaddingStart(self):
        return self.programAssetEntitlementPaddingStart

    def setProgramAssetEntitlementPaddingStart(self, newProgramAssetEntitlementPaddingStart):
        self.programAssetEntitlementPaddingStart = newProgramAssetEntitlementPaddingStart

    def getProgramAssetEntitlementPaddingEnd(self):
        return self.programAssetEntitlementPaddingEnd

    def setProgramAssetEntitlementPaddingEnd(self, newProgramAssetEntitlementPaddingEnd):
        self.programAssetEntitlementPaddingEnd = newProgramAssetEntitlementPaddingEnd


# @package Kaltura
# @subpackage Client
class KalturaConcurrencyPartnerConfig(KalturaPartnerConfiguration):
    """Partner concurrency configuration"""

    def __init__(self,
            deviceFamilyIds=NotImplemented,
            evictionPolicy=NotImplemented,
            concurrencyThresholdInSeconds=NotImplemented,
            revokeOnDeviceDelete=NotImplemented,
            excludeFreeContentFromConcurrency=NotImplemented):
        KalturaPartnerConfiguration.__init__(self)

        # Comma separated list of device Family Ids order by their priority.
        # @var string
        self.deviceFamilyIds = deviceFamilyIds

        # Policy of eviction devices
        # @var KalturaEvictionPolicyType
        self.evictionPolicy = evictionPolicy

        # Concurrency threshold in seconds
        # @var int
        self.concurrencyThresholdInSeconds = concurrencyThresholdInSeconds

        # Revoke on device delete
        # @var bool
        self.revokeOnDeviceDelete = revokeOnDeviceDelete

        # If set to true then for all concurrency checks in all APIs, system shall exclude free content from counting towards the use of a concurrency slot
        # @var bool
        self.excludeFreeContentFromConcurrency = excludeFreeContentFromConcurrency


    PROPERTY_LOADERS = {
        'deviceFamilyIds': getXmlNodeText, 
        'evictionPolicy': (KalturaEnumsFactory.createString, "KalturaEvictionPolicyType"), 
        'concurrencyThresholdInSeconds': getXmlNodeInt, 
        'revokeOnDeviceDelete': getXmlNodeBool, 
        'excludeFreeContentFromConcurrency': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaPartnerConfiguration.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConcurrencyPartnerConfig.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPartnerConfiguration.toParams(self)
        kparams.put("objectType", "KalturaConcurrencyPartnerConfig")
        kparams.addStringIfDefined("deviceFamilyIds", self.deviceFamilyIds)
        kparams.addStringEnumIfDefined("evictionPolicy", self.evictionPolicy)
        kparams.addIntIfDefined("concurrencyThresholdInSeconds", self.concurrencyThresholdInSeconds)
        kparams.addBoolIfDefined("revokeOnDeviceDelete", self.revokeOnDeviceDelete)
        kparams.addBoolIfDefined("excludeFreeContentFromConcurrency", self.excludeFreeContentFromConcurrency)
        return kparams

    def getDeviceFamilyIds(self):
        return self.deviceFamilyIds

    def setDeviceFamilyIds(self, newDeviceFamilyIds):
        self.deviceFamilyIds = newDeviceFamilyIds

    def getEvictionPolicy(self):
        return self.evictionPolicy

    def setEvictionPolicy(self, newEvictionPolicy):
        self.evictionPolicy = newEvictionPolicy

    def getConcurrencyThresholdInSeconds(self):
        return self.concurrencyThresholdInSeconds

    def setConcurrencyThresholdInSeconds(self, newConcurrencyThresholdInSeconds):
        self.concurrencyThresholdInSeconds = newConcurrencyThresholdInSeconds

    def getRevokeOnDeviceDelete(self):
        return self.revokeOnDeviceDelete

    def setRevokeOnDeviceDelete(self, newRevokeOnDeviceDelete):
        self.revokeOnDeviceDelete = newRevokeOnDeviceDelete

    def getExcludeFreeContentFromConcurrency(self):
        return self.excludeFreeContentFromConcurrency

    def setExcludeFreeContentFromConcurrency(self, newExcludeFreeContentFromConcurrency):
        self.excludeFreeContentFromConcurrency = newExcludeFreeContentFromConcurrency


# @package Kaltura
# @subpackage Client
class KalturaCustomFieldsPartnerConfiguration(KalturaPartnerConfiguration):
    """Custom Fields Partner Configuration"""

    def __init__(self,
            metaSystemNameInsteadOfAliasList=NotImplemented):
        KalturaPartnerConfiguration.__init__(self)

        # Array of clientTag values
        # @var string
        self.metaSystemNameInsteadOfAliasList = metaSystemNameInsteadOfAliasList


    PROPERTY_LOADERS = {
        'metaSystemNameInsteadOfAliasList': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaPartnerConfiguration.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCustomFieldsPartnerConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPartnerConfiguration.toParams(self)
        kparams.put("objectType", "KalturaCustomFieldsPartnerConfiguration")
        kparams.addStringIfDefined("metaSystemNameInsteadOfAliasList", self.metaSystemNameInsteadOfAliasList)
        return kparams

    def getMetaSystemNameInsteadOfAliasList(self):
        return self.metaSystemNameInsteadOfAliasList

    def setMetaSystemNameInsteadOfAliasList(self, newMetaSystemNameInsteadOfAliasList):
        self.metaSystemNameInsteadOfAliasList = newMetaSystemNameInsteadOfAliasList


# @package Kaltura
# @subpackage Client
class KalturaDefaultParentalSettingsPartnerConfig(KalturaPartnerConfiguration):
    def __init__(self,
            defaultMoviesParentalRuleId=NotImplemented,
            defaultTvSeriesParentalRuleId=NotImplemented,
            defaultParentalPin=NotImplemented,
            defaultPurchasePin=NotImplemented,
            defaultPurchaseSettings=NotImplemented):
        KalturaPartnerConfiguration.__init__(self)

        # defaultTvSeriesParentalRuleId
        # @var int
        self.defaultMoviesParentalRuleId = defaultMoviesParentalRuleId

        # defaultTvSeriesParentalRuleId
        # @var int
        self.defaultTvSeriesParentalRuleId = defaultTvSeriesParentalRuleId

        # defaultParentalPin
        # @var string
        self.defaultParentalPin = defaultParentalPin

        # defaultPurchasePin
        # @var string
        self.defaultPurchasePin = defaultPurchasePin

        # defaultPurchaseSettings
        # @var int
        self.defaultPurchaseSettings = defaultPurchaseSettings


    PROPERTY_LOADERS = {
        'defaultMoviesParentalRuleId': getXmlNodeInt, 
        'defaultTvSeriesParentalRuleId': getXmlNodeInt, 
        'defaultParentalPin': getXmlNodeText, 
        'defaultPurchasePin': getXmlNodeText, 
        'defaultPurchaseSettings': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaPartnerConfiguration.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDefaultParentalSettingsPartnerConfig.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPartnerConfiguration.toParams(self)
        kparams.put("objectType", "KalturaDefaultParentalSettingsPartnerConfig")
        kparams.addIntIfDefined("defaultMoviesParentalRuleId", self.defaultMoviesParentalRuleId)
        kparams.addIntIfDefined("defaultTvSeriesParentalRuleId", self.defaultTvSeriesParentalRuleId)
        kparams.addStringIfDefined("defaultParentalPin", self.defaultParentalPin)
        kparams.addStringIfDefined("defaultPurchasePin", self.defaultPurchasePin)
        kparams.addIntIfDefined("defaultPurchaseSettings", self.defaultPurchaseSettings)
        return kparams

    def getDefaultMoviesParentalRuleId(self):
        return self.defaultMoviesParentalRuleId

    def setDefaultMoviesParentalRuleId(self, newDefaultMoviesParentalRuleId):
        self.defaultMoviesParentalRuleId = newDefaultMoviesParentalRuleId

    def getDefaultTvSeriesParentalRuleId(self):
        return self.defaultTvSeriesParentalRuleId

    def setDefaultTvSeriesParentalRuleId(self, newDefaultTvSeriesParentalRuleId):
        self.defaultTvSeriesParentalRuleId = newDefaultTvSeriesParentalRuleId

    def getDefaultParentalPin(self):
        return self.defaultParentalPin

    def setDefaultParentalPin(self, newDefaultParentalPin):
        self.defaultParentalPin = newDefaultParentalPin

    def getDefaultPurchasePin(self):
        return self.defaultPurchasePin

    def setDefaultPurchasePin(self, newDefaultPurchasePin):
        self.defaultPurchasePin = newDefaultPurchasePin

    def getDefaultPurchaseSettings(self):
        return self.defaultPurchaseSettings

    def setDefaultPurchaseSettings(self, newDefaultPurchaseSettings):
        self.defaultPurchaseSettings = newDefaultPurchaseSettings


# @package Kaltura
# @subpackage Client
class KalturaRollingDeviceRemovalData(KalturaObjectBase):
    def __init__(self,
            rollingDeviceRemovalPolicy=NotImplemented,
            rollingDeviceRemovalFamilyIds=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Rolling Device Policy
        # @var KalturaRollingDevicePolicy
        self.rollingDeviceRemovalPolicy = rollingDeviceRemovalPolicy

        # Rolling Device Policy in a CSV style
        # @var string
        self.rollingDeviceRemovalFamilyIds = rollingDeviceRemovalFamilyIds


    PROPERTY_LOADERS = {
        'rollingDeviceRemovalPolicy': (KalturaEnumsFactory.createString, "KalturaRollingDevicePolicy"), 
        'rollingDeviceRemovalFamilyIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRollingDeviceRemovalData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaRollingDeviceRemovalData")
        kparams.addStringEnumIfDefined("rollingDeviceRemovalPolicy", self.rollingDeviceRemovalPolicy)
        kparams.addStringIfDefined("rollingDeviceRemovalFamilyIds", self.rollingDeviceRemovalFamilyIds)
        return kparams

    def getRollingDeviceRemovalPolicy(self):
        return self.rollingDeviceRemovalPolicy

    def setRollingDeviceRemovalPolicy(self, newRollingDeviceRemovalPolicy):
        self.rollingDeviceRemovalPolicy = newRollingDeviceRemovalPolicy

    def getRollingDeviceRemovalFamilyIds(self):
        return self.rollingDeviceRemovalFamilyIds

    def setRollingDeviceRemovalFamilyIds(self, newRollingDeviceRemovalFamilyIds):
        self.rollingDeviceRemovalFamilyIds = newRollingDeviceRemovalFamilyIds


# @package Kaltura
# @subpackage Client
class KalturaGeneralPartnerConfig(KalturaPartnerConfiguration):
    """Partner General configuration"""

    def __init__(self,
            partnerName=NotImplemented,
            mainLanguage=NotImplemented,
            secondaryLanguages=NotImplemented,
            deleteMediaPolicy=NotImplemented,
            mainCurrency=NotImplemented,
            secondaryCurrencies=NotImplemented,
            downgradePolicy=NotImplemented,
            downgradePriorityFamilyIds=NotImplemented,
            mailSettings=NotImplemented,
            dateFormat=NotImplemented,
            householdLimitationModule=NotImplemented,
            enableRegionFiltering=NotImplemented,
            defaultRegion=NotImplemented,
            rollingDeviceData=NotImplemented,
            linearWatchHistoryThreshold=NotImplemented,
            finishedPercentThreshold=NotImplemented,
            suspensionProfileInheritanceType=NotImplemented,
            allowDeviceMobility=NotImplemented,
            enableMultiLcns=NotImplemented):
        KalturaPartnerConfiguration.__init__(self)

        # Partner name
        # @var string
        self.partnerName = partnerName

        # Main metadata language
        # @var int
        self.mainLanguage = mainLanguage

        # A list of comma separated languages ids.
        # @var string
        self.secondaryLanguages = secondaryLanguages

        # Delete media policy
        # @var KalturaDeleteMediaPolicy
        self.deleteMediaPolicy = deleteMediaPolicy

        # Main currency
        # @var int
        self.mainCurrency = mainCurrency

        # A list of comma separated currency ids.
        # @var string
        self.secondaryCurrencies = secondaryCurrencies

        # Downgrade policy
        # @var KalturaDowngradePolicy
        self.downgradePolicy = downgradePolicy

        # Priority Family Ids to remove devices on downgrade (first in the list first to remove)
        # @var string
        self.downgradePriorityFamilyIds = downgradePriorityFamilyIds

        # Mail settings
        # @var string
        self.mailSettings = mailSettings

        # Default Date Format for Email notifications (default should be: DD Month YYYY)
        # @var string
        self.dateFormat = dateFormat

        # Household limitation&#160;module
        # @var int
        self.householdLimitationModule = householdLimitationModule

        # Enable Region Filtering
        # @var bool
        self.enableRegionFiltering = enableRegionFiltering

        # Default Region
        # @var int
        self.defaultRegion = defaultRegion

        # Rolling Device Policy
        # @var KalturaRollingDeviceRemovalData
        self.rollingDeviceData = rollingDeviceData

        # minimum bookmark position of a linear channel to be included in a watch history
        # @var int
        self.linearWatchHistoryThreshold = linearWatchHistoryThreshold

        # Finished PercentThreshold
        # @var int
        self.finishedPercentThreshold = finishedPercentThreshold

        # Suspension Profile Inheritance
        # @var KalturaSuspensionProfileInheritanceType
        self.suspensionProfileInheritanceType = suspensionProfileInheritanceType

        # Allow Device Mobility
        # @var bool
        self.allowDeviceMobility = allowDeviceMobility

        # Enable multi LCNs per linear channel
        # @var bool
        self.enableMultiLcns = enableMultiLcns


    PROPERTY_LOADERS = {
        'partnerName': getXmlNodeText, 
        'mainLanguage': getXmlNodeInt, 
        'secondaryLanguages': getXmlNodeText, 
        'deleteMediaPolicy': (KalturaEnumsFactory.createString, "KalturaDeleteMediaPolicy"), 
        'mainCurrency': getXmlNodeInt, 
        'secondaryCurrencies': getXmlNodeText, 
        'downgradePolicy': (KalturaEnumsFactory.createString, "KalturaDowngradePolicy"), 
        'downgradePriorityFamilyIds': getXmlNodeText, 
        'mailSettings': getXmlNodeText, 
        'dateFormat': getXmlNodeText, 
        'householdLimitationModule': getXmlNodeInt, 
        'enableRegionFiltering': getXmlNodeBool, 
        'defaultRegion': getXmlNodeInt, 
        'rollingDeviceData': (KalturaObjectFactory.create, 'KalturaRollingDeviceRemovalData'), 
        'linearWatchHistoryThreshold': getXmlNodeInt, 
        'finishedPercentThreshold': getXmlNodeInt, 
        'suspensionProfileInheritanceType': (KalturaEnumsFactory.createString, "KalturaSuspensionProfileInheritanceType"), 
        'allowDeviceMobility': getXmlNodeBool, 
        'enableMultiLcns': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaPartnerConfiguration.fromXml(self, node)
        self.fromXmlImpl(node, KalturaGeneralPartnerConfig.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPartnerConfiguration.toParams(self)
        kparams.put("objectType", "KalturaGeneralPartnerConfig")
        kparams.addStringIfDefined("partnerName", self.partnerName)
        kparams.addIntIfDefined("mainLanguage", self.mainLanguage)
        kparams.addStringIfDefined("secondaryLanguages", self.secondaryLanguages)
        kparams.addStringEnumIfDefined("deleteMediaPolicy", self.deleteMediaPolicy)
        kparams.addIntIfDefined("mainCurrency", self.mainCurrency)
        kparams.addStringIfDefined("secondaryCurrencies", self.secondaryCurrencies)
        kparams.addStringEnumIfDefined("downgradePolicy", self.downgradePolicy)
        kparams.addStringIfDefined("downgradePriorityFamilyIds", self.downgradePriorityFamilyIds)
        kparams.addStringIfDefined("mailSettings", self.mailSettings)
        kparams.addStringIfDefined("dateFormat", self.dateFormat)
        kparams.addIntIfDefined("householdLimitationModule", self.householdLimitationModule)
        kparams.addBoolIfDefined("enableRegionFiltering", self.enableRegionFiltering)
        kparams.addIntIfDefined("defaultRegion", self.defaultRegion)
        kparams.addObjectIfDefined("rollingDeviceData", self.rollingDeviceData)
        kparams.addIntIfDefined("linearWatchHistoryThreshold", self.linearWatchHistoryThreshold)
        kparams.addIntIfDefined("finishedPercentThreshold", self.finishedPercentThreshold)
        kparams.addStringEnumIfDefined("suspensionProfileInheritanceType", self.suspensionProfileInheritanceType)
        kparams.addBoolIfDefined("allowDeviceMobility", self.allowDeviceMobility)
        kparams.addBoolIfDefined("enableMultiLcns", self.enableMultiLcns)
        return kparams

    def getPartnerName(self):
        return self.partnerName

    def setPartnerName(self, newPartnerName):
        self.partnerName = newPartnerName

    def getMainLanguage(self):
        return self.mainLanguage

    def setMainLanguage(self, newMainLanguage):
        self.mainLanguage = newMainLanguage

    def getSecondaryLanguages(self):
        return self.secondaryLanguages

    def setSecondaryLanguages(self, newSecondaryLanguages):
        self.secondaryLanguages = newSecondaryLanguages

    def getDeleteMediaPolicy(self):
        return self.deleteMediaPolicy

    def setDeleteMediaPolicy(self, newDeleteMediaPolicy):
        self.deleteMediaPolicy = newDeleteMediaPolicy

    def getMainCurrency(self):
        return self.mainCurrency

    def setMainCurrency(self, newMainCurrency):
        self.mainCurrency = newMainCurrency

    def getSecondaryCurrencies(self):
        return self.secondaryCurrencies

    def setSecondaryCurrencies(self, newSecondaryCurrencies):
        self.secondaryCurrencies = newSecondaryCurrencies

    def getDowngradePolicy(self):
        return self.downgradePolicy

    def setDowngradePolicy(self, newDowngradePolicy):
        self.downgradePolicy = newDowngradePolicy

    def getDowngradePriorityFamilyIds(self):
        return self.downgradePriorityFamilyIds

    def setDowngradePriorityFamilyIds(self, newDowngradePriorityFamilyIds):
        self.downgradePriorityFamilyIds = newDowngradePriorityFamilyIds

    def getMailSettings(self):
        return self.mailSettings

    def setMailSettings(self, newMailSettings):
        self.mailSettings = newMailSettings

    def getDateFormat(self):
        return self.dateFormat

    def setDateFormat(self, newDateFormat):
        self.dateFormat = newDateFormat

    def getHouseholdLimitationModule(self):
        return self.householdLimitationModule

    def setHouseholdLimitationModule(self, newHouseholdLimitationModule):
        self.householdLimitationModule = newHouseholdLimitationModule

    def getEnableRegionFiltering(self):
        return self.enableRegionFiltering

    def setEnableRegionFiltering(self, newEnableRegionFiltering):
        self.enableRegionFiltering = newEnableRegionFiltering

    def getDefaultRegion(self):
        return self.defaultRegion

    def setDefaultRegion(self, newDefaultRegion):
        self.defaultRegion = newDefaultRegion

    def getRollingDeviceData(self):
        return self.rollingDeviceData

    def setRollingDeviceData(self, newRollingDeviceData):
        self.rollingDeviceData = newRollingDeviceData

    def getLinearWatchHistoryThreshold(self):
        return self.linearWatchHistoryThreshold

    def setLinearWatchHistoryThreshold(self, newLinearWatchHistoryThreshold):
        self.linearWatchHistoryThreshold = newLinearWatchHistoryThreshold

    def getFinishedPercentThreshold(self):
        return self.finishedPercentThreshold

    def setFinishedPercentThreshold(self, newFinishedPercentThreshold):
        self.finishedPercentThreshold = newFinishedPercentThreshold

    def getSuspensionProfileInheritanceType(self):
        return self.suspensionProfileInheritanceType

    def setSuspensionProfileInheritanceType(self, newSuspensionProfileInheritanceType):
        self.suspensionProfileInheritanceType = newSuspensionProfileInheritanceType

    def getAllowDeviceMobility(self):
        return self.allowDeviceMobility

    def setAllowDeviceMobility(self, newAllowDeviceMobility):
        self.allowDeviceMobility = newAllowDeviceMobility

    def getEnableMultiLcns(self):
        return self.enableMultiLcns

    def setEnableMultiLcns(self, newEnableMultiLcns):
        self.enableMultiLcns = newEnableMultiLcns


# @package Kaltura
# @subpackage Client
class KalturaObjectVirtualAssetInfo(KalturaObjectBase):
    def __init__(self,
            assetStructId=NotImplemented,
            metaId=NotImplemented,
            type=NotImplemented,
            extendedTypes=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Asset struct identifier
        # @var int
        self.assetStructId = assetStructId

        # Meta identifier
        # @var int
        self.metaId = metaId

        # Object virtual asset info type
        # @var KalturaObjectVirtualAssetInfoType
        self.type = type

        # Extended types mapping
        # @var map
        self.extendedTypes = extendedTypes


    PROPERTY_LOADERS = {
        'assetStructId': getXmlNodeInt, 
        'metaId': getXmlNodeInt, 
        'type': (KalturaEnumsFactory.createString, "KalturaObjectVirtualAssetInfoType"), 
        'extendedTypes': (KalturaObjectFactory.createMap, 'KalturaLongValue'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaObjectVirtualAssetInfo.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaObjectVirtualAssetInfo")
        kparams.addIntIfDefined("assetStructId", self.assetStructId)
        kparams.addIntIfDefined("metaId", self.metaId)
        kparams.addStringEnumIfDefined("type", self.type)
        kparams.addMapIfDefined("extendedTypes", self.extendedTypes)
        return kparams

    def getAssetStructId(self):
        return self.assetStructId

    def setAssetStructId(self, newAssetStructId):
        self.assetStructId = newAssetStructId

    def getMetaId(self):
        return self.metaId

    def setMetaId(self, newMetaId):
        self.metaId = newMetaId

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getExtendedTypes(self):
        return self.extendedTypes

    def setExtendedTypes(self, newExtendedTypes):
        self.extendedTypes = newExtendedTypes


# @package Kaltura
# @subpackage Client
class KalturaObjectVirtualAssetPartnerConfig(KalturaPartnerConfiguration):
    def __init__(self,
            objectVirtualAssets=NotImplemented):
        KalturaPartnerConfiguration.__init__(self)

        # List of object virtual asset info
        # @var array of KalturaObjectVirtualAssetInfo
        self.objectVirtualAssets = objectVirtualAssets


    PROPERTY_LOADERS = {
        'objectVirtualAssets': (KalturaObjectFactory.createArray, 'KalturaObjectVirtualAssetInfo'), 
    }

    def fromXml(self, node):
        KalturaPartnerConfiguration.fromXml(self, node)
        self.fromXmlImpl(node, KalturaObjectVirtualAssetPartnerConfig.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPartnerConfiguration.toParams(self)
        kparams.put("objectType", "KalturaObjectVirtualAssetPartnerConfig")
        kparams.addArrayIfDefined("objectVirtualAssets", self.objectVirtualAssets)
        return kparams

    def getObjectVirtualAssets(self):
        return self.objectVirtualAssets

    def setObjectVirtualAssets(self, newObjectVirtualAssets):
        self.objectVirtualAssets = newObjectVirtualAssets


# @package Kaltura
# @subpackage Client
class KalturaResetPasswordPartnerConfigTemplate(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            label=NotImplemented,
            isDefault=NotImplemented):
        KalturaObjectBase.__init__(self)

        # id
        # @var string
        self.id = id

        # label
        # @var string
        self.label = label

        # is Default
        # @var bool
        self.isDefault = isDefault


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'label': getXmlNodeText, 
        'isDefault': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaResetPasswordPartnerConfigTemplate.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaResetPasswordPartnerConfigTemplate")
        kparams.addStringIfDefined("id", self.id)
        kparams.addStringIfDefined("label", self.label)
        kparams.addBoolIfDefined("isDefault", self.isDefault)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getLabel(self):
        return self.label

    def setLabel(self, newLabel):
        self.label = newLabel

    def getIsDefault(self):
        return self.isDefault

    def setIsDefault(self, newIsDefault):
        self.isDefault = newIsDefault


# @package Kaltura
# @subpackage Client
class KalturaResetPasswordPartnerConfig(KalturaObjectBase):
    def __init__(self,
            templateListLabel=NotImplemented,
            templates=NotImplemented):
        KalturaObjectBase.__init__(self)

        # template List Label
        # @var string
        self.templateListLabel = templateListLabel

        # templates
        # @var array of KalturaResetPasswordPartnerConfigTemplate
        self.templates = templates


    PROPERTY_LOADERS = {
        'templateListLabel': getXmlNodeText, 
        'templates': (KalturaObjectFactory.createArray, 'KalturaResetPasswordPartnerConfigTemplate'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaResetPasswordPartnerConfig.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaResetPasswordPartnerConfig")
        kparams.addStringIfDefined("templateListLabel", self.templateListLabel)
        kparams.addArrayIfDefined("templates", self.templates)
        return kparams

    def getTemplateListLabel(self):
        return self.templateListLabel

    def setTemplateListLabel(self, newTemplateListLabel):
        self.templateListLabel = newTemplateListLabel

    def getTemplates(self):
        return self.templates

    def setTemplates(self, newTemplates):
        self.templates = newTemplates


# @package Kaltura
# @subpackage Client
class KalturaOpcPartnerConfiguration(KalturaPartnerConfiguration):
    def __init__(self,
            resetPassword=NotImplemented):
        KalturaPartnerConfiguration.__init__(self)

        # Reset Password
        # @var KalturaResetPasswordPartnerConfig
        self.resetPassword = resetPassword


    PROPERTY_LOADERS = {
        'resetPassword': (KalturaObjectFactory.create, 'KalturaResetPasswordPartnerConfig'), 
    }

    def fromXml(self, node):
        KalturaPartnerConfiguration.fromXml(self, node)
        self.fromXmlImpl(node, KalturaOpcPartnerConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPartnerConfiguration.toParams(self)
        kparams.put("objectType", "KalturaOpcPartnerConfiguration")
        kparams.addObjectIfDefined("resetPassword", self.resetPassword)
        return kparams

    def getResetPassword(self):
        return self.resetPassword

    def setResetPassword(self, newResetPassword):
        self.resetPassword = newResetPassword


# @package Kaltura
# @subpackage Client
class KalturaDuration(KalturaObjectBase):
    """representation of duration time unit and value"""

    def __init__(self,
            unit=NotImplemented,
            value=NotImplemented,
            code=NotImplemented):
        KalturaObjectBase.__init__(self)

        # duration unit
        # @var KalturaDurationUnit
        self.unit = unit

        # duration value
        # @var int
        self.value = value

        # duration code - the canculat time in minutes except from years and months that have specific code
        # @var int
        # @readonly
        self.code = code


    PROPERTY_LOADERS = {
        'unit': (KalturaEnumsFactory.createString, "KalturaDurationUnit"), 
        'value': getXmlNodeInt, 
        'code': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDuration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaDuration")
        kparams.addStringEnumIfDefined("unit", self.unit)
        kparams.addIntIfDefined("value", self.value)
        return kparams

    def getUnit(self):
        return self.unit

    def setUnit(self, newUnit):
        self.unit = newUnit

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue

    def getCode(self):
        return self.code


# @package Kaltura
# @subpackage Client
class KalturaUnifiedBillingCycle(KalturaObjectBase):
    def __init__(self,
            name=NotImplemented,
            duration=NotImplemented,
            paymentGatewayId=NotImplemented,
            ignorePartialBilling=NotImplemented):
        KalturaObjectBase.__init__(self)

        # UnifiedBillingCycle name
        # @var string
        self.name = name

        # cycle duration
        # @var KalturaDuration
        self.duration = duration

        # Payment Gateway Id
        # @var int
        self.paymentGatewayId = paymentGatewayId

        # Define if partial billing shall be calculated or not
        # @var bool
        self.ignorePartialBilling = ignorePartialBilling


    PROPERTY_LOADERS = {
        'name': getXmlNodeText, 
        'duration': (KalturaObjectFactory.create, 'KalturaDuration'), 
        'paymentGatewayId': getXmlNodeInt, 
        'ignorePartialBilling': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUnifiedBillingCycle.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUnifiedBillingCycle")
        kparams.addStringIfDefined("name", self.name)
        kparams.addObjectIfDefined("duration", self.duration)
        kparams.addIntIfDefined("paymentGatewayId", self.paymentGatewayId)
        kparams.addBoolIfDefined("ignorePartialBilling", self.ignorePartialBilling)
        return kparams

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getDuration(self):
        return self.duration

    def setDuration(self, newDuration):
        self.duration = newDuration

    def getPaymentGatewayId(self):
        return self.paymentGatewayId

    def setPaymentGatewayId(self, newPaymentGatewayId):
        self.paymentGatewayId = newPaymentGatewayId

    def getIgnorePartialBilling(self):
        return self.ignorePartialBilling

    def setIgnorePartialBilling(self, newIgnorePartialBilling):
        self.ignorePartialBilling = newIgnorePartialBilling


# @package Kaltura
# @subpackage Client
class KalturaPaymentPartnerConfig(KalturaPartnerConfiguration):
    """Partner billing configuration"""

    def __init__(self,
            unifiedBillingCycles=NotImplemented):
        KalturaPartnerConfiguration.__init__(self)

        # configuration for unified billing cycles.
        # @var array of KalturaUnifiedBillingCycle
        self.unifiedBillingCycles = unifiedBillingCycles


    PROPERTY_LOADERS = {
        'unifiedBillingCycles': (KalturaObjectFactory.createArray, 'KalturaUnifiedBillingCycle'), 
    }

    def fromXml(self, node):
        KalturaPartnerConfiguration.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPaymentPartnerConfig.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPartnerConfiguration.toParams(self)
        kparams.put("objectType", "KalturaPaymentPartnerConfig")
        kparams.addArrayIfDefined("unifiedBillingCycles", self.unifiedBillingCycles)
        return kparams

    def getUnifiedBillingCycles(self):
        return self.unifiedBillingCycles

    def setUnifiedBillingCycles(self, newUnifiedBillingCycles):
        self.unifiedBillingCycles = newUnifiedBillingCycles


# @package Kaltura
# @subpackage Client
class KalturaDefaultPlaybackAdapters(KalturaObjectBase):
    def __init__(self,
            mediaAdapterId=NotImplemented,
            epgAdapterId=NotImplemented,
            recordingAdapterId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Default adapter identifier for media
        # @var int
        self.mediaAdapterId = mediaAdapterId

        # Default adapter identifier for epg
        # @var int
        self.epgAdapterId = epgAdapterId

        # Default adapter identifier for recording
        # @var int
        self.recordingAdapterId = recordingAdapterId


    PROPERTY_LOADERS = {
        'mediaAdapterId': getXmlNodeInt, 
        'epgAdapterId': getXmlNodeInt, 
        'recordingAdapterId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDefaultPlaybackAdapters.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaDefaultPlaybackAdapters")
        kparams.addIntIfDefined("mediaAdapterId", self.mediaAdapterId)
        kparams.addIntIfDefined("epgAdapterId", self.epgAdapterId)
        kparams.addIntIfDefined("recordingAdapterId", self.recordingAdapterId)
        return kparams

    def getMediaAdapterId(self):
        return self.mediaAdapterId

    def setMediaAdapterId(self, newMediaAdapterId):
        self.mediaAdapterId = newMediaAdapterId

    def getEpgAdapterId(self):
        return self.epgAdapterId

    def setEpgAdapterId(self, newEpgAdapterId):
        self.epgAdapterId = newEpgAdapterId

    def getRecordingAdapterId(self):
        return self.recordingAdapterId

    def setRecordingAdapterId(self, newRecordingAdapterId):
        self.recordingAdapterId = newRecordingAdapterId


# @package Kaltura
# @subpackage Client
class KalturaPlaybackPartnerConfig(KalturaPartnerConfiguration):
    """Playback adapter partner configuration"""

    def __init__(self,
            defaultAdapters=NotImplemented):
        KalturaPartnerConfiguration.__init__(self)

        # default adapter configuration for: media, epg,recording.
        # @var KalturaDefaultPlaybackAdapters
        self.defaultAdapters = defaultAdapters


    PROPERTY_LOADERS = {
        'defaultAdapters': (KalturaObjectFactory.create, 'KalturaDefaultPlaybackAdapters'), 
    }

    def fromXml(self, node):
        KalturaPartnerConfiguration.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlaybackPartnerConfig.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPartnerConfiguration.toParams(self)
        kparams.put("objectType", "KalturaPlaybackPartnerConfig")
        kparams.addObjectIfDefined("defaultAdapters", self.defaultAdapters)
        return kparams

    def getDefaultAdapters(self):
        return self.defaultAdapters

    def setDefaultAdapters(self, newDefaultAdapters):
        self.defaultAdapters = newDefaultAdapters


# @package Kaltura
# @subpackage Client
class KalturaEncryption(KalturaObjectBase):
    def __init__(self,
            encryptionType=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Encryption type
        # @var KalturaEncryptionType
        self.encryptionType = encryptionType


    PROPERTY_LOADERS = {
        'encryptionType': (KalturaEnumsFactory.createString, "KalturaEncryptionType"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEncryption.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaEncryption")
        kparams.addStringEnumIfDefined("encryptionType", self.encryptionType)
        return kparams

    def getEncryptionType(self):
        return self.encryptionType

    def setEncryptionType(self, newEncryptionType):
        self.encryptionType = newEncryptionType


# @package Kaltura
# @subpackage Client
class KalturaDataEncryption(KalturaObjectBase):
    def __init__(self,
            username=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Username encryption config
        # @var KalturaEncryption
        self.username = username


    PROPERTY_LOADERS = {
        'username': (KalturaObjectFactory.create, 'KalturaEncryption'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDataEncryption.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaDataEncryption")
        kparams.addObjectIfDefined("username", self.username)
        return kparams

    def getUsername(self):
        return self.username

    def setUsername(self, newUsername):
        self.username = newUsername


# @package Kaltura
# @subpackage Client
class KalturaSecurityPartnerConfig(KalturaPartnerConfiguration):
    def __init__(self,
            encryption=NotImplemented):
        KalturaPartnerConfiguration.__init__(self)

        # Encryption config
        # @var KalturaDataEncryption
        self.encryption = encryption


    PROPERTY_LOADERS = {
        'encryption': (KalturaObjectFactory.create, 'KalturaDataEncryption'), 
    }

    def fromXml(self, node):
        KalturaPartnerConfiguration.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSecurityPartnerConfig.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPartnerConfiguration.toParams(self)
        kparams.put("objectType", "KalturaSecurityPartnerConfig")
        kparams.addObjectIfDefined("encryption", self.encryption)
        return kparams

    def getEncryption(self):
        return self.encryption

    def setEncryption(self, newEncryption):
        self.encryption = newEncryption


# @package Kaltura
# @subpackage Client
class KalturaPersonalList(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            createDate=NotImplemented,
            ksql=NotImplemented,
            partnerListType=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Id
        # @var int
        # @readonly
        self.id = id

        # Name
        # @var string
        self.name = name

        # Create Date
        # @var int
        # @readonly
        self.createDate = createDate

        # Search assets using dynamic criteria. Provided collection of nested expressions with key, comparison operators, value, and logical conjunction.
        #             Possible keys: any Tag or Meta defined in the system and the following reserved keys: start_date, end_date. 
        #             epg_id, media_id - for specific asset IDs.
        #             geo_block - only valid value is &quot;true&quot;: When enabled, only assets that are not restricted to the user by geo-block rules will return.
        #             parental_rules - only valid value is &quot;true&quot;: When enabled, only assets that the user doesn&#39;t need to provide PIN code will return.
        #             user_interests - only valid value is &quot;true&quot;. When enabled, only assets that the user defined as his interests (by tags and metas) will return.
        #             epg_channel_id - the channel identifier of the EPG program.
        #             entitled_assets - valid values: &quot;free&quot;, &quot;entitled&quot;, &quot;not_entitled&quot;, &quot;both&quot;. free - gets only free to watch assets. entitled - only those that the user is implicitly entitled to watch.
        #             asset_type - valid values: &quot;media&quot;, &quot;epg&quot;, &quot;recording&quot; or any number that represents media type in group.
        #             Comparison operators: for numerical fields =, &gt;, &gt;=, &lt;, &lt;=, : (in). 
        #             For alpha-numerical fields =, != (not), ~ (like), !~, ^ (any word starts with), ^= (phrase starts with), + (exists), !+ (not exists).
        #             Logical conjunction: and, or. 
        #             Search values are limited to 20 characters each for the next operators: ~, !~, ^, ^=
        #             (maximum length of entire filter is 4096 characters)
        # @var string
        self.ksql = ksql

        # Partner List Type (optional)
        # @var int
        self.partnerListType = partnerListType


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'createDate': getXmlNodeInt, 
        'ksql': getXmlNodeText, 
        'partnerListType': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPersonalList.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPersonalList")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("ksql", self.ksql)
        kparams.addIntIfDefined("partnerListType", self.partnerListType)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getCreateDate(self):
        return self.createDate

    def getKsql(self):
        return self.ksql

    def setKsql(self, newKsql):
        self.ksql = newKsql

    def getPartnerListType(self):
        return self.partnerListType

    def setPartnerListType(self, newPartnerListType):
        self.partnerListType = newPartnerListType


# @package Kaltura
# @subpackage Client
class KalturaPersonalListListResponse(KalturaListResponse):
    """List of KalturaPersonalList."""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Follow data list
        # @var array of KalturaPersonalList
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaPersonalList'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPersonalListListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaPersonalListListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaEngagementAdapterBase(KalturaObjectBase):
    """Engagement adapter basic"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Engagement adapter id
        # @var int
        # @readonly
        self.id = id

        # Engagement adapter name
        # @var string
        self.name = name


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEngagementAdapterBase.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaEngagementAdapterBase")
        kparams.addStringIfDefined("name", self.name)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName


# @package Kaltura
# @subpackage Client
class KalturaEngagementAdapter(KalturaEngagementAdapterBase):
    """Engagement Adapter"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            isActive=NotImplemented,
            adapterUrl=NotImplemented,
            providerUrl=NotImplemented,
            engagementAdapterSettings=NotImplemented,
            sharedSecret=NotImplemented):
        KalturaEngagementAdapterBase.__init__(self,
            id,
            name)

        # Engagement adapter active status
        # @var bool
        self.isActive = isActive

        # Engagement adapter adapter URL
        # @var string
        self.adapterUrl = adapterUrl

        # Engagement provider adapter URL
        # @var string
        self.providerUrl = providerUrl

        # Engagement adapter extra parameters
        # @var map
        self.engagementAdapterSettings = engagementAdapterSettings

        # Shared Secret
        # @var string
        # @readonly
        self.sharedSecret = sharedSecret


    PROPERTY_LOADERS = {
        'isActive': getXmlNodeBool, 
        'adapterUrl': getXmlNodeText, 
        'providerUrl': getXmlNodeText, 
        'engagementAdapterSettings': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
        'sharedSecret': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaEngagementAdapterBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEngagementAdapter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEngagementAdapterBase.toParams(self)
        kparams.put("objectType", "KalturaEngagementAdapter")
        kparams.addBoolIfDefined("isActive", self.isActive)
        kparams.addStringIfDefined("adapterUrl", self.adapterUrl)
        kparams.addStringIfDefined("providerUrl", self.providerUrl)
        kparams.addMapIfDefined("engagementAdapterSettings", self.engagementAdapterSettings)
        return kparams

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive

    def getAdapterUrl(self):
        return self.adapterUrl

    def setAdapterUrl(self, newAdapterUrl):
        self.adapterUrl = newAdapterUrl

    def getProviderUrl(self):
        return self.providerUrl

    def setProviderUrl(self, newProviderUrl):
        self.providerUrl = newProviderUrl

    def getEngagementAdapterSettings(self):
        return self.engagementAdapterSettings

    def setEngagementAdapterSettings(self, newEngagementAdapterSettings):
        self.engagementAdapterSettings = newEngagementAdapterSettings

    def getSharedSecret(self):
        return self.sharedSecret


# @package Kaltura
# @subpackage Client
class KalturaEngagementAdapterListResponse(KalturaListResponse):
    """Engagement adapter list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of Engagement adapter
        # @var array of KalturaEngagementAdapter
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaEngagementAdapter'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEngagementAdapterListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaEngagementAdapterListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaEngagement(KalturaObjectBase):
    """Engagement"""

    def __init__(self,
            id=NotImplemented,
            totalNumberOfRecipients=NotImplemented,
            type=NotImplemented,
            adapterId=NotImplemented,
            adapterDynamicData=NotImplemented,
            intervalSeconds=NotImplemented,
            userList=NotImplemented,
            sendTimeInSeconds=NotImplemented,
            couponGroupId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Engagement id
        # @var int
        # @readonly
        self.id = id

        # Total number of recipients
        # @var int
        # @readonly
        self.totalNumberOfRecipients = totalNumberOfRecipients

        # Engagement type
        # @var KalturaEngagementType
        self.type = type

        # Engagement adapter id
        # @var int
        self.adapterId = adapterId

        # Engagement adapter dynamic data
        # @var string
        self.adapterDynamicData = adapterDynamicData

        # Interval (seconds)
        # @var int
        self.intervalSeconds = intervalSeconds

        # Manual User list
        # @var string
        self.userList = userList

        # Send time (seconds)
        # @var int
        self.sendTimeInSeconds = sendTimeInSeconds

        # Coupon GroupId
        # @var int
        self.couponGroupId = couponGroupId


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'totalNumberOfRecipients': getXmlNodeInt, 
        'type': (KalturaEnumsFactory.createString, "KalturaEngagementType"), 
        'adapterId': getXmlNodeInt, 
        'adapterDynamicData': getXmlNodeText, 
        'intervalSeconds': getXmlNodeInt, 
        'userList': getXmlNodeText, 
        'sendTimeInSeconds': getXmlNodeInt, 
        'couponGroupId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEngagement.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaEngagement")
        kparams.addStringEnumIfDefined("type", self.type)
        kparams.addIntIfDefined("adapterId", self.adapterId)
        kparams.addStringIfDefined("adapterDynamicData", self.adapterDynamicData)
        kparams.addIntIfDefined("intervalSeconds", self.intervalSeconds)
        kparams.addStringIfDefined("userList", self.userList)
        kparams.addIntIfDefined("sendTimeInSeconds", self.sendTimeInSeconds)
        kparams.addIntIfDefined("couponGroupId", self.couponGroupId)
        return kparams

    def getId(self):
        return self.id

    def getTotalNumberOfRecipients(self):
        return self.totalNumberOfRecipients

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getAdapterId(self):
        return self.adapterId

    def setAdapterId(self, newAdapterId):
        self.adapterId = newAdapterId

    def getAdapterDynamicData(self):
        return self.adapterDynamicData

    def setAdapterDynamicData(self, newAdapterDynamicData):
        self.adapterDynamicData = newAdapterDynamicData

    def getIntervalSeconds(self):
        return self.intervalSeconds

    def setIntervalSeconds(self, newIntervalSeconds):
        self.intervalSeconds = newIntervalSeconds

    def getUserList(self):
        return self.userList

    def setUserList(self, newUserList):
        self.userList = newUserList

    def getSendTimeInSeconds(self):
        return self.sendTimeInSeconds

    def setSendTimeInSeconds(self, newSendTimeInSeconds):
        self.sendTimeInSeconds = newSendTimeInSeconds

    def getCouponGroupId(self):
        return self.couponGroupId

    def setCouponGroupId(self, newCouponGroupId):
        self.couponGroupId = newCouponGroupId


# @package Kaltura
# @subpackage Client
class KalturaEngagementListResponse(KalturaListResponse):
    """Engagement adapter list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of Engagement
        # @var array of KalturaEngagement
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaEngagement'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEngagementListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaEngagementListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaFollowDataBase(KalturaObjectBase):
    def __init__(self,
            announcementId=NotImplemented,
            status=NotImplemented,
            title=NotImplemented,
            timestamp=NotImplemented,
            followPhrase=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Announcement Id
        # @var int
        # @readonly
        self.announcementId = announcementId

        # Status
        # @var int
        # @readonly
        self.status = status

        # Title
        # @var string
        # @readonly
        self.title = title

        # Timestamp
        # @var int
        # @readonly
        self.timestamp = timestamp

        # Follow Phrase
        # @var string
        # @readonly
        self.followPhrase = followPhrase


    PROPERTY_LOADERS = {
        'announcementId': getXmlNodeInt, 
        'status': getXmlNodeInt, 
        'title': getXmlNodeText, 
        'timestamp': getXmlNodeInt, 
        'followPhrase': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFollowDataBase.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaFollowDataBase")
        return kparams

    def getAnnouncementId(self):
        return self.announcementId

    def getStatus(self):
        return self.status

    def getTitle(self):
        return self.title

    def getTimestamp(self):
        return self.timestamp

    def getFollowPhrase(self):
        return self.followPhrase


# @package Kaltura
# @subpackage Client
class KalturaFollowTvSeries(KalturaFollowDataBase):
    def __init__(self,
            announcementId=NotImplemented,
            status=NotImplemented,
            title=NotImplemented,
            timestamp=NotImplemented,
            followPhrase=NotImplemented,
            assetId=NotImplemented):
        KalturaFollowDataBase.__init__(self,
            announcementId,
            status,
            title,
            timestamp,
            followPhrase)

        # Asset Id
        # @var int
        self.assetId = assetId


    PROPERTY_LOADERS = {
        'assetId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFollowDataBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFollowTvSeries.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFollowDataBase.toParams(self)
        kparams.put("objectType", "KalturaFollowTvSeries")
        kparams.addIntIfDefined("assetId", self.assetId)
        return kparams

    def getAssetId(self):
        return self.assetId

    def setAssetId(self, newAssetId):
        self.assetId = newAssetId


# @package Kaltura
# @subpackage Client
class KalturaFollowTvSeriesListResponse(KalturaListResponse):
    """List of message follow data."""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Follow data list
        # @var array of KalturaFollowTvSeries
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaFollowTvSeries'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFollowTvSeriesListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaFollowTvSeriesListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaInboxMessage(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            message=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            url=NotImplemented,
            campaignId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # message id
        # @var string
        # @readonly
        self.id = id

        # message
        # @var string
        self.message = message

        # Status
        # @var KalturaInboxMessageStatus
        # @readonly
        self.status = status

        # Type
        # @var KalturaInboxMessageType
        self.type = type

        # Created at
        # @var int
        # @readonly
        self.createdAt = createdAt

        # url
        # @var string
        self.url = url

        # campaignId
        # @var int
        # @readonly
        self.campaignId = campaignId


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'message': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createString, "KalturaInboxMessageStatus"), 
        'type': (KalturaEnumsFactory.createString, "KalturaInboxMessageType"), 
        'createdAt': getXmlNodeInt, 
        'url': getXmlNodeText, 
        'campaignId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaInboxMessage.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaInboxMessage")
        kparams.addStringIfDefined("message", self.message)
        kparams.addStringEnumIfDefined("type", self.type)
        kparams.addStringIfDefined("url", self.url)
        return kparams

    def getId(self):
        return self.id

    def getMessage(self):
        return self.message

    def setMessage(self, newMessage):
        self.message = newMessage

    def getStatus(self):
        return self.status

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getCreatedAt(self):
        return self.createdAt

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl

    def getCampaignId(self):
        return self.campaignId


# @package Kaltura
# @subpackage Client
class KalturaInboxMessageListResponse(KalturaListResponse):
    """List of inbox message."""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Follow data list
        # @var array of KalturaInboxMessage
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaInboxMessage'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaInboxMessageListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaInboxMessageListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaFeed(KalturaObjectBase):
    def __init__(self,
            assetId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Asset identifier
        # @var int
        # @readonly
        self.assetId = assetId


    PROPERTY_LOADERS = {
        'assetId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFeed.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaFeed")
        return kparams

    def getAssetId(self):
        return self.assetId


# @package Kaltura
# @subpackage Client
class KalturaPersonalFeed(KalturaFeed):
    def __init__(self,
            assetId=NotImplemented):
        KalturaFeed.__init__(self,
            assetId)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFeed.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPersonalFeed.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFeed.toParams(self)
        kparams.put("objectType", "KalturaPersonalFeed")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaPersonalFeedListResponse(KalturaListResponse):
    """List of message follow data."""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Follow data list
        # @var array of KalturaPersonalFeed
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaPersonalFeed'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPersonalFeedListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaPersonalFeedListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaReminder(KalturaObjectBase):
    def __init__(self,
            name=NotImplemented,
            id=NotImplemented,
            type=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Reminder name
        # @var string
        # @readonly
        self.name = name

        # Reminder id
        # @var int
        # @readonly
        self.id = id

        # Reminder type
        # @var KalturaReminderType
        self.type = type


    PROPERTY_LOADERS = {
        'name': getXmlNodeText, 
        'id': getXmlNodeInt, 
        'type': (KalturaEnumsFactory.createString, "KalturaReminderType"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaReminder.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaReminder")
        kparams.addStringEnumIfDefined("type", self.type)
        return kparams

    def getName(self):
        return self.name

    def getId(self):
        return self.id

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType


# @package Kaltura
# @subpackage Client
class KalturaReminderListResponse(KalturaListResponse):
    """List of reminders from DB."""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Reminders
        # @var array of KalturaReminder
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaReminder'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaReminderListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaReminderListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaAssetReminder(KalturaReminder):
    def __init__(self,
            name=NotImplemented,
            id=NotImplemented,
            type=NotImplemented,
            assetId=NotImplemented):
        KalturaReminder.__init__(self,
            name,
            id,
            type)

        # Asset id
        # @var int
        self.assetId = assetId


    PROPERTY_LOADERS = {
        'assetId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaReminder.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetReminder.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaReminder.toParams(self)
        kparams.put("objectType", "KalturaAssetReminder")
        kparams.addIntIfDefined("assetId", self.assetId)
        return kparams

    def getAssetId(self):
        return self.assetId

    def setAssetId(self, newAssetId):
        self.assetId = newAssetId


# @package Kaltura
# @subpackage Client
class KalturaSeriesReminder(KalturaReminder):
    def __init__(self,
            name=NotImplemented,
            id=NotImplemented,
            type=NotImplemented,
            seriesId=NotImplemented,
            seasonNumber=NotImplemented,
            epgChannelId=NotImplemented):
        KalturaReminder.__init__(self,
            name,
            id,
            type)

        # Series identifier
        # @var string
        self.seriesId = seriesId

        # Season number
        # @var int
        self.seasonNumber = seasonNumber

        # EPG channel identifier
        # @var int
        self.epgChannelId = epgChannelId


    PROPERTY_LOADERS = {
        'seriesId': getXmlNodeText, 
        'seasonNumber': getXmlNodeInt, 
        'epgChannelId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaReminder.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSeriesReminder.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaReminder.toParams(self)
        kparams.put("objectType", "KalturaSeriesReminder")
        kparams.addStringIfDefined("seriesId", self.seriesId)
        kparams.addIntIfDefined("seasonNumber", self.seasonNumber)
        kparams.addIntIfDefined("epgChannelId", self.epgChannelId)
        return kparams

    def getSeriesId(self):
        return self.seriesId

    def setSeriesId(self, newSeriesId):
        self.seriesId = newSeriesId

    def getSeasonNumber(self):
        return self.seasonNumber

    def setSeasonNumber(self, newSeasonNumber):
        self.seasonNumber = newSeasonNumber

    def getEpgChannelId(self):
        return self.epgChannelId

    def setEpgChannelId(self, newEpgChannelId):
        self.epgChannelId = newEpgChannelId


# @package Kaltura
# @subpackage Client
class KalturaSmsAdapterProfileListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of objects
        # @var array of KalturaSmsAdapterProfile
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaSmsAdapterProfile'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSmsAdapterProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaSmsAdapterProfileListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaTopic(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            subscribersAmount=NotImplemented,
            automaticIssueNotification=NotImplemented,
            lastMessageSentDateSec=NotImplemented):
        KalturaObjectBase.__init__(self)

        # message id
        # @var string
        # @readonly
        self.id = id

        # message
        # @var string
        self.name = name

        # message
        # @var string
        self.subscribersAmount = subscribersAmount

        # automaticIssueNotification
        # @var KalturaTopicAutomaticIssueNotification
        self.automaticIssueNotification = automaticIssueNotification

        # lastMessageSentDateSec
        # @var int
        self.lastMessageSentDateSec = lastMessageSentDateSec


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'name': getXmlNodeText, 
        'subscribersAmount': getXmlNodeText, 
        'automaticIssueNotification': (KalturaEnumsFactory.createString, "KalturaTopicAutomaticIssueNotification"), 
        'lastMessageSentDateSec': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTopic.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaTopic")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("subscribersAmount", self.subscribersAmount)
        kparams.addStringEnumIfDefined("automaticIssueNotification", self.automaticIssueNotification)
        kparams.addIntIfDefined("lastMessageSentDateSec", self.lastMessageSentDateSec)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSubscribersAmount(self):
        return self.subscribersAmount

    def setSubscribersAmount(self, newSubscribersAmount):
        self.subscribersAmount = newSubscribersAmount

    def getAutomaticIssueNotification(self):
        return self.automaticIssueNotification

    def setAutomaticIssueNotification(self, newAutomaticIssueNotification):
        self.automaticIssueNotification = newAutomaticIssueNotification

    def getLastMessageSentDateSec(self):
        return self.lastMessageSentDateSec

    def setLastMessageSentDateSec(self, newLastMessageSentDateSec):
        self.lastMessageSentDateSec = newLastMessageSentDateSec


# @package Kaltura
# @subpackage Client
class KalturaTopicListResponse(KalturaListResponse):
    """List of Topics."""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # List of Topics
        # @var array of KalturaTopic
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaTopic'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTopicListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaTopicListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaTopicNotification(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            subscribeReference=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Topic notification ID
        # @var int
        # @readonly
        self.id = id

        # Topic notification name
        # @var string
        self.name = name

        # Topic notification description
        # @var string
        self.description = description

        # Announcement enabled
        # @var KalturaSubscribeReference
        self.subscribeReference = subscribeReference


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'description': getXmlNodeText, 
        'subscribeReference': (KalturaObjectFactory.create, 'KalturaSubscribeReference'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTopicNotification.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaTopicNotification")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("description", self.description)
        kparams.addObjectIfDefined("subscribeReference", self.subscribeReference)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getSubscribeReference(self):
        return self.subscribeReference

    def setSubscribeReference(self, newSubscribeReference):
        self.subscribeReference = newSubscribeReference


# @package Kaltura
# @subpackage Client
class KalturaTopicNotificationListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Topic notifications
        # @var array of KalturaTopicNotification
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaTopicNotification'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTopicNotificationListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaTopicNotificationListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaTrigger(KalturaObjectBase):
    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTrigger.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaTrigger")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDispatcher(KalturaObjectBase):
    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDispatcher.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaDispatcher")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaTopicNotificationMessage(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            message=NotImplemented,
            imageUrl=NotImplemented,
            topicNotificationId=NotImplemented,
            trigger=NotImplemented,
            dispatchers=NotImplemented,
            status=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Topic notification message ID
        # @var int
        # @readonly
        self.id = id

        # Topic notification message
        # @var string
        self.message = message

        # Topic notification message image URL
        # @var string
        self.imageUrl = imageUrl

        # Topic notification ID
        # @var int
        self.topicNotificationId = topicNotificationId

        # Topic notification message trigger
        # @var KalturaTrigger
        self.trigger = trigger

        # Topic notification message dispatchers
        # @var array of KalturaDispatcher
        self.dispatchers = dispatchers

        # Message status
        # @var KalturaAnnouncementStatus
        # @readonly
        self.status = status


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'message': getXmlNodeText, 
        'imageUrl': getXmlNodeText, 
        'topicNotificationId': getXmlNodeInt, 
        'trigger': (KalturaObjectFactory.create, 'KalturaTrigger'), 
        'dispatchers': (KalturaObjectFactory.createArray, 'KalturaDispatcher'), 
        'status': (KalturaEnumsFactory.createString, "KalturaAnnouncementStatus"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTopicNotificationMessage.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaTopicNotificationMessage")
        kparams.addStringIfDefined("message", self.message)
        kparams.addStringIfDefined("imageUrl", self.imageUrl)
        kparams.addIntIfDefined("topicNotificationId", self.topicNotificationId)
        kparams.addObjectIfDefined("trigger", self.trigger)
        kparams.addArrayIfDefined("dispatchers", self.dispatchers)
        return kparams

    def getId(self):
        return self.id

    def getMessage(self):
        return self.message

    def setMessage(self, newMessage):
        self.message = newMessage

    def getImageUrl(self):
        return self.imageUrl

    def setImageUrl(self, newImageUrl):
        self.imageUrl = newImageUrl

    def getTopicNotificationId(self):
        return self.topicNotificationId

    def setTopicNotificationId(self, newTopicNotificationId):
        self.topicNotificationId = newTopicNotificationId

    def getTrigger(self):
        return self.trigger

    def setTrigger(self, newTrigger):
        self.trigger = newTrigger

    def getDispatchers(self):
        return self.dispatchers

    def setDispatchers(self, newDispatchers):
        self.dispatchers = newDispatchers

    def getStatus(self):
        return self.status


# @package Kaltura
# @subpackage Client
class KalturaTopicNotificationMessageListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Topic notification messages
        # @var array of KalturaTopicNotificationMessage
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaTopicNotificationMessage'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTopicNotificationMessageListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaTopicNotificationMessageListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaDateTrigger(KalturaTrigger):
    def __init__(self,
            date=NotImplemented):
        KalturaTrigger.__init__(self)

        # Trigger date
        # @var int
        self.date = date


    PROPERTY_LOADERS = {
        'date': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaTrigger.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDateTrigger.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaTrigger.toParams(self)
        kparams.put("objectType", "KalturaDateTrigger")
        kparams.addIntIfDefined("date", self.date)
        return kparams

    def getDate(self):
        return self.date

    def setDate(self, newDate):
        self.date = newDate


# @package Kaltura
# @subpackage Client
class KalturaSubscriptionTrigger(KalturaTrigger):
    def __init__(self,
            type=NotImplemented,
            offset=NotImplemented):
        KalturaTrigger.__init__(self)

        # Subscription trigger type
        # @var KalturaSubscriptionTriggerType
        self.type = type

        # Subscription trigger offset
        # @var int
        self.offset = offset


    PROPERTY_LOADERS = {
        'type': (KalturaEnumsFactory.createString, "KalturaSubscriptionTriggerType"), 
        'offset': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaTrigger.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSubscriptionTrigger.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaTrigger.toParams(self)
        kparams.put("objectType", "KalturaSubscriptionTrigger")
        kparams.addStringEnumIfDefined("type", self.type)
        kparams.addIntIfDefined("offset", self.offset)
        return kparams

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getOffset(self):
        return self.offset

    def setOffset(self, newOffset):
        self.offset = newOffset


# @package Kaltura
# @subpackage Client
class KalturaSmsDispatcher(KalturaDispatcher):
    def __init__(self):
        KalturaDispatcher.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDispatcher.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSmsDispatcher.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDispatcher.toParams(self)
        kparams.put("objectType", "KalturaSmsDispatcher")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaMailDispatcher(KalturaDispatcher):
    def __init__(self,
            bodyTemplate=NotImplemented,
            subjectTemplate=NotImplemented):
        KalturaDispatcher.__init__(self)

        # Mail body template
        # @var string
        self.bodyTemplate = bodyTemplate

        # Mail subjsct template
        # @var string
        self.subjectTemplate = subjectTemplate


    PROPERTY_LOADERS = {
        'bodyTemplate': getXmlNodeText, 
        'subjectTemplate': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaDispatcher.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMailDispatcher.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDispatcher.toParams(self)
        kparams.put("objectType", "KalturaMailDispatcher")
        kparams.addStringIfDefined("bodyTemplate", self.bodyTemplate)
        kparams.addStringIfDefined("subjectTemplate", self.subjectTemplate)
        return kparams

    def getBodyTemplate(self):
        return self.bodyTemplate

    def setBodyTemplate(self, newBodyTemplate):
        self.bodyTemplate = newBodyTemplate

    def getSubjectTemplate(self):
        return self.subjectTemplate

    def setSubjectTemplate(self, newSubjectTemplate):
        self.subjectTemplate = newSubjectTemplate


# @package Kaltura
# @subpackage Client
class KalturaIngestEpg(KalturaObjectBase):
    def __init__(self,
            ingestId=NotImplemented,
            ingestName=NotImplemented,
            ingestFilenameExtension=NotImplemented,
            createdDate=NotImplemented,
            ingestedByUserId=NotImplemented,
            completedDate=NotImplemented,
            ingestProfileId=NotImplemented,
            status=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Unique id of the ingest job in question
        # @var int
        # @readonly
        self.ingestId = ingestId

        # The ingested file name without its extention
        # @var string
        self.ingestName = ingestName

        # The ingested file name extention
        # @var string
        self.ingestFilenameExtension = ingestFilenameExtension

        # The ingest job created date and time. Date and time represented as epoch.
        # @var int
        self.createdDate = createdDate

        # The user id of the addFromBulkUpload caller.
        # @var int
        self.ingestedByUserId = ingestedByUserId

        # The ingest job completed date and time. Date and time represented as epoch.
        # @var int
        self.completedDate = completedDate

        # The ingest profile id that of the ingest job.
        # @var int
        self.ingestProfileId = ingestProfileId

        # The ingest profile id that of the ingest job.
        # @var KalturaIngestStatus
        self.status = status


    PROPERTY_LOADERS = {
        'ingestId': getXmlNodeInt, 
        'ingestName': getXmlNodeText, 
        'ingestFilenameExtension': getXmlNodeText, 
        'createdDate': getXmlNodeInt, 
        'ingestedByUserId': getXmlNodeInt, 
        'completedDate': getXmlNodeInt, 
        'ingestProfileId': getXmlNodeInt, 
        'status': (KalturaEnumsFactory.createString, "KalturaIngestStatus"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIngestEpg.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaIngestEpg")
        kparams.addStringIfDefined("ingestName", self.ingestName)
        kparams.addStringIfDefined("ingestFilenameExtension", self.ingestFilenameExtension)
        kparams.addIntIfDefined("createdDate", self.createdDate)
        kparams.addIntIfDefined("ingestedByUserId", self.ingestedByUserId)
        kparams.addIntIfDefined("completedDate", self.completedDate)
        kparams.addIntIfDefined("ingestProfileId", self.ingestProfileId)
        kparams.addStringEnumIfDefined("status", self.status)
        return kparams

    def getIngestId(self):
        return self.ingestId

    def getIngestName(self):
        return self.ingestName

    def setIngestName(self, newIngestName):
        self.ingestName = newIngestName

    def getIngestFilenameExtension(self):
        return self.ingestFilenameExtension

    def setIngestFilenameExtension(self, newIngestFilenameExtension):
        self.ingestFilenameExtension = newIngestFilenameExtension

    def getCreatedDate(self):
        return self.createdDate

    def setCreatedDate(self, newCreatedDate):
        self.createdDate = newCreatedDate

    def getIngestedByUserId(self):
        return self.ingestedByUserId

    def setIngestedByUserId(self, newIngestedByUserId):
        self.ingestedByUserId = newIngestedByUserId

    def getCompletedDate(self):
        return self.completedDate

    def setCompletedDate(self, newCompletedDate):
        self.completedDate = newCompletedDate

    def getIngestProfileId(self):
        return self.ingestProfileId

    def setIngestProfileId(self, newIngestProfileId):
        self.ingestProfileId = newIngestProfileId

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus


# @package Kaltura
# @subpackage Client
class KalturaIngestStatusEpgListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of IngestStatus
        # @var array of KalturaIngestEpg
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaIngestEpg'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIngestStatusEpgListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaIngestStatusEpgListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaEpgIngestErrorMessage(KalturaObjectBase):
    """A Kaltura error message"""

    def __init__(self,
            message=NotImplemented,
            code=NotImplemented,
            args=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The message description with arguments place holders
        # @var string
        self.message = message

        # The message code
        # @var string
        self.code = code

        # Message args
        # @var map
        self.args = args


    PROPERTY_LOADERS = {
        'message': getXmlNodeText, 
        'code': getXmlNodeText, 
        'args': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEpgIngestErrorMessage.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaEpgIngestErrorMessage")
        kparams.addStringIfDefined("message", self.message)
        kparams.addStringIfDefined("code", self.code)
        kparams.addMapIfDefined("args", self.args)
        return kparams

    def getMessage(self):
        return self.message

    def setMessage(self, newMessage):
        self.message = newMessage

    def getCode(self):
        return self.code

    def setCode(self, newCode):
        self.code = newCode

    def getArgs(self):
        return self.args

    def setArgs(self, newArgs):
        self.args = newArgs


# @package Kaltura
# @subpackage Client
class KalturaAggregatedIngestInfo(KalturaObjectBase):
    def __init__(self,
            resultsCount=NotImplemented,
            totalFailureCount=NotImplemented,
            partialFailureCount=NotImplemented,
            warningsCount=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Number of results
        # @var int
        self.resultsCount = resultsCount

        # Number of results that include at least one error of severity TotalFailure
        # @var int
        self.totalFailureCount = totalFailureCount

        # Number of results that include no error with severity TotalFailure but at at least one error of severity PartialFailure
        # @var int
        self.partialFailureCount = partialFailureCount

        # Number of results that include at least one warning
        # @var int
        self.warningsCount = warningsCount


    PROPERTY_LOADERS = {
        'resultsCount': getXmlNodeInt, 
        'totalFailureCount': getXmlNodeInt, 
        'partialFailureCount': getXmlNodeInt, 
        'warningsCount': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAggregatedIngestInfo.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAggregatedIngestInfo")
        kparams.addIntIfDefined("resultsCount", self.resultsCount)
        kparams.addIntIfDefined("totalFailureCount", self.totalFailureCount)
        kparams.addIntIfDefined("partialFailureCount", self.partialFailureCount)
        kparams.addIntIfDefined("warningsCount", self.warningsCount)
        return kparams

    def getResultsCount(self):
        return self.resultsCount

    def setResultsCount(self, newResultsCount):
        self.resultsCount = newResultsCount

    def getTotalFailureCount(self):
        return self.totalFailureCount

    def setTotalFailureCount(self, newTotalFailureCount):
        self.totalFailureCount = newTotalFailureCount

    def getPartialFailureCount(self):
        return self.partialFailureCount

    def setPartialFailureCount(self, newPartialFailureCount):
        self.partialFailureCount = newPartialFailureCount

    def getWarningsCount(self):
        return self.warningsCount

    def setWarningsCount(self, newWarningsCount):
        self.warningsCount = newWarningsCount


# @package Kaltura
# @subpackage Client
class KalturaChannelAggregatedIngestInfo(KalturaObjectBase):
    def __init__(self,
            linearChannelId=NotImplemented,
            aggregatedErrors=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The linear channel asset id
        # @var int
        self.linearChannelId = linearChannelId

        # Aggregated error counters
        # @var KalturaAggregatedIngestInfo
        self.aggregatedErrors = aggregatedErrors


    PROPERTY_LOADERS = {
        'linearChannelId': getXmlNodeInt, 
        'aggregatedErrors': (KalturaObjectFactory.create, 'KalturaAggregatedIngestInfo'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaChannelAggregatedIngestInfo.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaChannelAggregatedIngestInfo")
        kparams.addIntIfDefined("linearChannelId", self.linearChannelId)
        kparams.addObjectIfDefined("aggregatedErrors", self.aggregatedErrors)
        return kparams

    def getLinearChannelId(self):
        return self.linearChannelId

    def setLinearChannelId(self, newLinearChannelId):
        self.linearChannelId = newLinearChannelId

    def getAggregatedErrors(self):
        return self.aggregatedErrors

    def setAggregatedErrors(self, newAggregatedErrors):
        self.aggregatedErrors = newAggregatedErrors


# @package Kaltura
# @subpackage Client
class KalturaDateAggregatedIngestInfo(KalturaObjectBase):
    def __init__(self,
            date=NotImplemented,
            aggregatedErrors=NotImplemented):
        KalturaObjectBase.__init__(self)

        # 00:00 UTC of the date in question
        # @var int
        self.date = date

        # Aggregated error counters
        # @var KalturaAggregatedIngestInfo
        self.aggregatedErrors = aggregatedErrors


    PROPERTY_LOADERS = {
        'date': getXmlNodeInt, 
        'aggregatedErrors': (KalturaObjectFactory.create, 'KalturaAggregatedIngestInfo'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDateAggregatedIngestInfo.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaDateAggregatedIngestInfo")
        kparams.addIntIfDefined("date", self.date)
        kparams.addObjectIfDefined("aggregatedErrors", self.aggregatedErrors)
        return kparams

    def getDate(self):
        return self.date

    def setDate(self, newDate):
        self.date = newDate

    def getAggregatedErrors(self):
        return self.aggregatedErrors

    def setAggregatedErrors(self, newAggregatedErrors):
        self.aggregatedErrors = newAggregatedErrors


# @package Kaltura
# @subpackage Client
class KalturaIngestEpgDetailsAggregation(KalturaObjectBase):
    def __init__(self,
            linearChannels=NotImplemented,
            dates=NotImplemented,
            all=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Array of aggregated information per channel that included in the ingest job in question
        # @var array of KalturaChannelAggregatedIngestInfo
        self.linearChannels = linearChannels

        # Array of aggregated information per date that included in the ingest job in question
        # @var array of KalturaDateAggregatedIngestInfo
        self.dates = dates

        # All aggregated counters
        # @var KalturaAggregatedIngestInfo
        self.all = all


    PROPERTY_LOADERS = {
        'linearChannels': (KalturaObjectFactory.createArray, 'KalturaChannelAggregatedIngestInfo'), 
        'dates': (KalturaObjectFactory.createArray, 'KalturaDateAggregatedIngestInfo'), 
        'all': (KalturaObjectFactory.create, 'KalturaAggregatedIngestInfo'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIngestEpgDetailsAggregation.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaIngestEpgDetailsAggregation")
        kparams.addArrayIfDefined("linearChannels", self.linearChannels)
        kparams.addArrayIfDefined("dates", self.dates)
        kparams.addObjectIfDefined("all", self.all)
        return kparams

    def getLinearChannels(self):
        return self.linearChannels

    def setLinearChannels(self, newLinearChannels):
        self.linearChannels = newLinearChannels

    def getDates(self):
        return self.dates

    def setDates(self, newDates):
        self.dates = newDates

    def getAll(self):
        return self.all

    def setAll(self, newAll):
        self.all = newAll


# @package Kaltura
# @subpackage Client
class KalturaIngestEpgDetails(KalturaIngestEpg):
    def __init__(self,
            ingestId=NotImplemented,
            ingestName=NotImplemented,
            ingestFilenameExtension=NotImplemented,
            createdDate=NotImplemented,
            ingestedByUserId=NotImplemented,
            completedDate=NotImplemented,
            ingestProfileId=NotImplemented,
            status=NotImplemented,
            errors=NotImplemented,
            aggregations=NotImplemented):
        KalturaIngestEpg.__init__(self,
            ingestId,
            ingestName,
            ingestFilenameExtension,
            createdDate,
            ingestedByUserId,
            completedDate,
            ingestProfileId,
            status)

        # Errors
        # @var array of KalturaEpgIngestErrorMessage
        self.errors = errors

        # Aggregated counters
        # @var KalturaIngestEpgDetailsAggregation
        self.aggregations = aggregations


    PROPERTY_LOADERS = {
        'errors': (KalturaObjectFactory.createArray, 'KalturaEpgIngestErrorMessage'), 
        'aggregations': (KalturaObjectFactory.create, 'KalturaIngestEpgDetailsAggregation'), 
    }

    def fromXml(self, node):
        KalturaIngestEpg.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIngestEpgDetails.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaIngestEpg.toParams(self)
        kparams.put("objectType", "KalturaIngestEpgDetails")
        kparams.addArrayIfDefined("errors", self.errors)
        kparams.addObjectIfDefined("aggregations", self.aggregations)
        return kparams

    def getErrors(self):
        return self.errors

    def setErrors(self, newErrors):
        self.errors = newErrors

    def getAggregations(self):
        return self.aggregations

    def setAggregations(self, newAggregations):
        self.aggregations = newAggregations


# @package Kaltura
# @subpackage Client
class KalturaIngestEpgProgramResult(KalturaObjectBase):
    def __init__(self,
            programId=NotImplemented,
            externalProgramId=NotImplemented,
            linearChannelId=NotImplemented,
            indexInFile=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            status=NotImplemented,
            errors=NotImplemented,
            warnings=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The unique ingested program id
        # @var int
        self.programId = programId

        # An external program id
        # @var string
        self.externalProgramId = externalProgramId

        # The id of the linear channel asset that the program belongs to
        # @var int
        self.linearChannelId = linearChannelId

        # The index of the program in the ingested file
        # @var int
        self.indexInFile = indexInFile

        # Program EPG start date. Date and time represented as epoch
        # @var int
        self.startDate = startDate

        # Program EPG end date. Date and time represented as epoch
        # @var int
        self.endDate = endDate

        # The program status
        # @var KalturaIngestEpgProgramStatus
        self.status = status

        # List of errors. Note: error cause the data in question or the whole ingest to fail
        # @var array of KalturaEpgIngestErrorMessage
        self.errors = errors

        # List of warnings. Note: warning cause no failure
        # @var array of KalturaMessage
        self.warnings = warnings


    PROPERTY_LOADERS = {
        'programId': getXmlNodeInt, 
        'externalProgramId': getXmlNodeText, 
        'linearChannelId': getXmlNodeInt, 
        'indexInFile': getXmlNodeInt, 
        'startDate': getXmlNodeInt, 
        'endDate': getXmlNodeInt, 
        'status': (KalturaEnumsFactory.createString, "KalturaIngestEpgProgramStatus"), 
        'errors': (KalturaObjectFactory.createArray, 'KalturaEpgIngestErrorMessage'), 
        'warnings': (KalturaObjectFactory.createArray, 'KalturaMessage'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIngestEpgProgramResult.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaIngestEpgProgramResult")
        kparams.addIntIfDefined("programId", self.programId)
        kparams.addStringIfDefined("externalProgramId", self.externalProgramId)
        kparams.addIntIfDefined("linearChannelId", self.linearChannelId)
        kparams.addIntIfDefined("indexInFile", self.indexInFile)
        kparams.addIntIfDefined("startDate", self.startDate)
        kparams.addIntIfDefined("endDate", self.endDate)
        kparams.addStringEnumIfDefined("status", self.status)
        kparams.addArrayIfDefined("errors", self.errors)
        kparams.addArrayIfDefined("warnings", self.warnings)
        return kparams

    def getProgramId(self):
        return self.programId

    def setProgramId(self, newProgramId):
        self.programId = newProgramId

    def getExternalProgramId(self):
        return self.externalProgramId

    def setExternalProgramId(self, newExternalProgramId):
        self.externalProgramId = newExternalProgramId

    def getLinearChannelId(self):
        return self.linearChannelId

    def setLinearChannelId(self, newLinearChannelId):
        self.linearChannelId = newLinearChannelId

    def getIndexInFile(self):
        return self.indexInFile

    def setIndexInFile(self, newIndexInFile):
        self.indexInFile = newIndexInFile

    def getStartDate(self):
        return self.startDate

    def setStartDate(self, newStartDate):
        self.startDate = newStartDate

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getErrors(self):
        return self.errors

    def setErrors(self, newErrors):
        self.errors = newErrors

    def getWarnings(self):
        return self.warnings

    def setWarnings(self, newWarnings):
        self.warnings = newWarnings


# @package Kaltura
# @subpackage Client
class KalturaIngestStatusEpgProgramResultListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # list of KalturaIngestEpgProgramResult
        # @var array of KalturaIngestEpgProgramResult
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaIngestEpgProgramResult'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIngestStatusEpgProgramResultListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaIngestStatusEpgProgramResultListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaDurationListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Durations
        # @var array of KalturaDuration
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaDuration'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDurationListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaDurationListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaDynamicListListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of KalturaDynamicList
        # @var array of KalturaDynamicList
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaDynamicList'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDynamicListListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaDynamicListListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaIntegerValueListResponse(KalturaListResponse):
    """Integer list wrapper"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Interger value items
        # @var array of KalturaIntegerValue
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaIntegerValue'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIntegerValueListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaIntegerValueListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaReport(KalturaObjectBase):
    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaReport.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaReport")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaReportListResponse(KalturaListResponse):
    """Reports info wrapper"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Reports
        # @var array of KalturaReport
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaReport'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaReportListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaReportListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaPushParams(KalturaObjectBase):
    def __init__(self,
            token=NotImplemented,
            externalToken=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Device-Application push token
        # @var string
        self.token = token

        # External device token as received from external push provider in exchange for the device token
        # @var string
        self.externalToken = externalToken


    PROPERTY_LOADERS = {
        'token': getXmlNodeText, 
        'externalToken': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPushParams.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPushParams")
        kparams.addStringIfDefined("token", self.token)
        kparams.addStringIfDefined("externalToken", self.externalToken)
        return kparams

    def getToken(self):
        return self.token

    def setToken(self, newToken):
        self.token = newToken

    def getExternalToken(self):
        return self.externalToken

    def setExternalToken(self, newExternalToken):
        self.externalToken = newExternalToken


# @package Kaltura
# @subpackage Client
class KalturaDeviceReport(KalturaReport):
    def __init__(self,
            partnerId=NotImplemented,
            configurationGroupId=NotImplemented,
            udid=NotImplemented,
            pushParameters=NotImplemented,
            versionNumber=NotImplemented,
            versionPlatform=NotImplemented,
            versionAppName=NotImplemented,
            lastAccessIP=NotImplemented,
            lastAccessDate=NotImplemented,
            userAgent=NotImplemented,
            operationSystem=NotImplemented):
        KalturaReport.__init__(self)

        # Partner unique identifier
        # @var int
        self.partnerId = partnerId

        # Configuration group identifier which the version configuration the device last received belongs to
        # @var string
        self.configurationGroupId = configurationGroupId

        # Device unique identifier
        # @var string
        self.udid = udid

        # Device-Application push parameters
        # @var KalturaPushParams
        self.pushParameters = pushParameters

        # Application version number
        # @var string
        self.versionNumber = versionNumber

        # Application version type
        # @var KalturaPlatform
        self.versionPlatform = versionPlatform

        # Application version name
        # @var string
        self.versionAppName = versionAppName

        # Last access IP
        # @var string
        self.lastAccessIP = lastAccessIP

        # Last device configuration request date
        # @var int
        self.lastAccessDate = lastAccessDate

        # request header property
        # @var string
        self.userAgent = userAgent

        # Request header property
        #             Incase value cannot be found - returns &quot;Unknown 0.0&quot;
        # @var string
        self.operationSystem = operationSystem


    PROPERTY_LOADERS = {
        'partnerId': getXmlNodeInt, 
        'configurationGroupId': getXmlNodeText, 
        'udid': getXmlNodeText, 
        'pushParameters': (KalturaObjectFactory.create, 'KalturaPushParams'), 
        'versionNumber': getXmlNodeText, 
        'versionPlatform': (KalturaEnumsFactory.createString, "KalturaPlatform"), 
        'versionAppName': getXmlNodeText, 
        'lastAccessIP': getXmlNodeText, 
        'lastAccessDate': getXmlNodeInt, 
        'userAgent': getXmlNodeText, 
        'operationSystem': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaReport.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeviceReport.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaReport.toParams(self)
        kparams.put("objectType", "KalturaDeviceReport")
        kparams.addIntIfDefined("partnerId", self.partnerId)
        kparams.addStringIfDefined("configurationGroupId", self.configurationGroupId)
        kparams.addStringIfDefined("udid", self.udid)
        kparams.addObjectIfDefined("pushParameters", self.pushParameters)
        kparams.addStringIfDefined("versionNumber", self.versionNumber)
        kparams.addStringEnumIfDefined("versionPlatform", self.versionPlatform)
        kparams.addStringIfDefined("versionAppName", self.versionAppName)
        kparams.addStringIfDefined("lastAccessIP", self.lastAccessIP)
        kparams.addIntIfDefined("lastAccessDate", self.lastAccessDate)
        kparams.addStringIfDefined("userAgent", self.userAgent)
        kparams.addStringIfDefined("operationSystem", self.operationSystem)
        return kparams

    def getPartnerId(self):
        return self.partnerId

    def setPartnerId(self, newPartnerId):
        self.partnerId = newPartnerId

    def getConfigurationGroupId(self):
        return self.configurationGroupId

    def setConfigurationGroupId(self, newConfigurationGroupId):
        self.configurationGroupId = newConfigurationGroupId

    def getUdid(self):
        return self.udid

    def setUdid(self, newUdid):
        self.udid = newUdid

    def getPushParameters(self):
        return self.pushParameters

    def setPushParameters(self, newPushParameters):
        self.pushParameters = newPushParameters

    def getVersionNumber(self):
        return self.versionNumber

    def setVersionNumber(self, newVersionNumber):
        self.versionNumber = newVersionNumber

    def getVersionPlatform(self):
        return self.versionPlatform

    def setVersionPlatform(self, newVersionPlatform):
        self.versionPlatform = newVersionPlatform

    def getVersionAppName(self):
        return self.versionAppName

    def setVersionAppName(self, newVersionAppName):
        self.versionAppName = newVersionAppName

    def getLastAccessIP(self):
        return self.lastAccessIP

    def setLastAccessIP(self, newLastAccessIP):
        self.lastAccessIP = newLastAccessIP

    def getLastAccessDate(self):
        return self.lastAccessDate

    def setLastAccessDate(self, newLastAccessDate):
        self.lastAccessDate = newLastAccessDate

    def getUserAgent(self):
        return self.userAgent

    def setUserAgent(self, newUserAgent):
        self.userAgent = newUserAgent

    def getOperationSystem(self):
        return self.operationSystem

    def setOperationSystem(self, newOperationSystem):
        self.operationSystem = newOperationSystem


# @package Kaltura
# @subpackage Client
class KalturaHomeNetwork(KalturaObjectBase):
    """Home network details"""

    def __init__(self,
            externalId=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            isActive=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Home network identifier
        # @var string
        # @insertonly
        self.externalId = externalId

        # Home network name
        # @var string
        self.name = name

        # Home network description
        # @var string
        self.description = description

        # Is home network is active
        # @var bool
        self.isActive = isActive


    PROPERTY_LOADERS = {
        'externalId': getXmlNodeText, 
        'name': getXmlNodeText, 
        'description': getXmlNodeText, 
        'isActive': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHomeNetwork.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaHomeNetwork")
        kparams.addStringIfDefined("externalId", self.externalId)
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("description", self.description)
        kparams.addBoolIfDefined("isActive", self.isActive)
        return kparams

    def getExternalId(self):
        return self.externalId

    def setExternalId(self, newExternalId):
        self.externalId = newExternalId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive


# @package Kaltura
# @subpackage Client
class KalturaHomeNetworkListResponse(KalturaListResponse):
    """Home networks"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Home networks
        # @var array of KalturaHomeNetwork
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaHomeNetwork'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHomeNetworkListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaHomeNetworkListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaHouseholdCouponListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of objects
        # @var array of KalturaHouseholdCoupon
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaHouseholdCoupon'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdCouponListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaHouseholdCouponListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaHouseholdDeviceListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Household devices
        # @var array of KalturaHouseholdDevice
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaHouseholdDevice'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdDeviceListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaHouseholdDeviceListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaDeviceFamilyBase(KalturaObjectBase):
    """Device family details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            type=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Device family identifier
        # @var int
        self.id = id

        # Device family name
        # @var string
        self.name = name

        # Type of device family.
        #              if this device family belongs only to this group,
        #              otherwise.
        # @var KalturaDeviceFamilyType
        # @readonly
        self.type = type


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'type': (KalturaEnumsFactory.createString, "KalturaDeviceFamilyType"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeviceFamilyBase.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaDeviceFamilyBase")
        kparams.addIntIfDefined("id", self.id)
        kparams.addStringIfDefined("name", self.name)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getType(self):
        return self.type


# @package Kaltura
# @subpackage Client
class KalturaHouseholdDeviceFamilyLimitations(KalturaDeviceFamilyBase):
    """Device family limitations details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            frequency=NotImplemented,
            deviceLimit=NotImplemented,
            concurrentLimit=NotImplemented,
            isDefaultDeviceLimit=NotImplemented,
            isDefaultConcurrentLimit=NotImplemented):
        KalturaDeviceFamilyBase.__init__(self,
            id,
            name,
            type)

        # Allowed device change frequency code
        # @var int
        self.frequency = frequency

        # Max number of devices allowed for this family
        # @var int
        self.deviceLimit = deviceLimit

        # Max number of streams allowed for this family
        # @var int
        self.concurrentLimit = concurrentLimit

        # Is the Max number of devices allowed for this family is default value or not
        # @var bool
        # @readonly
        self.isDefaultDeviceLimit = isDefaultDeviceLimit

        # Is the Max number of streams allowed for this family is default value or not
        # @var bool
        # @readonly
        self.isDefaultConcurrentLimit = isDefaultConcurrentLimit


    PROPERTY_LOADERS = {
        'frequency': getXmlNodeInt, 
        'deviceLimit': getXmlNodeInt, 
        'concurrentLimit': getXmlNodeInt, 
        'isDefaultDeviceLimit': getXmlNodeBool, 
        'isDefaultConcurrentLimit': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaDeviceFamilyBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdDeviceFamilyLimitations.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeviceFamilyBase.toParams(self)
        kparams.put("objectType", "KalturaHouseholdDeviceFamilyLimitations")
        kparams.addIntIfDefined("frequency", self.frequency)
        kparams.addIntIfDefined("deviceLimit", self.deviceLimit)
        kparams.addIntIfDefined("concurrentLimit", self.concurrentLimit)
        return kparams

    def getFrequency(self):
        return self.frequency

    def setFrequency(self, newFrequency):
        self.frequency = newFrequency

    def getDeviceLimit(self):
        return self.deviceLimit

    def setDeviceLimit(self, newDeviceLimit):
        self.deviceLimit = newDeviceLimit

    def getConcurrentLimit(self):
        return self.concurrentLimit

    def setConcurrentLimit(self, newConcurrentLimit):
        self.concurrentLimit = newConcurrentLimit

    def getIsDefaultDeviceLimit(self):
        return self.isDefaultDeviceLimit

    def getIsDefaultConcurrentLimit(self):
        return self.isDefaultConcurrentLimit


# @package Kaltura
# @subpackage Client
class KalturaHouseholdLimitations(KalturaObjectBase):
    """Household limitations details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            concurrentLimit=NotImplemented,
            deviceLimit=NotImplemented,
            deviceFrequency=NotImplemented,
            deviceFrequencyDescription=NotImplemented,
            userFrequency=NotImplemented,
            userFrequencyDescription=NotImplemented,
            npvrQuotaInSeconds=NotImplemented,
            usersLimit=NotImplemented,
            deviceFamiliesLimitations=NotImplemented,
            description=NotImplemented,
            associatedDeviceFamiliesIdsIn=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Household limitation module identifier
        # @var int
        # @readonly
        self.id = id

        # Household limitation module name
        # @var string
        self.name = name

        # Max number of streams allowed for the household
        # @var int
        self.concurrentLimit = concurrentLimit

        # Max number of devices allowed for the household
        # @var int
        self.deviceLimit = deviceLimit

        # Allowed device change frequency code
        # @var int
        self.deviceFrequency = deviceFrequency

        # Allowed device change frequency description
        # @var string
        # @readonly
        self.deviceFrequencyDescription = deviceFrequencyDescription

        # Allowed user change frequency code
        # @var int
        self.userFrequency = userFrequency

        # Allowed user change frequency description
        # @var string
        # @readonly
        self.userFrequencyDescription = userFrequencyDescription

        # Allowed NPVR Quota in Seconds
        # @var int
        # @readonly
        self.npvrQuotaInSeconds = npvrQuotaInSeconds

        # Max number of users allowed for the household
        # @var int
        self.usersLimit = usersLimit

        # Device families limitations
        # @var array of KalturaHouseholdDeviceFamilyLimitations
        self.deviceFamiliesLimitations = deviceFamiliesLimitations

        # Allowed device change frequency description
        # @var string
        self.description = description

        # Associated Device Families ids
        # @var string
        self.associatedDeviceFamiliesIdsIn = associatedDeviceFamiliesIdsIn


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'concurrentLimit': getXmlNodeInt, 
        'deviceLimit': getXmlNodeInt, 
        'deviceFrequency': getXmlNodeInt, 
        'deviceFrequencyDescription': getXmlNodeText, 
        'userFrequency': getXmlNodeInt, 
        'userFrequencyDescription': getXmlNodeText, 
        'npvrQuotaInSeconds': getXmlNodeInt, 
        'usersLimit': getXmlNodeInt, 
        'deviceFamiliesLimitations': (KalturaObjectFactory.createArray, 'KalturaHouseholdDeviceFamilyLimitations'), 
        'description': getXmlNodeText, 
        'associatedDeviceFamiliesIdsIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdLimitations.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaHouseholdLimitations")
        kparams.addStringIfDefined("name", self.name)
        kparams.addIntIfDefined("concurrentLimit", self.concurrentLimit)
        kparams.addIntIfDefined("deviceLimit", self.deviceLimit)
        kparams.addIntIfDefined("deviceFrequency", self.deviceFrequency)
        kparams.addIntIfDefined("userFrequency", self.userFrequency)
        kparams.addIntIfDefined("usersLimit", self.usersLimit)
        kparams.addArrayIfDefined("deviceFamiliesLimitations", self.deviceFamiliesLimitations)
        kparams.addStringIfDefined("description", self.description)
        kparams.addStringIfDefined("associatedDeviceFamiliesIdsIn", self.associatedDeviceFamiliesIdsIn)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getConcurrentLimit(self):
        return self.concurrentLimit

    def setConcurrentLimit(self, newConcurrentLimit):
        self.concurrentLimit = newConcurrentLimit

    def getDeviceLimit(self):
        return self.deviceLimit

    def setDeviceLimit(self, newDeviceLimit):
        self.deviceLimit = newDeviceLimit

    def getDeviceFrequency(self):
        return self.deviceFrequency

    def setDeviceFrequency(self, newDeviceFrequency):
        self.deviceFrequency = newDeviceFrequency

    def getDeviceFrequencyDescription(self):
        return self.deviceFrequencyDescription

    def getUserFrequency(self):
        return self.userFrequency

    def setUserFrequency(self, newUserFrequency):
        self.userFrequency = newUserFrequency

    def getUserFrequencyDescription(self):
        return self.userFrequencyDescription

    def getNpvrQuotaInSeconds(self):
        return self.npvrQuotaInSeconds

    def getUsersLimit(self):
        return self.usersLimit

    def setUsersLimit(self, newUsersLimit):
        self.usersLimit = newUsersLimit

    def getDeviceFamiliesLimitations(self):
        return self.deviceFamiliesLimitations

    def setDeviceFamiliesLimitations(self, newDeviceFamiliesLimitations):
        self.deviceFamiliesLimitations = newDeviceFamiliesLimitations

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getAssociatedDeviceFamiliesIdsIn(self):
        return self.associatedDeviceFamiliesIdsIn

    def setAssociatedDeviceFamiliesIdsIn(self, newAssociatedDeviceFamiliesIdsIn):
        self.associatedDeviceFamiliesIdsIn = newAssociatedDeviceFamiliesIdsIn


# @package Kaltura
# @subpackage Client
class KalturaHouseholdLimitationsListResponse(KalturaListResponse):
    """Household limitations details"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Household limitations
        # @var array of KalturaHouseholdLimitations
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaHouseholdLimitations'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdLimitationsListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaHouseholdLimitationsListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaDeviceFamily(KalturaDeviceFamilyBase):
    """Device family details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            type=NotImplemented):
        KalturaDeviceFamilyBase.__init__(self,
            id,
            name,
            type)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeviceFamilyBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeviceFamily.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeviceFamilyBase.toParams(self)
        kparams.put("objectType", "KalturaDeviceFamily")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaHousehold(KalturaObjectBase):
    """Household details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            externalId=NotImplemented,
            householdLimitationsId=NotImplemented,
            devicesLimit=NotImplemented,
            usersLimit=NotImplemented,
            concurrentLimit=NotImplemented,
            regionId=NotImplemented,
            state=NotImplemented,
            isFrequencyEnabled=NotImplemented,
            frequencyNextDeviceAction=NotImplemented,
            frequencyNextUserAction=NotImplemented,
            restriction=NotImplemented,
            roleId=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Household identifier
        # @var int
        # @readonly
        self.id = id

        # Household name
        # @var string
        self.name = name

        # Household description
        # @var string
        self.description = description

        # Household external identifier
        # @var string
        self.externalId = externalId

        # Household limitation module identifier
        # @var int
        # @readonly
        self.householdLimitationsId = householdLimitationsId

        # The max number of the devices that can be added to the household
        # @var int
        # @readonly
        self.devicesLimit = devicesLimit

        # The max number of the users that can be added to the household
        # @var int
        # @readonly
        self.usersLimit = usersLimit

        # The max number of concurrent streams in the household
        # @var int
        # @readonly
        self.concurrentLimit = concurrentLimit

        # The households region identifier
        # @var int
        self.regionId = regionId

        # Household state
        # @var KalturaHouseholdState
        # @readonly
        self.state = state

        # Is household frequency enabled
        # @var bool
        # @readonly
        self.isFrequencyEnabled = isFrequencyEnabled

        # The next time a device is allowed to be removed from the household (epoch)
        # @var int
        # @readonly
        self.frequencyNextDeviceAction = frequencyNextDeviceAction

        # The next time a user is allowed to be removed from the household (epoch)
        # @var int
        # @readonly
        self.frequencyNextUserAction = frequencyNextUserAction

        # Household restriction
        # @var KalturaHouseholdRestriction
        # @readonly
        self.restriction = restriction

        # suspended roleId
        # @var int
        # @readonly
        self.roleId = roleId

        # create date
        # @var int
        # @readonly
        self.createDate = createDate

        # update date
        # @var int
        # @readonly
        self.updateDate = updateDate


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'description': getXmlNodeText, 
        'externalId': getXmlNodeText, 
        'householdLimitationsId': getXmlNodeInt, 
        'devicesLimit': getXmlNodeInt, 
        'usersLimit': getXmlNodeInt, 
        'concurrentLimit': getXmlNodeInt, 
        'regionId': getXmlNodeInt, 
        'state': (KalturaEnumsFactory.createString, "KalturaHouseholdState"), 
        'isFrequencyEnabled': getXmlNodeBool, 
        'frequencyNextDeviceAction': getXmlNodeInt, 
        'frequencyNextUserAction': getXmlNodeInt, 
        'restriction': (KalturaEnumsFactory.createString, "KalturaHouseholdRestriction"), 
        'roleId': getXmlNodeInt, 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHousehold.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaHousehold")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("description", self.description)
        kparams.addStringIfDefined("externalId", self.externalId)
        kparams.addIntIfDefined("regionId", self.regionId)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getExternalId(self):
        return self.externalId

    def setExternalId(self, newExternalId):
        self.externalId = newExternalId

    def getHouseholdLimitationsId(self):
        return self.householdLimitationsId

    def getDevicesLimit(self):
        return self.devicesLimit

    def getUsersLimit(self):
        return self.usersLimit

    def getConcurrentLimit(self):
        return self.concurrentLimit

    def getRegionId(self):
        return self.regionId

    def setRegionId(self, newRegionId):
        self.regionId = newRegionId

    def getState(self):
        return self.state

    def getIsFrequencyEnabled(self):
        return self.isFrequencyEnabled

    def getFrequencyNextDeviceAction(self):
        return self.frequencyNextDeviceAction

    def getFrequencyNextUserAction(self):
        return self.frequencyNextUserAction

    def getRestriction(self):
        return self.restriction

    def getRoleId(self):
        return self.roleId

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate


# @package Kaltura
# @subpackage Client
class KalturaHouseholdListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of objects
        # @var array of KalturaHousehold
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaHousehold'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaHouseholdListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaHouseholdUser(KalturaObjectBase):
    """Household user"""

    def __init__(self,
            householdId=NotImplemented,
            userId=NotImplemented,
            isMaster=NotImplemented,
            householdMasterUsername=NotImplemented,
            status=NotImplemented,
            isDefault=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The identifier of the household
        # @var int
        self.householdId = householdId

        # The identifier of the user
        # @var string
        self.userId = userId

        # True if the user added as master use
        # @var bool
        self.isMaster = isMaster

        # The username of the household master for adding a user in status pending for the household master to approve
        # @var string
        # @insertonly
        self.householdMasterUsername = householdMasterUsername

        # The status of the user in the household
        # @var KalturaHouseholdUserStatus
        # @readonly
        self.status = status

        # True if the user is a default user
        # @var bool
        # @readonly
        self.isDefault = isDefault


    PROPERTY_LOADERS = {
        'householdId': getXmlNodeInt, 
        'userId': getXmlNodeText, 
        'isMaster': getXmlNodeBool, 
        'householdMasterUsername': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createString, "KalturaHouseholdUserStatus"), 
        'isDefault': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdUser.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaHouseholdUser")
        kparams.addIntIfDefined("householdId", self.householdId)
        kparams.addStringIfDefined("userId", self.userId)
        kparams.addBoolIfDefined("isMaster", self.isMaster)
        kparams.addStringIfDefined("householdMasterUsername", self.householdMasterUsername)
        return kparams

    def getHouseholdId(self):
        return self.householdId

    def setHouseholdId(self, newHouseholdId):
        self.householdId = newHouseholdId

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getIsMaster(self):
        return self.isMaster

    def setIsMaster(self, newIsMaster):
        self.isMaster = newIsMaster

    def getHouseholdMasterUsername(self):
        return self.householdMasterUsername

    def setHouseholdMasterUsername(self, newHouseholdMasterUsername):
        self.householdMasterUsername = newHouseholdMasterUsername

    def getStatus(self):
        return self.status

    def getIsDefault(self):
        return self.isDefault


# @package Kaltura
# @subpackage Client
class KalturaHouseholdUserListResponse(KalturaListResponse):
    """Household users list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Household users
        # @var array of KalturaHouseholdUser
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaHouseholdUser'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdUserListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaHouseholdUserListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaConfigurationGroupDevice(KalturaObjectBase):
    def __init__(self,
            configurationGroupId=NotImplemented,
            partnerId=NotImplemented,
            udid=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Configuration group id
        # @var string
        self.configurationGroupId = configurationGroupId

        # Partner id
        # @var int
        # @readonly
        self.partnerId = partnerId

        # Device UDID
        # @var string
        self.udid = udid


    PROPERTY_LOADERS = {
        'configurationGroupId': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'udid': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConfigurationGroupDevice.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaConfigurationGroupDevice")
        kparams.addStringIfDefined("configurationGroupId", self.configurationGroupId)
        kparams.addStringIfDefined("udid", self.udid)
        return kparams

    def getConfigurationGroupId(self):
        return self.configurationGroupId

    def setConfigurationGroupId(self, newConfigurationGroupId):
        self.configurationGroupId = newConfigurationGroupId

    def getPartnerId(self):
        return self.partnerId

    def getUdid(self):
        return self.udid

    def setUdid(self, newUdid):
        self.udid = newUdid


# @package Kaltura
# @subpackage Client
class KalturaConfigurationGroupDeviceListResponse(KalturaListResponse):
    """Configuration group devices info wrapper"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Configuration group devices
        # @var array of KalturaConfigurationGroupDevice
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaConfigurationGroupDevice'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConfigurationGroupDeviceListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaConfigurationGroupDeviceListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaConfigurationIdentifier(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Identifier
        # @var string
        self.id = id

        # Name
        # @var string
        self.name = name


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'name': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConfigurationIdentifier.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaConfigurationIdentifier")
        kparams.addStringIfDefined("id", self.id)
        kparams.addStringIfDefined("name", self.name)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName


# @package Kaltura
# @subpackage Client
class KalturaConfigurationGroup(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            partnerId=NotImplemented,
            isDefault=NotImplemented,
            tags=NotImplemented,
            numberOfDevices=NotImplemented,
            configurationIdentifiers=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Configuration group identifier
        # @var string
        # @readonly
        self.id = id

        # Configuration group name
        # @var string
        self.name = name

        # Partner id
        # @var int
        # @readonly
        self.partnerId = partnerId

        # Is default
        # @var bool
        # @insertonly
        self.isDefault = isDefault

        # tags
        # @var array of KalturaStringValue
        # @readonly
        self.tags = tags

        # Number of devices
        # @var int
        # @readonly
        self.numberOfDevices = numberOfDevices

        # Configuration identifiers
        # @var array of KalturaConfigurationIdentifier
        # @readonly
        self.configurationIdentifiers = configurationIdentifiers


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'name': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'isDefault': getXmlNodeBool, 
        'tags': (KalturaObjectFactory.createArray, 'KalturaStringValue'), 
        'numberOfDevices': getXmlNodeInt, 
        'configurationIdentifiers': (KalturaObjectFactory.createArray, 'KalturaConfigurationIdentifier'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConfigurationGroup.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaConfigurationGroup")
        kparams.addStringIfDefined("name", self.name)
        kparams.addBoolIfDefined("isDefault", self.isDefault)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getPartnerId(self):
        return self.partnerId

    def getIsDefault(self):
        return self.isDefault

    def setIsDefault(self, newIsDefault):
        self.isDefault = newIsDefault

    def getTags(self):
        return self.tags

    def getNumberOfDevices(self):
        return self.numberOfDevices

    def getConfigurationIdentifiers(self):
        return self.configurationIdentifiers


# @package Kaltura
# @subpackage Client
class KalturaConfigurationGroupListResponse(KalturaListResponse):
    """Configuration groups info wrapper"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Configuration groups
        # @var array of KalturaConfigurationGroup
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaConfigurationGroup'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConfigurationGroupListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaConfigurationGroupListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaConfigurationGroupTag(KalturaObjectBase):
    def __init__(self,
            configurationGroupId=NotImplemented,
            partnerId=NotImplemented,
            tag=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Configuration group identifier
        # @var string
        self.configurationGroupId = configurationGroupId

        # Partner identifier
        # @var int
        # @readonly
        self.partnerId = partnerId

        # Tag
        # @var string
        self.tag = tag


    PROPERTY_LOADERS = {
        'configurationGroupId': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'tag': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConfigurationGroupTag.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaConfigurationGroupTag")
        kparams.addStringIfDefined("configurationGroupId", self.configurationGroupId)
        kparams.addStringIfDefined("tag", self.tag)
        return kparams

    def getConfigurationGroupId(self):
        return self.configurationGroupId

    def setConfigurationGroupId(self, newConfigurationGroupId):
        self.configurationGroupId = newConfigurationGroupId

    def getPartnerId(self):
        return self.partnerId

    def getTag(self):
        return self.tag

    def setTag(self, newTag):
        self.tag = newTag


# @package Kaltura
# @subpackage Client
class KalturaConfigurationGroupTagListResponse(KalturaListResponse):
    """Configurations group tags info wrapper"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Configuration group tags
        # @var array of KalturaConfigurationGroupTag
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaConfigurationGroupTag'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConfigurationGroupTagListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaConfigurationGroupTagListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaConfigurations(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            configurationGroupId=NotImplemented,
            appName=NotImplemented,
            clientVersion=NotImplemented,
            platform=NotImplemented,
            externalPushId=NotImplemented,
            isForceUpdate=NotImplemented,
            content=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Configuration id
        # @var string
        # @readonly
        self.id = id

        # Partner id
        # @var int
        # @readonly
        self.partnerId = partnerId

        # Configuration group id
        # @var string
        self.configurationGroupId = configurationGroupId

        # Application name
        # @var string
        self.appName = appName

        # Client version
        # @var string
        self.clientVersion = clientVersion

        # Platform: Android/iOS/WindowsPhone/Blackberry/STB/CTV/Other
        # @var KalturaPlatform
        self.platform = platform

        # External push id
        # @var string
        self.externalPushId = externalPushId

        # The default value for &quot;isForceUpdate&quot; is &quot;FALSE&quot;. When &quot;isForceUpdate&quot; is not populated it will revert to its default value.
        # @var bool
        self.isForceUpdate = isForceUpdate

        # Content
        # @var string
        self.content = content


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'configurationGroupId': getXmlNodeText, 
        'appName': getXmlNodeText, 
        'clientVersion': getXmlNodeText, 
        'platform': (KalturaEnumsFactory.createString, "KalturaPlatform"), 
        'externalPushId': getXmlNodeText, 
        'isForceUpdate': getXmlNodeBool, 
        'content': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConfigurations.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaConfigurations")
        kparams.addStringIfDefined("configurationGroupId", self.configurationGroupId)
        kparams.addStringIfDefined("appName", self.appName)
        kparams.addStringIfDefined("clientVersion", self.clientVersion)
        kparams.addStringEnumIfDefined("platform", self.platform)
        kparams.addStringIfDefined("externalPushId", self.externalPushId)
        kparams.addBoolIfDefined("isForceUpdate", self.isForceUpdate)
        kparams.addStringIfDefined("content", self.content)
        return kparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getConfigurationGroupId(self):
        return self.configurationGroupId

    def setConfigurationGroupId(self, newConfigurationGroupId):
        self.configurationGroupId = newConfigurationGroupId

    def getAppName(self):
        return self.appName

    def setAppName(self, newAppName):
        self.appName = newAppName

    def getClientVersion(self):
        return self.clientVersion

    def setClientVersion(self, newClientVersion):
        self.clientVersion = newClientVersion

    def getPlatform(self):
        return self.platform

    def setPlatform(self, newPlatform):
        self.platform = newPlatform

    def getExternalPushId(self):
        return self.externalPushId

    def setExternalPushId(self, newExternalPushId):
        self.externalPushId = newExternalPushId

    def getIsForceUpdate(self):
        return self.isForceUpdate

    def setIsForceUpdate(self, newIsForceUpdate):
        self.isForceUpdate = newIsForceUpdate

    def getContent(self):
        return self.content

    def setContent(self, newContent):
        self.content = newContent


# @package Kaltura
# @subpackage Client
class KalturaConfigurationsListResponse(KalturaListResponse):
    """Configurations info wrapper"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Configurations
        # @var array of KalturaConfigurations
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaConfigurations'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConfigurationsListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaConfigurationsListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaBillingTransaction(KalturaObjectBase):
    """Billing Transaction"""

    def __init__(self,
            recieptCode=NotImplemented,
            purchasedItemName=NotImplemented,
            purchasedItemCode=NotImplemented,
            itemType=NotImplemented,
            billingAction=NotImplemented,
            price=NotImplemented,
            actionDate=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            paymentMethod=NotImplemented,
            paymentMethodExtraDetails=NotImplemented,
            isRecurring=NotImplemented,
            billingProviderRef=NotImplemented,
            purchaseId=NotImplemented,
            remarks=NotImplemented,
            billingPriceType=NotImplemented,
            externalTransactionId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Reciept Code
        # @var string
        # @readonly
        self.recieptCode = recieptCode

        # Purchased Item Name
        # @var string
        # @readonly
        self.purchasedItemName = purchasedItemName

        # Purchased Item Code
        # @var string
        # @readonly
        self.purchasedItemCode = purchasedItemCode

        # Item Type
        # @var KalturaBillingItemsType
        # @readonly
        self.itemType = itemType

        # Billing Action
        # @var KalturaBillingAction
        # @readonly
        self.billingAction = billingAction

        # price
        # @var KalturaPrice
        # @readonly
        self.price = price

        # Action Date
        # @var int
        # @readonly
        self.actionDate = actionDate

        # Start Date
        # @var int
        # @readonly
        self.startDate = startDate

        # End Date
        # @var int
        # @readonly
        self.endDate = endDate

        # Payment Method
        # @var KalturaPaymentMethodType
        # @readonly
        self.paymentMethod = paymentMethod

        # Payment Method Extra Details
        # @var string
        # @readonly
        self.paymentMethodExtraDetails = paymentMethodExtraDetails

        # Is Recurring
        # @var bool
        # @readonly
        self.isRecurring = isRecurring

        # Billing Provider Ref
        # @var int
        # @readonly
        self.billingProviderRef = billingProviderRef

        # Purchase ID
        # @var int
        # @readonly
        self.purchaseId = purchaseId

        # Remarks
        # @var string
        # @readonly
        self.remarks = remarks

        # Billing Price Info
        # @var KalturaBillingPriceType
        # @readonly
        self.billingPriceType = billingPriceType

        # External Transaction Id
        # @var string
        # @readonly
        self.externalTransactionId = externalTransactionId


    PROPERTY_LOADERS = {
        'recieptCode': getXmlNodeText, 
        'purchasedItemName': getXmlNodeText, 
        'purchasedItemCode': getXmlNodeText, 
        'itemType': (KalturaEnumsFactory.createString, "KalturaBillingItemsType"), 
        'billingAction': (KalturaEnumsFactory.createString, "KalturaBillingAction"), 
        'price': (KalturaObjectFactory.create, 'KalturaPrice'), 
        'actionDate': getXmlNodeInt, 
        'startDate': getXmlNodeInt, 
        'endDate': getXmlNodeInt, 
        'paymentMethod': (KalturaEnumsFactory.createString, "KalturaPaymentMethodType"), 
        'paymentMethodExtraDetails': getXmlNodeText, 
        'isRecurring': getXmlNodeBool, 
        'billingProviderRef': getXmlNodeInt, 
        'purchaseId': getXmlNodeInt, 
        'remarks': getXmlNodeText, 
        'billingPriceType': (KalturaEnumsFactory.createString, "KalturaBillingPriceType"), 
        'externalTransactionId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBillingTransaction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBillingTransaction")
        return kparams

    def getRecieptCode(self):
        return self.recieptCode

    def getPurchasedItemName(self):
        return self.purchasedItemName

    def getPurchasedItemCode(self):
        return self.purchasedItemCode

    def getItemType(self):
        return self.itemType

    def getBillingAction(self):
        return self.billingAction

    def getPrice(self):
        return self.price

    def getActionDate(self):
        return self.actionDate

    def getStartDate(self):
        return self.startDate

    def getEndDate(self):
        return self.endDate

    def getPaymentMethod(self):
        return self.paymentMethod

    def getPaymentMethodExtraDetails(self):
        return self.paymentMethodExtraDetails

    def getIsRecurring(self):
        return self.isRecurring

    def getBillingProviderRef(self):
        return self.billingProviderRef

    def getPurchaseId(self):
        return self.purchaseId

    def getRemarks(self):
        return self.remarks

    def getBillingPriceType(self):
        return self.billingPriceType

    def getExternalTransactionId(self):
        return self.externalTransactionId


# @package Kaltura
# @subpackage Client
class KalturaBillingTransactionListResponse(KalturaListResponse):
    """Billing Transactions"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Transactions
        # @var array of KalturaBillingTransaction
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaBillingTransaction'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBillingTransactionListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaBillingTransactionListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaCDVRAdapterProfile(KalturaObjectBase):
    """C-DVR Adapter"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            isActive=NotImplemented,
            adapterUrl=NotImplemented,
            settings=NotImplemented,
            externalIdentifier=NotImplemented,
            sharedSecret=NotImplemented,
            dynamicLinksSupport=NotImplemented):
        KalturaObjectBase.__init__(self)

        # C-DVR adapter identifier
        # @var int
        # @readonly
        self.id = id

        # C-DVR adapter name
        # @var string
        self.name = name

        # C-DVR adapter active status
        # @var bool
        self.isActive = isActive

        # C-DVR adapter adapter URL
        # @var string
        self.adapterUrl = adapterUrl

        # C-DVR adapter extra parameters
        # @var map
        self.settings = settings

        # C-DVR adapter external identifier
        # @var string
        self.externalIdentifier = externalIdentifier

        # C-DVR shared secret
        # @var string
        # @readonly
        self.sharedSecret = sharedSecret

        # Indicates whether the C-DVR adapter supports dynamic URLs
        # @var bool
        self.dynamicLinksSupport = dynamicLinksSupport


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'isActive': getXmlNodeBool, 
        'adapterUrl': getXmlNodeText, 
        'settings': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
        'externalIdentifier': getXmlNodeText, 
        'sharedSecret': getXmlNodeText, 
        'dynamicLinksSupport': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCDVRAdapterProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCDVRAdapterProfile")
        kparams.addStringIfDefined("name", self.name)
        kparams.addBoolIfDefined("isActive", self.isActive)
        kparams.addStringIfDefined("adapterUrl", self.adapterUrl)
        kparams.addMapIfDefined("settings", self.settings)
        kparams.addStringIfDefined("externalIdentifier", self.externalIdentifier)
        kparams.addBoolIfDefined("dynamicLinksSupport", self.dynamicLinksSupport)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive

    def getAdapterUrl(self):
        return self.adapterUrl

    def setAdapterUrl(self, newAdapterUrl):
        self.adapterUrl = newAdapterUrl

    def getSettings(self):
        return self.settings

    def setSettings(self, newSettings):
        self.settings = newSettings

    def getExternalIdentifier(self):
        return self.externalIdentifier

    def setExternalIdentifier(self, newExternalIdentifier):
        self.externalIdentifier = newExternalIdentifier

    def getSharedSecret(self):
        return self.sharedSecret

    def getDynamicLinksSupport(self):
        return self.dynamicLinksSupport

    def setDynamicLinksSupport(self, newDynamicLinksSupport):
        self.dynamicLinksSupport = newDynamicLinksSupport


# @package Kaltura
# @subpackage Client
class KalturaCDVRAdapterProfileListResponse(KalturaListResponse):
    """C-DVR adapter profiles"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # C-DVR adapter profiles
        # @var array of KalturaCDVRAdapterProfile
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaCDVRAdapterProfile'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCDVRAdapterProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaCDVRAdapterProfileListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaEntitlement(KalturaObjectBase):
    """Entitlement"""

    def __init__(self,
            id=NotImplemented,
            productId=NotImplemented,
            currentUses=NotImplemented,
            endDate=NotImplemented,
            currentDate=NotImplemented,
            lastViewDate=NotImplemented,
            purchaseDate=NotImplemented,
            paymentMethod=NotImplemented,
            deviceUdid=NotImplemented,
            deviceName=NotImplemented,
            isCancelationWindowEnabled=NotImplemented,
            maxUses=NotImplemented,
            userId=NotImplemented,
            householdId=NotImplemented,
            isPending=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Purchase identifier (for subscriptions and collections only)
        # @var int
        # @readonly
        self.id = id

        # Product identifier
        # @var string
        # @readonly
        self.productId = productId

        # The current number of uses
        # @var int
        # @readonly
        self.currentUses = currentUses

        # The end date of the entitlement
        # @var int
        self.endDate = endDate

        # Current date
        # @var int
        # @readonly
        self.currentDate = currentDate

        # The last date the item was viewed
        # @var int
        # @readonly
        self.lastViewDate = lastViewDate

        # Purchase date
        # @var int
        # @readonly
        self.purchaseDate = purchaseDate

        # Payment Method
        # @var KalturaPaymentMethodType
        # @readonly
        self.paymentMethod = paymentMethod

        # The UDID of the device from which the purchase was made
        # @var string
        # @readonly
        self.deviceUdid = deviceUdid

        # The name of the device from which the purchase was made
        # @var string
        # @readonly
        self.deviceName = deviceName

        # Indicates whether a cancelation window period is enabled
        # @var bool
        # @readonly
        self.isCancelationWindowEnabled = isCancelationWindowEnabled

        # The maximum number of uses available for this item (only for subscription and PPV)
        # @var int
        # @readonly
        self.maxUses = maxUses

        # The Identifier of the purchasing user
        # @var string
        # @readonly
        self.userId = userId

        # The Identifier of the purchasing household
        # @var int
        # @readonly
        self.householdId = householdId

        # Indicates whether the asynchronous purchase is pending
        # @var bool
        self.isPending = isPending


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'productId': getXmlNodeText, 
        'currentUses': getXmlNodeInt, 
        'endDate': getXmlNodeInt, 
        'currentDate': getXmlNodeInt, 
        'lastViewDate': getXmlNodeInt, 
        'purchaseDate': getXmlNodeInt, 
        'paymentMethod': (KalturaEnumsFactory.createString, "KalturaPaymentMethodType"), 
        'deviceUdid': getXmlNodeText, 
        'deviceName': getXmlNodeText, 
        'isCancelationWindowEnabled': getXmlNodeBool, 
        'maxUses': getXmlNodeInt, 
        'userId': getXmlNodeText, 
        'householdId': getXmlNodeInt, 
        'isPending': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntitlement.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaEntitlement")
        kparams.addIntIfDefined("endDate", self.endDate)
        kparams.addBoolIfDefined("isPending", self.isPending)
        return kparams

    def getId(self):
        return self.id

    def getProductId(self):
        return self.productId

    def getCurrentUses(self):
        return self.currentUses

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate

    def getCurrentDate(self):
        return self.currentDate

    def getLastViewDate(self):
        return self.lastViewDate

    def getPurchaseDate(self):
        return self.purchaseDate

    def getPaymentMethod(self):
        return self.paymentMethod

    def getDeviceUdid(self):
        return self.deviceUdid

    def getDeviceName(self):
        return self.deviceName

    def getIsCancelationWindowEnabled(self):
        return self.isCancelationWindowEnabled

    def getMaxUses(self):
        return self.maxUses

    def getUserId(self):
        return self.userId

    def getHouseholdId(self):
        return self.householdId

    def getIsPending(self):
        return self.isPending

    def setIsPending(self, newIsPending):
        self.isPending = newIsPending


# @package Kaltura
# @subpackage Client
class KalturaEntitlementListResponse(KalturaListResponse):
    """Entitlements list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of entitlements
        # @var array of KalturaEntitlement
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaEntitlement'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntitlementListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaEntitlementListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaCollectionEntitlement(KalturaEntitlement):
    def __init__(self,
            id=NotImplemented,
            productId=NotImplemented,
            currentUses=NotImplemented,
            endDate=NotImplemented,
            currentDate=NotImplemented,
            lastViewDate=NotImplemented,
            purchaseDate=NotImplemented,
            paymentMethod=NotImplemented,
            deviceUdid=NotImplemented,
            deviceName=NotImplemented,
            isCancelationWindowEnabled=NotImplemented,
            maxUses=NotImplemented,
            userId=NotImplemented,
            householdId=NotImplemented,
            isPending=NotImplemented):
        KalturaEntitlement.__init__(self,
            id,
            productId,
            currentUses,
            endDate,
            currentDate,
            lastViewDate,
            purchaseDate,
            paymentMethod,
            deviceUdid,
            deviceName,
            isCancelationWindowEnabled,
            maxUses,
            userId,
            householdId,
            isPending)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaEntitlement.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCollectionEntitlement.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEntitlement.toParams(self)
        kparams.put("objectType", "KalturaCollectionEntitlement")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaPpvEntitlement(KalturaEntitlement):
    """KalturaPpvEntitlement"""

    def __init__(self,
            id=NotImplemented,
            productId=NotImplemented,
            currentUses=NotImplemented,
            endDate=NotImplemented,
            currentDate=NotImplemented,
            lastViewDate=NotImplemented,
            purchaseDate=NotImplemented,
            paymentMethod=NotImplemented,
            deviceUdid=NotImplemented,
            deviceName=NotImplemented,
            isCancelationWindowEnabled=NotImplemented,
            maxUses=NotImplemented,
            userId=NotImplemented,
            householdId=NotImplemented,
            isPending=NotImplemented,
            mediaFileId=NotImplemented,
            mediaId=NotImplemented):
        KalturaEntitlement.__init__(self,
            id,
            productId,
            currentUses,
            endDate,
            currentDate,
            lastViewDate,
            purchaseDate,
            paymentMethod,
            deviceUdid,
            deviceName,
            isCancelationWindowEnabled,
            maxUses,
            userId,
            householdId,
            isPending)

        # Media file identifier
        # @var int
        # @readonly
        self.mediaFileId = mediaFileId

        # Media identifier
        # @var int
        # @readonly
        self.mediaId = mediaId


    PROPERTY_LOADERS = {
        'mediaFileId': getXmlNodeInt, 
        'mediaId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaEntitlement.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPpvEntitlement.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEntitlement.toParams(self)
        kparams.put("objectType", "KalturaPpvEntitlement")
        return kparams

    def getMediaFileId(self):
        return self.mediaFileId

    def getMediaId(self):
        return self.mediaId


# @package Kaltura
# @subpackage Client
class KalturaProgramAssetGroupOfferEntitlement(KalturaEntitlement):
    """ProgramAssetGroupOfferEntitlement"""

    def __init__(self,
            id=NotImplemented,
            productId=NotImplemented,
            currentUses=NotImplemented,
            endDate=NotImplemented,
            currentDate=NotImplemented,
            lastViewDate=NotImplemented,
            purchaseDate=NotImplemented,
            paymentMethod=NotImplemented,
            deviceUdid=NotImplemented,
            deviceName=NotImplemented,
            isCancelationWindowEnabled=NotImplemented,
            maxUses=NotImplemented,
            userId=NotImplemented,
            householdId=NotImplemented,
            isPending=NotImplemented):
        KalturaEntitlement.__init__(self,
            id,
            productId,
            currentUses,
            endDate,
            currentDate,
            lastViewDate,
            purchaseDate,
            paymentMethod,
            deviceUdid,
            deviceName,
            isCancelationWindowEnabled,
            maxUses,
            userId,
            householdId,
            isPending)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaEntitlement.fromXml(self, node)
        self.fromXmlImpl(node, KalturaProgramAssetGroupOfferEntitlement.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEntitlement.toParams(self)
        kparams.put("objectType", "KalturaProgramAssetGroupOfferEntitlement")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaEntitlementDiscountDetails(KalturaObjectBase):
    """Entitlement discount details"""

    def __init__(self,
            amount=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Amount
        # @var float
        # @readonly
        self.amount = amount

        # Start date
        # @var int
        # @readonly
        self.startDate = startDate

        # End date
        # @var int
        # @readonly
        self.endDate = endDate


    PROPERTY_LOADERS = {
        'amount': getXmlNodeFloat, 
        'startDate': getXmlNodeInt, 
        'endDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntitlementDiscountDetails.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaEntitlementDiscountDetails")
        return kparams

    def getAmount(self):
        return self.amount

    def getStartDate(self):
        return self.startDate

    def getEndDate(self):
        return self.endDate


# @package Kaltura
# @subpackage Client
class KalturaEntitlementPriceDetails(KalturaObjectBase):
    """Entitlement price details"""

    def __init__(self,
            fullPrice=NotImplemented,
            discountDetails=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Full price
        # @var KalturaPrice
        # @readonly
        self.fullPrice = fullPrice

        # List of the season numbers to exclude.
        # @var array of KalturaEntitlementDiscountDetails
        # @readonly
        self.discountDetails = discountDetails


    PROPERTY_LOADERS = {
        'fullPrice': (KalturaObjectFactory.create, 'KalturaPrice'), 
        'discountDetails': (KalturaObjectFactory.createArray, 'KalturaEntitlementDiscountDetails'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntitlementPriceDetails.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaEntitlementPriceDetails")
        return kparams

    def getFullPrice(self):
        return self.fullPrice

    def getDiscountDetails(self):
        return self.discountDetails


# @package Kaltura
# @subpackage Client
class KalturaSubscriptionEntitlement(KalturaEntitlement):
    """KalturaSubscriptionEntitlement"""

    def __init__(self,
            id=NotImplemented,
            productId=NotImplemented,
            currentUses=NotImplemented,
            endDate=NotImplemented,
            currentDate=NotImplemented,
            lastViewDate=NotImplemented,
            purchaseDate=NotImplemented,
            paymentMethod=NotImplemented,
            deviceUdid=NotImplemented,
            deviceName=NotImplemented,
            isCancelationWindowEnabled=NotImplemented,
            maxUses=NotImplemented,
            userId=NotImplemented,
            householdId=NotImplemented,
            isPending=NotImplemented,
            nextRenewalDate=NotImplemented,
            isRenewableForPurchase=NotImplemented,
            isRenewable=NotImplemented,
            isInGracePeriod=NotImplemented,
            paymentGatewayId=NotImplemented,
            paymentMethodId=NotImplemented,
            scheduledSubscriptionId=NotImplemented,
            unifiedPaymentId=NotImplemented,
            isSuspended=NotImplemented,
            priceDetails=NotImplemented):
        KalturaEntitlement.__init__(self,
            id,
            productId,
            currentUses,
            endDate,
            currentDate,
            lastViewDate,
            purchaseDate,
            paymentMethod,
            deviceUdid,
            deviceName,
            isCancelationWindowEnabled,
            maxUses,
            userId,
            householdId,
            isPending)

        # The date of the next renewal (only for subscription)
        # @var int
        # @readonly
        self.nextRenewalDate = nextRenewalDate

        # Indicates whether the subscription is renewable in this purchase (only for subscription)
        # @var bool
        # @readonly
        self.isRenewableForPurchase = isRenewableForPurchase

        # Indicates whether a subscription is renewable (only for subscription)
        # @var bool
        # @readonly
        self.isRenewable = isRenewable

        # Indicates whether the user is currently in his grace period entitlement
        # @var bool
        # @readonly
        self.isInGracePeriod = isInGracePeriod

        # Payment Gateway identifier
        # @var int
        self.paymentGatewayId = paymentGatewayId

        # Payment Method identifier
        # @var int
        self.paymentMethodId = paymentMethodId

        # Scheduled Subscription Identifier
        # @var int
        # @readonly
        self.scheduledSubscriptionId = scheduledSubscriptionId

        # Unified payment identifier
        # @var int
        # @readonly
        self.unifiedPaymentId = unifiedPaymentId

        # Indicates if the subscription suspended
        # @var bool
        # @readonly
        self.isSuspended = isSuspended

        # Price details
        # @var KalturaEntitlementPriceDetails
        # @readonly
        self.priceDetails = priceDetails


    PROPERTY_LOADERS = {
        'nextRenewalDate': getXmlNodeInt, 
        'isRenewableForPurchase': getXmlNodeBool, 
        'isRenewable': getXmlNodeBool, 
        'isInGracePeriod': getXmlNodeBool, 
        'paymentGatewayId': getXmlNodeInt, 
        'paymentMethodId': getXmlNodeInt, 
        'scheduledSubscriptionId': getXmlNodeInt, 
        'unifiedPaymentId': getXmlNodeInt, 
        'isSuspended': getXmlNodeBool, 
        'priceDetails': (KalturaObjectFactory.create, 'KalturaEntitlementPriceDetails'), 
    }

    def fromXml(self, node):
        KalturaEntitlement.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSubscriptionEntitlement.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEntitlement.toParams(self)
        kparams.put("objectType", "KalturaSubscriptionEntitlement")
        kparams.addIntIfDefined("paymentGatewayId", self.paymentGatewayId)
        kparams.addIntIfDefined("paymentMethodId", self.paymentMethodId)
        return kparams

    def getNextRenewalDate(self):
        return self.nextRenewalDate

    def getIsRenewableForPurchase(self):
        return self.isRenewableForPurchase

    def getIsRenewable(self):
        return self.isRenewable

    def getIsInGracePeriod(self):
        return self.isInGracePeriod

    def getPaymentGatewayId(self):
        return self.paymentGatewayId

    def setPaymentGatewayId(self, newPaymentGatewayId):
        self.paymentGatewayId = newPaymentGatewayId

    def getPaymentMethodId(self):
        return self.paymentMethodId

    def setPaymentMethodId(self, newPaymentMethodId):
        self.paymentMethodId = newPaymentMethodId

    def getScheduledSubscriptionId(self):
        return self.scheduledSubscriptionId

    def getUnifiedPaymentId(self):
        return self.unifiedPaymentId

    def getIsSuspended(self):
        return self.isSuspended

    def getPriceDetails(self):
        return self.priceDetails


# @package Kaltura
# @subpackage Client
class KalturaEntitlementDiscountDetailsIdentifier(KalturaEntitlementDiscountDetails):
    def __init__(self,
            amount=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            id=NotImplemented):
        KalturaEntitlementDiscountDetails.__init__(self,
            amount,
            startDate,
            endDate)

        # Identifier
        # @var int
        # @readonly
        self.id = id


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaEntitlementDiscountDetails.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntitlementDiscountDetailsIdentifier.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEntitlementDiscountDetails.toParams(self)
        kparams.put("objectType", "KalturaEntitlementDiscountDetailsIdentifier")
        return kparams

    def getId(self):
        return self.id


# @package Kaltura
# @subpackage Client
class KalturaCampaignEntitlementDiscountDetails(KalturaEntitlementDiscountDetailsIdentifier):
    """Campaign entitlement discount details"""

    def __init__(self,
            amount=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            id=NotImplemented):
        KalturaEntitlementDiscountDetailsIdentifier.__init__(self,
            amount,
            startDate,
            endDate,
            id)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaEntitlementDiscountDetailsIdentifier.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCampaignEntitlementDiscountDetails.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEntitlementDiscountDetailsIdentifier.toParams(self)
        kparams.put("objectType", "KalturaCampaignEntitlementDiscountDetails")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaCompensationEntitlementDiscountDetails(KalturaEntitlementDiscountDetailsIdentifier):
    """Compensation entitlement discount details"""

    def __init__(self,
            amount=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            id=NotImplemented):
        KalturaEntitlementDiscountDetailsIdentifier.__init__(self,
            amount,
            startDate,
            endDate,
            id)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaEntitlementDiscountDetailsIdentifier.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCompensationEntitlementDiscountDetails.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEntitlementDiscountDetailsIdentifier.toParams(self)
        kparams.put("objectType", "KalturaCompensationEntitlementDiscountDetails")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDiscountEntitlementDiscountDetails(KalturaEntitlementDiscountDetailsIdentifier):
    """Discount entitlement discount details"""

    def __init__(self,
            amount=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            id=NotImplemented):
        KalturaEntitlementDiscountDetailsIdentifier.__init__(self,
            amount,
            startDate,
            endDate,
            id)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaEntitlementDiscountDetailsIdentifier.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDiscountEntitlementDiscountDetails.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEntitlementDiscountDetailsIdentifier.toParams(self)
        kparams.put("objectType", "KalturaDiscountEntitlementDiscountDetails")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaTrailEntitlementDiscountDetails(KalturaEntitlementDiscountDetailsIdentifier):
    """Trail entitlement discount details"""

    def __init__(self,
            amount=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            id=NotImplemented):
        KalturaEntitlementDiscountDetailsIdentifier.__init__(self,
            amount,
            startDate,
            endDate,
            id)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaEntitlementDiscountDetailsIdentifier.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTrailEntitlementDiscountDetails.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEntitlementDiscountDetailsIdentifier.toParams(self)
        kparams.put("objectType", "KalturaTrailEntitlementDiscountDetails")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaCouponEntitlementDiscountDetails(KalturaEntitlementDiscountDetails):
    """Coupon discount details"""

    def __init__(self,
            amount=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            couponCode=NotImplemented,
            endlessCoupon=NotImplemented):
        KalturaEntitlementDiscountDetails.__init__(self,
            amount,
            startDate,
            endDate)

        # Coupon Code
        # @var string
        # @readonly
        self.couponCode = couponCode

        # Endless coupon
        # @var bool
        # @readonly
        self.endlessCoupon = endlessCoupon


    PROPERTY_LOADERS = {
        'couponCode': getXmlNodeText, 
        'endlessCoupon': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaEntitlementDiscountDetails.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCouponEntitlementDiscountDetails.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEntitlementDiscountDetails.toParams(self)
        kparams.put("objectType", "KalturaCouponEntitlementDiscountDetails")
        return kparams

    def getCouponCode(self):
        return self.couponCode

    def getEndlessCoupon(self):
        return self.endlessCoupon


# @package Kaltura
# @subpackage Client
class KalturaHouseholdPremiumServiceListResponse(KalturaListResponse):
    """Premium services list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of premium services
        # @var array of KalturaHouseholdPremiumService
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaHouseholdPremiumService'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdPremiumServiceListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaHouseholdPremiumServiceListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaRecording(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            status=NotImplemented,
            assetId=NotImplemented,
            type=NotImplemented,
            viewableUntilDate=NotImplemented,
            isProtected=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Kaltura unique ID representing the recording identifier
        # @var int
        # @readonly
        self.id = id

        # Recording state: scheduled/recording/recorded/canceled/failed/deleted
        # @var KalturaRecordingStatus
        # @readonly
        self.status = status

        # Kaltura unique ID representing the program identifier
        # @var int
        # @insertonly
        self.assetId = assetId

        # Recording Type: single/season/series
        # @var KalturaRecordingType
        # @insertonly
        self.type = type

        # Specifies until when the recording is available for viewing. Date and time represented as epoch.
        # @var int
        self.viewableUntilDate = viewableUntilDate

        # Specifies whether or not the recording is protected
        # @var bool
        self.isProtected = isProtected

        # Specifies when was the recording created. Date and time represented as epoch.
        # @var int
        # @readonly
        self.createDate = createDate

        # Specifies when was the recording last updated. Date and time represented as epoch.
        # @var int
        # @readonly
        self.updateDate = updateDate


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'status': (KalturaEnumsFactory.createString, "KalturaRecordingStatus"), 
        'assetId': getXmlNodeInt, 
        'type': (KalturaEnumsFactory.createString, "KalturaRecordingType"), 
        'viewableUntilDate': getXmlNodeInt, 
        'isProtected': getXmlNodeBool, 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRecording.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaRecording")
        kparams.addIntIfDefined("assetId", self.assetId)
        kparams.addStringEnumIfDefined("type", self.type)
        kparams.addIntIfDefined("viewableUntilDate", self.viewableUntilDate)
        kparams.addBoolIfDefined("isProtected", self.isProtected)
        return kparams

    def getId(self):
        return self.id

    def getStatus(self):
        return self.status

    def getAssetId(self):
        return self.assetId

    def setAssetId(self, newAssetId):
        self.assetId = newAssetId

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getViewableUntilDate(self):
        return self.viewableUntilDate

    def setViewableUntilDate(self, newViewableUntilDate):
        self.viewableUntilDate = newViewableUntilDate

    def getIsProtected(self):
        return self.isProtected

    def setIsProtected(self, newIsProtected):
        self.isProtected = newIsProtected

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate


# @package Kaltura
# @subpackage Client
class KalturaExternalRecording(KalturaRecording):
    def __init__(self,
            id=NotImplemented,
            status=NotImplemented,
            assetId=NotImplemented,
            type=NotImplemented,
            viewableUntilDate=NotImplemented,
            isProtected=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            externalId=NotImplemented,
            metaData=NotImplemented,
            expiryDate=NotImplemented):
        KalturaRecording.__init__(self,
            id,
            status,
            assetId,
            type,
            viewableUntilDate,
            isProtected,
            createDate,
            updateDate)

        # External identifier for the recording
        # @var string
        # @insertonly
        self.externalId = externalId

        # key/value map field for extra data
        # @var map
        self.metaData = metaData

        # Specifies until when the recording is available. Date and time represented as epoch.
        # @var int
        # @readonly
        self.expiryDate = expiryDate


    PROPERTY_LOADERS = {
        'externalId': getXmlNodeText, 
        'metaData': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
        'expiryDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaRecording.fromXml(self, node)
        self.fromXmlImpl(node, KalturaExternalRecording.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRecording.toParams(self)
        kparams.put("objectType", "KalturaExternalRecording")
        kparams.addStringIfDefined("externalId", self.externalId)
        kparams.addMapIfDefined("metaData", self.metaData)
        return kparams

    def getExternalId(self):
        return self.externalId

    def setExternalId(self, newExternalId):
        self.externalId = newExternalId

    def getMetaData(self):
        return self.metaData

    def setMetaData(self, newMetaData):
        self.metaData = newMetaData

    def getExpiryDate(self):
        return self.expiryDate


# @package Kaltura
# @subpackage Client
class KalturaRecordingListResponse(KalturaListResponse):
    """Recordings info wrapper"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Recordings
        # @var array of KalturaRecording
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaRecording'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRecordingListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaRecordingListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaSeriesRecordingOption(KalturaObjectBase):
    def __init__(self,
            minSeasonNumber=NotImplemented,
            minEpisodeNumber=NotImplemented,
            chronologicalRecordStartTime=NotImplemented):
        KalturaObjectBase.__init__(self)

        # min Season Number
        # @var int
        self.minSeasonNumber = minSeasonNumber

        # min Season Number
        # @var int
        self.minEpisodeNumber = minEpisodeNumber

        # Record future only from selected value
        # @var KalturaChronologicalRecordStartTime
        self.chronologicalRecordStartTime = chronologicalRecordStartTime


    PROPERTY_LOADERS = {
        'minSeasonNumber': getXmlNodeInt, 
        'minEpisodeNumber': getXmlNodeInt, 
        'chronologicalRecordStartTime': (KalturaEnumsFactory.createString, "KalturaChronologicalRecordStartTime"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSeriesRecordingOption.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSeriesRecordingOption")
        kparams.addIntIfDefined("minSeasonNumber", self.minSeasonNumber)
        kparams.addIntIfDefined("minEpisodeNumber", self.minEpisodeNumber)
        kparams.addStringEnumIfDefined("chronologicalRecordStartTime", self.chronologicalRecordStartTime)
        return kparams

    def getMinSeasonNumber(self):
        return self.minSeasonNumber

    def setMinSeasonNumber(self, newMinSeasonNumber):
        self.minSeasonNumber = newMinSeasonNumber

    def getMinEpisodeNumber(self):
        return self.minEpisodeNumber

    def setMinEpisodeNumber(self, newMinEpisodeNumber):
        self.minEpisodeNumber = newMinEpisodeNumber

    def getChronologicalRecordStartTime(self):
        return self.chronologicalRecordStartTime

    def setChronologicalRecordStartTime(self, newChronologicalRecordStartTime):
        self.chronologicalRecordStartTime = newChronologicalRecordStartTime


# @package Kaltura
# @subpackage Client
class KalturaSeriesRecording(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            epgId=NotImplemented,
            channelId=NotImplemented,
            seriesId=NotImplemented,
            seasonNumber=NotImplemented,
            type=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            excludedSeasons=NotImplemented,
            seriesRecordingOption=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Kaltura unique ID representing the series recording identifier
        # @var int
        # @readonly
        self.id = id

        # Kaltura EpgId
        # @var int
        self.epgId = epgId

        # Kaltura ChannelId
        # @var int
        self.channelId = channelId

        # Kaltura SeriesId
        # @var string
        self.seriesId = seriesId

        # Kaltura SeasonNumber
        # @var int
        self.seasonNumber = seasonNumber

        # Recording Type: single/series/season
        # @var KalturaRecordingType
        self.type = type

        # Specifies when was the series recording created. Date and time represented as epoch.
        # @var int
        # @readonly
        self.createDate = createDate

        # Specifies when was the series recording last updated. Date and time represented as epoch.
        # @var int
        # @readonly
        self.updateDate = updateDate

        # List of the season numbers to exclude.
        # @var array of KalturaIntegerValue
        # @readonly
        self.excludedSeasons = excludedSeasons

        # Series Recording Option
        # @var KalturaSeriesRecordingOption
        self.seriesRecordingOption = seriesRecordingOption


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'epgId': getXmlNodeInt, 
        'channelId': getXmlNodeInt, 
        'seriesId': getXmlNodeText, 
        'seasonNumber': getXmlNodeInt, 
        'type': (KalturaEnumsFactory.createString, "KalturaRecordingType"), 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
        'excludedSeasons': (KalturaObjectFactory.createArray, 'KalturaIntegerValue'), 
        'seriesRecordingOption': (KalturaObjectFactory.create, 'KalturaSeriesRecordingOption'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSeriesRecording.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSeriesRecording")
        kparams.addIntIfDefined("epgId", self.epgId)
        kparams.addIntIfDefined("channelId", self.channelId)
        kparams.addStringIfDefined("seriesId", self.seriesId)
        kparams.addIntIfDefined("seasonNumber", self.seasonNumber)
        kparams.addStringEnumIfDefined("type", self.type)
        kparams.addObjectIfDefined("seriesRecordingOption", self.seriesRecordingOption)
        return kparams

    def getId(self):
        return self.id

    def getEpgId(self):
        return self.epgId

    def setEpgId(self, newEpgId):
        self.epgId = newEpgId

    def getChannelId(self):
        return self.channelId

    def setChannelId(self, newChannelId):
        self.channelId = newChannelId

    def getSeriesId(self):
        return self.seriesId

    def setSeriesId(self, newSeriesId):
        self.seriesId = newSeriesId

    def getSeasonNumber(self):
        return self.seasonNumber

    def setSeasonNumber(self, newSeasonNumber):
        self.seasonNumber = newSeasonNumber

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate

    def getExcludedSeasons(self):
        return self.excludedSeasons

    def getSeriesRecordingOption(self):
        return self.seriesRecordingOption

    def setSeriesRecordingOption(self, newSeriesRecordingOption):
        self.seriesRecordingOption = newSeriesRecordingOption


# @package Kaltura
# @subpackage Client
class KalturaSeriesRecordingListResponse(KalturaListResponse):
    """Series Recordings info wrapper"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Series Recordings
        # @var array of KalturaSeriesRecording
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaSeriesRecording'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSeriesRecordingListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaSeriesRecordingListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaExternalSeriesRecording(KalturaSeriesRecording):
    def __init__(self,
            id=NotImplemented,
            epgId=NotImplemented,
            channelId=NotImplemented,
            seriesId=NotImplemented,
            seasonNumber=NotImplemented,
            type=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            excludedSeasons=NotImplemented,
            seriesRecordingOption=NotImplemented,
            metaData=NotImplemented):
        KalturaSeriesRecording.__init__(self,
            id,
            epgId,
            channelId,
            seriesId,
            seasonNumber,
            type,
            createDate,
            updateDate,
            excludedSeasons,
            seriesRecordingOption)

        # MetaData filtering
        # @var map
        self.metaData = metaData


    PROPERTY_LOADERS = {
        'metaData': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
    }

    def fromXml(self, node):
        KalturaSeriesRecording.fromXml(self, node)
        self.fromXmlImpl(node, KalturaExternalSeriesRecording.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSeriesRecording.toParams(self)
        kparams.put("objectType", "KalturaExternalSeriesRecording")
        kparams.addMapIfDefined("metaData", self.metaData)
        return kparams

    def getMetaData(self):
        return self.metaData

    def setMetaData(self, newMetaData):
        self.metaData = newMetaData


# @package Kaltura
# @subpackage Client
class KalturaAssetCommentListResponse(KalturaListResponse):
    """Asset Comment Response"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Assets
        # @var array of KalturaAssetComment
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaAssetComment'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetCommentListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaAssetCommentListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaAssetCount(KalturaObjectBase):
    """Asset count - represents a specific value of the field, its count and its sub groups."""

    def __init__(self,
            value=NotImplemented,
            count=NotImplemented,
            subs=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Value
        # @var string
        self.value = value

        # Count
        # @var int
        self.count = count

        # Sub groups
        # @var array of KalturaAssetsCount
        self.subs = subs


    PROPERTY_LOADERS = {
        'value': getXmlNodeText, 
        'count': getXmlNodeInt, 
        'subs': (KalturaObjectFactory.createArray, 'KalturaAssetsCount'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetCount.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAssetCount")
        kparams.addStringIfDefined("value", self.value)
        kparams.addIntIfDefined("count", self.count)
        kparams.addArrayIfDefined("subs", self.subs)
        return kparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue

    def getCount(self):
        return self.count

    def setCount(self, newCount):
        self.count = newCount

    def getSubs(self):
        return self.subs

    def setSubs(self, newSubs):
        self.subs = newSubs


# @package Kaltura
# @subpackage Client
class KalturaAssetsCount(KalturaObjectBase):
    """Single aggregation objects"""

    def __init__(self,
            field=NotImplemented,
            objects=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Field name
        # @var string
        self.field = field

        # Values, their count and sub groups
        # @var array of KalturaAssetCount
        self.objects = objects


    PROPERTY_LOADERS = {
        'field': getXmlNodeText, 
        'objects': (KalturaObjectFactory.createArray, 'KalturaAssetCount'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetsCount.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAssetsCount")
        kparams.addStringIfDefined("field", self.field)
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getField(self):
        return self.field

    def setField(self, newField):
        self.field = newField

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaAssetCountListResponse(KalturaListResponse):
    """Asset counts wrapper - represents a group"""

    def __init__(self,
            totalCount=NotImplemented,
            assetsCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Count of assets that match filter result, regardless of group by result
        # @var int
        self.assetsCount = assetsCount

        # List of groupings (field name and sub-list of values and their counts)
        # @var array of KalturaAssetsCount
        self.objects = objects


    PROPERTY_LOADERS = {
        'assetsCount': getXmlNodeInt, 
        'objects': (KalturaObjectFactory.createArray, 'KalturaAssetsCount'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetCountListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaAssetCountListResponse")
        kparams.addIntIfDefined("assetsCount", self.assetsCount)
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getAssetsCount(self):
        return self.assetsCount

    def setAssetsCount(self, newAssetsCount):
        self.assetsCount = newAssetsCount

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaAssetHistory(KalturaObjectBase):
    """Watch history asset info"""

    def __init__(self,
            assetId=NotImplemented,
            assetType=NotImplemented,
            position=NotImplemented,
            duration=NotImplemented,
            watchedDate=NotImplemented,
            finishedWatching=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Asset identifier
        # @var int
        # @readonly
        self.assetId = assetId

        # Asset identifier
        # @var KalturaAssetType
        # @readonly
        self.assetType = assetType

        # Position in seconds of the relevant asset
        # @var int
        # @readonly
        self.position = position

        # Duration in seconds of the relevant asset
        # @var int
        # @readonly
        self.duration = duration

        # The date when the media was last watched
        # @var int
        # @readonly
        self.watchedDate = watchedDate

        # Boolean which specifies whether the user finished watching the movie or not
        # @var bool
        # @readonly
        self.finishedWatching = finishedWatching


    PROPERTY_LOADERS = {
        'assetId': getXmlNodeInt, 
        'assetType': (KalturaEnumsFactory.createString, "KalturaAssetType"), 
        'position': getXmlNodeInt, 
        'duration': getXmlNodeInt, 
        'watchedDate': getXmlNodeInt, 
        'finishedWatching': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetHistory.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAssetHistory")
        return kparams

    def getAssetId(self):
        return self.assetId

    def getAssetType(self):
        return self.assetType

    def getPosition(self):
        return self.position

    def getDuration(self):
        return self.duration

    def getWatchedDate(self):
        return self.watchedDate

    def getFinishedWatching(self):
        return self.finishedWatching


# @package Kaltura
# @subpackage Client
class KalturaAssetHistoryListResponse(KalturaListResponse):
    """Watch history asset wrapper"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # WatchHistoryAssets Models
        # @var array of KalturaAssetHistory
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaAssetHistory'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetHistoryListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaAssetHistoryListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaRelatedEntity(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            type=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Unique identifier for the related entry
        # @var string
        self.id = id

        # Defines related entry type
        # @var KalturaRelatedEntityType
        self.type = type


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'type': (KalturaEnumsFactory.createString, "KalturaRelatedEntityType"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRelatedEntity.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaRelatedEntity")
        kparams.addStringIfDefined("id", self.id)
        kparams.addStringEnumIfDefined("type", self.type)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType


# @package Kaltura
# @subpackage Client
class KalturaRelatedEntityArray(KalturaObjectBase):
    def __init__(self,
            objects=NotImplemented):
        KalturaObjectBase.__init__(self)

        # List of related entities
        # @var array of KalturaRelatedEntity
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaRelatedEntity'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRelatedEntityArray.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaRelatedEntityArray")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaAsset(KalturaObjectBase):
    """Asset info"""

    def __init__(self,
            id=NotImplemented,
            type=NotImplemented,
            name=NotImplemented,
            multilingualName=NotImplemented,
            description=NotImplemented,
            multilingualDescription=NotImplemented,
            images=NotImplemented,
            mediaFiles=NotImplemented,
            metas=NotImplemented,
            tags=NotImplemented,
            relatedEntities=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            externalId=NotImplemented,
            indexStatus=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Unique identifier for the asset
        # @var int
        # @readonly
        self.id = id

        # Identifies the asset type (EPG, Recording, Movie, TV Series, etc). 
        #             Possible values: 0 - EPG linear programs, 1 - Recording; or any asset type ID according to the asset types IDs defined in the system.
        # @var int
        # @insertonly
        self.type = type

        # Asset name
        # @var string
        # @readonly
        self.name = name

        # Asset name
        # @var array of KalturaTranslationToken
        self.multilingualName = multilingualName

        # Asset description
        # @var string
        # @readonly
        self.description = description

        # Asset description
        # @var array of KalturaTranslationToken
        self.multilingualDescription = multilingualDescription

        # Collection of images details that can be used to represent this asset
        # @var array of KalturaMediaImage
        # @readonly
        self.images = images

        # Files
        # @var array of KalturaMediaFile
        # @readonly
        self.mediaFiles = mediaFiles

        # Dynamic collection of key-value pairs according to the String Meta defined in the system
        # @var map
        self.metas = metas

        # Dynamic collection of key-value pairs according to the Tag Types defined in the system
        # @var map
        self.tags = tags

        # Dynamic collection of key-value pairs according to the related entity defined in the system
        # @var map
        self.relatedEntities = relatedEntities

        # Date and time represented as epoch. For VOD - since when the asset is available in the catalog. For EPG/Linear - when the program is aired (can be in the future).
        # @var int
        self.startDate = startDate

        # Date and time represented as epoch. For VOD - till when the asset be available in the catalog. For EPG/Linear - program end time and date
        # @var int
        self.endDate = endDate

        # Specifies when was the Asset was created. Date and time represented as epoch.
        # @var int
        # @readonly
        self.createDate = createDate

        # Specifies when was the Asset last updated. Date and time represented as epoch.
        # @var int
        # @readonly
        self.updateDate = updateDate

        # External identifier for the asset
        # @var string
        self.externalId = externalId

        # The media asset index status
        # @var KalturaAssetIndexStatus
        # @readonly
        self.indexStatus = indexStatus


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'type': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'multilingualName': (KalturaObjectFactory.createArray, 'KalturaTranslationToken'), 
        'description': getXmlNodeText, 
        'multilingualDescription': (KalturaObjectFactory.createArray, 'KalturaTranslationToken'), 
        'images': (KalturaObjectFactory.createArray, 'KalturaMediaImage'), 
        'mediaFiles': (KalturaObjectFactory.createArray, 'KalturaMediaFile'), 
        'metas': (KalturaObjectFactory.createMap, 'KalturaValue'), 
        'tags': (KalturaObjectFactory.createMap, 'KalturaMultilingualStringValueArray'), 
        'relatedEntities': (KalturaObjectFactory.createMap, 'KalturaRelatedEntityArray'), 
        'startDate': getXmlNodeInt, 
        'endDate': getXmlNodeInt, 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
        'externalId': getXmlNodeText, 
        'indexStatus': (KalturaEnumsFactory.createString, "KalturaAssetIndexStatus"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAsset.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAsset")
        kparams.addIntIfDefined("type", self.type)
        kparams.addArrayIfDefined("multilingualName", self.multilingualName)
        kparams.addArrayIfDefined("multilingualDescription", self.multilingualDescription)
        kparams.addMapIfDefined("metas", self.metas)
        kparams.addMapIfDefined("tags", self.tags)
        kparams.addMapIfDefined("relatedEntities", self.relatedEntities)
        kparams.addIntIfDefined("startDate", self.startDate)
        kparams.addIntIfDefined("endDate", self.endDate)
        kparams.addStringIfDefined("externalId", self.externalId)
        return kparams

    def getId(self):
        return self.id

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getName(self):
        return self.name

    def getMultilingualName(self):
        return self.multilingualName

    def setMultilingualName(self, newMultilingualName):
        self.multilingualName = newMultilingualName

    def getDescription(self):
        return self.description

    def getMultilingualDescription(self):
        return self.multilingualDescription

    def setMultilingualDescription(self, newMultilingualDescription):
        self.multilingualDescription = newMultilingualDescription

    def getImages(self):
        return self.images

    def getMediaFiles(self):
        return self.mediaFiles

    def getMetas(self):
        return self.metas

    def setMetas(self, newMetas):
        self.metas = newMetas

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getRelatedEntities(self):
        return self.relatedEntities

    def setRelatedEntities(self, newRelatedEntities):
        self.relatedEntities = newRelatedEntities

    def getStartDate(self):
        return self.startDate

    def setStartDate(self, newStartDate):
        self.startDate = newStartDate

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate

    def getExternalId(self):
        return self.externalId

    def setExternalId(self, newExternalId):
        self.externalId = newExternalId

    def getIndexStatus(self):
        return self.indexStatus


# @package Kaltura
# @subpackage Client
class KalturaAssetListResponse(KalturaListResponse):
    """Asset wrapper"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Assets
        # @var array of KalturaAsset
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaAsset'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaAssetListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaLiveToVodInfoAsset(KalturaObjectBase):
    def __init__(self,
            linearAssetId=NotImplemented,
            epgId=NotImplemented,
            epgChannelId=NotImplemented,
            crid=NotImplemented,
            originalStartDate=NotImplemented,
            originalEndDate=NotImplemented,
            paddingBeforeProgramStarts=NotImplemented,
            paddingAfterProgramEnds=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Linear Asset Id
        # @var int
        self.linearAssetId = linearAssetId

        # EPG Id
        # @var string
        self.epgId = epgId

        # EPG Channel Id
        # @var int
        self.epgChannelId = epgChannelId

        # Crid
        # @var string
        self.crid = crid

        # Original Start Date
        # @var int
        self.originalStartDate = originalStartDate

        # Original End Date
        # @var int
        self.originalEndDate = originalEndDate

        # Padding before program starts
        # @var int
        self.paddingBeforeProgramStarts = paddingBeforeProgramStarts

        # Padding after program ends
        # @var int
        self.paddingAfterProgramEnds = paddingAfterProgramEnds


    PROPERTY_LOADERS = {
        'linearAssetId': getXmlNodeInt, 
        'epgId': getXmlNodeText, 
        'epgChannelId': getXmlNodeInt, 
        'crid': getXmlNodeText, 
        'originalStartDate': getXmlNodeInt, 
        'originalEndDate': getXmlNodeInt, 
        'paddingBeforeProgramStarts': getXmlNodeInt, 
        'paddingAfterProgramEnds': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveToVodInfoAsset.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLiveToVodInfoAsset")
        kparams.addIntIfDefined("linearAssetId", self.linearAssetId)
        kparams.addStringIfDefined("epgId", self.epgId)
        kparams.addIntIfDefined("epgChannelId", self.epgChannelId)
        kparams.addStringIfDefined("crid", self.crid)
        kparams.addIntIfDefined("originalStartDate", self.originalStartDate)
        kparams.addIntIfDefined("originalEndDate", self.originalEndDate)
        kparams.addIntIfDefined("paddingBeforeProgramStarts", self.paddingBeforeProgramStarts)
        kparams.addIntIfDefined("paddingAfterProgramEnds", self.paddingAfterProgramEnds)
        return kparams

    def getLinearAssetId(self):
        return self.linearAssetId

    def setLinearAssetId(self, newLinearAssetId):
        self.linearAssetId = newLinearAssetId

    def getEpgId(self):
        return self.epgId

    def setEpgId(self, newEpgId):
        self.epgId = newEpgId

    def getEpgChannelId(self):
        return self.epgChannelId

    def setEpgChannelId(self, newEpgChannelId):
        self.epgChannelId = newEpgChannelId

    def getCrid(self):
        return self.crid

    def setCrid(self, newCrid):
        self.crid = newCrid

    def getOriginalStartDate(self):
        return self.originalStartDate

    def setOriginalStartDate(self, newOriginalStartDate):
        self.originalStartDate = newOriginalStartDate

    def getOriginalEndDate(self):
        return self.originalEndDate

    def setOriginalEndDate(self, newOriginalEndDate):
        self.originalEndDate = newOriginalEndDate

    def getPaddingBeforeProgramStarts(self):
        return self.paddingBeforeProgramStarts

    def setPaddingBeforeProgramStarts(self, newPaddingBeforeProgramStarts):
        self.paddingBeforeProgramStarts = newPaddingBeforeProgramStarts

    def getPaddingAfterProgramEnds(self):
        return self.paddingAfterProgramEnds

    def setPaddingAfterProgramEnds(self, newPaddingAfterProgramEnds):
        self.paddingAfterProgramEnds = newPaddingAfterProgramEnds


# @package Kaltura
# @subpackage Client
class KalturaMediaAsset(KalturaAsset):
    """Media-asset info"""

    def __init__(self,
            id=NotImplemented,
            type=NotImplemented,
            name=NotImplemented,
            multilingualName=NotImplemented,
            description=NotImplemented,
            multilingualDescription=NotImplemented,
            images=NotImplemented,
            mediaFiles=NotImplemented,
            metas=NotImplemented,
            tags=NotImplemented,
            relatedEntities=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            externalId=NotImplemented,
            indexStatus=NotImplemented,
            externalIds=NotImplemented,
            entryId=NotImplemented,
            deviceRuleId=NotImplemented,
            geoBlockRuleId=NotImplemented,
            status=NotImplemented,
            inheritancePolicy=NotImplemented,
            liveToVod=NotImplemented):
        KalturaAsset.__init__(self,
            id,
            type,
            name,
            multilingualName,
            description,
            multilingualDescription,
            images,
            mediaFiles,
            metas,
            tags,
            relatedEntities,
            startDate,
            endDate,
            createDate,
            updateDate,
            externalId,
            indexStatus)

        # External identifiers
        # @var string
        self.externalIds = externalIds

        # Entry Identifier
        # @var string
        self.entryId = entryId

        # Device rule identifier
        # @var int
        self.deviceRuleId = deviceRuleId

        # Geo block rule identifier
        # @var int
        self.geoBlockRuleId = geoBlockRuleId

        # The media asset status
        # @var bool
        self.status = status

        # The media asset inheritance policy
        # @var KalturaAssetInheritancePolicy
        self.inheritancePolicy = inheritancePolicy

        # Live to VOD (if present)
        # @var KalturaLiveToVodInfoAsset
        self.liveToVod = liveToVod


    PROPERTY_LOADERS = {
        'externalIds': getXmlNodeText, 
        'entryId': getXmlNodeText, 
        'deviceRuleId': getXmlNodeInt, 
        'geoBlockRuleId': getXmlNodeInt, 
        'status': getXmlNodeBool, 
        'inheritancePolicy': (KalturaEnumsFactory.createString, "KalturaAssetInheritancePolicy"), 
        'liveToVod': (KalturaObjectFactory.create, 'KalturaLiveToVodInfoAsset'), 
    }

    def fromXml(self, node):
        KalturaAsset.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaAsset.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAsset.toParams(self)
        kparams.put("objectType", "KalturaMediaAsset")
        kparams.addStringIfDefined("externalIds", self.externalIds)
        kparams.addStringIfDefined("entryId", self.entryId)
        kparams.addIntIfDefined("deviceRuleId", self.deviceRuleId)
        kparams.addIntIfDefined("geoBlockRuleId", self.geoBlockRuleId)
        kparams.addBoolIfDefined("status", self.status)
        kparams.addStringEnumIfDefined("inheritancePolicy", self.inheritancePolicy)
        kparams.addObjectIfDefined("liveToVod", self.liveToVod)
        return kparams

    def getExternalIds(self):
        return self.externalIds

    def setExternalIds(self, newExternalIds):
        self.externalIds = newExternalIds

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getDeviceRuleId(self):
        return self.deviceRuleId

    def setDeviceRuleId(self, newDeviceRuleId):
        self.deviceRuleId = newDeviceRuleId

    def getGeoBlockRuleId(self):
        return self.geoBlockRuleId

    def setGeoBlockRuleId(self, newGeoBlockRuleId):
        self.geoBlockRuleId = newGeoBlockRuleId

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getInheritancePolicy(self):
        return self.inheritancePolicy

    def setInheritancePolicy(self, newInheritancePolicy):
        self.inheritancePolicy = newInheritancePolicy

    def getLiveToVod(self):
        return self.liveToVod

    def setLiveToVod(self, newLiveToVod):
        self.liveToVod = newLiveToVod


# @package Kaltura
# @subpackage Client
class KalturaLiveAsset(KalturaMediaAsset):
    """Linear media asset info"""

    def __init__(self,
            id=NotImplemented,
            type=NotImplemented,
            name=NotImplemented,
            multilingualName=NotImplemented,
            description=NotImplemented,
            multilingualDescription=NotImplemented,
            images=NotImplemented,
            mediaFiles=NotImplemented,
            metas=NotImplemented,
            tags=NotImplemented,
            relatedEntities=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            externalId=NotImplemented,
            indexStatus=NotImplemented,
            externalIds=NotImplemented,
            entryId=NotImplemented,
            deviceRuleId=NotImplemented,
            geoBlockRuleId=NotImplemented,
            status=NotImplemented,
            inheritancePolicy=NotImplemented,
            liveToVod=NotImplemented,
            enableCdvrState=NotImplemented,
            enableCatchUpState=NotImplemented,
            enableStartOverState=NotImplemented,
            bufferCatchUpSetting=NotImplemented,
            paddingBeforeProgramStarts=NotImplemented,
            paddingAfterProgramEnds=NotImplemented,
            bufferTrickPlaySetting=NotImplemented,
            enableRecordingPlaybackNonEntitledChannelState=NotImplemented,
            enableTrickPlayState=NotImplemented,
            externalEpgIngestId=NotImplemented,
            externalCdvrId=NotImplemented,
            enableCdvr=NotImplemented,
            enableCatchUp=NotImplemented,
            enableStartOver=NotImplemented,
            catchUpBuffer=NotImplemented,
            trickPlayBuffer=NotImplemented,
            enableRecordingPlaybackNonEntitledChannel=NotImplemented,
            enableTrickPlay=NotImplemented,
            channelType=NotImplemented):
        KalturaMediaAsset.__init__(self,
            id,
            type,
            name,
            multilingualName,
            description,
            multilingualDescription,
            images,
            mediaFiles,
            metas,
            tags,
            relatedEntities,
            startDate,
            endDate,
            createDate,
            updateDate,
            externalId,
            indexStatus,
            externalIds,
            entryId,
            deviceRuleId,
            geoBlockRuleId,
            status,
            inheritancePolicy,
            liveToVod)

        # Enable CDVR, configuration only
        # @var KalturaTimeShiftedTvState
        self.enableCdvrState = enableCdvrState

        # Enable catch-up, configuration only
        # @var KalturaTimeShiftedTvState
        self.enableCatchUpState = enableCatchUpState

        # Enable start over, configuration only
        # @var KalturaTimeShiftedTvState
        self.enableStartOverState = enableStartOverState

        # buffer Catch-up, configuration only
        # @var int
        self.bufferCatchUpSetting = bufferCatchUpSetting

        # Returns padding before program starts in seconds from a live asset if configured,
        #             otherwise returns corresponding value from TimeShiftedTvPartnerSettings.
        # @var int
        self.paddingBeforeProgramStarts = paddingBeforeProgramStarts

        # Returns padding after program ends in seconds from a live asset if configured,
        #             otherwise returns corresponding value from TimeShiftedTvPartnerSettings.
        # @var int
        self.paddingAfterProgramEnds = paddingAfterProgramEnds

        # buffer Trick-play, configuration only
        # @var int
        self.bufferTrickPlaySetting = bufferTrickPlaySetting

        # Enable Recording playback for non entitled channel, configuration only
        # @var KalturaTimeShiftedTvState
        self.enableRecordingPlaybackNonEntitledChannelState = enableRecordingPlaybackNonEntitledChannelState

        # Enable trick-play, configuration only
        # @var KalturaTimeShiftedTvState
        self.enableTrickPlayState = enableTrickPlayState

        # External identifier used when ingesting programs for this linear media asset
        # @var string
        self.externalEpgIngestId = externalEpgIngestId

        # External identifier for the CDVR
        # @var string
        self.externalCdvrId = externalCdvrId

        # Is CDVR enabled for this asset
        #             Please, note that value of this property is strictly connected with CDV-R setting on Partner level.
        #             In order to enable CDV-R for KalturaLiveAsset, Partner CDV-R setting should be enabled.
        # @var bool
        # @readonly
        self.enableCdvr = enableCdvr

        # Is catch-up enabled for this asset
        #             Please, note that value of this property is strictly connected with Catch Up setting on Partner level.
        #             In order to enable Catch Up for KalturaLiveAsset, Partner Catch Up setting should be enabled.
        # @var bool
        # @readonly
        self.enableCatchUp = enableCatchUp

        # Is start over enabled for this asset
        #             Please, note that value of this property is strictly connected with Start Over setting on Partner level.
        #             In order to enable Start Over for KalturaLiveAsset, Partner Start Over setting should be enabled.
        # @var bool
        # @readonly
        self.enableStartOver = enableStartOver

        # summed Catch-up buffer, the TimeShiftedTvPartnerSettings are also taken into consideration
        # @var int
        # @readonly
        self.catchUpBuffer = catchUpBuffer

        # summed Trick-play buffer, the TimeShiftedTvPartnerSettings are also taken into consideration
        # @var int
        # @readonly
        self.trickPlayBuffer = trickPlayBuffer

        # Is recording playback for non entitled channel enabled for this asset
        # @var bool
        # @readonly
        self.enableRecordingPlaybackNonEntitledChannel = enableRecordingPlaybackNonEntitledChannel

        # Is trick-play enabled for this asset
        #             Please, note that value of this property is strictly connected with Trick Play setting on Partner level.
        #             In order to enable Trick Play for KalturaLiveAsset, Partner Trick Play setting should be enabled.
        # @var bool
        # @readonly
        self.enableTrickPlay = enableTrickPlay

        # channel type, possible values: UNKNOWN, DTT, OTT, DTT_AND_OTT
        # @var KalturaLinearChannelType
        self.channelType = channelType


    PROPERTY_LOADERS = {
        'enableCdvrState': (KalturaEnumsFactory.createString, "KalturaTimeShiftedTvState"), 
        'enableCatchUpState': (KalturaEnumsFactory.createString, "KalturaTimeShiftedTvState"), 
        'enableStartOverState': (KalturaEnumsFactory.createString, "KalturaTimeShiftedTvState"), 
        'bufferCatchUpSetting': getXmlNodeInt, 
        'paddingBeforeProgramStarts': getXmlNodeInt, 
        'paddingAfterProgramEnds': getXmlNodeInt, 
        'bufferTrickPlaySetting': getXmlNodeInt, 
        'enableRecordingPlaybackNonEntitledChannelState': (KalturaEnumsFactory.createString, "KalturaTimeShiftedTvState"), 
        'enableTrickPlayState': (KalturaEnumsFactory.createString, "KalturaTimeShiftedTvState"), 
        'externalEpgIngestId': getXmlNodeText, 
        'externalCdvrId': getXmlNodeText, 
        'enableCdvr': getXmlNodeBool, 
        'enableCatchUp': getXmlNodeBool, 
        'enableStartOver': getXmlNodeBool, 
        'catchUpBuffer': getXmlNodeInt, 
        'trickPlayBuffer': getXmlNodeInt, 
        'enableRecordingPlaybackNonEntitledChannel': getXmlNodeBool, 
        'enableTrickPlay': getXmlNodeBool, 
        'channelType': (KalturaEnumsFactory.createString, "KalturaLinearChannelType"), 
    }

    def fromXml(self, node):
        KalturaMediaAsset.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveAsset.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaMediaAsset.toParams(self)
        kparams.put("objectType", "KalturaLiveAsset")
        kparams.addStringEnumIfDefined("enableCdvrState", self.enableCdvrState)
        kparams.addStringEnumIfDefined("enableCatchUpState", self.enableCatchUpState)
        kparams.addStringEnumIfDefined("enableStartOverState", self.enableStartOverState)
        kparams.addIntIfDefined("bufferCatchUpSetting", self.bufferCatchUpSetting)
        kparams.addIntIfDefined("paddingBeforeProgramStarts", self.paddingBeforeProgramStarts)
        kparams.addIntIfDefined("paddingAfterProgramEnds", self.paddingAfterProgramEnds)
        kparams.addIntIfDefined("bufferTrickPlaySetting", self.bufferTrickPlaySetting)
        kparams.addStringEnumIfDefined("enableRecordingPlaybackNonEntitledChannelState", self.enableRecordingPlaybackNonEntitledChannelState)
        kparams.addStringEnumIfDefined("enableTrickPlayState", self.enableTrickPlayState)
        kparams.addStringIfDefined("externalEpgIngestId", self.externalEpgIngestId)
        kparams.addStringIfDefined("externalCdvrId", self.externalCdvrId)
        kparams.addStringEnumIfDefined("channelType", self.channelType)
        return kparams

    def getEnableCdvrState(self):
        return self.enableCdvrState

    def setEnableCdvrState(self, newEnableCdvrState):
        self.enableCdvrState = newEnableCdvrState

    def getEnableCatchUpState(self):
        return self.enableCatchUpState

    def setEnableCatchUpState(self, newEnableCatchUpState):
        self.enableCatchUpState = newEnableCatchUpState

    def getEnableStartOverState(self):
        return self.enableStartOverState

    def setEnableStartOverState(self, newEnableStartOverState):
        self.enableStartOverState = newEnableStartOverState

    def getBufferCatchUpSetting(self):
        return self.bufferCatchUpSetting

    def setBufferCatchUpSetting(self, newBufferCatchUpSetting):
        self.bufferCatchUpSetting = newBufferCatchUpSetting

    def getPaddingBeforeProgramStarts(self):
        return self.paddingBeforeProgramStarts

    def setPaddingBeforeProgramStarts(self, newPaddingBeforeProgramStarts):
        self.paddingBeforeProgramStarts = newPaddingBeforeProgramStarts

    def getPaddingAfterProgramEnds(self):
        return self.paddingAfterProgramEnds

    def setPaddingAfterProgramEnds(self, newPaddingAfterProgramEnds):
        self.paddingAfterProgramEnds = newPaddingAfterProgramEnds

    def getBufferTrickPlaySetting(self):
        return self.bufferTrickPlaySetting

    def setBufferTrickPlaySetting(self, newBufferTrickPlaySetting):
        self.bufferTrickPlaySetting = newBufferTrickPlaySetting

    def getEnableRecordingPlaybackNonEntitledChannelState(self):
        return self.enableRecordingPlaybackNonEntitledChannelState

    def setEnableRecordingPlaybackNonEntitledChannelState(self, newEnableRecordingPlaybackNonEntitledChannelState):
        self.enableRecordingPlaybackNonEntitledChannelState = newEnableRecordingPlaybackNonEntitledChannelState

    def getEnableTrickPlayState(self):
        return self.enableTrickPlayState

    def setEnableTrickPlayState(self, newEnableTrickPlayState):
        self.enableTrickPlayState = newEnableTrickPlayState

    def getExternalEpgIngestId(self):
        return self.externalEpgIngestId

    def setExternalEpgIngestId(self, newExternalEpgIngestId):
        self.externalEpgIngestId = newExternalEpgIngestId

    def getExternalCdvrId(self):
        return self.externalCdvrId

    def setExternalCdvrId(self, newExternalCdvrId):
        self.externalCdvrId = newExternalCdvrId

    def getEnableCdvr(self):
        return self.enableCdvr

    def getEnableCatchUp(self):
        return self.enableCatchUp

    def getEnableStartOver(self):
        return self.enableStartOver

    def getCatchUpBuffer(self):
        return self.catchUpBuffer

    def getTrickPlayBuffer(self):
        return self.trickPlayBuffer

    def getEnableRecordingPlaybackNonEntitledChannel(self):
        return self.enableRecordingPlaybackNonEntitledChannel

    def getEnableTrickPlay(self):
        return self.enableTrickPlay

    def getChannelType(self):
        return self.channelType

    def setChannelType(self, newChannelType):
        self.channelType = newChannelType


# @package Kaltura
# @subpackage Client
class KalturaLineupChannelAsset(KalturaLiveAsset):
    """A Lineup channel asset is KalturaLiveAsset in a context of specific region (includes LCN)"""

    def __init__(self,
            id=NotImplemented,
            type=NotImplemented,
            name=NotImplemented,
            multilingualName=NotImplemented,
            description=NotImplemented,
            multilingualDescription=NotImplemented,
            images=NotImplemented,
            mediaFiles=NotImplemented,
            metas=NotImplemented,
            tags=NotImplemented,
            relatedEntities=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            externalId=NotImplemented,
            indexStatus=NotImplemented,
            externalIds=NotImplemented,
            entryId=NotImplemented,
            deviceRuleId=NotImplemented,
            geoBlockRuleId=NotImplemented,
            status=NotImplemented,
            inheritancePolicy=NotImplemented,
            liveToVod=NotImplemented,
            enableCdvrState=NotImplemented,
            enableCatchUpState=NotImplemented,
            enableStartOverState=NotImplemented,
            bufferCatchUpSetting=NotImplemented,
            paddingBeforeProgramStarts=NotImplemented,
            paddingAfterProgramEnds=NotImplemented,
            bufferTrickPlaySetting=NotImplemented,
            enableRecordingPlaybackNonEntitledChannelState=NotImplemented,
            enableTrickPlayState=NotImplemented,
            externalEpgIngestId=NotImplemented,
            externalCdvrId=NotImplemented,
            enableCdvr=NotImplemented,
            enableCatchUp=NotImplemented,
            enableStartOver=NotImplemented,
            catchUpBuffer=NotImplemented,
            trickPlayBuffer=NotImplemented,
            enableRecordingPlaybackNonEntitledChannel=NotImplemented,
            enableTrickPlay=NotImplemented,
            channelType=NotImplemented,
            lcn=NotImplemented):
        KalturaLiveAsset.__init__(self,
            id,
            type,
            name,
            multilingualName,
            description,
            multilingualDescription,
            images,
            mediaFiles,
            metas,
            tags,
            relatedEntities,
            startDate,
            endDate,
            createDate,
            updateDate,
            externalId,
            indexStatus,
            externalIds,
            entryId,
            deviceRuleId,
            geoBlockRuleId,
            status,
            inheritancePolicy,
            liveToVod,
            enableCdvrState,
            enableCatchUpState,
            enableStartOverState,
            bufferCatchUpSetting,
            paddingBeforeProgramStarts,
            paddingAfterProgramEnds,
            bufferTrickPlaySetting,
            enableRecordingPlaybackNonEntitledChannelState,
            enableTrickPlayState,
            externalEpgIngestId,
            externalCdvrId,
            enableCdvr,
            enableCatchUp,
            enableStartOver,
            catchUpBuffer,
            trickPlayBuffer,
            enableRecordingPlaybackNonEntitledChannel,
            enableTrickPlay,
            channelType)

        # Lineup channel number (LCN) - A logical linear channel number. This number is unique in the region context.
        # @var int
        self.lcn = lcn


    PROPERTY_LOADERS = {
        'lcn': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaLiveAsset.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLineupChannelAsset.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaLiveAsset.toParams(self)
        kparams.put("objectType", "KalturaLineupChannelAsset")
        kparams.addIntIfDefined("lcn", self.lcn)
        return kparams

    def getLcn(self):
        return self.lcn

    def setLcn(self, newLcn):
        self.lcn = newLcn


# @package Kaltura
# @subpackage Client
class KalturaProgramAsset(KalturaAsset):
    """Program-asset info"""

    def __init__(self,
            id=NotImplemented,
            type=NotImplemented,
            name=NotImplemented,
            multilingualName=NotImplemented,
            description=NotImplemented,
            multilingualDescription=NotImplemented,
            images=NotImplemented,
            mediaFiles=NotImplemented,
            metas=NotImplemented,
            tags=NotImplemented,
            relatedEntities=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            externalId=NotImplemented,
            indexStatus=NotImplemented,
            epgChannelId=NotImplemented,
            epgId=NotImplemented,
            relatedMediaId=NotImplemented,
            crid=NotImplemented,
            linearAssetId=NotImplemented,
            enableCdvr=NotImplemented,
            enableCatchUp=NotImplemented,
            enableStartOver=NotImplemented,
            enableTrickPlay=NotImplemented,
            externalOfferIds=NotImplemented):
        KalturaAsset.__init__(self,
            id,
            type,
            name,
            multilingualName,
            description,
            multilingualDescription,
            images,
            mediaFiles,
            metas,
            tags,
            relatedEntities,
            startDate,
            endDate,
            createDate,
            updateDate,
            externalId,
            indexStatus)

        # EPG channel identifier
        # @var int
        # @readonly
        self.epgChannelId = epgChannelId

        # EPG identifier
        # @var string
        # @readonly
        self.epgId = epgId

        # Ralated media identifier
        # @var int
        self.relatedMediaId = relatedMediaId

        # Unique identifier for the program
        # @var string
        self.crid = crid

        # Id of linear media asset
        # @var int
        # @insertonly
        self.linearAssetId = linearAssetId

        # Is CDVR enabled for this asset
        #             Please, note that value of this property is strictly connected with CDV-R setting on Partner and KalturaLiveAsset levels.
        #             In order to enable CDV-R for KalturaProgramAsset, Partner and KalturaLiveAsset CDV-R settings should be enabled.
        # @var bool
        self.enableCdvr = enableCdvr

        # Is catch-up enabled for this asset
        #             Please, note that value of this property is strictly connected with Catch Up setting on Partner and KalturaLiveAsset levels.
        #             In order to enable Catch Up for KalturaProgramAsset, Partner and KalturaLiveAsset Catch Up settings should be enabled.
        # @var bool
        self.enableCatchUp = enableCatchUp

        # Is start over enabled for this asset
        #             Please, note that value of this property is strictly connected with Start Over setting on Partner and KalturaLiveAsset levels.
        #             In order to enable Start Over for KalturaProgramAsset, Partner and KalturaLiveAsset Start Over settings should be enabled.
        # @var bool
        self.enableStartOver = enableStartOver

        # Is trick-play enabled for this asset
        #             Please, note that value of this property is strictly connected with Trick Play setting on Partner and KalturaLiveAsset levels.
        #             In order to enable Trick Play for KalturaProgramAsset, Partner and KalturaLiveAsset Trick Play settings should be enabled.
        # @var bool
        self.enableTrickPlay = enableTrickPlay

        # Contains comma separate list of KalturaProgramAssetGroupOffer.externalOfferId values indicating the PAGOs to which the Program Asset is bound.
        # @var string
        self.externalOfferIds = externalOfferIds


    PROPERTY_LOADERS = {
        'epgChannelId': getXmlNodeInt, 
        'epgId': getXmlNodeText, 
        'relatedMediaId': getXmlNodeInt, 
        'crid': getXmlNodeText, 
        'linearAssetId': getXmlNodeInt, 
        'enableCdvr': getXmlNodeBool, 
        'enableCatchUp': getXmlNodeBool, 
        'enableStartOver': getXmlNodeBool, 
        'enableTrickPlay': getXmlNodeBool, 
        'externalOfferIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaAsset.fromXml(self, node)
        self.fromXmlImpl(node, KalturaProgramAsset.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAsset.toParams(self)
        kparams.put("objectType", "KalturaProgramAsset")
        kparams.addIntIfDefined("relatedMediaId", self.relatedMediaId)
        kparams.addStringIfDefined("crid", self.crid)
        kparams.addIntIfDefined("linearAssetId", self.linearAssetId)
        kparams.addBoolIfDefined("enableCdvr", self.enableCdvr)
        kparams.addBoolIfDefined("enableCatchUp", self.enableCatchUp)
        kparams.addBoolIfDefined("enableStartOver", self.enableStartOver)
        kparams.addBoolIfDefined("enableTrickPlay", self.enableTrickPlay)
        kparams.addStringIfDefined("externalOfferIds", self.externalOfferIds)
        return kparams

    def getEpgChannelId(self):
        return self.epgChannelId

    def getEpgId(self):
        return self.epgId

    def getRelatedMediaId(self):
        return self.relatedMediaId

    def setRelatedMediaId(self, newRelatedMediaId):
        self.relatedMediaId = newRelatedMediaId

    def getCrid(self):
        return self.crid

    def setCrid(self, newCrid):
        self.crid = newCrid

    def getLinearAssetId(self):
        return self.linearAssetId

    def setLinearAssetId(self, newLinearAssetId):
        self.linearAssetId = newLinearAssetId

    def getEnableCdvr(self):
        return self.enableCdvr

    def setEnableCdvr(self, newEnableCdvr):
        self.enableCdvr = newEnableCdvr

    def getEnableCatchUp(self):
        return self.enableCatchUp

    def setEnableCatchUp(self, newEnableCatchUp):
        self.enableCatchUp = newEnableCatchUp

    def getEnableStartOver(self):
        return self.enableStartOver

    def setEnableStartOver(self, newEnableStartOver):
        self.enableStartOver = newEnableStartOver

    def getEnableTrickPlay(self):
        return self.enableTrickPlay

    def setEnableTrickPlay(self, newEnableTrickPlay):
        self.enableTrickPlay = newEnableTrickPlay

    def getExternalOfferIds(self):
        return self.externalOfferIds

    def setExternalOfferIds(self, newExternalOfferIds):
        self.externalOfferIds = newExternalOfferIds


# @package Kaltura
# @subpackage Client
class KalturaRecordingAsset(KalturaProgramAsset):
    """Recording-asset info"""

    def __init__(self,
            id=NotImplemented,
            type=NotImplemented,
            name=NotImplemented,
            multilingualName=NotImplemented,
            description=NotImplemented,
            multilingualDescription=NotImplemented,
            images=NotImplemented,
            mediaFiles=NotImplemented,
            metas=NotImplemented,
            tags=NotImplemented,
            relatedEntities=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            externalId=NotImplemented,
            indexStatus=NotImplemented,
            epgChannelId=NotImplemented,
            epgId=NotImplemented,
            relatedMediaId=NotImplemented,
            crid=NotImplemented,
            linearAssetId=NotImplemented,
            enableCdvr=NotImplemented,
            enableCatchUp=NotImplemented,
            enableStartOver=NotImplemented,
            enableTrickPlay=NotImplemented,
            externalOfferIds=NotImplemented,
            recordingId=NotImplemented,
            recordingType=NotImplemented,
            viewableUntilDate=NotImplemented):
        KalturaProgramAsset.__init__(self,
            id,
            type,
            name,
            multilingualName,
            description,
            multilingualDescription,
            images,
            mediaFiles,
            metas,
            tags,
            relatedEntities,
            startDate,
            endDate,
            createDate,
            updateDate,
            externalId,
            indexStatus,
            epgChannelId,
            epgId,
            relatedMediaId,
            crid,
            linearAssetId,
            enableCdvr,
            enableCatchUp,
            enableStartOver,
            enableTrickPlay,
            externalOfferIds)

        # Recording identifier
        # @var string
        self.recordingId = recordingId

        # Recording Type: single/season/series
        # @var KalturaRecordingType
        self.recordingType = recordingType

        # Specifies until when the recording is available for viewing. Date and time represented as epoch.
        # @var int
        self.viewableUntilDate = viewableUntilDate


    PROPERTY_LOADERS = {
        'recordingId': getXmlNodeText, 
        'recordingType': (KalturaEnumsFactory.createString, "KalturaRecordingType"), 
        'viewableUntilDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaProgramAsset.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRecordingAsset.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaProgramAsset.toParams(self)
        kparams.put("objectType", "KalturaRecordingAsset")
        kparams.addStringIfDefined("recordingId", self.recordingId)
        kparams.addStringEnumIfDefined("recordingType", self.recordingType)
        kparams.addIntIfDefined("viewableUntilDate", self.viewableUntilDate)
        return kparams

    def getRecordingId(self):
        return self.recordingId

    def setRecordingId(self, newRecordingId):
        self.recordingId = newRecordingId

    def getRecordingType(self):
        return self.recordingType

    def setRecordingType(self, newRecordingType):
        self.recordingType = newRecordingType

    def getViewableUntilDate(self):
        return self.viewableUntilDate

    def setViewableUntilDate(self, newViewableUntilDate):
        self.viewableUntilDate = newViewableUntilDate


# @package Kaltura
# @subpackage Client
class KalturaEpg(KalturaProgramAsset):
    def __init__(self,
            id=NotImplemented,
            type=NotImplemented,
            name=NotImplemented,
            multilingualName=NotImplemented,
            description=NotImplemented,
            multilingualDescription=NotImplemented,
            images=NotImplemented,
            mediaFiles=NotImplemented,
            metas=NotImplemented,
            tags=NotImplemented,
            relatedEntities=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            externalId=NotImplemented,
            indexStatus=NotImplemented,
            epgChannelId=NotImplemented,
            epgId=NotImplemented,
            relatedMediaId=NotImplemented,
            crid=NotImplemented,
            linearAssetId=NotImplemented,
            enableCdvr=NotImplemented,
            enableCatchUp=NotImplemented,
            enableStartOver=NotImplemented,
            enableTrickPlay=NotImplemented,
            externalOfferIds=NotImplemented):
        KalturaProgramAsset.__init__(self,
            id,
            type,
            name,
            multilingualName,
            description,
            multilingualDescription,
            images,
            mediaFiles,
            metas,
            tags,
            relatedEntities,
            startDate,
            endDate,
            createDate,
            updateDate,
            externalId,
            indexStatus,
            epgChannelId,
            epgId,
            relatedMediaId,
            crid,
            linearAssetId,
            enableCdvr,
            enableCatchUp,
            enableStartOver,
            enableTrickPlay,
            externalOfferIds)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaProgramAsset.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEpg.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaProgramAsset.toParams(self)
        kparams.put("objectType", "KalturaEpg")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAssetStatisticsListResponse(KalturaListResponse):
    """List of assets statistics"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Assets
        # @var array of KalturaAssetStatistics
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaAssetStatistics'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetStatisticsListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaAssetStatisticsListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaAssetStruct(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            multilingualName=NotImplemented,
            systemName=NotImplemented,
            isProtected=NotImplemented,
            metaIds=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            features=NotImplemented,
            pluralName=NotImplemented,
            parentId=NotImplemented,
            connectingMetaId=NotImplemented,
            connectedParentMetaId=NotImplemented,
            dynamicData=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Asset Struct id
        # @var int
        # @readonly
        self.id = id

        # Asset struct name for the partner
        # @var string
        # @readonly
        self.name = name

        # Asset struct name for the partner
        # @var array of KalturaTranslationToken
        self.multilingualName = multilingualName

        # Asset Struct system name for the partner
        # @var string
        self.systemName = systemName

        # Is the Asset Struct protected by the system
        # @var bool
        self.isProtected = isProtected

        # A list of comma separated meta ids associated with this asset struct, returned according to the order.
        # @var string
        self.metaIds = metaIds

        # Specifies when was the Asset Struct was created. Date and time represented as epoch.
        # @var int
        # @readonly
        self.createDate = createDate

        # Specifies when was the Asset Struct last updated. Date and time represented as epoch.
        # @var int
        # @readonly
        self.updateDate = updateDate

        # List of supported features
        # @var string
        self.features = features

        # Plural Name
        # @var string
        self.pluralName = pluralName

        # AssetStruct parent Id
        # @var int
        self.parentId = parentId

        # connectingMetaId
        # @var int
        self.connectingMetaId = connectingMetaId

        # connectedParentMetaId
        # @var int
        self.connectedParentMetaId = connectedParentMetaId

        # Dynamic data
        # @var map
        self.dynamicData = dynamicData


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'multilingualName': (KalturaObjectFactory.createArray, 'KalturaTranslationToken'), 
        'systemName': getXmlNodeText, 
        'isProtected': getXmlNodeBool, 
        'metaIds': getXmlNodeText, 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
        'features': getXmlNodeText, 
        'pluralName': getXmlNodeText, 
        'parentId': getXmlNodeInt, 
        'connectingMetaId': getXmlNodeInt, 
        'connectedParentMetaId': getXmlNodeInt, 
        'dynamicData': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetStruct.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAssetStruct")
        kparams.addArrayIfDefined("multilingualName", self.multilingualName)
        kparams.addStringIfDefined("systemName", self.systemName)
        kparams.addBoolIfDefined("isProtected", self.isProtected)
        kparams.addStringIfDefined("metaIds", self.metaIds)
        kparams.addStringIfDefined("features", self.features)
        kparams.addStringIfDefined("pluralName", self.pluralName)
        kparams.addIntIfDefined("parentId", self.parentId)
        kparams.addIntIfDefined("connectingMetaId", self.connectingMetaId)
        kparams.addIntIfDefined("connectedParentMetaId", self.connectedParentMetaId)
        kparams.addMapIfDefined("dynamicData", self.dynamicData)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def getMultilingualName(self):
        return self.multilingualName

    def setMultilingualName(self, newMultilingualName):
        self.multilingualName = newMultilingualName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getIsProtected(self):
        return self.isProtected

    def setIsProtected(self, newIsProtected):
        self.isProtected = newIsProtected

    def getMetaIds(self):
        return self.metaIds

    def setMetaIds(self, newMetaIds):
        self.metaIds = newMetaIds

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate

    def getFeatures(self):
        return self.features

    def setFeatures(self, newFeatures):
        self.features = newFeatures

    def getPluralName(self):
        return self.pluralName

    def setPluralName(self, newPluralName):
        self.pluralName = newPluralName

    def getParentId(self):
        return self.parentId

    def setParentId(self, newParentId):
        self.parentId = newParentId

    def getConnectingMetaId(self):
        return self.connectingMetaId

    def setConnectingMetaId(self, newConnectingMetaId):
        self.connectingMetaId = newConnectingMetaId

    def getConnectedParentMetaId(self):
        return self.connectedParentMetaId

    def setConnectedParentMetaId(self, newConnectedParentMetaId):
        self.connectedParentMetaId = newConnectedParentMetaId

    def getDynamicData(self):
        return self.dynamicData

    def setDynamicData(self, newDynamicData):
        self.dynamicData = newDynamicData


# @package Kaltura
# @subpackage Client
class KalturaAssetStructListResponse(KalturaListResponse):
    """Asset Structs list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of asset structs
        # @var array of KalturaAssetStruct
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaAssetStruct'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetStructListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaAssetStructListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaAssetStructMeta(KalturaObjectBase):
    """Asset statistics"""

    def __init__(self,
            assetStructId=NotImplemented,
            metaId=NotImplemented,
            ingestReferencePath=NotImplemented,
            protectFromIngest=NotImplemented,
            defaultIngestValue=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            isInherited=NotImplemented,
            isLocationTag=NotImplemented,
            suppressedOrder=NotImplemented,
            aliasName=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Asset Struct id (template_id)
        # @var int
        # @readonly
        self.assetStructId = assetStructId

        # Meta id (topic_id)
        # @var int
        # @readonly
        self.metaId = metaId

        # IngestReferencePath
        # @var string
        self.ingestReferencePath = ingestReferencePath

        # ProtectFromIngest
        # @var bool
        self.protectFromIngest = protectFromIngest

        # DefaultIngestValue
        # @var string
        self.defaultIngestValue = defaultIngestValue

        # Specifies when was the Asset Struct Meta was created. Date and time represented as epoch.
        # @var int
        # @readonly
        self.createDate = createDate

        # Specifies when was the Asset Struct Meta last updated. Date and time represented as epoch.
        # @var int
        # @readonly
        self.updateDate = updateDate

        # Is inherited
        # @var bool
        self.isInherited = isInherited

        # Is Location Tag
        # @var bool
        self.isLocationTag = isLocationTag

        # suppressed Order, ascending
        # @var int
        self.suppressedOrder = suppressedOrder

        # Case sensitive alias value
        # @var string
        self.aliasName = aliasName


    PROPERTY_LOADERS = {
        'assetStructId': getXmlNodeInt, 
        'metaId': getXmlNodeInt, 
        'ingestReferencePath': getXmlNodeText, 
        'protectFromIngest': getXmlNodeBool, 
        'defaultIngestValue': getXmlNodeText, 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
        'isInherited': getXmlNodeBool, 
        'isLocationTag': getXmlNodeBool, 
        'suppressedOrder': getXmlNodeInt, 
        'aliasName': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetStructMeta.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAssetStructMeta")
        kparams.addStringIfDefined("ingestReferencePath", self.ingestReferencePath)
        kparams.addBoolIfDefined("protectFromIngest", self.protectFromIngest)
        kparams.addStringIfDefined("defaultIngestValue", self.defaultIngestValue)
        kparams.addBoolIfDefined("isInherited", self.isInherited)
        kparams.addBoolIfDefined("isLocationTag", self.isLocationTag)
        kparams.addIntIfDefined("suppressedOrder", self.suppressedOrder)
        kparams.addStringIfDefined("aliasName", self.aliasName)
        return kparams

    def getAssetStructId(self):
        return self.assetStructId

    def getMetaId(self):
        return self.metaId

    def getIngestReferencePath(self):
        return self.ingestReferencePath

    def setIngestReferencePath(self, newIngestReferencePath):
        self.ingestReferencePath = newIngestReferencePath

    def getProtectFromIngest(self):
        return self.protectFromIngest

    def setProtectFromIngest(self, newProtectFromIngest):
        self.protectFromIngest = newProtectFromIngest

    def getDefaultIngestValue(self):
        return self.defaultIngestValue

    def setDefaultIngestValue(self, newDefaultIngestValue):
        self.defaultIngestValue = newDefaultIngestValue

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate

    def getIsInherited(self):
        return self.isInherited

    def setIsInherited(self, newIsInherited):
        self.isInherited = newIsInherited

    def getIsLocationTag(self):
        return self.isLocationTag

    def setIsLocationTag(self, newIsLocationTag):
        self.isLocationTag = newIsLocationTag

    def getSuppressedOrder(self):
        return self.suppressedOrder

    def setSuppressedOrder(self, newSuppressedOrder):
        self.suppressedOrder = newSuppressedOrder

    def getAliasName(self):
        return self.aliasName

    def setAliasName(self, newAliasName):
        self.aliasName = newAliasName


# @package Kaltura
# @subpackage Client
class KalturaAssetStructMetaListResponse(KalturaListResponse):
    """Asset Struct Metas list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of asset struct metas
        # @var array of KalturaAssetStructMeta
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaAssetStructMeta'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetStructMetaListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaAssetStructMetaListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaBookmarkListResponse(KalturaListResponse):
    """List of assets and their bookmarks"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Assets
        # @var array of KalturaBookmark
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaBookmark'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBookmarkListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaBookmarkListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaCategoryItemListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of CategoryItem
        # @var array of KalturaCategoryItem
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaCategoryItem'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryItemListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaCategoryItemListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaCategoryVersionListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of objects
        # @var array of KalturaCategoryVersion
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaCategoryVersion'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryVersionListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaCategoryVersionListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaChannelListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of channels
        # @var array of KalturaChannel
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaChannel'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaChannelListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaChannelListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaImage(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            version=NotImplemented,
            imageTypeId=NotImplemented,
            imageTypeName=NotImplemented,
            imageObjectId=NotImplemented,
            imageObjectType=NotImplemented,
            status=NotImplemented,
            url=NotImplemented,
            contentId=NotImplemented,
            isDefault=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Image ID
        # @var int
        # @readonly
        self.id = id

        # Image version
        # @var string
        # @readonly
        self.version = version

        # Image type ID
        # @var int
        self.imageTypeId = imageTypeId

        # Image type Name
        # @var string
        self.imageTypeName = imageTypeName

        # ID of the object the image is related to
        # @var int
        self.imageObjectId = imageObjectId

        # Type of the object the image is related to
        # @var KalturaImageObjectType
        self.imageObjectType = imageObjectType

        # Image content status
        # @var KalturaImageStatus
        # @readonly
        self.status = status

        # Image URL
        # @var string
        # @readonly
        self.url = url

        # Image content ID
        # @var string
        # @readonly
        self.contentId = contentId

        # Specifies if the image is default for atleast one image type.
        # @var bool
        # @readonly
        self.isDefault = isDefault


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'version': getXmlNodeText, 
        'imageTypeId': getXmlNodeInt, 
        'imageTypeName': getXmlNodeText, 
        'imageObjectId': getXmlNodeInt, 
        'imageObjectType': (KalturaEnumsFactory.createString, "KalturaImageObjectType"), 
        'status': (KalturaEnumsFactory.createString, "KalturaImageStatus"), 
        'url': getXmlNodeText, 
        'contentId': getXmlNodeText, 
        'isDefault': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaImage.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaImage")
        kparams.addIntIfDefined("imageTypeId", self.imageTypeId)
        kparams.addStringIfDefined("imageTypeName", self.imageTypeName)
        kparams.addIntIfDefined("imageObjectId", self.imageObjectId)
        kparams.addStringEnumIfDefined("imageObjectType", self.imageObjectType)
        return kparams

    def getId(self):
        return self.id

    def getVersion(self):
        return self.version

    def getImageTypeId(self):
        return self.imageTypeId

    def setImageTypeId(self, newImageTypeId):
        self.imageTypeId = newImageTypeId

    def getImageTypeName(self):
        return self.imageTypeName

    def setImageTypeName(self, newImageTypeName):
        self.imageTypeName = newImageTypeName

    def getImageObjectId(self):
        return self.imageObjectId

    def setImageObjectId(self, newImageObjectId):
        self.imageObjectId = newImageObjectId

    def getImageObjectType(self):
        return self.imageObjectType

    def setImageObjectType(self, newImageObjectType):
        self.imageObjectType = newImageObjectType

    def getStatus(self):
        return self.status

    def getUrl(self):
        return self.url

    def getContentId(self):
        return self.contentId

    def getIsDefault(self):
        return self.isDefault


# @package Kaltura
# @subpackage Client
class KalturaImageListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of images
        # @var array of KalturaImage
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaImage'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaImageListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaImageListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaImageType(KalturaObjectBase):
    """Image type"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            ratioId=NotImplemented,
            helpText=NotImplemented,
            defaultImageId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Image type ID
        # @var int
        # @readonly
        self.id = id

        # Name
        # @var string
        self.name = name

        # System name
        # @var string
        self.systemName = systemName

        # Ration ID
        # @var int
        self.ratioId = ratioId

        # Help text
        # @var string
        self.helpText = helpText

        # Default image ID
        # @var int
        self.defaultImageId = defaultImageId


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'ratioId': getXmlNodeInt, 
        'helpText': getXmlNodeText, 
        'defaultImageId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaImageType.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaImageType")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("systemName", self.systemName)
        kparams.addIntIfDefined("ratioId", self.ratioId)
        kparams.addStringIfDefined("helpText", self.helpText)
        kparams.addIntIfDefined("defaultImageId", self.defaultImageId)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getRatioId(self):
        return self.ratioId

    def setRatioId(self, newRatioId):
        self.ratioId = newRatioId

    def getHelpText(self):
        return self.helpText

    def setHelpText(self, newHelpText):
        self.helpText = newHelpText

    def getDefaultImageId(self):
        return self.defaultImageId

    def setDefaultImageId(self, newDefaultImageId):
        self.defaultImageId = newDefaultImageId


# @package Kaltura
# @subpackage Client
class KalturaImageTypeListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of partner image types
        # @var array of KalturaImageType
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaImageType'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaImageTypeListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaImageTypeListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaLabel(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            value=NotImplemented,
            entityAttribute=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Label identifier
        # @var int
        # @readonly
        self.id = id

        # Label value. It must be unique in the context of entityAttribute
        # @var string
        self.value = value

        # Identifier of entity to which label belongs
        # @var KalturaEntityAttribute
        # @insertonly
        self.entityAttribute = entityAttribute


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'value': getXmlNodeText, 
        'entityAttribute': (KalturaEnumsFactory.createString, "KalturaEntityAttribute"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLabel.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLabel")
        kparams.addStringIfDefined("value", self.value)
        kparams.addStringEnumIfDefined("entityAttribute", self.entityAttribute)
        return kparams

    def getId(self):
        return self.id

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue

    def getEntityAttribute(self):
        return self.entityAttribute

    def setEntityAttribute(self, newEntityAttribute):
        self.entityAttribute = newEntityAttribute


# @package Kaltura
# @subpackage Client
class KalturaLabelListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # List of labels
        # @var array of KalturaLabel
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaLabel'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLabelListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaLabelListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaLineupChannelAssetListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of objects
        # @var array of KalturaLineupChannelAsset
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaLineupChannelAsset'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLineupChannelAssetListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaLineupChannelAssetListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaMediaFileDynamicData(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            mediaFileTypeId=NotImplemented,
            mediaFileTypeKeyName=NotImplemented,
            value=NotImplemented):
        KalturaObjectBase.__init__(self)

        # An integer representing the identifier of the value.
        # @var int
        self.id = id

        # An integer representing the the mediaFileType holding the keys for which the values should be stored.
        # @var int
        self.mediaFileTypeId = mediaFileTypeId

        # A string representing the key name within the mediaFileType that identifies the list corresponding
        #             to that key name.
        # @var string
        self.mediaFileTypeKeyName = mediaFileTypeKeyName

        # Dynamic data value
        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'mediaFileTypeId': getXmlNodeInt, 
        'mediaFileTypeKeyName': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaFileDynamicData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaMediaFileDynamicData")
        kparams.addIntIfDefined("id", self.id)
        kparams.addIntIfDefined("mediaFileTypeId", self.mediaFileTypeId)
        kparams.addStringIfDefined("mediaFileTypeKeyName", self.mediaFileTypeKeyName)
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getMediaFileTypeId(self):
        return self.mediaFileTypeId

    def setMediaFileTypeId(self, newMediaFileTypeId):
        self.mediaFileTypeId = newMediaFileTypeId

    def getMediaFileTypeKeyName(self):
        return self.mediaFileTypeKeyName

    def setMediaFileTypeKeyName(self, newMediaFileTypeKeyName):
        self.mediaFileTypeKeyName = newMediaFileTypeKeyName

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaMediaFileDynamicDataListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of media-file types
        # @var array of KalturaMediaFileDynamicData
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaMediaFileDynamicData'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaFileDynamicDataListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaMediaFileDynamicDataListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaMediaFileListResponse(KalturaListResponse):
    """Media-file list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of media-file types
        # @var array of KalturaMediaFile
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaMediaFile'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaFileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaMediaFileListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaMediaFileType(KalturaObjectBase):
    """Media-file type"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            status=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            isTrailer=NotImplemented,
            streamerType=NotImplemented,
            drmProfileId=NotImplemented,
            quality=NotImplemented,
            videoCodecs=NotImplemented,
            audioCodecs=NotImplemented,
            dynamicDataKeys=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Unique identifier
        # @var int
        # @readonly
        self.id = id

        # Unique name
        # @var string
        self.name = name

        # Unique description
        # @var string
        self.description = description

        # Indicates if media-file type is active or disabled
        # @var bool
        self.status = status

        # Specifies when was the type was created. Date and time represented as epoch.
        # @var int
        # @readonly
        self.createDate = createDate

        # Specifies when was the type last updated. Date and time represented as epoch.
        # @var int
        # @readonly
        self.updateDate = updateDate

        # Specifies whether playback as trailer is allowed
        # @var bool
        # @insertonly
        self.isTrailer = isTrailer

        # Defines playback streamer type
        # @var KalturaMediaFileStreamerType
        # @insertonly
        self.streamerType = streamerType

        # DRM adapter-profile identifier, use -1 for uDRM, 0 for no DRM.
        # @var int
        # @insertonly
        self.drmProfileId = drmProfileId

        # Media file type quality
        # @var KalturaMediaFileTypeQuality
        self.quality = quality

        # List of comma separated video codecs
        # @var string
        self.videoCodecs = videoCodecs

        # List of comma separated audio codecs
        # @var string
        self.audioCodecs = audioCodecs

        # List of comma separated keys allowed to be used as KalturaMediaFile&#39;s dynamic data keys
        # @var string
        self.dynamicDataKeys = dynamicDataKeys


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'description': getXmlNodeText, 
        'status': getXmlNodeBool, 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
        'isTrailer': getXmlNodeBool, 
        'streamerType': (KalturaEnumsFactory.createString, "KalturaMediaFileStreamerType"), 
        'drmProfileId': getXmlNodeInt, 
        'quality': (KalturaEnumsFactory.createString, "KalturaMediaFileTypeQuality"), 
        'videoCodecs': getXmlNodeText, 
        'audioCodecs': getXmlNodeText, 
        'dynamicDataKeys': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaFileType.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaMediaFileType")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("description", self.description)
        kparams.addBoolIfDefined("status", self.status)
        kparams.addBoolIfDefined("isTrailer", self.isTrailer)
        kparams.addStringEnumIfDefined("streamerType", self.streamerType)
        kparams.addIntIfDefined("drmProfileId", self.drmProfileId)
        kparams.addStringEnumIfDefined("quality", self.quality)
        kparams.addStringIfDefined("videoCodecs", self.videoCodecs)
        kparams.addStringIfDefined("audioCodecs", self.audioCodecs)
        kparams.addStringIfDefined("dynamicDataKeys", self.dynamicDataKeys)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate

    def getIsTrailer(self):
        return self.isTrailer

    def setIsTrailer(self, newIsTrailer):
        self.isTrailer = newIsTrailer

    def getStreamerType(self):
        return self.streamerType

    def setStreamerType(self, newStreamerType):
        self.streamerType = newStreamerType

    def getDrmProfileId(self):
        return self.drmProfileId

    def setDrmProfileId(self, newDrmProfileId):
        self.drmProfileId = newDrmProfileId

    def getQuality(self):
        return self.quality

    def setQuality(self, newQuality):
        self.quality = newQuality

    def getVideoCodecs(self):
        return self.videoCodecs

    def setVideoCodecs(self, newVideoCodecs):
        self.videoCodecs = newVideoCodecs

    def getAudioCodecs(self):
        return self.audioCodecs

    def setAudioCodecs(self, newAudioCodecs):
        self.audioCodecs = newAudioCodecs

    def getDynamicDataKeys(self):
        return self.dynamicDataKeys

    def setDynamicDataKeys(self, newDynamicDataKeys):
        self.dynamicDataKeys = newDynamicDataKeys


# @package Kaltura
# @subpackage Client
class KalturaMediaFileTypeListResponse(KalturaListResponse):
    """Media-file types list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of media-file types
        # @var array of KalturaMediaFileType
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaMediaFileType'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaFileTypeListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaMediaFileTypeListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaRatio(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            height=NotImplemented,
            width=NotImplemented,
            precisionPrecentage=NotImplemented):
        KalturaObjectBase.__init__(self)

        # ID
        # @var int
        # @readonly
        self.id = id

        # Name
        # @var string
        # @insertonly
        self.name = name

        # Height
        # @var int
        # @insertonly
        self.height = height

        # Width
        # @var int
        # @insertonly
        self.width = width

        # Accepted error margin precentage of an image uploaded for this ratio
        #             0 - no validation, everything accepted
        # @var int
        self.precisionPrecentage = precisionPrecentage


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'height': getXmlNodeInt, 
        'width': getXmlNodeInt, 
        'precisionPrecentage': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRatio.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaRatio")
        kparams.addStringIfDefined("name", self.name)
        kparams.addIntIfDefined("height", self.height)
        kparams.addIntIfDefined("width", self.width)
        kparams.addIntIfDefined("precisionPrecentage", self.precisionPrecentage)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getHeight(self):
        return self.height

    def setHeight(self, newHeight):
        self.height = newHeight

    def getWidth(self):
        return self.width

    def setWidth(self, newWidth):
        self.width = newWidth

    def getPrecisionPrecentage(self):
        return self.precisionPrecentage

    def setPrecisionPrecentage(self, newPrecisionPrecentage):
        self.precisionPrecentage = newPrecisionPrecentage


# @package Kaltura
# @subpackage Client
class KalturaRatioListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of ratios
        # @var array of KalturaRatio
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaRatio'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRatioListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaRatioListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaStreamingDevice(KalturaObjectBase):
    """Watch history asset info"""

    def __init__(self,
            asset=NotImplemented,
            userId=NotImplemented,
            udid=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Asset
        # @var KalturaSlimAsset
        # @readonly
        self.asset = asset

        # User identifier
        # @var string
        # @readonly
        self.userId = userId

        # Device UDID
        # @var string
        # @insertonly
        self.udid = udid


    PROPERTY_LOADERS = {
        'asset': (KalturaObjectFactory.create, 'KalturaSlimAsset'), 
        'userId': getXmlNodeText, 
        'udid': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaStreamingDevice.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaStreamingDevice")
        kparams.addStringIfDefined("udid", self.udid)
        return kparams

    def getAsset(self):
        return self.asset

    def getUserId(self):
        return self.userId

    def getUdid(self):
        return self.udid

    def setUdid(self, newUdid):
        self.udid = newUdid


# @package Kaltura
# @subpackage Client
class KalturaStreamingDeviceListResponse(KalturaListResponse):
    """Watch history asset wrapper"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Streaming devices
        # @var array of KalturaStreamingDevice
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaStreamingDevice'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaStreamingDeviceListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaStreamingDeviceListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaTag(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            type=NotImplemented,
            tag=NotImplemented,
            multilingualTag=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Tag id
        # @var int
        # @readonly
        self.id = id

        # Tag Type
        # @var int
        self.type = type

        # Tag
        # @var string
        # @readonly
        self.tag = tag

        # Tag
        # @var array of KalturaTranslationToken
        self.multilingualTag = multilingualTag


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'type': getXmlNodeInt, 
        'tag': getXmlNodeText, 
        'multilingualTag': (KalturaObjectFactory.createArray, 'KalturaTranslationToken'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTag.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaTag")
        kparams.addIntIfDefined("type", self.type)
        kparams.addArrayIfDefined("multilingualTag", self.multilingualTag)
        return kparams

    def getId(self):
        return self.id

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getTag(self):
        return self.tag

    def getMultilingualTag(self):
        return self.multilingualTag

    def setMultilingualTag(self, newMultilingualTag):
        self.multilingualTag = newMultilingualTag


# @package Kaltura
# @subpackage Client
class KalturaTagListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of partner tags
        # @var array of KalturaTag
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaTag'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTagListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaTagListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaSearchPriorityCriteria(KalturaObjectBase):
    def __init__(self,
            type=NotImplemented,
            value=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Criterion type
        # @var KalturaSearchPriorityCriteriaType
        self.type = type

        # Condition
        #             KSQL has to have no more than 10 conditions. Text, boolean, enum and tag fields can be used only with = operator, numeric and datetime fields - only with &lt;, = and &gt; operators.
        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'type': (KalturaEnumsFactory.createString, "KalturaSearchPriorityCriteriaType"), 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchPriorityCriteria.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSearchPriorityCriteria")
        kparams.addStringEnumIfDefined("type", self.type)
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaSearchPriorityGroup(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            multilingualName=NotImplemented,
            criteria=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Identifier
        # @var int
        # @readonly
        self.id = id

        # Name
        # @var string
        # @readonly
        self.name = name

        # Name
        # @var array of KalturaTranslationToken
        self.multilingualName = multilingualName

        # Search criterion
        # @var KalturaSearchPriorityCriteria
        self.criteria = criteria


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'multilingualName': (KalturaObjectFactory.createArray, 'KalturaTranslationToken'), 
        'criteria': (KalturaObjectFactory.create, 'KalturaSearchPriorityCriteria'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchPriorityGroup.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSearchPriorityGroup")
        kparams.addArrayIfDefined("multilingualName", self.multilingualName)
        kparams.addObjectIfDefined("criteria", self.criteria)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def getMultilingualName(self):
        return self.multilingualName

    def setMultilingualName(self, newMultilingualName):
        self.multilingualName = newMultilingualName

    def getCriteria(self):
        return self.criteria

    def setCriteria(self, newCriteria):
        self.criteria = newCriteria


# @package Kaltura
# @subpackage Client
class KalturaSearchPriorityGroupListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # List of search priority groups
        # @var array of KalturaSearchPriorityGroup
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaSearchPriorityGroup'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchPriorityGroupListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaSearchPriorityGroupListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaSuspendSettings(KalturaObjectBase):
    """Suspend Settings"""

    def __init__(self,
            revokeEntitlements=NotImplemented,
            stopRenew=NotImplemented):
        KalturaObjectBase.__init__(self)

        # revoke entitlements
        # @var bool
        self.revokeEntitlements = revokeEntitlements

        # stop renew
        # @var bool
        self.stopRenew = stopRenew


    PROPERTY_LOADERS = {
        'revokeEntitlements': getXmlNodeBool, 
        'stopRenew': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSuspendSettings.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSuspendSettings")
        kparams.addBoolIfDefined("revokeEntitlements", self.revokeEntitlements)
        kparams.addBoolIfDefined("stopRenew", self.stopRenew)
        return kparams

    def getRevokeEntitlements(self):
        return self.revokeEntitlements

    def setRevokeEntitlements(self, newRevokeEntitlements):
        self.revokeEntitlements = newRevokeEntitlements

    def getStopRenew(self):
        return self.stopRenew

    def setStopRenew(self, newStopRenew):
        self.stopRenew = newStopRenew


# @package Kaltura
# @subpackage Client
class KalturaHouseholdPaymentGateway(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            isDefault=NotImplemented,
            selectedBy=NotImplemented,
            suspendSettings=NotImplemented):
        KalturaObjectBase.__init__(self)

        # payment gateway id
        # @var int
        # @readonly
        self.id = id

        # payment gateway name
        # @var string
        self.name = name

        # Payment gateway default (true/false)
        # @var bool
        self.isDefault = isDefault

        # distinction payment gateway selected by account or household
        # @var KalturaHouseholdPaymentGatewaySelectedBy
        self.selectedBy = selectedBy

        # suspend settings
        # @var KalturaSuspendSettings
        # @readonly
        self.suspendSettings = suspendSettings


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'isDefault': getXmlNodeBool, 
        'selectedBy': (KalturaEnumsFactory.createString, "KalturaHouseholdPaymentGatewaySelectedBy"), 
        'suspendSettings': (KalturaObjectFactory.create, 'KalturaSuspendSettings'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdPaymentGateway.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaHouseholdPaymentGateway")
        kparams.addStringIfDefined("name", self.name)
        kparams.addBoolIfDefined("isDefault", self.isDefault)
        kparams.addStringEnumIfDefined("selectedBy", self.selectedBy)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getIsDefault(self):
        return self.isDefault

    def setIsDefault(self, newIsDefault):
        self.isDefault = newIsDefault

    def getSelectedBy(self):
        return self.selectedBy

    def setSelectedBy(self, newSelectedBy):
        self.selectedBy = newSelectedBy

    def getSuspendSettings(self):
        return self.suspendSettings


# @package Kaltura
# @subpackage Client
class KalturaHouseholdPaymentGatewayListResponse(KalturaListResponse):
    """List of household payment gateways."""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Follow data list
        # @var array of KalturaHouseholdPaymentGateway
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaHouseholdPaymentGateway'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdPaymentGatewayListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaHouseholdPaymentGatewayListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaHouseholdPaymentMethod(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            externalId=NotImplemented,
            paymentGatewayId=NotImplemented,
            details=NotImplemented,
            isDefault=NotImplemented,
            paymentMethodProfileId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Household payment method identifier (internal)
        # @var int
        # @readonly
        self.id = id

        # External identifier for the household payment method
        # @var string
        # @insertonly
        self.externalId = externalId

        # Payment-gateway identifier
        # @var int
        self.paymentGatewayId = paymentGatewayId

        # Description of the payment method details
        # @var string
        self.details = details

        # indicates whether the payment method is set as default for the household
        # @var bool
        # @readonly
        self.isDefault = isDefault

        # Payment method profile identifier
        # @var int
        self.paymentMethodProfileId = paymentMethodProfileId


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'externalId': getXmlNodeText, 
        'paymentGatewayId': getXmlNodeInt, 
        'details': getXmlNodeText, 
        'isDefault': getXmlNodeBool, 
        'paymentMethodProfileId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdPaymentMethod.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaHouseholdPaymentMethod")
        kparams.addStringIfDefined("externalId", self.externalId)
        kparams.addIntIfDefined("paymentGatewayId", self.paymentGatewayId)
        kparams.addStringIfDefined("details", self.details)
        kparams.addIntIfDefined("paymentMethodProfileId", self.paymentMethodProfileId)
        return kparams

    def getId(self):
        return self.id

    def getExternalId(self):
        return self.externalId

    def setExternalId(self, newExternalId):
        self.externalId = newExternalId

    def getPaymentGatewayId(self):
        return self.paymentGatewayId

    def setPaymentGatewayId(self, newPaymentGatewayId):
        self.paymentGatewayId = newPaymentGatewayId

    def getDetails(self):
        return self.details

    def setDetails(self, newDetails):
        self.details = newDetails

    def getIsDefault(self):
        return self.isDefault

    def getPaymentMethodProfileId(self):
        return self.paymentMethodProfileId

    def setPaymentMethodProfileId(self, newPaymentMethodProfileId):
        self.paymentMethodProfileId = newPaymentMethodProfileId


# @package Kaltura
# @subpackage Client
class KalturaHouseholdPaymentMethodListResponse(KalturaListResponse):
    """List of household payment methods."""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Follow data list
        # @var array of KalturaHouseholdPaymentMethod
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaHouseholdPaymentMethod'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdPaymentMethodListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaHouseholdPaymentMethodListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaPaymentGatewayBaseProfile(KalturaObjectBase):
    """Payment gateway base profile"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            isDefault=NotImplemented,
            selectedBy=NotImplemented):
        KalturaObjectBase.__init__(self)

        # payment gateway id
        # @var int
        # @readonly
        self.id = id

        # payment gateway name
        # @var string
        self.name = name

        # Payment gateway default (true/false)
        # @var bool
        self.isDefault = isDefault

        # distinction payment gateway selected by account or household
        # @var KalturaHouseholdPaymentGatewaySelectedBy
        self.selectedBy = selectedBy


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'isDefault': getXmlNodeBool, 
        'selectedBy': (KalturaEnumsFactory.createString, "KalturaHouseholdPaymentGatewaySelectedBy"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPaymentGatewayBaseProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPaymentGatewayBaseProfile")
        kparams.addStringIfDefined("name", self.name)
        kparams.addBoolIfDefined("isDefault", self.isDefault)
        kparams.addStringEnumIfDefined("selectedBy", self.selectedBy)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getIsDefault(self):
        return self.isDefault

    def setIsDefault(self, newIsDefault):
        self.isDefault = newIsDefault

    def getSelectedBy(self):
        return self.selectedBy

    def setSelectedBy(self, newSelectedBy):
        self.selectedBy = newSelectedBy


# @package Kaltura
# @subpackage Client
class KalturaPaymentGatewayProfile(KalturaPaymentGatewayBaseProfile):
    """Payment gateway profile"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            isDefault=NotImplemented,
            selectedBy=NotImplemented,
            isActive=NotImplemented,
            adapterUrl=NotImplemented,
            transactUrl=NotImplemented,
            statusUrl=NotImplemented,
            renewUrl=NotImplemented,
            paymentGatewaySettings=NotImplemented,
            externalIdentifier=NotImplemented,
            pendingInterval=NotImplemented,
            pendingRetries=NotImplemented,
            sharedSecret=NotImplemented,
            renewIntervalMinutes=NotImplemented,
            renewStartMinutes=NotImplemented,
            externalVerification=NotImplemented,
            isAsyncPolicy=NotImplemented):
        KalturaPaymentGatewayBaseProfile.__init__(self,
            id,
            name,
            isDefault,
            selectedBy)

        # Payment gateway is active status
        # @var int
        self.isActive = isActive

        # Payment gateway adapter URL
        # @var string
        self.adapterUrl = adapterUrl

        # Payment gateway transact URL
        # @var string
        self.transactUrl = transactUrl

        # Payment gateway status URL
        # @var string
        self.statusUrl = statusUrl

        # Payment gateway renew URL
        # @var string
        self.renewUrl = renewUrl

        # Payment gateway extra parameters
        # @var map
        self.paymentGatewaySettings = paymentGatewaySettings

        # Payment gateway external identifier
        # @var string
        self.externalIdentifier = externalIdentifier

        # Pending Interval in minutes
        # @var int
        self.pendingInterval = pendingInterval

        # Pending Retries
        # @var int
        self.pendingRetries = pendingRetries

        # Shared Secret
        # @var string
        self.sharedSecret = sharedSecret

        # Renew Interval Minutes
        # @var int
        self.renewIntervalMinutes = renewIntervalMinutes

        # Renew Start Minutes
        # @var int
        self.renewStartMinutes = renewStartMinutes

        # Payment gateway external verification
        # @var bool
        self.externalVerification = externalVerification

        # Payment gateway - Support asynchronous purchase
        # @var bool
        self.isAsyncPolicy = isAsyncPolicy


    PROPERTY_LOADERS = {
        'isActive': getXmlNodeInt, 
        'adapterUrl': getXmlNodeText, 
        'transactUrl': getXmlNodeText, 
        'statusUrl': getXmlNodeText, 
        'renewUrl': getXmlNodeText, 
        'paymentGatewaySettings': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
        'externalIdentifier': getXmlNodeText, 
        'pendingInterval': getXmlNodeInt, 
        'pendingRetries': getXmlNodeInt, 
        'sharedSecret': getXmlNodeText, 
        'renewIntervalMinutes': getXmlNodeInt, 
        'renewStartMinutes': getXmlNodeInt, 
        'externalVerification': getXmlNodeBool, 
        'isAsyncPolicy': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaPaymentGatewayBaseProfile.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPaymentGatewayProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPaymentGatewayBaseProfile.toParams(self)
        kparams.put("objectType", "KalturaPaymentGatewayProfile")
        kparams.addIntIfDefined("isActive", self.isActive)
        kparams.addStringIfDefined("adapterUrl", self.adapterUrl)
        kparams.addStringIfDefined("transactUrl", self.transactUrl)
        kparams.addStringIfDefined("statusUrl", self.statusUrl)
        kparams.addStringIfDefined("renewUrl", self.renewUrl)
        kparams.addMapIfDefined("paymentGatewaySettings", self.paymentGatewaySettings)
        kparams.addStringIfDefined("externalIdentifier", self.externalIdentifier)
        kparams.addIntIfDefined("pendingInterval", self.pendingInterval)
        kparams.addIntIfDefined("pendingRetries", self.pendingRetries)
        kparams.addStringIfDefined("sharedSecret", self.sharedSecret)
        kparams.addIntIfDefined("renewIntervalMinutes", self.renewIntervalMinutes)
        kparams.addIntIfDefined("renewStartMinutes", self.renewStartMinutes)
        kparams.addBoolIfDefined("externalVerification", self.externalVerification)
        kparams.addBoolIfDefined("isAsyncPolicy", self.isAsyncPolicy)
        return kparams

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive

    def getAdapterUrl(self):
        return self.adapterUrl

    def setAdapterUrl(self, newAdapterUrl):
        self.adapterUrl = newAdapterUrl

    def getTransactUrl(self):
        return self.transactUrl

    def setTransactUrl(self, newTransactUrl):
        self.transactUrl = newTransactUrl

    def getStatusUrl(self):
        return self.statusUrl

    def setStatusUrl(self, newStatusUrl):
        self.statusUrl = newStatusUrl

    def getRenewUrl(self):
        return self.renewUrl

    def setRenewUrl(self, newRenewUrl):
        self.renewUrl = newRenewUrl

    def getPaymentGatewaySettings(self):
        return self.paymentGatewaySettings

    def setPaymentGatewaySettings(self, newPaymentGatewaySettings):
        self.paymentGatewaySettings = newPaymentGatewaySettings

    def getExternalIdentifier(self):
        return self.externalIdentifier

    def setExternalIdentifier(self, newExternalIdentifier):
        self.externalIdentifier = newExternalIdentifier

    def getPendingInterval(self):
        return self.pendingInterval

    def setPendingInterval(self, newPendingInterval):
        self.pendingInterval = newPendingInterval

    def getPendingRetries(self):
        return self.pendingRetries

    def setPendingRetries(self, newPendingRetries):
        self.pendingRetries = newPendingRetries

    def getSharedSecret(self):
        return self.sharedSecret

    def setSharedSecret(self, newSharedSecret):
        self.sharedSecret = newSharedSecret

    def getRenewIntervalMinutes(self):
        return self.renewIntervalMinutes

    def setRenewIntervalMinutes(self, newRenewIntervalMinutes):
        self.renewIntervalMinutes = newRenewIntervalMinutes

    def getRenewStartMinutes(self):
        return self.renewStartMinutes

    def setRenewStartMinutes(self, newRenewStartMinutes):
        self.renewStartMinutes = newRenewStartMinutes

    def getExternalVerification(self):
        return self.externalVerification

    def setExternalVerification(self, newExternalVerification):
        self.externalVerification = newExternalVerification

    def getIsAsyncPolicy(self):
        return self.isAsyncPolicy

    def setIsAsyncPolicy(self, newIsAsyncPolicy):
        self.isAsyncPolicy = newIsAsyncPolicy


# @package Kaltura
# @subpackage Client
class KalturaPaymentGatewayProfileListResponse(KalturaListResponse):
    """PaymentGatewayProfile list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of payment-gateway profiles
        # @var array of KalturaPaymentGatewayProfile
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaPaymentGatewayProfile'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPaymentGatewayProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaPaymentGatewayProfileListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaPaymentMethodProfile(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            paymentGatewayId=NotImplemented,
            name=NotImplemented,
            allowMultiInstance=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Payment method identifier (internal)
        # @var int
        # @readonly
        self.id = id

        # Payment gateway identifier (internal)
        # @var int
        self.paymentGatewayId = paymentGatewayId

        # Payment method name
        # @var string
        self.name = name

        # Indicates whether the payment method allow multiple instances
        # @var bool
        self.allowMultiInstance = allowMultiInstance


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'paymentGatewayId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'allowMultiInstance': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPaymentMethodProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPaymentMethodProfile")
        kparams.addIntIfDefined("paymentGatewayId", self.paymentGatewayId)
        kparams.addStringIfDefined("name", self.name)
        kparams.addBoolIfDefined("allowMultiInstance", self.allowMultiInstance)
        return kparams

    def getId(self):
        return self.id

    def getPaymentGatewayId(self):
        return self.paymentGatewayId

    def setPaymentGatewayId(self, newPaymentGatewayId):
        self.paymentGatewayId = newPaymentGatewayId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getAllowMultiInstance(self):
        return self.allowMultiInstance

    def setAllowMultiInstance(self, newAllowMultiInstance):
        self.allowMultiInstance = newAllowMultiInstance


# @package Kaltura
# @subpackage Client
class KalturaPaymentMethodProfileListResponse(KalturaListResponse):
    """List of payment method profiles."""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Payment method profiles list
        # @var array of KalturaPaymentMethodProfile
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaPaymentMethodProfile'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPaymentMethodProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaPaymentMethodProfileListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaProductMarkup(KalturaObjectBase):
    """Product Markup"""

    def __init__(self,
            productId=NotImplemented,
            productType=NotImplemented,
            isEntitled=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Product Id
        # @var int
        # @readonly
        self.productId = productId

        # Product Type
        # @var KalturaTransactionType
        # @readonly
        self.productType = productType

        # Is Entitled to this product
        # @var bool
        # @readonly
        self.isEntitled = isEntitled


    PROPERTY_LOADERS = {
        'productId': getXmlNodeInt, 
        'productType': (KalturaEnumsFactory.createString, "KalturaTransactionType"), 
        'isEntitled': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaProductMarkup.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaProductMarkup")
        return kparams

    def getProductId(self):
        return self.productId

    def getProductType(self):
        return self.productType

    def getIsEntitled(self):
        return self.isEntitled


# @package Kaltura
# @subpackage Client
class KalturaAssetPersonalMarkup(KalturaObjectBase):
    """Asset Personal Markup"""

    def __init__(self,
            assetId=NotImplemented,
            assetType=NotImplemented,
            products=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Asset Id
        # @var int
        # @readonly
        self.assetId = assetId

        # Asset Type
        # @var KalturaAssetType
        # @readonly
        self.assetType = assetType

        # all related asset&#39;s Product Markups
        # @var array of KalturaProductMarkup
        self.products = products


    PROPERTY_LOADERS = {
        'assetId': getXmlNodeInt, 
        'assetType': (KalturaEnumsFactory.createString, "KalturaAssetType"), 
        'products': (KalturaObjectFactory.createArray, 'KalturaProductMarkup'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetPersonalMarkup.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAssetPersonalMarkup")
        kparams.addArrayIfDefined("products", self.products)
        return kparams

    def getAssetId(self):
        return self.assetId

    def getAssetType(self):
        return self.assetType

    def getProducts(self):
        return self.products

    def setProducts(self, newProducts):
        self.products = newProducts


# @package Kaltura
# @subpackage Client
class KalturaAssetPersonalMarkupListResponse(KalturaListResponse):
    """Asset Personal Markup"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Adapters
        # @var array of KalturaAssetPersonalMarkup
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaAssetPersonalMarkup'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetPersonalMarkupListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaAssetPersonalMarkupListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaAssetRuleListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Asset rules
        # @var array of KalturaAssetRule
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaAssetRule'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetRuleListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaAssetRuleListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaAssetUserRuleListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Asset user rules
        # @var array of KalturaAssetUserRule
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaAssetUserRule'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetUserRuleListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaAssetUserRuleListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaBusinessModuleRuleListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Asset rules
        # @var array of KalturaBusinessModuleRule
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaBusinessModuleRule'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBusinessModuleRuleListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaBusinessModuleRuleListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaCampaignListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of Campaigns
        # @var array of KalturaCampaign
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaCampaign'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCampaignListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaCampaignListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaCDNAdapterProfile(KalturaObjectBase):
    """CDN Adapter"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            isActive=NotImplemented,
            adapterUrl=NotImplemented,
            baseUrl=NotImplemented,
            settings=NotImplemented,
            systemName=NotImplemented,
            sharedSecret=NotImplemented):
        KalturaObjectBase.__init__(self)

        # CDN adapter identifier
        # @var int
        # @readonly
        self.id = id

        # CDNR adapter name
        # @var string
        self.name = name

        # CDN adapter active status
        # @var bool
        self.isActive = isActive

        # CDN adapter URL
        # @var string
        self.adapterUrl = adapterUrl

        # CDN adapter base URL
        # @var string
        self.baseUrl = baseUrl

        # CDN adapter settings
        # @var map
        self.settings = settings

        # CDN adapter alias
        # @var string
        self.systemName = systemName

        # CDN shared secret
        # @var string
        # @readonly
        self.sharedSecret = sharedSecret


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'isActive': getXmlNodeBool, 
        'adapterUrl': getXmlNodeText, 
        'baseUrl': getXmlNodeText, 
        'settings': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
        'systemName': getXmlNodeText, 
        'sharedSecret': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCDNAdapterProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCDNAdapterProfile")
        kparams.addStringIfDefined("name", self.name)
        kparams.addBoolIfDefined("isActive", self.isActive)
        kparams.addStringIfDefined("adapterUrl", self.adapterUrl)
        kparams.addStringIfDefined("baseUrl", self.baseUrl)
        kparams.addMapIfDefined("settings", self.settings)
        kparams.addStringIfDefined("systemName", self.systemName)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive

    def getAdapterUrl(self):
        return self.adapterUrl

    def setAdapterUrl(self, newAdapterUrl):
        self.adapterUrl = newAdapterUrl

    def getBaseUrl(self):
        return self.baseUrl

    def setBaseUrl(self, newBaseUrl):
        self.baseUrl = newBaseUrl

    def getSettings(self):
        return self.settings

    def setSettings(self, newSettings):
        self.settings = newSettings

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getSharedSecret(self):
        return self.sharedSecret


# @package Kaltura
# @subpackage Client
class KalturaCDNAdapterProfileListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Adapters
        # @var array of KalturaCDNAdapterProfile
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaCDNAdapterProfile'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCDNAdapterProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaCDNAdapterProfileListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaCountryListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Countries
        # @var array of KalturaCountry
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaCountry'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCountryListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaCountryListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaCurrency(KalturaObjectBase):
    """Currency details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            code=NotImplemented,
            sign=NotImplemented,
            isDefault=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Identifier
        # @var int
        self.id = id

        # Currency name
        # @var string
        self.name = name

        # Currency code
        # @var string
        self.code = code

        # Currency Sign
        # @var string
        self.sign = sign

        # Is the default Currency of the account
        # @var bool
        self.isDefault = isDefault


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'code': getXmlNodeText, 
        'sign': getXmlNodeText, 
        'isDefault': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCurrency.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCurrency")
        kparams.addIntIfDefined("id", self.id)
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("code", self.code)
        kparams.addStringIfDefined("sign", self.sign)
        kparams.addBoolIfDefined("isDefault", self.isDefault)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getCode(self):
        return self.code

    def setCode(self, newCode):
        self.code = newCode

    def getSign(self):
        return self.sign

    def setSign(self, newSign):
        self.sign = newSign

    def getIsDefault(self):
        return self.isDefault

    def setIsDefault(self, newIsDefault):
        self.isDefault = newIsDefault


# @package Kaltura
# @subpackage Client
class KalturaCurrencyListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Currencies
        # @var array of KalturaCurrency
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaCurrency'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCurrencyListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaCurrencyListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaDeviceBrand(KalturaObjectBase):
    """Device brand details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            deviceFamilyid=NotImplemented,
            type=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Device brand identifier
        # @var int
        self.id = id

        # Device brand name
        # @var string
        self.name = name

        # Device family identifier
        # @var int
        self.deviceFamilyid = deviceFamilyid

        # Type of device family.
        #              if this device family belongs only to this group,
        #              otherwise.
        # @var KalturaDeviceBrandType
        # @readonly
        self.type = type


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'deviceFamilyid': getXmlNodeInt, 
        'type': (KalturaEnumsFactory.createString, "KalturaDeviceBrandType"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeviceBrand.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaDeviceBrand")
        kparams.addIntIfDefined("id", self.id)
        kparams.addStringIfDefined("name", self.name)
        kparams.addIntIfDefined("deviceFamilyid", self.deviceFamilyid)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getDeviceFamilyid(self):
        return self.deviceFamilyid

    def setDeviceFamilyid(self, newDeviceFamilyid):
        self.deviceFamilyid = newDeviceFamilyid

    def getType(self):
        return self.type


# @package Kaltura
# @subpackage Client
class KalturaDeviceBrandListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Device brands
        # @var array of KalturaDeviceBrand
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaDeviceBrand'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeviceBrandListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaDeviceBrandListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaDeviceFamilyListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Device families
        # @var array of KalturaDeviceFamily
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaDeviceFamily'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeviceFamilyListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaDeviceFamilyListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaDrmProfile(KalturaObjectBase):
    """DRM Adapter"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            isActive=NotImplemented,
            adapterUrl=NotImplemented,
            settings=NotImplemented,
            systemName=NotImplemented,
            sharedSecret=NotImplemented):
        KalturaObjectBase.__init__(self)

        # DRM adapter identifier
        # @var int
        # @readonly
        self.id = id

        # DRM adapter name
        # @var string
        self.name = name

        # DRM adapter active status
        # @var bool
        self.isActive = isActive

        # DRM adapter URL
        # @var string
        self.adapterUrl = adapterUrl

        # DRM adapter settings
        # @var string
        self.settings = settings

        # DRM adapter alias
        # @var string
        self.systemName = systemName

        # DRM shared secret
        # @var string
        # @readonly
        self.sharedSecret = sharedSecret


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'isActive': getXmlNodeBool, 
        'adapterUrl': getXmlNodeText, 
        'settings': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'sharedSecret': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDrmProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaDrmProfile")
        kparams.addStringIfDefined("name", self.name)
        kparams.addBoolIfDefined("isActive", self.isActive)
        kparams.addStringIfDefined("adapterUrl", self.adapterUrl)
        kparams.addStringIfDefined("settings", self.settings)
        kparams.addStringIfDefined("systemName", self.systemName)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive

    def getAdapterUrl(self):
        return self.adapterUrl

    def setAdapterUrl(self, newAdapterUrl):
        self.adapterUrl = newAdapterUrl

    def getSettings(self):
        return self.settings

    def setSettings(self, newSettings):
        self.settings = newSettings

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getSharedSecret(self):
        return self.sharedSecret


# @package Kaltura
# @subpackage Client
class KalturaDrmProfileListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Adapters
        # @var array of KalturaDrmProfile
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaDrmProfile'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDrmProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaDrmProfileListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaEventNotificationListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of objects
        # @var array of KalturaEventNotification
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaEventNotification'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEventNotificationListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaEventNotificationListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaExportTask(KalturaObjectBase):
    """Bulk export task"""

    def __init__(self,
            id=NotImplemented,
            alias=NotImplemented,
            name=NotImplemented,
            dataType=NotImplemented,
            filter=NotImplemented,
            exportType=NotImplemented,
            frequency=NotImplemented,
            notificationUrl=NotImplemented,
            isActive=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Task identifier
        # @var int
        # @readonly
        self.id = id

        # Alias for the task used to solicit an export using API
        # @var string
        self.alias = alias

        # Task display name
        # @var string
        self.name = name

        # The data type exported in this task
        # @var KalturaExportDataType
        self.dataType = dataType

        # Filter to apply on the export, utilize KSQL.
        #             Note: KSQL currently applies to media assets only. It cannot be used for USERS filtering
        # @var string
        self.filter = filter

        # Type of export batch - full or incremental
        # @var KalturaExportType
        self.exportType = exportType

        # How often the export should occur, reasonable minimum threshold should apply, configurable in minutes
        # @var int
        self.frequency = frequency

        # The URL for sending a notification when the task&#39;s export process is done
        # @var string
        self.notificationUrl = notificationUrl

        # Indicates if the task is active or not
        # @var bool
        self.isActive = isActive


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'alias': getXmlNodeText, 
        'name': getXmlNodeText, 
        'dataType': (KalturaEnumsFactory.createString, "KalturaExportDataType"), 
        'filter': getXmlNodeText, 
        'exportType': (KalturaEnumsFactory.createString, "KalturaExportType"), 
        'frequency': getXmlNodeInt, 
        'notificationUrl': getXmlNodeText, 
        'isActive': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaExportTask.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaExportTask")
        kparams.addStringIfDefined("alias", self.alias)
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringEnumIfDefined("dataType", self.dataType)
        kparams.addStringIfDefined("filter", self.filter)
        kparams.addStringEnumIfDefined("exportType", self.exportType)
        kparams.addIntIfDefined("frequency", self.frequency)
        kparams.addStringIfDefined("notificationUrl", self.notificationUrl)
        kparams.addBoolIfDefined("isActive", self.isActive)
        return kparams

    def getId(self):
        return self.id

    def getAlias(self):
        return self.alias

    def setAlias(self, newAlias):
        self.alias = newAlias

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getDataType(self):
        return self.dataType

    def setDataType(self, newDataType):
        self.dataType = newDataType

    def getFilter(self):
        return self.filter

    def setFilter(self, newFilter):
        self.filter = newFilter

    def getExportType(self):
        return self.exportType

    def setExportType(self, newExportType):
        self.exportType = newExportType

    def getFrequency(self):
        return self.frequency

    def setFrequency(self, newFrequency):
        self.frequency = newFrequency

    def getNotificationUrl(self):
        return self.notificationUrl

    def setNotificationUrl(self, newNotificationUrl):
        self.notificationUrl = newNotificationUrl

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive


# @package Kaltura
# @subpackage Client
class KalturaExportTaskListResponse(KalturaListResponse):
    """Export task list wrapper"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Export task items
        # @var array of KalturaExportTask
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaExportTask'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaExportTaskListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaExportTaskListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaChannelEnrichmentHolder(KalturaObjectBase):
    """Holder object for channel enrichment enum"""

    def __init__(self,
            type=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Enrichment type
        # @var KalturaChannelEnrichment
        self.type = type


    PROPERTY_LOADERS = {
        'type': (KalturaEnumsFactory.createString, "KalturaChannelEnrichment"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaChannelEnrichmentHolder.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaChannelEnrichmentHolder")
        kparams.addStringEnumIfDefined("type", self.type)
        return kparams

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType


# @package Kaltura
# @subpackage Client
class KalturaExternalChannelProfile(KalturaObjectBase):
    """OSS Adapter"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            isActive=NotImplemented,
            externalIdentifier=NotImplemented,
            filterExpression=NotImplemented,
            recommendationEngineId=NotImplemented,
            enrichments=NotImplemented,
            assetUserRuleId=NotImplemented,
            metaData=NotImplemented):
        KalturaObjectBase.__init__(self)

        # External channel id
        # @var int
        # @readonly
        self.id = id

        # External channel name
        # @var string
        self.name = name

        # External channel active status
        # @var bool
        self.isActive = isActive

        # External channel external identifier
        # @var string
        self.externalIdentifier = externalIdentifier

        # Filter expression
        # @var string
        self.filterExpression = filterExpression

        # Recommendation engine id
        # @var int
        self.recommendationEngineId = recommendationEngineId

        # Enrichments
        # @var array of KalturaChannelEnrichmentHolder
        self.enrichments = enrichments

        # Asset user rule identifier
        # @var int
        self.assetUserRuleId = assetUserRuleId

        # key/value map field for extra data
        # @var map
        self.metaData = metaData


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'isActive': getXmlNodeBool, 
        'externalIdentifier': getXmlNodeText, 
        'filterExpression': getXmlNodeText, 
        'recommendationEngineId': getXmlNodeInt, 
        'enrichments': (KalturaObjectFactory.createArray, 'KalturaChannelEnrichmentHolder'), 
        'assetUserRuleId': getXmlNodeInt, 
        'metaData': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaExternalChannelProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaExternalChannelProfile")
        kparams.addStringIfDefined("name", self.name)
        kparams.addBoolIfDefined("isActive", self.isActive)
        kparams.addStringIfDefined("externalIdentifier", self.externalIdentifier)
        kparams.addStringIfDefined("filterExpression", self.filterExpression)
        kparams.addIntIfDefined("recommendationEngineId", self.recommendationEngineId)
        kparams.addArrayIfDefined("enrichments", self.enrichments)
        kparams.addIntIfDefined("assetUserRuleId", self.assetUserRuleId)
        kparams.addMapIfDefined("metaData", self.metaData)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive

    def getExternalIdentifier(self):
        return self.externalIdentifier

    def setExternalIdentifier(self, newExternalIdentifier):
        self.externalIdentifier = newExternalIdentifier

    def getFilterExpression(self):
        return self.filterExpression

    def setFilterExpression(self, newFilterExpression):
        self.filterExpression = newFilterExpression

    def getRecommendationEngineId(self):
        return self.recommendationEngineId

    def setRecommendationEngineId(self, newRecommendationEngineId):
        self.recommendationEngineId = newRecommendationEngineId

    def getEnrichments(self):
        return self.enrichments

    def setEnrichments(self, newEnrichments):
        self.enrichments = newEnrichments

    def getAssetUserRuleId(self):
        return self.assetUserRuleId

    def setAssetUserRuleId(self, newAssetUserRuleId):
        self.assetUserRuleId = newAssetUserRuleId

    def getMetaData(self):
        return self.metaData

    def setMetaData(self, newMetaData):
        self.metaData = newMetaData


# @package Kaltura
# @subpackage Client
class KalturaExternalChannelProfileListResponse(KalturaListResponse):
    """External channel profiles"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # External channel profiles
        # @var array of KalturaExternalChannelProfile
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaExternalChannelProfile'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaExternalChannelProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaExternalChannelProfileListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaIngestProfile(KalturaObjectBase):
    """Ingest profile"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            externalId=NotImplemented,
            assetTypeId=NotImplemented,
            transformationAdapterUrl=NotImplemented,
            transformationAdapterSettings=NotImplemented,
            transformationAdapterSharedSecret=NotImplemented,
            defaultAutoFillPolicy=NotImplemented,
            defaultOverlapPolicy=NotImplemented,
            overlapChannels=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Ingest profile identifier
        # @var int
        # @readonly
        self.id = id

        # Ingest profile name
        # @var string
        self.name = name

        # Ingest profile externalId
        # @var string
        self.externalId = externalId

        # Type of assets that this profile suppose to ingest: 0 - EPG, 1 - MEDIA
        # @var int
        self.assetTypeId = assetTypeId

        # Transformation Adapter URL
        # @var string
        self.transformationAdapterUrl = transformationAdapterUrl

        # Transformation Adapter settings
        # @var map
        self.transformationAdapterSettings = transformationAdapterSettings

        # Transformation Adapter shared secret
        # @var string
        self.transformationAdapterSharedSecret = transformationAdapterSharedSecret

        # Ingest profile default Auto-fill policy
        # @var KalturaIngestProfileAutofillPolicy
        self.defaultAutoFillPolicy = defaultAutoFillPolicy

        # Ingest profile default Overlap policy
        # @var KalturaIngestProfileOverlapPolicy
        self.defaultOverlapPolicy = defaultOverlapPolicy

        # Ingest profile overlap channels
        # @var string
        self.overlapChannels = overlapChannels


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'externalId': getXmlNodeText, 
        'assetTypeId': getXmlNodeInt, 
        'transformationAdapterUrl': getXmlNodeText, 
        'transformationAdapterSettings': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
        'transformationAdapterSharedSecret': getXmlNodeText, 
        'defaultAutoFillPolicy': (KalturaEnumsFactory.createString, "KalturaIngestProfileAutofillPolicy"), 
        'defaultOverlapPolicy': (KalturaEnumsFactory.createString, "KalturaIngestProfileOverlapPolicy"), 
        'overlapChannels': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIngestProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaIngestProfile")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("externalId", self.externalId)
        kparams.addIntIfDefined("assetTypeId", self.assetTypeId)
        kparams.addStringIfDefined("transformationAdapterUrl", self.transformationAdapterUrl)
        kparams.addMapIfDefined("transformationAdapterSettings", self.transformationAdapterSettings)
        kparams.addStringIfDefined("transformationAdapterSharedSecret", self.transformationAdapterSharedSecret)
        kparams.addStringEnumIfDefined("defaultAutoFillPolicy", self.defaultAutoFillPolicy)
        kparams.addStringEnumIfDefined("defaultOverlapPolicy", self.defaultOverlapPolicy)
        kparams.addStringIfDefined("overlapChannels", self.overlapChannels)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getExternalId(self):
        return self.externalId

    def setExternalId(self, newExternalId):
        self.externalId = newExternalId

    def getAssetTypeId(self):
        return self.assetTypeId

    def setAssetTypeId(self, newAssetTypeId):
        self.assetTypeId = newAssetTypeId

    def getTransformationAdapterUrl(self):
        return self.transformationAdapterUrl

    def setTransformationAdapterUrl(self, newTransformationAdapterUrl):
        self.transformationAdapterUrl = newTransformationAdapterUrl

    def getTransformationAdapterSettings(self):
        return self.transformationAdapterSettings

    def setTransformationAdapterSettings(self, newTransformationAdapterSettings):
        self.transformationAdapterSettings = newTransformationAdapterSettings

    def getTransformationAdapterSharedSecret(self):
        return self.transformationAdapterSharedSecret

    def setTransformationAdapterSharedSecret(self, newTransformationAdapterSharedSecret):
        self.transformationAdapterSharedSecret = newTransformationAdapterSharedSecret

    def getDefaultAutoFillPolicy(self):
        return self.defaultAutoFillPolicy

    def setDefaultAutoFillPolicy(self, newDefaultAutoFillPolicy):
        self.defaultAutoFillPolicy = newDefaultAutoFillPolicy

    def getDefaultOverlapPolicy(self):
        return self.defaultOverlapPolicy

    def setDefaultOverlapPolicy(self, newDefaultOverlapPolicy):
        self.defaultOverlapPolicy = newDefaultOverlapPolicy

    def getOverlapChannels(self):
        return self.overlapChannels

    def setOverlapChannels(self, newOverlapChannels):
        self.overlapChannels = newOverlapChannels


# @package Kaltura
# @subpackage Client
class KalturaIngestProfileListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Adapters
        # @var array of KalturaIngestProfile
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaIngestProfile'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIngestProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaIngestProfileListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaIotListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of objects
        # @var array of KalturaIot
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaIot'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIotListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaIotListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaLanguage(KalturaObjectBase):
    """Language details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            code=NotImplemented,
            direction=NotImplemented,
            isDefault=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Identifier
        # @var int
        self.id = id

        # Language name
        # @var string
        self.name = name

        # Language system name
        # @var string
        self.systemName = systemName

        # Language code
        # @var string
        self.code = code

        # Language direction (LTR/RTL)
        # @var string
        self.direction = direction

        # Is the default language of the account
        # @var bool
        self.isDefault = isDefault


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'code': getXmlNodeText, 
        'direction': getXmlNodeText, 
        'isDefault': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLanguage.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLanguage")
        kparams.addIntIfDefined("id", self.id)
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("systemName", self.systemName)
        kparams.addStringIfDefined("code", self.code)
        kparams.addStringIfDefined("direction", self.direction)
        kparams.addBoolIfDefined("isDefault", self.isDefault)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getCode(self):
        return self.code

    def setCode(self, newCode):
        self.code = newCode

    def getDirection(self):
        return self.direction

    def setDirection(self, newDirection):
        self.direction = newDirection

    def getIsDefault(self):
        return self.isDefault

    def setIsDefault(self, newIsDefault):
        self.isDefault = newIsDefault


# @package Kaltura
# @subpackage Client
class KalturaLanguageListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Languages
        # @var array of KalturaLanguage
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaLanguage'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLanguageListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaLanguageListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaMediaConcurrencyRule(KalturaObjectBase):
    """Media concurrency rule"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            concurrencyLimitationType=NotImplemented,
            limitation=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Media concurrency rule  identifier
        # @var string
        self.id = id

        # Media concurrency rule  name
        # @var string
        self.name = name

        # Concurrency limitation type
        # @var KalturaConcurrencyLimitationType
        self.concurrencyLimitationType = concurrencyLimitationType

        # Limitation
        # @var int
        self.limitation = limitation


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'name': getXmlNodeText, 
        'concurrencyLimitationType': (KalturaEnumsFactory.createString, "KalturaConcurrencyLimitationType"), 
        'limitation': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaConcurrencyRule.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaMediaConcurrencyRule")
        kparams.addStringIfDefined("id", self.id)
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringEnumIfDefined("concurrencyLimitationType", self.concurrencyLimitationType)
        kparams.addIntIfDefined("limitation", self.limitation)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getConcurrencyLimitationType(self):
        return self.concurrencyLimitationType

    def setConcurrencyLimitationType(self, newConcurrencyLimitationType):
        self.concurrencyLimitationType = newConcurrencyLimitationType

    def getLimitation(self):
        return self.limitation

    def setLimitation(self, newLimitation):
        self.limitation = newLimitation


# @package Kaltura
# @subpackage Client
class KalturaMediaConcurrencyRuleListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Media CONCURRENCY RULES
        # @var array of KalturaMediaConcurrencyRule
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaMediaConcurrencyRule'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaConcurrencyRuleListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaMediaConcurrencyRuleListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaMeta(KalturaObjectBase):
    """Asset meta"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            multilingualName=NotImplemented,
            systemName=NotImplemented,
            dataType=NotImplemented,
            multipleValue=NotImplemented,
            isProtected=NotImplemented,
            helpText=NotImplemented,
            features=NotImplemented,
            parentId=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented,
            dynamicData=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Meta id
        # @var string
        # @readonly
        self.id = id

        # Meta name for the partner
        # @var string
        # @readonly
        self.name = name

        # Meta name for the partner
        # @var array of KalturaTranslationToken
        self.multilingualName = multilingualName

        # Meta system name for the partner
        # @var string
        # @insertonly
        self.systemName = systemName

        # Meta data type
        # @var KalturaMetaDataType
        # @insertonly
        self.dataType = dataType

        # Does the meta contain multiple values
        # @var bool
        self.multipleValue = multipleValue

        # Is the meta protected by the system
        # @var bool
        # @insertonly
        self.isProtected = isProtected

        # The help text of the meta to be displayed on the UI.
        # @var string
        self.helpText = helpText

        # List of supported features
        # @var string
        self.features = features

        # Parent meta id
        # @var string
        self.parentId = parentId

        # Specifies when was the meta created. Date and time represented as epoch.
        # @var int
        # @readonly
        self.createDate = createDate

        # Specifies when was the meta last updated. Date and time represented as epoch.
        # @var int
        # @readonly
        self.updateDate = updateDate

        # Dynamic data
        # @var map
        self.dynamicData = dynamicData


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'name': getXmlNodeText, 
        'multilingualName': (KalturaObjectFactory.createArray, 'KalturaTranslationToken'), 
        'systemName': getXmlNodeText, 
        'dataType': (KalturaEnumsFactory.createString, "KalturaMetaDataType"), 
        'multipleValue': getXmlNodeBool, 
        'isProtected': getXmlNodeBool, 
        'helpText': getXmlNodeText, 
        'features': getXmlNodeText, 
        'parentId': getXmlNodeText, 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
        'dynamicData': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMeta.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaMeta")
        kparams.addArrayIfDefined("multilingualName", self.multilingualName)
        kparams.addStringIfDefined("systemName", self.systemName)
        kparams.addStringEnumIfDefined("dataType", self.dataType)
        kparams.addBoolIfDefined("multipleValue", self.multipleValue)
        kparams.addBoolIfDefined("isProtected", self.isProtected)
        kparams.addStringIfDefined("helpText", self.helpText)
        kparams.addStringIfDefined("features", self.features)
        kparams.addStringIfDefined("parentId", self.parentId)
        kparams.addMapIfDefined("dynamicData", self.dynamicData)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def getMultilingualName(self):
        return self.multilingualName

    def setMultilingualName(self, newMultilingualName):
        self.multilingualName = newMultilingualName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getDataType(self):
        return self.dataType

    def setDataType(self, newDataType):
        self.dataType = newDataType

    def getMultipleValue(self):
        return self.multipleValue

    def setMultipleValue(self, newMultipleValue):
        self.multipleValue = newMultipleValue

    def getIsProtected(self):
        return self.isProtected

    def setIsProtected(self, newIsProtected):
        self.isProtected = newIsProtected

    def getHelpText(self):
        return self.helpText

    def setHelpText(self, newHelpText):
        self.helpText = newHelpText

    def getFeatures(self):
        return self.features

    def setFeatures(self, newFeatures):
        self.features = newFeatures

    def getParentId(self):
        return self.parentId

    def setParentId(self, newParentId):
        self.parentId = newParentId

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate

    def getDynamicData(self):
        return self.dynamicData

    def setDynamicData(self, newDynamicData):
        self.dynamicData = newDynamicData


# @package Kaltura
# @subpackage Client
class KalturaMetaListResponse(KalturaListResponse):
    """Meta list response"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list asset meta
        # @var array of KalturaMeta
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaMeta'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMetaListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaMetaListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaOSSAdapterBaseProfile(KalturaObjectBase):
    """OSS adapter basic"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented):
        KalturaObjectBase.__init__(self)

        # OSS adapter id
        # @var int
        # @readonly
        self.id = id

        # OSS adapter name
        # @var string
        self.name = name


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaOSSAdapterBaseProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaOSSAdapterBaseProfile")
        kparams.addStringIfDefined("name", self.name)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName


# @package Kaltura
# @subpackage Client
class KalturaOSSAdapterProfile(KalturaOSSAdapterBaseProfile):
    """OSS Adapter"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            isActive=NotImplemented,
            adapterUrl=NotImplemented,
            ossAdapterSettings=NotImplemented,
            externalIdentifier=NotImplemented,
            sharedSecret=NotImplemented):
        KalturaOSSAdapterBaseProfile.__init__(self,
            id,
            name)

        # OSS adapter active status
        # @var bool
        self.isActive = isActive

        # OSS adapter adapter URL
        # @var string
        self.adapterUrl = adapterUrl

        # OSS adapter extra parameters
        # @var map
        self.ossAdapterSettings = ossAdapterSettings

        # OSS adapter external identifier
        # @var string
        self.externalIdentifier = externalIdentifier

        # Shared Secret
        # @var string
        # @readonly
        self.sharedSecret = sharedSecret


    PROPERTY_LOADERS = {
        'isActive': getXmlNodeBool, 
        'adapterUrl': getXmlNodeText, 
        'ossAdapterSettings': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
        'externalIdentifier': getXmlNodeText, 
        'sharedSecret': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaOSSAdapterBaseProfile.fromXml(self, node)
        self.fromXmlImpl(node, KalturaOSSAdapterProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOSSAdapterBaseProfile.toParams(self)
        kparams.put("objectType", "KalturaOSSAdapterProfile")
        kparams.addBoolIfDefined("isActive", self.isActive)
        kparams.addStringIfDefined("adapterUrl", self.adapterUrl)
        kparams.addMapIfDefined("ossAdapterSettings", self.ossAdapterSettings)
        kparams.addStringIfDefined("externalIdentifier", self.externalIdentifier)
        return kparams

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive

    def getAdapterUrl(self):
        return self.adapterUrl

    def setAdapterUrl(self, newAdapterUrl):
        self.adapterUrl = newAdapterUrl

    def getOssAdapterSettings(self):
        return self.ossAdapterSettings

    def setOssAdapterSettings(self, newOssAdapterSettings):
        self.ossAdapterSettings = newOssAdapterSettings

    def getExternalIdentifier(self):
        return self.externalIdentifier

    def setExternalIdentifier(self, newExternalIdentifier):
        self.externalIdentifier = newExternalIdentifier

    def getSharedSecret(self):
        return self.sharedSecret


# @package Kaltura
# @subpackage Client
class KalturaOSSAdapterProfileListResponse(KalturaListResponse):
    """OSS adapter-profiles list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of OSS adapter-profiles
        # @var array of KalturaOSSAdapterProfile
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaOSSAdapterProfile'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaOSSAdapterProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaOSSAdapterProfileListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaParentalRule(KalturaObjectBase):
    """Parental rule"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            order=NotImplemented,
            mediaTag=NotImplemented,
            epgTag=NotImplemented,
            blockAnonymousAccess=NotImplemented,
            ruleType=NotImplemented,
            mediaTagValues=NotImplemented,
            epgTagValues=NotImplemented,
            isDefault=NotImplemented,
            origin=NotImplemented,
            isActive=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Unique parental rule identifier
        # @var int
        # @readonly
        self.id = id

        # Rule display name
        # @var string
        self.name = name

        # Explanatory description
        # @var string
        self.description = description

        # Rule order within the full list of rules
        # @var int
        self.order = order

        # Media asset tag ID to in which to look for corresponding trigger values
        # @var int
        self.mediaTag = mediaTag

        # EPG asset tag ID to in which to look for corresponding trigger values
        # @var int
        self.epgTag = epgTag

        # Content that correspond to this rule is not available for guests
        # @var bool
        self.blockAnonymousAccess = blockAnonymousAccess

        # Rule type - Movies, TV series or both
        # @var KalturaParentalRuleType
        self.ruleType = ruleType

        # Media tag values that trigger rule
        # @var array of KalturaStringValue
        self.mediaTagValues = mediaTagValues

        # EPG tag values that trigger rule
        # @var array of KalturaStringValue
        self.epgTagValues = epgTagValues

        # Is the rule the default rule of the account
        # @var bool
        # @readonly
        self.isDefault = isDefault

        # Where was this rule defined account, household or user
        # @var KalturaRuleLevel
        # @readonly
        self.origin = origin

        # active status
        # @var bool
        self.isActive = isActive

        # Specifies when was the parental rule created. Date and time represented as epoch.
        # @var int
        # @readonly
        self.createDate = createDate

        # Specifies when was the parental rule last updated. Date and time represented as epoch.
        # @var int
        # @readonly
        self.updateDate = updateDate


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'description': getXmlNodeText, 
        'order': getXmlNodeInt, 
        'mediaTag': getXmlNodeInt, 
        'epgTag': getXmlNodeInt, 
        'blockAnonymousAccess': getXmlNodeBool, 
        'ruleType': (KalturaEnumsFactory.createString, "KalturaParentalRuleType"), 
        'mediaTagValues': (KalturaObjectFactory.createArray, 'KalturaStringValue'), 
        'epgTagValues': (KalturaObjectFactory.createArray, 'KalturaStringValue'), 
        'isDefault': getXmlNodeBool, 
        'origin': (KalturaEnumsFactory.createString, "KalturaRuleLevel"), 
        'isActive': getXmlNodeBool, 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaParentalRule.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaParentalRule")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("description", self.description)
        kparams.addIntIfDefined("order", self.order)
        kparams.addIntIfDefined("mediaTag", self.mediaTag)
        kparams.addIntIfDefined("epgTag", self.epgTag)
        kparams.addBoolIfDefined("blockAnonymousAccess", self.blockAnonymousAccess)
        kparams.addStringEnumIfDefined("ruleType", self.ruleType)
        kparams.addArrayIfDefined("mediaTagValues", self.mediaTagValues)
        kparams.addArrayIfDefined("epgTagValues", self.epgTagValues)
        kparams.addBoolIfDefined("isActive", self.isActive)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getOrder(self):
        return self.order

    def setOrder(self, newOrder):
        self.order = newOrder

    def getMediaTag(self):
        return self.mediaTag

    def setMediaTag(self, newMediaTag):
        self.mediaTag = newMediaTag

    def getEpgTag(self):
        return self.epgTag

    def setEpgTag(self, newEpgTag):
        self.epgTag = newEpgTag

    def getBlockAnonymousAccess(self):
        return self.blockAnonymousAccess

    def setBlockAnonymousAccess(self, newBlockAnonymousAccess):
        self.blockAnonymousAccess = newBlockAnonymousAccess

    def getRuleType(self):
        return self.ruleType

    def setRuleType(self, newRuleType):
        self.ruleType = newRuleType

    def getMediaTagValues(self):
        return self.mediaTagValues

    def setMediaTagValues(self, newMediaTagValues):
        self.mediaTagValues = newMediaTagValues

    def getEpgTagValues(self):
        return self.epgTagValues

    def setEpgTagValues(self, newEpgTagValues):
        self.epgTagValues = newEpgTagValues

    def getIsDefault(self):
        return self.isDefault

    def getOrigin(self):
        return self.origin

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate


# @package Kaltura
# @subpackage Client
class KalturaParentalRuleListResponse(KalturaListResponse):
    """ParentalRules list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of parental rules
        # @var array of KalturaParentalRule
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaParentalRule'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaParentalRuleListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaParentalRuleListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaPermissionItem(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            isExcluded=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Permission item identifier
        # @var int
        # @readonly
        self.id = id

        # Permission item name
        # @var string
        self.name = name

        # Permission isExcluded
        # @var bool
        self.isExcluded = isExcluded


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'isExcluded': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPermissionItem.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPermissionItem")
        kparams.addStringIfDefined("name", self.name)
        kparams.addBoolIfDefined("isExcluded", self.isExcluded)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getIsExcluded(self):
        return self.isExcluded

    def setIsExcluded(self, newIsExcluded):
        self.isExcluded = newIsExcluded


# @package Kaltura
# @subpackage Client
class KalturaPermissionItemListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of objects
        # @var array of KalturaPermissionItem
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaPermissionItem'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPermissionItemListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaPermissionItemListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaApiActionPermissionItem(KalturaPermissionItem):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            isExcluded=NotImplemented,
            service=NotImplemented,
            action=NotImplemented):
        KalturaPermissionItem.__init__(self,
            id,
            name,
            isExcluded)

        # API service name
        # @var string
        self.service = service

        # API action name
        # @var string
        self.action = action


    PROPERTY_LOADERS = {
        'service': getXmlNodeText, 
        'action': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaPermissionItem.fromXml(self, node)
        self.fromXmlImpl(node, KalturaApiActionPermissionItem.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPermissionItem.toParams(self)
        kparams.put("objectType", "KalturaApiActionPermissionItem")
        kparams.addStringIfDefined("service", self.service)
        kparams.addStringIfDefined("action", self.action)
        return kparams

    def getService(self):
        return self.service

    def setService(self, newService):
        self.service = newService

    def getAction(self):
        return self.action

    def setAction(self, newAction):
        self.action = newAction


# @package Kaltura
# @subpackage Client
class KalturaApiArgumentPermissionItem(KalturaPermissionItem):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            isExcluded=NotImplemented,
            service=NotImplemented,
            action=NotImplemented,
            parameter=NotImplemented):
        KalturaPermissionItem.__init__(self,
            id,
            name,
            isExcluded)

        # API service name
        # @var string
        self.service = service

        # API action name
        # @var string
        self.action = action

        # API parameter name
        # @var string
        self.parameter = parameter


    PROPERTY_LOADERS = {
        'service': getXmlNodeText, 
        'action': getXmlNodeText, 
        'parameter': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaPermissionItem.fromXml(self, node)
        self.fromXmlImpl(node, KalturaApiArgumentPermissionItem.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPermissionItem.toParams(self)
        kparams.put("objectType", "KalturaApiArgumentPermissionItem")
        kparams.addStringIfDefined("service", self.service)
        kparams.addStringIfDefined("action", self.action)
        kparams.addStringIfDefined("parameter", self.parameter)
        return kparams

    def getService(self):
        return self.service

    def setService(self, newService):
        self.service = newService

    def getAction(self):
        return self.action

    def setAction(self, newAction):
        self.action = newAction

    def getParameter(self):
        return self.parameter

    def setParameter(self, newParameter):
        self.parameter = newParameter


# @package Kaltura
# @subpackage Client
class KalturaApiParameterPermissionItem(KalturaPermissionItem):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            isExcluded=NotImplemented,
            object=NotImplemented,
            parameter=NotImplemented,
            action=NotImplemented):
        KalturaPermissionItem.__init__(self,
            id,
            name,
            isExcluded)

        # API object name
        # @var string
        self.object = object

        # API parameter name
        # @var string
        self.parameter = parameter

        # API action type
        # @var KalturaApiParameterPermissionItemAction
        self.action = action


    PROPERTY_LOADERS = {
        'object': getXmlNodeText, 
        'parameter': getXmlNodeText, 
        'action': (KalturaEnumsFactory.createString, "KalturaApiParameterPermissionItemAction"), 
    }

    def fromXml(self, node):
        KalturaPermissionItem.fromXml(self, node)
        self.fromXmlImpl(node, KalturaApiParameterPermissionItem.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPermissionItem.toParams(self)
        kparams.put("objectType", "KalturaApiParameterPermissionItem")
        kparams.addStringIfDefined("object", self.object)
        kparams.addStringIfDefined("parameter", self.parameter)
        kparams.addStringEnumIfDefined("action", self.action)
        return kparams

    def getObject(self):
        return self.object

    def setObject(self, newObject):
        self.object = newObject

    def getParameter(self):
        return self.parameter

    def setParameter(self, newParameter):
        self.parameter = newParameter

    def getAction(self):
        return self.action

    def setAction(self, newAction):
        self.action = newAction


# @package Kaltura
# @subpackage Client
class KalturaApiPriviligesPermissionItem(KalturaPermissionItem):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            isExcluded=NotImplemented,
            object=NotImplemented,
            parameter=NotImplemented):
        KalturaPermissionItem.__init__(self,
            id,
            name,
            isExcluded)

        # API object name
        # @var string
        self.object = object

        # API parameter name
        # @var string
        self.parameter = parameter


    PROPERTY_LOADERS = {
        'object': getXmlNodeText, 
        'parameter': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaPermissionItem.fromXml(self, node)
        self.fromXmlImpl(node, KalturaApiPriviligesPermissionItem.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPermissionItem.toParams(self)
        kparams.put("objectType", "KalturaApiPriviligesPermissionItem")
        kparams.addStringIfDefined("object", self.object)
        kparams.addStringIfDefined("parameter", self.parameter)
        return kparams

    def getObject(self):
        return self.object

    def setObject(self, newObject):
        self.object = newObject

    def getParameter(self):
        return self.parameter

    def setParameter(self, newParameter):
        self.parameter = newParameter


# @package Kaltura
# @subpackage Client
class KalturaPermission(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            friendlyName=NotImplemented,
            dependsOnPermissionNames=NotImplemented,
            type=NotImplemented,
            permissionItemsIds=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Permission identifier
        # @var int
        # @readonly
        self.id = id

        # Permission name
        # @var string
        self.name = name

        # Permission friendly name
        # @var string
        self.friendlyName = friendlyName

        # Comma separated permissions names from type SPECIAL_FEATURE
        # @var string
        # @readonly
        self.dependsOnPermissionNames = dependsOnPermissionNames

        # Permission type
        # @var KalturaPermissionType
        self.type = type

        # Comma separated associated permission items IDs
        # @var string
        self.permissionItemsIds = permissionItemsIds


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'friendlyName': getXmlNodeText, 
        'dependsOnPermissionNames': getXmlNodeText, 
        'type': (KalturaEnumsFactory.createString, "KalturaPermissionType"), 
        'permissionItemsIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPermission.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPermission")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("friendlyName", self.friendlyName)
        kparams.addStringEnumIfDefined("type", self.type)
        kparams.addStringIfDefined("permissionItemsIds", self.permissionItemsIds)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getFriendlyName(self):
        return self.friendlyName

    def setFriendlyName(self, newFriendlyName):
        self.friendlyName = newFriendlyName

    def getDependsOnPermissionNames(self):
        return self.dependsOnPermissionNames

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getPermissionItemsIds(self):
        return self.permissionItemsIds

    def setPermissionItemsIds(self, newPermissionItemsIds):
        self.permissionItemsIds = newPermissionItemsIds


# @package Kaltura
# @subpackage Client
class KalturaPermissionListResponse(KalturaListResponse):
    """Permissions list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of permissions
        # @var array of KalturaPermission
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaPermission'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPermissionListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaPermissionListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaGroupPermission(KalturaPermission):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            friendlyName=NotImplemented,
            dependsOnPermissionNames=NotImplemented,
            type=NotImplemented,
            permissionItemsIds=NotImplemented,
            group=NotImplemented):
        KalturaPermission.__init__(self,
            id,
            name,
            friendlyName,
            dependsOnPermissionNames,
            type,
            permissionItemsIds)

        # Permission identifier
        # @var string
        # @readonly
        self.group = group


    PROPERTY_LOADERS = {
        'group': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaPermission.fromXml(self, node)
        self.fromXmlImpl(node, KalturaGroupPermission.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPermission.toParams(self)
        kparams.put("objectType", "KalturaGroupPermission")
        return kparams

    def getGroup(self):
        return self.group


# @package Kaltura
# @subpackage Client
class KalturaPlaybackProfile(KalturaObjectBase):
    """Playback profile"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            isActive=NotImplemented,
            adapterUrl=NotImplemented,
            settings=NotImplemented,
            systemName=NotImplemented,
            sharedSecret=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Playback profile identifier
        # @var int
        # @readonly
        self.id = id

        # Playback profile name
        # @var string
        self.name = name

        # Playback profile active status
        # @var bool
        self.isActive = isActive

        # Playback profile URL
        # @var string
        self.adapterUrl = adapterUrl

        # Playback profile settings
        # @var string
        self.settings = settings

        # Playback profile alias
        # @var string
        self.systemName = systemName

        # Playback adapter shared secret
        # @var string
        # @readonly
        self.sharedSecret = sharedSecret


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'isActive': getXmlNodeBool, 
        'adapterUrl': getXmlNodeText, 
        'settings': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'sharedSecret': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlaybackProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPlaybackProfile")
        kparams.addStringIfDefined("name", self.name)
        kparams.addBoolIfDefined("isActive", self.isActive)
        kparams.addStringIfDefined("adapterUrl", self.adapterUrl)
        kparams.addStringIfDefined("settings", self.settings)
        kparams.addStringIfDefined("systemName", self.systemName)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive

    def getAdapterUrl(self):
        return self.adapterUrl

    def setAdapterUrl(self, newAdapterUrl):
        self.adapterUrl = newAdapterUrl

    def getSettings(self):
        return self.settings

    def setSettings(self, newSettings):
        self.settings = newSettings

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getSharedSecret(self):
        return self.sharedSecret


# @package Kaltura
# @subpackage Client
class KalturaPlaybackProfileListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of Engagement adapter
        # @var array of KalturaPlaybackProfile
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaPlaybackProfile'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlaybackProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaPlaybackProfileListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaRecommendationProfile(KalturaObjectBase):
    """PaymentGW"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            isActive=NotImplemented,
            adapterUrl=NotImplemented,
            recommendationEngineSettings=NotImplemented,
            externalIdentifier=NotImplemented,
            sharedSecret=NotImplemented):
        KalturaObjectBase.__init__(self)

        # recommendation engine id
        # @var int
        # @readonly
        self.id = id

        # recommendation engine name
        # @var string
        self.name = name

        # recommendation engine is active status
        # @var bool
        self.isActive = isActive

        # recommendation engine adapter URL
        # @var string
        self.adapterUrl = adapterUrl

        # recommendation engine extra parameters
        # @var map
        self.recommendationEngineSettings = recommendationEngineSettings

        # recommendation engine external identifier
        # @var string
        self.externalIdentifier = externalIdentifier

        # Shared Secret
        # @var string
        # @readonly
        self.sharedSecret = sharedSecret


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'isActive': getXmlNodeBool, 
        'adapterUrl': getXmlNodeText, 
        'recommendationEngineSettings': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
        'externalIdentifier': getXmlNodeText, 
        'sharedSecret': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRecommendationProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaRecommendationProfile")
        kparams.addStringIfDefined("name", self.name)
        kparams.addBoolIfDefined("isActive", self.isActive)
        kparams.addStringIfDefined("adapterUrl", self.adapterUrl)
        kparams.addMapIfDefined("recommendationEngineSettings", self.recommendationEngineSettings)
        kparams.addStringIfDefined("externalIdentifier", self.externalIdentifier)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive

    def getAdapterUrl(self):
        return self.adapterUrl

    def setAdapterUrl(self, newAdapterUrl):
        self.adapterUrl = newAdapterUrl

    def getRecommendationEngineSettings(self):
        return self.recommendationEngineSettings

    def setRecommendationEngineSettings(self, newRecommendationEngineSettings):
        self.recommendationEngineSettings = newRecommendationEngineSettings

    def getExternalIdentifier(self):
        return self.externalIdentifier

    def setExternalIdentifier(self, newExternalIdentifier):
        self.externalIdentifier = newExternalIdentifier

    def getSharedSecret(self):
        return self.sharedSecret


# @package Kaltura
# @subpackage Client
class KalturaRecommendationProfileListResponse(KalturaListResponse):
    """List of recommendation profiles."""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Recommendation profiles list
        # @var array of KalturaRecommendationProfile
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaRecommendationProfile'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRecommendationProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaRecommendationProfileListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaRegionalChannel(KalturaObjectBase):
    def __init__(self,
            linearChannelId=NotImplemented,
            channelNumber=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The identifier of the linear media representing the channel
        # @var int
        self.linearChannelId = linearChannelId

        # The number of the channel
        # @var int
        self.channelNumber = channelNumber


    PROPERTY_LOADERS = {
        'linearChannelId': getXmlNodeInt, 
        'channelNumber': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRegionalChannel.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaRegionalChannel")
        kparams.addIntIfDefined("linearChannelId", self.linearChannelId)
        kparams.addIntIfDefined("channelNumber", self.channelNumber)
        return kparams

    def getLinearChannelId(self):
        return self.linearChannelId

    def setLinearChannelId(self, newLinearChannelId):
        self.linearChannelId = newLinearChannelId

    def getChannelNumber(self):
        return self.channelNumber

    def setChannelNumber(self, newChannelNumber):
        self.channelNumber = newChannelNumber


# @package Kaltura
# @subpackage Client
class KalturaRegion(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            externalId=NotImplemented,
            isDefault=NotImplemented,
            linearChannels=NotImplemented,
            parentId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Region identifier
        # @var int
        self.id = id

        # Region name
        # @var string
        self.name = name

        # Region external identifier
        # @var string
        self.externalId = externalId

        # Indicates whether this is the default region for the partner
        # @var bool
        # @readonly
        self.isDefault = isDefault

        # List of associated linear channels
        # @var array of KalturaRegionalChannel
        self.linearChannels = linearChannels

        # Parent region ID
        # @var int
        self.parentId = parentId


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'externalId': getXmlNodeText, 
        'isDefault': getXmlNodeBool, 
        'linearChannels': (KalturaObjectFactory.createArray, 'KalturaRegionalChannel'), 
        'parentId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRegion.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaRegion")
        kparams.addIntIfDefined("id", self.id)
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("externalId", self.externalId)
        kparams.addArrayIfDefined("linearChannels", self.linearChannels)
        kparams.addIntIfDefined("parentId", self.parentId)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getExternalId(self):
        return self.externalId

    def setExternalId(self, newExternalId):
        self.externalId = newExternalId

    def getIsDefault(self):
        return self.isDefault

    def getLinearChannels(self):
        return self.linearChannels

    def setLinearChannels(self, newLinearChannels):
        self.linearChannels = newLinearChannels

    def getParentId(self):
        return self.parentId

    def setParentId(self, newParentId):
        self.parentId = newParentId


# @package Kaltura
# @subpackage Client
class KalturaRegionListResponse(KalturaListResponse):
    """Regions list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of regions
        # @var array of KalturaRegion
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaRegion'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRegionListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaRegionListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaRegionalChannelMultiLcns(KalturaRegionalChannel):
    def __init__(self,
            linearChannelId=NotImplemented,
            channelNumber=NotImplemented,
            lcns=NotImplemented):
        KalturaRegionalChannel.__init__(self,
            linearChannelId,
            channelNumber)

        # Linear channel numbers
        # @var string
        self.lcns = lcns


    PROPERTY_LOADERS = {
        'lcns': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaRegionalChannel.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRegionalChannelMultiLcns.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRegionalChannel.toParams(self)
        kparams.put("objectType", "KalturaRegionalChannelMultiLcns")
        kparams.addStringIfDefined("lcns", self.lcns)
        return kparams

    def getLcns(self):
        return self.lcns

    def setLcns(self, newLcns):
        self.lcns = newLcns


# @package Kaltura
# @subpackage Client
class KalturaRegistrySettings(KalturaObjectBase):
    def __init__(self,
            key=NotImplemented,
            value=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Permission item identifier
        # @var string
        self.key = key

        # Permission item name
        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'key': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRegistrySettings.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaRegistrySettings")
        kparams.addStringIfDefined("key", self.key)
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getKey(self):
        return self.key

    def setKey(self, newKey):
        self.key = newKey

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaRegistrySettingsListResponse(KalturaListResponse):
    """List of registry settings."""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Registry settings list
        # @var array of KalturaRegistrySettings
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaRegistrySettings'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRegistrySettingsListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaRegistrySettingsListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaSearchHistory(KalturaObjectBase):
    """Search history info"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            filter=NotImplemented,
            language=NotImplemented,
            createdAt=NotImplemented,
            service=NotImplemented,
            action=NotImplemented,
            deviceId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Search ID
        # @var string
        # @readonly
        self.id = id

        # Search name
        # @var string
        # @readonly
        self.name = name

        # Filter
        # @var string
        # @readonly
        self.filter = filter

        # Search language
        # @var string
        # @readonly
        self.language = language

        # When search was performed
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Kaltura OTT Service
        # @var string
        # @readonly
        self.service = service

        # Kaltura OTT Service Action
        # @var string
        # @readonly
        self.action = action

        # Unique Device ID
        # @var string
        # @readonly
        self.deviceId = deviceId


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'name': getXmlNodeText, 
        'filter': getXmlNodeText, 
        'language': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'service': getXmlNodeText, 
        'action': getXmlNodeText, 
        'deviceId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchHistory.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSearchHistory")
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def getFilter(self):
        return self.filter

    def getLanguage(self):
        return self.language

    def getCreatedAt(self):
        return self.createdAt

    def getService(self):
        return self.service

    def getAction(self):
        return self.action

    def getDeviceId(self):
        return self.deviceId


# @package Kaltura
# @subpackage Client
class KalturaSearchHistoryListResponse(KalturaListResponse):
    """Search history wrapper"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # KalturaSearchHistory Models
        # @var array of KalturaSearchHistory
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaSearchHistory'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchHistoryListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaSearchHistoryListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaTvmRuleListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # tvm rules
        # @var array of KalturaTvmRule
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaTvmRule'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTvmRuleListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaTvmRuleListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaUserAssetRule(KalturaObjectBase):
    """User asset rule - representing different type of rules on an asset(Parental, Geo, User Type, Device)"""

    def __init__(self,
            id=NotImplemented,
            ruleType=NotImplemented,
            name=NotImplemented,
            description=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Unique rule identifier
        # @var int
        # @readonly
        self.id = id

        # Rule type - possible values: Rule type - Parental, Geo, UserType, Device
        # @var KalturaRuleType
        self.ruleType = ruleType

        # Rule display name
        # @var string
        self.name = name

        # Additional description for the specific rule
        # @var string
        self.description = description


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'ruleType': (KalturaEnumsFactory.createString, "KalturaRuleType"), 
        'name': getXmlNodeText, 
        'description': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserAssetRule.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUserAssetRule")
        kparams.addStringEnumIfDefined("ruleType", self.ruleType)
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("description", self.description)
        return kparams

    def getId(self):
        return self.id

    def getRuleType(self):
        return self.ruleType

    def setRuleType(self, newRuleType):
        self.ruleType = newRuleType

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription


# @package Kaltura
# @subpackage Client
class KalturaUserAssetRuleListResponse(KalturaListResponse):
    """GenericRules list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of generic rules
        # @var array of KalturaUserAssetRule
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaUserAssetRule'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserAssetRuleListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaUserAssetRuleListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaUserRole(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            permissionNames=NotImplemented,
            excludedPermissionNames=NotImplemented,
            type=NotImplemented,
            profile=NotImplemented):
        KalturaObjectBase.__init__(self)

        # User role identifier
        # @var int
        # @readonly
        self.id = id

        # User role name
        # @var string
        self.name = name

        # permissions associated with the user role
        # @var string
        self.permissionNames = permissionNames

        # permissions associated with the user role in is_exclueded = true
        # @var string
        self.excludedPermissionNames = excludedPermissionNames

        # Role type
        # @var KalturaUserRoleType
        # @readonly
        self.type = type

        # Role profile
        # @var KalturaUserRoleProfile
        self.profile = profile


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'permissionNames': getXmlNodeText, 
        'excludedPermissionNames': getXmlNodeText, 
        'type': (KalturaEnumsFactory.createString, "KalturaUserRoleType"), 
        'profile': (KalturaEnumsFactory.createString, "KalturaUserRoleProfile"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserRole.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUserRole")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("permissionNames", self.permissionNames)
        kparams.addStringIfDefined("excludedPermissionNames", self.excludedPermissionNames)
        kparams.addStringEnumIfDefined("profile", self.profile)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getPermissionNames(self):
        return self.permissionNames

    def setPermissionNames(self, newPermissionNames):
        self.permissionNames = newPermissionNames

    def getExcludedPermissionNames(self):
        return self.excludedPermissionNames

    def setExcludedPermissionNames(self, newExcludedPermissionNames):
        self.excludedPermissionNames = newExcludedPermissionNames

    def getType(self):
        return self.type

    def getProfile(self):
        return self.profile

    def setProfile(self, newProfile):
        self.profile = newProfile


# @package Kaltura
# @subpackage Client
class KalturaUserRoleListResponse(KalturaListResponse):
    """User-roles list"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # A list of generic rules
        # @var array of KalturaUserRole
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaUserRole'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserRoleListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaUserRoleListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaEpgListResponse(KalturaListResponse):
    """EPG wrapper"""

    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # Assets
        # @var array of KalturaEpg
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaEpg'), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEpgListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaEpgListResponse")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaAppToken(KalturaObjectBase):
    """Application token"""

    def __init__(self,
            id=NotImplemented,
            expiry=NotImplemented,
            partnerId=NotImplemented,
            sessionDuration=NotImplemented,
            hashType=NotImplemented,
            sessionPrivileges=NotImplemented,
            token=NotImplemented,
            sessionUserId=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The id of the application token
        # @var string
        # @readonly
        self.id = id

        # Expiry time of current token (unix timestamp in seconds)
        # @var int
        self.expiry = expiry

        # Partner identifier
        # @var int
        # @readonly
        self.partnerId = partnerId

        # Expiry duration of KS (Kaltura Session) that created using the current token (in seconds)
        # @var int
        self.sessionDuration = sessionDuration

        # The hash type of the token
        # @var KalturaAppTokenHashType
        self.hashType = hashType

        # Comma separated privileges to be applied on KS (Kaltura Session) that created using the current token
        # @var string
        self.sessionPrivileges = sessionPrivileges

        # The application token
        # @var string
        # @readonly
        self.token = token

        # User id of KS (Kaltura Session) that created using the current token
        # @var string
        self.sessionUserId = sessionUserId

        # Create date
        # @var int
        # @readonly
        self.createDate = createDate

        # Update date
        # @var int
        # @readonly
        self.updateDate = updateDate


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'expiry': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'sessionDuration': getXmlNodeInt, 
        'hashType': (KalturaEnumsFactory.createString, "KalturaAppTokenHashType"), 
        'sessionPrivileges': getXmlNodeText, 
        'token': getXmlNodeText, 
        'sessionUserId': getXmlNodeText, 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAppToken.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAppToken")
        kparams.addIntIfDefined("expiry", self.expiry)
        kparams.addIntIfDefined("sessionDuration", self.sessionDuration)
        kparams.addStringEnumIfDefined("hashType", self.hashType)
        kparams.addStringIfDefined("sessionPrivileges", self.sessionPrivileges)
        kparams.addStringIfDefined("sessionUserId", self.sessionUserId)
        return kparams

    def getId(self):
        return self.id

    def getExpiry(self):
        return self.expiry

    def setExpiry(self, newExpiry):
        self.expiry = newExpiry

    def getPartnerId(self):
        return self.partnerId

    def getSessionDuration(self):
        return self.sessionDuration

    def setSessionDuration(self, newSessionDuration):
        self.sessionDuration = newSessionDuration

    def getHashType(self):
        return self.hashType

    def setHashType(self, newHashType):
        self.hashType = newHashType

    def getSessionPrivileges(self):
        return self.sessionPrivileges

    def setSessionPrivileges(self, newSessionPrivileges):
        self.sessionPrivileges = newSessionPrivileges

    def getToken(self):
        return self.token

    def getSessionUserId(self):
        return self.sessionUserId

    def setSessionUserId(self, newSessionUserId):
        self.sessionUserId = newSessionUserId

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate


# @package Kaltura
# @subpackage Client
class KalturaSession(KalturaObjectBase):
    """Kaltura Session"""

    def __init__(self,
            ks=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            expiry=NotImplemented,
            privileges=NotImplemented,
            udid=NotImplemented,
            createDate=NotImplemented):
        KalturaObjectBase.__init__(self)

        # KS
        # @var string
        self.ks = ks

        # Partner identifier
        # @var int
        self.partnerId = partnerId

        # User identifier
        # @var string
        self.userId = userId

        # Expiry
        # @var int
        self.expiry = expiry

        # Privileges
        # @var string
        self.privileges = privileges

        # UDID
        # @var string
        self.udid = udid

        # Create date
        # @var int
        self.createDate = createDate


    PROPERTY_LOADERS = {
        'ks': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'userId': getXmlNodeText, 
        'expiry': getXmlNodeInt, 
        'privileges': getXmlNodeText, 
        'udid': getXmlNodeText, 
        'createDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSession.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSession")
        kparams.addStringIfDefined("ks", self.ks)
        kparams.addIntIfDefined("partnerId", self.partnerId)
        kparams.addStringIfDefined("userId", self.userId)
        kparams.addIntIfDefined("expiry", self.expiry)
        kparams.addStringIfDefined("privileges", self.privileges)
        kparams.addStringIfDefined("udid", self.udid)
        kparams.addIntIfDefined("createDate", self.createDate)
        return kparams

    def getKs(self):
        return self.ks

    def setKs(self, newKs):
        self.ks = newKs

    def getPartnerId(self):
        return self.partnerId

    def setPartnerId(self, newPartnerId):
        self.partnerId = newPartnerId

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getExpiry(self):
        return self.expiry

    def setExpiry(self, newExpiry):
        self.expiry = newExpiry

    def getPrivileges(self):
        return self.privileges

    def setPrivileges(self, newPrivileges):
        self.privileges = newPrivileges

    def getUdid(self):
        return self.udid

    def setUdid(self, newUdid):
        self.udid = newUdid

    def getCreateDate(self):
        return self.createDate

    def setCreateDate(self, newCreateDate):
        self.createDate = newCreateDate


# @package Kaltura
# @subpackage Client
class KalturaSessionInfo(KalturaSession):
    """Kaltura Session"""

    def __init__(self,
            ks=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            expiry=NotImplemented,
            privileges=NotImplemented,
            udid=NotImplemented,
            createDate=NotImplemented):
        KalturaSession.__init__(self,
            ks,
            partnerId,
            userId,
            expiry,
            privileges,
            udid,
            createDate)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaSession.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSessionInfo.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSession.toParams(self)
        kparams.put("objectType", "KalturaSessionInfo")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaRepresentativeSelectionPolicy(KalturaObjectBase):
    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRepresentativeSelectionPolicy.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaRepresentativeSelectionPolicy")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaTopRsp(KalturaRepresentativeSelectionPolicy):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaRepresentativeSelectionPolicy.__init__(self)

        # order by
        # @var KalturaBaseAssetOrder
        self.orderBy = orderBy


    PROPERTY_LOADERS = {
        'orderBy': (KalturaObjectFactory.create, 'KalturaBaseAssetOrder'), 
    }

    def fromXml(self, node):
        KalturaRepresentativeSelectionPolicy.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTopRsp.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRepresentativeSelectionPolicy.toParams(self)
        kparams.put("objectType", "KalturaTopRsp")
        kparams.addObjectIfDefined("orderBy", self.orderBy)
        return kparams

    def getOrderBy(self):
        return self.orderBy

    def setOrderBy(self, newOrderBy):
        self.orderBy = newOrderBy


# @package Kaltura
# @subpackage Client
class KalturaTopSubscriptionEntitledRsp(KalturaRepresentativeSelectionPolicy):
    def __init__(self,
            orderBy=NotImplemented):
        KalturaRepresentativeSelectionPolicy.__init__(self)

        # order by
        # @var KalturaBaseAssetOrder
        self.orderBy = orderBy


    PROPERTY_LOADERS = {
        'orderBy': (KalturaObjectFactory.create, 'KalturaBaseAssetOrder'), 
    }

    def fromXml(self, node):
        KalturaRepresentativeSelectionPolicy.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTopSubscriptionEntitledRsp.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRepresentativeSelectionPolicy.toParams(self)
        kparams.put("objectType", "KalturaTopSubscriptionEntitledRsp")
        kparams.addObjectIfDefined("orderBy", self.orderBy)
        return kparams

    def getOrderBy(self):
        return self.orderBy

    def setOrderBy(self, newOrderBy):
        self.orderBy = newOrderBy


# @package Kaltura
# @subpackage Client
class KalturaPlaybackContextOptions(KalturaObjectBase):
    def __init__(self,
            mediaProtocol=NotImplemented,
            streamerType=NotImplemented,
            assetFileIds=NotImplemented,
            adapterData=NotImplemented,
            context=NotImplemented,
            urlType=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Protocol of the specific media object (http / https).
        # @var string
        self.mediaProtocol = mediaProtocol

        # Playback streamer type: applehttp, mpegdash, url, smothstreaming, multicast, none
        # @var string
        self.streamerType = streamerType

        # List of comma separated media file IDs
        # @var string
        self.assetFileIds = assetFileIds

        # key/value map field for extra data
        # @var map
        self.adapterData = adapterData

        # Playback context type
        # @var KalturaPlaybackContextType
        self.context = context

        # Url type
        # @var KalturaUrlType
        self.urlType = urlType


    PROPERTY_LOADERS = {
        'mediaProtocol': getXmlNodeText, 
        'streamerType': getXmlNodeText, 
        'assetFileIds': getXmlNodeText, 
        'adapterData': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
        'context': (KalturaEnumsFactory.createString, "KalturaPlaybackContextType"), 
        'urlType': (KalturaEnumsFactory.createString, "KalturaUrlType"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlaybackContextOptions.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPlaybackContextOptions")
        kparams.addStringIfDefined("mediaProtocol", self.mediaProtocol)
        kparams.addStringIfDefined("streamerType", self.streamerType)
        kparams.addStringIfDefined("assetFileIds", self.assetFileIds)
        kparams.addMapIfDefined("adapterData", self.adapterData)
        kparams.addStringEnumIfDefined("context", self.context)
        kparams.addStringEnumIfDefined("urlType", self.urlType)
        return kparams

    def getMediaProtocol(self):
        return self.mediaProtocol

    def setMediaProtocol(self, newMediaProtocol):
        self.mediaProtocol = newMediaProtocol

    def getStreamerType(self):
        return self.streamerType

    def setStreamerType(self, newStreamerType):
        self.streamerType = newStreamerType

    def getAssetFileIds(self):
        return self.assetFileIds

    def setAssetFileIds(self, newAssetFileIds):
        self.assetFileIds = newAssetFileIds

    def getAdapterData(self):
        return self.adapterData

    def setAdapterData(self, newAdapterData):
        self.adapterData = newAdapterData

    def getContext(self):
        return self.context

    def setContext(self, newContext):
        self.context = newContext

    def getUrlType(self):
        return self.urlType

    def setUrlType(self, newUrlType):
        self.urlType = newUrlType


# @package Kaltura
# @subpackage Client
class KalturaAccessControlMessage(KalturaObjectBase):
    def __init__(self,
            message=NotImplemented,
            code=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Message
        # @var string
        self.message = message

        # Code
        # @var string
        self.code = code


    PROPERTY_LOADERS = {
        'message': getXmlNodeText, 
        'code': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAccessControlMessage.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAccessControlMessage")
        kparams.addStringIfDefined("message", self.message)
        kparams.addStringIfDefined("code", self.code)
        return kparams

    def getMessage(self):
        return self.message

    def setMessage(self, newMessage):
        self.message = newMessage

    def getCode(self):
        return self.code

    def setCode(self, newCode):
        self.code = newCode


# @package Kaltura
# @subpackage Client
class KalturaCaptionPlaybackPluginData(KalturaObjectBase):
    def __init__(self,
            url=NotImplemented,
            language=NotImplemented,
            label=NotImplemented,
            format=NotImplemented):
        KalturaObjectBase.__init__(self)

        # url
        # @var string
        self.url = url

        # Language
        # @var string
        self.language = language

        # Label
        # @var string
        self.label = label

        # Format
        # @var string
        self.format = format


    PROPERTY_LOADERS = {
        'url': getXmlNodeText, 
        'language': getXmlNodeText, 
        'label': getXmlNodeText, 
        'format': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCaptionPlaybackPluginData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCaptionPlaybackPluginData")
        kparams.addStringIfDefined("url", self.url)
        kparams.addStringIfDefined("language", self.language)
        kparams.addStringIfDefined("label", self.label)
        kparams.addStringIfDefined("format", self.format)
        return kparams

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl

    def getLanguage(self):
        return self.language

    def setLanguage(self, newLanguage):
        self.language = newLanguage

    def getLabel(self):
        return self.label

    def setLabel(self, newLabel):
        self.label = newLabel

    def getFormat(self):
        return self.format

    def setFormat(self, newFormat):
        self.format = newFormat


# @package Kaltura
# @subpackage Client
class KalturaPlaybackPluginData(KalturaObjectBase):
    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlaybackPluginData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPlaybackPluginData")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaPlaybackContext(KalturaObjectBase):
    def __init__(self,
            sources=NotImplemented,
            actions=NotImplemented,
            messages=NotImplemented,
            playbackCaptions=NotImplemented,
            plugins=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Sources
        # @var array of KalturaPlaybackSource
        self.sources = sources

        # Actions
        # @var array of KalturaRuleAction
        self.actions = actions

        # Messages
        # @var array of KalturaAccessControlMessage
        self.messages = messages

        # Playback captions
        # @var array of KalturaCaptionPlaybackPluginData
        self.playbackCaptions = playbackCaptions

        # Plugins
        # @var array of KalturaPlaybackPluginData
        self.plugins = plugins


    PROPERTY_LOADERS = {
        'sources': (KalturaObjectFactory.createArray, 'KalturaPlaybackSource'), 
        'actions': (KalturaObjectFactory.createArray, 'KalturaRuleAction'), 
        'messages': (KalturaObjectFactory.createArray, 'KalturaAccessControlMessage'), 
        'playbackCaptions': (KalturaObjectFactory.createArray, 'KalturaCaptionPlaybackPluginData'), 
        'plugins': (KalturaObjectFactory.createArray, 'KalturaPlaybackPluginData'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlaybackContext.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPlaybackContext")
        kparams.addArrayIfDefined("sources", self.sources)
        kparams.addArrayIfDefined("actions", self.actions)
        kparams.addArrayIfDefined("messages", self.messages)
        kparams.addArrayIfDefined("playbackCaptions", self.playbackCaptions)
        kparams.addArrayIfDefined("plugins", self.plugins)
        return kparams

    def getSources(self):
        return self.sources

    def setSources(self, newSources):
        self.sources = newSources

    def getActions(self):
        return self.actions

    def setActions(self, newActions):
        self.actions = newActions

    def getMessages(self):
        return self.messages

    def setMessages(self, newMessages):
        self.messages = newMessages

    def getPlaybackCaptions(self):
        return self.playbackCaptions

    def setPlaybackCaptions(self, newPlaybackCaptions):
        self.playbackCaptions = newPlaybackCaptions

    def getPlugins(self):
        return self.plugins

    def setPlugins(self, newPlugins):
        self.plugins = newPlugins


# @package Kaltura
# @subpackage Client
class KalturaBumpersPlaybackPluginData(KalturaPlaybackPluginData):
    def __init__(self,
            url=NotImplemented,
            streamertype=NotImplemented):
        KalturaPlaybackPluginData.__init__(self)

        # url
        # @var string
        self.url = url

        # Streamer type: hls, dash, progressive.
        # @var string
        self.streamertype = streamertype


    PROPERTY_LOADERS = {
        'url': getXmlNodeText, 
        'streamertype': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaPlaybackPluginData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBumpersPlaybackPluginData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPlaybackPluginData.toParams(self)
        kparams.put("objectType", "KalturaBumpersPlaybackPluginData")
        kparams.addStringIfDefined("url", self.url)
        kparams.addStringIfDefined("streamertype", self.streamertype)
        return kparams

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl

    def getStreamertype(self):
        return self.streamertype

    def setStreamertype(self, newStreamertype):
        self.streamertype = newStreamertype


# @package Kaltura
# @subpackage Client
class KalturaAdsSource(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            type=NotImplemented,
            adsPolicy=NotImplemented,
            adsParam=NotImplemented):
        KalturaObjectBase.__init__(self)

        # File unique identifier
        # @var int
        # @readonly
        self.id = id

        # Device types as defined in the system
        # @var string
        self.type = type

        # Ads policy
        # @var KalturaAdsPolicy
        self.adsPolicy = adsPolicy

        # The parameters to pass to the ads server
        # @var string
        self.adsParam = adsParam


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'type': getXmlNodeText, 
        'adsPolicy': (KalturaEnumsFactory.createString, "KalturaAdsPolicy"), 
        'adsParam': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAdsSource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAdsSource")
        kparams.addStringIfDefined("type", self.type)
        kparams.addStringEnumIfDefined("adsPolicy", self.adsPolicy)
        kparams.addStringIfDefined("adsParam", self.adsParam)
        return kparams

    def getId(self):
        return self.id

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getAdsPolicy(self):
        return self.adsPolicy

    def setAdsPolicy(self, newAdsPolicy):
        self.adsPolicy = newAdsPolicy

    def getAdsParam(self):
        return self.adsParam

    def setAdsParam(self, newAdsParam):
        self.adsParam = newAdsParam


# @package Kaltura
# @subpackage Client
class KalturaAdsContext(KalturaObjectBase):
    def __init__(self,
            sources=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Sources
        # @var array of KalturaAdsSource
        self.sources = sources


    PROPERTY_LOADERS = {
        'sources': (KalturaObjectFactory.createArray, 'KalturaAdsSource'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAdsContext.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAdsContext")
        kparams.addArrayIfDefined("sources", self.sources)
        return kparams

    def getSources(self):
        return self.sources

    def setSources(self, newSources):
        self.sources = newSources


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadJobData(KalturaObjectBase):
    """instructions for upload data (the data file type, how to read the file, etc)"""

    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadJobData")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadExcelJobData(KalturaBulkUploadJobData):
    """instructions for upload data type with Excel"""

    def __init__(self):
        KalturaBulkUploadJobData.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBulkUploadJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadExcelJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadJobData.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadExcelJobData")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadIngestJobData(KalturaBulkUploadJobData):
    """instructions for upload data type with xml"""

    def __init__(self,
            ingestProfileId=NotImplemented,
            disableEpgNotification=NotImplemented):
        KalturaBulkUploadJobData.__init__(self)

        # Identifies the ingest profile that will handle the ingest of programs
        #             Ingest profiles are created separately using the ingest profile service
        # @var int
        self.ingestProfileId = ingestProfileId

        # By default, after the successful ingest, devices will be notified about changes in epg channels.
        #             This parameter disables this notification.
        # @var bool
        self.disableEpgNotification = disableEpgNotification


    PROPERTY_LOADERS = {
        'ingestProfileId': getXmlNodeInt, 
        'disableEpgNotification': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaBulkUploadJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadIngestJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadJobData.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadIngestJobData")
        kparams.addIntIfDefined("ingestProfileId", self.ingestProfileId)
        kparams.addBoolIfDefined("disableEpgNotification", self.disableEpgNotification)
        return kparams

    def getIngestProfileId(self):
        return self.ingestProfileId

    def setIngestProfileId(self, newIngestProfileId):
        self.ingestProfileId = newIngestProfileId

    def getDisableEpgNotification(self):
        return self.disableEpgNotification

    def setDisableEpgNotification(self, newDisableEpgNotification):
        self.disableEpgNotification = newDisableEpgNotification


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadObjectData(KalturaObjectBase):
    """indicates the object type in the bulk file"""

    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadObjectData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadObjectData")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadAssetData(KalturaBulkUploadObjectData):
    """indicates the asset object type in the bulk file"""

    def __init__(self,
            typeId=NotImplemented):
        KalturaBulkUploadObjectData.__init__(self)

        # Identifies the asset type (EPG, Recording, Movie, TV Series, etc). 
        #             Possible values: 0 - EPG linear programs, 1 - Recording; or any asset type ID according to the asset types IDs defined in the system.
        # @var int
        self.typeId = typeId


    PROPERTY_LOADERS = {
        'typeId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaBulkUploadObjectData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadAssetData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadObjectData.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadAssetData")
        kparams.addIntIfDefined("typeId", self.typeId)
        return kparams

    def getTypeId(self):
        return self.typeId

    def setTypeId(self, newTypeId):
        self.typeId = newTypeId


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadDynamicListData(KalturaBulkUploadObjectData):
    """indicates the DynamicList object type in the bulk file"""

    def __init__(self,
            dynamicListId=NotImplemented):
        KalturaBulkUploadObjectData.__init__(self)

        # Identifies the dynamicList Id
        # @var int
        self.dynamicListId = dynamicListId


    PROPERTY_LOADERS = {
        'dynamicListId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaBulkUploadObjectData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadDynamicListData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadObjectData.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadDynamicListData")
        kparams.addIntIfDefined("dynamicListId", self.dynamicListId)
        return kparams

    def getDynamicListId(self):
        return self.dynamicListId

    def setDynamicListId(self, newDynamicListId):
        self.dynamicListId = newDynamicListId


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadUdidDynamicListData(KalturaBulkUploadDynamicListData):
    """indicates the UDID DynamicList object type in the bulk file"""

    def __init__(self,
            dynamicListId=NotImplemented):
        KalturaBulkUploadDynamicListData.__init__(self,
            dynamicListId)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBulkUploadDynamicListData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadUdidDynamicListData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadDynamicListData.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadUdidDynamicListData")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadMediaAssetData(KalturaBulkUploadAssetData):
    """indicates the media asset object type in the bulk file"""

    def __init__(self,
            typeId=NotImplemented):
        KalturaBulkUploadAssetData.__init__(self,
            typeId)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBulkUploadAssetData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadMediaAssetData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadAssetData.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadMediaAssetData")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadLiveAssetData(KalturaBulkUploadMediaAssetData):
    """indicates the media asset object type in the bulk file"""

    def __init__(self,
            typeId=NotImplemented):
        KalturaBulkUploadMediaAssetData.__init__(self,
            typeId)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBulkUploadMediaAssetData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadLiveAssetData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadMediaAssetData.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadLiveAssetData")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadProgramAssetData(KalturaBulkUploadAssetData):
    """indicates the epg asset object type in the bulk file"""

    def __init__(self,
            typeId=NotImplemented):
        KalturaBulkUploadAssetData.__init__(self,
            typeId)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBulkUploadAssetData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadProgramAssetData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadAssetData.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadProgramAssetData")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAssetFileContext(KalturaObjectBase):
    def __init__(self,
            viewLifeCycle=NotImplemented,
            fullLifeCycle=NotImplemented,
            isOfflinePlayBack=NotImplemented,
            isLivePlayBack=NotImplemented):
        KalturaObjectBase.__init__(self)

        # viewLifeCycle
        # @var string
        # @readonly
        self.viewLifeCycle = viewLifeCycle

        # fullLifeCycle
        # @var string
        # @readonly
        self.fullLifeCycle = fullLifeCycle

        # isOfflinePlayBack
        # @var bool
        # @readonly
        self.isOfflinePlayBack = isOfflinePlayBack

        # Is Live PlayBack
        # @var bool
        # @readonly
        self.isLivePlayBack = isLivePlayBack


    PROPERTY_LOADERS = {
        'viewLifeCycle': getXmlNodeText, 
        'fullLifeCycle': getXmlNodeText, 
        'isOfflinePlayBack': getXmlNodeBool, 
        'isLivePlayBack': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetFileContext.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAssetFileContext")
        return kparams

    def getViewLifeCycle(self):
        return self.viewLifeCycle

    def getFullLifeCycle(self):
        return self.fullLifeCycle

    def getIsOfflinePlayBack(self):
        return self.isOfflinePlayBack

    def getIsLivePlayBack(self):
        return self.isLivePlayBack


# @package Kaltura
# @subpackage Client
class KalturaAssetPersonalSelection(KalturaObjectBase):
    """Asset personal selection"""

    def __init__(self,
            assetId=NotImplemented,
            assetType=NotImplemented,
            updateDate=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Asset Id
        # @var int
        # @readonly
        self.assetId = assetId

        # Asset Type
        # @var KalturaAssetType
        # @readonly
        self.assetType = assetType

        # Update Date
        # @var int
        # @readonly
        self.updateDate = updateDate


    PROPERTY_LOADERS = {
        'assetId': getXmlNodeInt, 
        'assetType': (KalturaEnumsFactory.createString, "KalturaAssetType"), 
        'updateDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetPersonalSelection.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAssetPersonalSelection")
        return kparams

    def getAssetId(self):
        return self.assetId

    def getAssetType(self):
        return self.assetType

    def getUpdateDate(self):
        return self.updateDate


# @package Kaltura
# @subpackage Client
class KalturaAssetStatisticsQuery(KalturaObjectBase):
    def __init__(self,
            assetIdIn=NotImplemented,
            assetTypeEqual=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Comma separated list of asset identifiers.
        # @var string
        self.assetIdIn = assetIdIn

        # Asset type
        # @var KalturaAssetType
        self.assetTypeEqual = assetTypeEqual

        # The beginning of the time window to get the statistics for (in epoch).
        # @var int
        self.startDateGreaterThanOrEqual = startDateGreaterThanOrEqual

        # /// The end of the time window to get the statistics for (in epoch).
        # @var int
        self.endDateGreaterThanOrEqual = endDateGreaterThanOrEqual


    PROPERTY_LOADERS = {
        'assetIdIn': getXmlNodeText, 
        'assetTypeEqual': (KalturaEnumsFactory.createString, "KalturaAssetType"), 
        'startDateGreaterThanOrEqual': getXmlNodeInt, 
        'endDateGreaterThanOrEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetStatisticsQuery.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAssetStatisticsQuery")
        kparams.addStringIfDefined("assetIdIn", self.assetIdIn)
        kparams.addStringEnumIfDefined("assetTypeEqual", self.assetTypeEqual)
        kparams.addIntIfDefined("startDateGreaterThanOrEqual", self.startDateGreaterThanOrEqual)
        kparams.addIntIfDefined("endDateGreaterThanOrEqual", self.endDateGreaterThanOrEqual)
        return kparams

    def getAssetIdIn(self):
        return self.assetIdIn

    def setAssetIdIn(self, newAssetIdIn):
        self.assetIdIn = newAssetIdIn

    def getAssetTypeEqual(self):
        return self.assetTypeEqual

    def setAssetTypeEqual(self, newAssetTypeEqual):
        self.assetTypeEqual = newAssetTypeEqual

    def getStartDateGreaterThanOrEqual(self):
        return self.startDateGreaterThanOrEqual

    def setStartDateGreaterThanOrEqual(self, newStartDateGreaterThanOrEqual):
        self.startDateGreaterThanOrEqual = newStartDateGreaterThanOrEqual

    def getEndDateGreaterThanOrEqual(self):
        return self.endDateGreaterThanOrEqual

    def setEndDateGreaterThanOrEqual(self, newEndDateGreaterThanOrEqual):
        self.endDateGreaterThanOrEqual = newEndDateGreaterThanOrEqual


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadStatistics(KalturaObjectBase):
    """Bulk Upload Statistics"""

    def __init__(self,
            pending=NotImplemented,
            uploaded=NotImplemented,
            queued=NotImplemented,
            parsing=NotImplemented,
            processing=NotImplemented,
            processed=NotImplemented,
            success=NotImplemented,
            partial=NotImplemented,
            failed=NotImplemented,
            fatal=NotImplemented):
        KalturaObjectBase.__init__(self)

        # count of bulk upload in pending status
        # @var int
        self.pending = pending

        # count of bulk Uploaded in uploaded status
        # @var int
        self.uploaded = uploaded

        # count of bulk upload in queued status
        # @var int
        self.queued = queued

        # count of bulk upload in parsing status
        # @var int
        self.parsing = parsing

        # count of bulk upload in processing status
        # @var int
        self.processing = processing

        # count of bulk upload in processed status
        # @var int
        self.processed = processed

        # count of bulk upload in success status
        # @var int
        self.success = success

        # count of bulk upload in partial status
        # @var int
        self.partial = partial

        # count of bulk upload in failed status
        # @var int
        self.failed = failed

        # count of bulk upload in fatal status
        # @var int
        self.fatal = fatal


    PROPERTY_LOADERS = {
        'pending': getXmlNodeInt, 
        'uploaded': getXmlNodeInt, 
        'queued': getXmlNodeInt, 
        'parsing': getXmlNodeInt, 
        'processing': getXmlNodeInt, 
        'processed': getXmlNodeInt, 
        'success': getXmlNodeInt, 
        'partial': getXmlNodeInt, 
        'failed': getXmlNodeInt, 
        'fatal': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadStatistics.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadStatistics")
        kparams.addIntIfDefined("pending", self.pending)
        kparams.addIntIfDefined("uploaded", self.uploaded)
        kparams.addIntIfDefined("queued", self.queued)
        kparams.addIntIfDefined("parsing", self.parsing)
        kparams.addIntIfDefined("processing", self.processing)
        kparams.addIntIfDefined("processed", self.processed)
        kparams.addIntIfDefined("success", self.success)
        kparams.addIntIfDefined("partial", self.partial)
        kparams.addIntIfDefined("failed", self.failed)
        kparams.addIntIfDefined("fatal", self.fatal)
        return kparams

    def getPending(self):
        return self.pending

    def setPending(self, newPending):
        self.pending = newPending

    def getUploaded(self):
        return self.uploaded

    def setUploaded(self, newUploaded):
        self.uploaded = newUploaded

    def getQueued(self):
        return self.queued

    def setQueued(self, newQueued):
        self.queued = newQueued

    def getParsing(self):
        return self.parsing

    def setParsing(self, newParsing):
        self.parsing = newParsing

    def getProcessing(self):
        return self.processing

    def setProcessing(self, newProcessing):
        self.processing = newProcessing

    def getProcessed(self):
        return self.processed

    def setProcessed(self, newProcessed):
        self.processed = newProcessed

    def getSuccess(self):
        return self.success

    def setSuccess(self, newSuccess):
        self.success = newSuccess

    def getPartial(self):
        return self.partial

    def setPartial(self, newPartial):
        self.partial = newPartial

    def getFailed(self):
        return self.failed

    def setFailed(self, newFailed):
        self.failed = newFailed

    def getFatal(self):
        return self.fatal

    def setFatal(self, newFatal):
        self.fatal = newFatal


# @package Kaltura
# @subpackage Client
class KalturaOTTCategory(KalturaObjectBase):
    """Category details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            parentCategoryId=NotImplemented,
            childCategories=NotImplemented,
            channels=NotImplemented,
            images=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Unique identifier for the category
        # @var int
        # @readonly
        self.id = id

        # Category name
        # @var string
        self.name = name

        # Category parent identifier
        # @var int
        self.parentCategoryId = parentCategoryId

        # Child categories
        # @var array of KalturaOTTCategory
        self.childCategories = childCategories

        # Category channels
        # @var array of KalturaChannel
        self.channels = channels

        # Category images
        # @var array of KalturaMediaImage
        self.images = images


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'parentCategoryId': getXmlNodeInt, 
        'childCategories': (KalturaObjectFactory.createArray, 'KalturaObjectBase'), 
        'channels': (KalturaObjectFactory.createArray, 'KalturaChannel'), 
        'images': (KalturaObjectFactory.createArray, 'KalturaMediaImage'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaOTTCategory.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaOTTCategory")
        kparams.addStringIfDefined("name", self.name)
        kparams.addIntIfDefined("parentCategoryId", self.parentCategoryId)
        kparams.addArrayIfDefined("childCategories", self.childCategories)
        kparams.addArrayIfDefined("channels", self.channels)
        kparams.addArrayIfDefined("images", self.images)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getParentCategoryId(self):
        return self.parentCategoryId

    def setParentCategoryId(self, newParentCategoryId):
        self.parentCategoryId = newParentCategoryId

    def getChildCategories(self):
        return self.childCategories

    def setChildCategories(self, newChildCategories):
        self.childCategories = newChildCategories

    def getChannels(self):
        return self.channels

    def setChannels(self, newChannels):
        self.channels = newChannels

    def getImages(self):
        return self.images

    def setImages(self, newImages):
        self.images = newImages


# @package Kaltura
# @subpackage Client
class KalturaCategoryTree(KalturaObjectBase):
    """Category details"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            multilingualName=NotImplemented,
            children=NotImplemented,
            unifiedChannels=NotImplemented,
            dynamicData=NotImplemented,
            images=NotImplemented,
            isActive=NotImplemented,
            startDateInSeconds=NotImplemented,
            endDateInSeconds=NotImplemented,
            type=NotImplemented,
            versionId=NotImplemented,
            virtualAssetId=NotImplemented,
            referenceId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Unique identifier for the category item
        # @var int
        # @readonly
        self.id = id

        # Category name
        # @var string
        # @readonly
        self.name = name

        # Category name
        # @var array of KalturaTranslationToken
        self.multilingualName = multilingualName

        # List of category tree
        # @var array of KalturaCategoryTree
        # @readonly
        self.children = children

        # List of unified Channels.
        # @var array of KalturaUnifiedChannelInfo
        self.unifiedChannels = unifiedChannels

        # Dynamic data
        # @var map
        self.dynamicData = dynamicData

        # Category images
        # @var array of KalturaImage
        self.images = images

        # Category active status
        # @var bool
        self.isActive = isActive

        # Start date in seconds
        # @var int
        self.startDateInSeconds = startDateInSeconds

        # End date in seconds
        # @var int
        self.endDateInSeconds = endDateInSeconds

        # Category type
        # @var string
        # @insertonly
        self.type = type

        # Unique identifier for the category version
        # @var int
        # @readonly
        self.versionId = versionId

        # Virtual asset id
        # @var int
        # @readonly
        self.virtualAssetId = virtualAssetId

        # Category reference identifier
        # @var string
        # @readonly
        self.referenceId = referenceId


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'multilingualName': (KalturaObjectFactory.createArray, 'KalturaTranslationToken'), 
        'children': (KalturaObjectFactory.createArray, 'KalturaObjectBase'), 
        'unifiedChannels': (KalturaObjectFactory.createArray, 'KalturaUnifiedChannelInfo'), 
        'dynamicData': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
        'images': (KalturaObjectFactory.createArray, 'KalturaImage'), 
        'isActive': getXmlNodeBool, 
        'startDateInSeconds': getXmlNodeInt, 
        'endDateInSeconds': getXmlNodeInt, 
        'type': getXmlNodeText, 
        'versionId': getXmlNodeInt, 
        'virtualAssetId': getXmlNodeInt, 
        'referenceId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryTree.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCategoryTree")
        kparams.addArrayIfDefined("multilingualName", self.multilingualName)
        kparams.addArrayIfDefined("unifiedChannels", self.unifiedChannels)
        kparams.addMapIfDefined("dynamicData", self.dynamicData)
        kparams.addArrayIfDefined("images", self.images)
        kparams.addBoolIfDefined("isActive", self.isActive)
        kparams.addIntIfDefined("startDateInSeconds", self.startDateInSeconds)
        kparams.addIntIfDefined("endDateInSeconds", self.endDateInSeconds)
        kparams.addStringIfDefined("type", self.type)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def getMultilingualName(self):
        return self.multilingualName

    def setMultilingualName(self, newMultilingualName):
        self.multilingualName = newMultilingualName

    def getChildren(self):
        return self.children

    def getUnifiedChannels(self):
        return self.unifiedChannels

    def setUnifiedChannels(self, newUnifiedChannels):
        self.unifiedChannels = newUnifiedChannels

    def getDynamicData(self):
        return self.dynamicData

    def setDynamicData(self, newDynamicData):
        self.dynamicData = newDynamicData

    def getImages(self):
        return self.images

    def setImages(self, newImages):
        self.images = newImages

    def getIsActive(self):
        return self.isActive

    def setIsActive(self, newIsActive):
        self.isActive = newIsActive

    def getStartDateInSeconds(self):
        return self.startDateInSeconds

    def setStartDateInSeconds(self, newStartDateInSeconds):
        self.startDateInSeconds = newStartDateInSeconds

    def getEndDateInSeconds(self):
        return self.endDateInSeconds

    def setEndDateInSeconds(self, newEndDateInSeconds):
        self.endDateInSeconds = newEndDateInSeconds

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getVersionId(self):
        return self.versionId

    def getVirtualAssetId(self):
        return self.virtualAssetId

    def getReferenceId(self):
        return self.referenceId


# @package Kaltura
# @subpackage Client
class KalturaCDNPartnerSettings(KalturaObjectBase):
    def __init__(self,
            defaultAdapterId=NotImplemented,
            defaultRecordingAdapterId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Default CDN adapter identifier
        # @var int
        self.defaultAdapterId = defaultAdapterId

        # Default recording CDN adapter identifier
        # @var int
        self.defaultRecordingAdapterId = defaultRecordingAdapterId


    PROPERTY_LOADERS = {
        'defaultAdapterId': getXmlNodeInt, 
        'defaultRecordingAdapterId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCDNPartnerSettings.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCDNPartnerSettings")
        kparams.addIntIfDefined("defaultAdapterId", self.defaultAdapterId)
        kparams.addIntIfDefined("defaultRecordingAdapterId", self.defaultRecordingAdapterId)
        return kparams

    def getDefaultAdapterId(self):
        return self.defaultAdapterId

    def setDefaultAdapterId(self, newDefaultAdapterId):
        self.defaultAdapterId = newDefaultAdapterId

    def getDefaultRecordingAdapterId(self):
        return self.defaultRecordingAdapterId

    def setDefaultRecordingAdapterId(self, newDefaultRecordingAdapterId):
        self.defaultRecordingAdapterId = newDefaultRecordingAdapterId


# @package Kaltura
# @subpackage Client
class KalturaCompensation(KalturaObjectBase):
    """Compensation request parameters"""

    def __init__(self,
            id=NotImplemented,
            subscriptionId=NotImplemented,
            compensationType=NotImplemented,
            amount=NotImplemented,
            totalRenewalIterations=NotImplemented,
            appliedRenewalIterations=NotImplemented,
            purchaseId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Compensation identifier
        # @var int
        # @readonly
        self.id = id

        # Subscription identifier
        # @var int
        # @readonly
        self.subscriptionId = subscriptionId

        # Compensation type
        # @var KalturaCompensationType
        self.compensationType = compensationType

        # Compensation amount
        # @var float
        self.amount = amount

        # The number of renewals for compensation
        # @var int
        self.totalRenewalIterations = totalRenewalIterations

        # The number of renewals the compensation was already applied on
        # @var int
        # @readonly
        self.appliedRenewalIterations = appliedRenewalIterations

        # Purchase identifier
        # @var int
        self.purchaseId = purchaseId


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'subscriptionId': getXmlNodeInt, 
        'compensationType': (KalturaEnumsFactory.createString, "KalturaCompensationType"), 
        'amount': getXmlNodeFloat, 
        'totalRenewalIterations': getXmlNodeInt, 
        'appliedRenewalIterations': getXmlNodeInt, 
        'purchaseId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCompensation.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCompensation")
        kparams.addStringEnumIfDefined("compensationType", self.compensationType)
        kparams.addFloatIfDefined("amount", self.amount)
        kparams.addIntIfDefined("totalRenewalIterations", self.totalRenewalIterations)
        kparams.addIntIfDefined("purchaseId", self.purchaseId)
        return kparams

    def getId(self):
        return self.id

    def getSubscriptionId(self):
        return self.subscriptionId

    def getCompensationType(self):
        return self.compensationType

    def setCompensationType(self, newCompensationType):
        self.compensationType = newCompensationType

    def getAmount(self):
        return self.amount

    def setAmount(self, newAmount):
        self.amount = newAmount

    def getTotalRenewalIterations(self):
        return self.totalRenewalIterations

    def setTotalRenewalIterations(self, newTotalRenewalIterations):
        self.totalRenewalIterations = newTotalRenewalIterations

    def getAppliedRenewalIterations(self):
        return self.appliedRenewalIterations

    def getPurchaseId(self):
        return self.purchaseId

    def setPurchaseId(self, newPurchaseId):
        self.purchaseId = newPurchaseId


# @package Kaltura
# @subpackage Client
class KalturaCouponGenerationOptions(KalturaObjectBase):
    """Coupon generation options"""

    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCouponGenerationOptions.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCouponGenerationOptions")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaPublicCouponGenerationOptions(KalturaCouponGenerationOptions):
    def __init__(self,
            code=NotImplemented):
        KalturaCouponGenerationOptions.__init__(self)

        # Coupon code (name)
        # @var string
        self.code = code


    PROPERTY_LOADERS = {
        'code': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCouponGenerationOptions.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPublicCouponGenerationOptions.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCouponGenerationOptions.toParams(self)
        kparams.put("objectType", "KalturaPublicCouponGenerationOptions")
        kparams.addStringIfDefined("code", self.code)
        return kparams

    def getCode(self):
        return self.code

    def setCode(self, newCode):
        self.code = newCode


# @package Kaltura
# @subpackage Client
class KalturaRandomCouponGenerationOptions(KalturaCouponGenerationOptions):
    def __init__(self,
            numberOfCoupons=NotImplemented,
            useLetters=NotImplemented,
            useNumbers=NotImplemented,
            useSpecialCharacters=NotImplemented):
        KalturaCouponGenerationOptions.__init__(self)

        # Number of coupons to generate
        # @var int
        self.numberOfCoupons = numberOfCoupons

        # Indicates whether to use letters in the generated codes (default is true)
        # @var bool
        self.useLetters = useLetters

        # Indicates whether to use numbers in the generated codes (default is true)
        # @var bool
        self.useNumbers = useNumbers

        # Indicates whether to use special characters in the generated codes(default is true)
        # @var bool
        self.useSpecialCharacters = useSpecialCharacters


    PROPERTY_LOADERS = {
        'numberOfCoupons': getXmlNodeInt, 
        'useLetters': getXmlNodeBool, 
        'useNumbers': getXmlNodeBool, 
        'useSpecialCharacters': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaCouponGenerationOptions.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRandomCouponGenerationOptions.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCouponGenerationOptions.toParams(self)
        kparams.put("objectType", "KalturaRandomCouponGenerationOptions")
        kparams.addIntIfDefined("numberOfCoupons", self.numberOfCoupons)
        kparams.addBoolIfDefined("useLetters", self.useLetters)
        kparams.addBoolIfDefined("useNumbers", self.useNumbers)
        kparams.addBoolIfDefined("useSpecialCharacters", self.useSpecialCharacters)
        return kparams

    def getNumberOfCoupons(self):
        return self.numberOfCoupons

    def setNumberOfCoupons(self, newNumberOfCoupons):
        self.numberOfCoupons = newNumberOfCoupons

    def getUseLetters(self):
        return self.useLetters

    def setUseLetters(self, newUseLetters):
        self.useLetters = newUseLetters

    def getUseNumbers(self):
        return self.useNumbers

    def setUseNumbers(self, newUseNumbers):
        self.useNumbers = newUseNumbers

    def getUseSpecialCharacters(self):
        return self.useSpecialCharacters

    def setUseSpecialCharacters(self, newUseSpecialCharacters):
        self.useSpecialCharacters = newUseSpecialCharacters


# @package Kaltura
# @subpackage Client
class KalturaKeyValue(KalturaObjectBase):
    def __init__(self,
            key=NotImplemented,
            value=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Key
        # @var string
        self.key = key

        # Value
        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'key': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaKeyValue.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaKeyValue")
        kparams.addStringIfDefined("key", self.key)
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getKey(self):
        return self.key

    def setKey(self, newKey):
        self.key = newKey

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaEmailMessage(KalturaObjectBase):
    def __init__(self,
            templateName=NotImplemented,
            subject=NotImplemented,
            firstName=NotImplemented,
            lastName=NotImplemented,
            senderName=NotImplemented,
            senderFrom=NotImplemented,
            senderTo=NotImplemented,
            bccAddress=NotImplemented,
            extraParameters=NotImplemented):
        KalturaObjectBase.__init__(self)

        # email template name
        # @var string
        self.templateName = templateName

        # email subject
        # @var string
        self.subject = subject

        # first name
        # @var string
        self.firstName = firstName

        # last name
        # @var string
        self.lastName = lastName

        # sender name
        # @var string
        self.senderName = senderName

        # sender from
        # @var string
        self.senderFrom = senderFrom

        # sender to
        # @var string
        self.senderTo = senderTo

        # bcc address - seperated by comma
        # @var string
        self.bccAddress = bccAddress

        # extra parameters
        # @var array of KalturaKeyValue
        self.extraParameters = extraParameters


    PROPERTY_LOADERS = {
        'templateName': getXmlNodeText, 
        'subject': getXmlNodeText, 
        'firstName': getXmlNodeText, 
        'lastName': getXmlNodeText, 
        'senderName': getXmlNodeText, 
        'senderFrom': getXmlNodeText, 
        'senderTo': getXmlNodeText, 
        'bccAddress': getXmlNodeText, 
        'extraParameters': (KalturaObjectFactory.createArray, 'KalturaKeyValue'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEmailMessage.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaEmailMessage")
        kparams.addStringIfDefined("templateName", self.templateName)
        kparams.addStringIfDefined("subject", self.subject)
        kparams.addStringIfDefined("firstName", self.firstName)
        kparams.addStringIfDefined("lastName", self.lastName)
        kparams.addStringIfDefined("senderName", self.senderName)
        kparams.addStringIfDefined("senderFrom", self.senderFrom)
        kparams.addStringIfDefined("senderTo", self.senderTo)
        kparams.addStringIfDefined("bccAddress", self.bccAddress)
        kparams.addArrayIfDefined("extraParameters", self.extraParameters)
        return kparams

    def getTemplateName(self):
        return self.templateName

    def setTemplateName(self, newTemplateName):
        self.templateName = newTemplateName

    def getSubject(self):
        return self.subject

    def setSubject(self, newSubject):
        self.subject = newSubject

    def getFirstName(self):
        return self.firstName

    def setFirstName(self, newFirstName):
        self.firstName = newFirstName

    def getLastName(self):
        return self.lastName

    def setLastName(self, newLastName):
        self.lastName = newLastName

    def getSenderName(self):
        return self.senderName

    def setSenderName(self, newSenderName):
        self.senderName = newSenderName

    def getSenderFrom(self):
        return self.senderFrom

    def setSenderFrom(self, newSenderFrom):
        self.senderFrom = newSenderFrom

    def getSenderTo(self):
        return self.senderTo

    def setSenderTo(self, newSenderTo):
        self.senderTo = newSenderTo

    def getBccAddress(self):
        return self.bccAddress

    def setBccAddress(self, newBccAddress):
        self.bccAddress = newBccAddress

    def getExtraParameters(self):
        return self.extraParameters

    def setExtraParameters(self, newExtraParameters):
        self.extraParameters = newExtraParameters


# @package Kaltura
# @subpackage Client
class KalturaEntitlementRenewal(KalturaObjectBase):
    def __init__(self,
            price=NotImplemented,
            date=NotImplemented,
            purchaseId=NotImplemented,
            subscriptionId=NotImplemented,
            userId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Price that is going to be paid on the renewal
        # @var KalturaPrice
        self.price = price

        # Next renewal date
        # @var int
        self.date = date

        # Puchase ID
        # @var int
        self.purchaseId = purchaseId

        # Subscription ID
        # @var int
        self.subscriptionId = subscriptionId

        # User ID
        # @var int
        self.userId = userId


    PROPERTY_LOADERS = {
        'price': (KalturaObjectFactory.create, 'KalturaPrice'), 
        'date': getXmlNodeInt, 
        'purchaseId': getXmlNodeInt, 
        'subscriptionId': getXmlNodeInt, 
        'userId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntitlementRenewal.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaEntitlementRenewal")
        kparams.addObjectIfDefined("price", self.price)
        kparams.addIntIfDefined("date", self.date)
        kparams.addIntIfDefined("purchaseId", self.purchaseId)
        kparams.addIntIfDefined("subscriptionId", self.subscriptionId)
        kparams.addIntIfDefined("userId", self.userId)
        return kparams

    def getPrice(self):
        return self.price

    def setPrice(self, newPrice):
        self.price = newPrice

    def getDate(self):
        return self.date

    def setDate(self, newDate):
        self.date = newDate

    def getPurchaseId(self):
        return self.purchaseId

    def setPurchaseId(self, newPurchaseId):
        self.purchaseId = newPurchaseId

    def getSubscriptionId(self):
        return self.subscriptionId

    def setSubscriptionId(self, newSubscriptionId):
        self.subscriptionId = newSubscriptionId

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId


# @package Kaltura
# @subpackage Client
class KalturaEpgServicePartnerConfiguration(KalturaObjectBase):
    def __init__(self,
            numberOfSlots=NotImplemented,
            firstSlotOffset=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The number of slots (NOS) that are supported (1, 2, 3, 4, 6, 8, 12, 24)
        # @var int
        self.numberOfSlots = numberOfSlots

        # The offset of the first slot from 00:00 UTC
        # @var int
        self.firstSlotOffset = firstSlotOffset


    PROPERTY_LOADERS = {
        'numberOfSlots': getXmlNodeInt, 
        'firstSlotOffset': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEpgServicePartnerConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaEpgServicePartnerConfiguration")
        kparams.addIntIfDefined("numberOfSlots", self.numberOfSlots)
        kparams.addIntIfDefined("firstSlotOffset", self.firstSlotOffset)
        return kparams

    def getNumberOfSlots(self):
        return self.numberOfSlots

    def setNumberOfSlots(self, newNumberOfSlots):
        self.numberOfSlots = newNumberOfSlots

    def getFirstSlotOffset(self):
        return self.firstSlotOffset

    def setFirstSlotOffset(self, newFirstSlotOffset):
        self.firstSlotOffset = newFirstSlotOffset


# @package Kaltura
# @subpackage Client
class KalturaEventNotificationScope(KalturaObjectBase):
    """Kaltura event notification scope"""

    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEventNotificationScope.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaEventNotificationScope")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaEventObject(KalturaObjectBase):
    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEventObject.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaEventObject")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaEventNotificationObjectScope(KalturaEventNotificationScope):
    """Kaltura event notification object scope"""

    def __init__(self,
            eventObject=NotImplemented):
        KalturaEventNotificationScope.__init__(self)

        # Event object to fire
        # @var KalturaEventObject
        self.eventObject = eventObject


    PROPERTY_LOADERS = {
        'eventObject': (KalturaObjectFactory.create, 'KalturaEventObject'), 
    }

    def fromXml(self, node):
        KalturaEventNotificationScope.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEventNotificationObjectScope.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEventNotificationScope.toParams(self)
        kparams.put("objectType", "KalturaEventNotificationObjectScope")
        kparams.addObjectIfDefined("eventObject", self.eventObject)
        return kparams

    def getEventObject(self):
        return self.eventObject

    def setEventObject(self, newEventObject):
        self.eventObject = newEventObject


# @package Kaltura
# @subpackage Client
class KalturaAssetEvent(KalturaEventObject):
    def __init__(self,
            userId=NotImplemented,
            assetId=NotImplemented,
            type=NotImplemented,
            externalId=NotImplemented):
        KalturaEventObject.__init__(self)

        # User Id
        # @var int
        # @readonly
        self.userId = userId

        # Asset Id
        # @var int
        # @readonly
        self.assetId = assetId

        # Identifies the asset type (EPG, Recording, Movie, TV Series, etc). 
        #             Possible values: 0 - EPG linear programs, 1 - Recording; or any asset type ID according to the asset types IDs defined in the system.
        # @var int
        # @readonly
        self.type = type

        # External identifier for the asset
        # @var string
        # @readonly
        self.externalId = externalId


    PROPERTY_LOADERS = {
        'userId': getXmlNodeInt, 
        'assetId': getXmlNodeInt, 
        'type': getXmlNodeInt, 
        'externalId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaEventObject.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetEvent.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEventObject.toParams(self)
        kparams.put("objectType", "KalturaAssetEvent")
        return kparams

    def getUserId(self):
        return self.userId

    def getAssetId(self):
        return self.assetId

    def getType(self):
        return self.type

    def getExternalId(self):
        return self.externalId


# @package Kaltura
# @subpackage Client
class KalturaProgramAssetEvent(KalturaAssetEvent):
    def __init__(self,
            userId=NotImplemented,
            assetId=NotImplemented,
            type=NotImplemented,
            externalId=NotImplemented,
            liveAssetId=NotImplemented):
        KalturaAssetEvent.__init__(self,
            userId,
            assetId,
            type,
            externalId)

        # The  live asset Id that was identified according liveAssetExternalId
        # @var int
        # @readonly
        self.liveAssetId = liveAssetId


    PROPERTY_LOADERS = {
        'liveAssetId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaAssetEvent.fromXml(self, node)
        self.fromXmlImpl(node, KalturaProgramAssetEvent.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetEvent.toParams(self)
        kparams.put("objectType", "KalturaProgramAssetEvent")
        return kparams

    def getLiveAssetId(self):
        return self.liveAssetId


# @package Kaltura
# @subpackage Client
class KalturaBookmarkEvent(KalturaEventObject):
    def __init__(self,
            userId=NotImplemented,
            householdId=NotImplemented,
            assetId=NotImplemented,
            fileId=NotImplemented,
            position=NotImplemented,
            action=NotImplemented,
            productType=NotImplemented,
            productId=NotImplemented):
        KalturaEventObject.__init__(self)

        # User Id
        # @var int
        self.userId = userId

        # Household Id
        # @var int
        self.householdId = householdId

        # Asset Id
        # @var int
        self.assetId = assetId

        # File Id
        # @var int
        self.fileId = fileId

        # position
        # @var int
        self.position = position

        # Bookmark Action Type
        # @var KalturaBookmarkActionType
        self.action = action

        # Product Type
        # @var KalturaTransactionType
        self.productType = productType

        # Product Id
        # @var int
        self.productId = productId


    PROPERTY_LOADERS = {
        'userId': getXmlNodeInt, 
        'householdId': getXmlNodeInt, 
        'assetId': getXmlNodeInt, 
        'fileId': getXmlNodeInt, 
        'position': getXmlNodeInt, 
        'action': (KalturaEnumsFactory.createString, "KalturaBookmarkActionType"), 
        'productType': (KalturaEnumsFactory.createString, "KalturaTransactionType"), 
        'productId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaEventObject.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBookmarkEvent.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEventObject.toParams(self)
        kparams.put("objectType", "KalturaBookmarkEvent")
        kparams.addIntIfDefined("userId", self.userId)
        kparams.addIntIfDefined("householdId", self.householdId)
        kparams.addIntIfDefined("assetId", self.assetId)
        kparams.addIntIfDefined("fileId", self.fileId)
        kparams.addIntIfDefined("position", self.position)
        kparams.addStringEnumIfDefined("action", self.action)
        kparams.addStringEnumIfDefined("productType", self.productType)
        kparams.addIntIfDefined("productId", self.productId)
        return kparams

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getHouseholdId(self):
        return self.householdId

    def setHouseholdId(self, newHouseholdId):
        self.householdId = newHouseholdId

    def getAssetId(self):
        return self.assetId

    def setAssetId(self, newAssetId):
        self.assetId = newAssetId

    def getFileId(self):
        return self.fileId

    def setFileId(self, newFileId):
        self.fileId = newFileId

    def getPosition(self):
        return self.position

    def setPosition(self, newPosition):
        self.position = newPosition

    def getAction(self):
        return self.action

    def setAction(self, newAction):
        self.action = newAction

    def getProductType(self):
        return self.productType

    def setProductType(self, newProductType):
        self.productType = newProductType

    def getProductId(self):
        return self.productId

    def setProductId(self, newProductId):
        self.productId = newProductId


# @package Kaltura
# @subpackage Client
class KalturaConcurrencyViolation(KalturaEventObject):
    def __init__(self,
            timestamp=NotImplemented,
            udid=NotImplemented,
            assetId=NotImplemented,
            violationRule=NotImplemented,
            householdId=NotImplemented,
            userId=NotImplemented):
        KalturaEventObject.__init__(self)

        # Timestamp
        # @var int
        self.timestamp = timestamp

        # UDID
        # @var string
        self.udid = udid

        # Asset Id
        # @var string
        self.assetId = assetId

        # Violation Rule
        # @var string
        self.violationRule = violationRule

        # Household Id
        # @var string
        self.householdId = householdId

        # User Id
        # @var string
        self.userId = userId


    PROPERTY_LOADERS = {
        'timestamp': getXmlNodeInt, 
        'udid': getXmlNodeText, 
        'assetId': getXmlNodeText, 
        'violationRule': getXmlNodeText, 
        'householdId': getXmlNodeText, 
        'userId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaEventObject.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConcurrencyViolation.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEventObject.toParams(self)
        kparams.put("objectType", "KalturaConcurrencyViolation")
        kparams.addIntIfDefined("timestamp", self.timestamp)
        kparams.addStringIfDefined("udid", self.udid)
        kparams.addStringIfDefined("assetId", self.assetId)
        kparams.addStringIfDefined("violationRule", self.violationRule)
        kparams.addStringIfDefined("householdId", self.householdId)
        kparams.addStringIfDefined("userId", self.userId)
        return kparams

    def getTimestamp(self):
        return self.timestamp

    def setTimestamp(self, newTimestamp):
        self.timestamp = newTimestamp

    def getUdid(self):
        return self.udid

    def setUdid(self, newUdid):
        self.udid = newUdid

    def getAssetId(self):
        return self.assetId

    def setAssetId(self, newAssetId):
        self.assetId = newAssetId

    def getViolationRule(self):
        return self.violationRule

    def setViolationRule(self, newViolationRule):
        self.violationRule = newViolationRule

    def getHouseholdId(self):
        return self.householdId

    def setHouseholdId(self, newHouseholdId):
        self.householdId = newHouseholdId

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId


# @package Kaltura
# @subpackage Client
class KalturaTriggerCampaignEvent(KalturaEventObject):
    def __init__(self,
            userId=NotImplemented,
            campaignId=NotImplemented,
            udid=NotImplemented,
            householdId=NotImplemented):
        KalturaEventObject.__init__(self)

        # User Id
        # @var int
        # @readonly
        self.userId = userId

        # Campaign Id
        # @var int
        # @readonly
        self.campaignId = campaignId

        # Udid
        # @var string
        # @readonly
        self.udid = udid

        # Household Id
        # @var int
        # @readonly
        self.householdId = householdId


    PROPERTY_LOADERS = {
        'userId': getXmlNodeInt, 
        'campaignId': getXmlNodeInt, 
        'udid': getXmlNodeText, 
        'householdId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaEventObject.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTriggerCampaignEvent.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEventObject.toParams(self)
        kparams.put("objectType", "KalturaTriggerCampaignEvent")
        return kparams

    def getUserId(self):
        return self.userId

    def getCampaignId(self):
        return self.campaignId

    def getUdid(self):
        return self.udid

    def getHouseholdId(self):
        return self.householdId


# @package Kaltura
# @subpackage Client
class KalturaDevicePin(KalturaObjectBase):
    """Device pin"""

    def __init__(self,
            pin=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Device pin
        # @var string
        self.pin = pin


    PROPERTY_LOADERS = {
        'pin': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDevicePin.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaDevicePin")
        kparams.addStringIfDefined("pin", self.pin)
        return kparams

    def getPin(self):
        return self.pin

    def setPin(self, newPin):
        self.pin = newPin


# @package Kaltura
# @subpackage Client
class KalturaLoginSession(KalturaObjectBase):
    """Login response"""

    def __init__(self,
            ks=NotImplemented,
            expiry=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Access token in a KS format
        # @var string
        self.ks = ks

        # Expiration
        # @var int
        self.expiry = expiry


    PROPERTY_LOADERS = {
        'ks': getXmlNodeText, 
        'expiry': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLoginSession.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLoginSession")
        kparams.addStringIfDefined("ks", self.ks)
        kparams.addIntIfDefined("expiry", self.expiry)
        return kparams

    def getKs(self):
        return self.ks

    def setKs(self, newKs):
        self.ks = newKs

    def getExpiry(self):
        return self.expiry

    def setExpiry(self, newExpiry):
        self.expiry = newExpiry


# @package Kaltura
# @subpackage Client
class KalturaLoginResponse(KalturaObjectBase):
    def __init__(self,
            user=NotImplemented,
            loginSession=NotImplemented):
        KalturaObjectBase.__init__(self)

        # User
        # @var KalturaOTTUser
        self.user = user

        # Kaltura login session details
        # @var KalturaLoginSession
        self.loginSession = loginSession


    PROPERTY_LOADERS = {
        'user': (KalturaObjectFactory.create, 'KalturaOTTUser'), 
        'loginSession': (KalturaObjectFactory.create, 'KalturaLoginSession'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLoginResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLoginResponse")
        kparams.addObjectIfDefined("user", self.user)
        kparams.addObjectIfDefined("loginSession", self.loginSession)
        return kparams

    def getUser(self):
        return self.user

    def setUser(self, newUser):
        self.user = newUser

    def getLoginSession(self):
        return self.loginSession

    def setLoginSession(self, newLoginSession):
        self.loginSession = newLoginSession


# @package Kaltura
# @subpackage Client
class KalturaDynamicData(KalturaObjectBase):
    def __init__(self,
            key=NotImplemented,
            value=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Key
        # @var string
        self.key = key

        # Value
        # @var KalturaValue
        self.value = value


    PROPERTY_LOADERS = {
        'key': getXmlNodeText, 
        'value': (KalturaObjectFactory.create, 'KalturaValue'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDynamicData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaDynamicData")
        kparams.addStringIfDefined("key", self.key)
        kparams.addObjectIfDefined("value", self.value)
        return kparams

    def getKey(self):
        return self.key

    def setKey(self, newKey):
        self.key = newKey

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaPaymentGatewayConfiguration(KalturaObjectBase):
    def __init__(self,
            paymentGatewayConfiguration=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Payment gateway configuration
        # @var array of KalturaKeyValue
        self.paymentGatewayConfiguration = paymentGatewayConfiguration


    PROPERTY_LOADERS = {
        'paymentGatewayConfiguration': (KalturaObjectFactory.createArray, 'KalturaKeyValue'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPaymentGatewayConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPaymentGatewayConfiguration")
        kparams.addArrayIfDefined("paymentGatewayConfiguration", self.paymentGatewayConfiguration)
        return kparams

    def getPaymentGatewayConfiguration(self):
        return self.paymentGatewayConfiguration

    def setPaymentGatewayConfiguration(self, newPaymentGatewayConfiguration):
        self.paymentGatewayConfiguration = newPaymentGatewayConfiguration


# @package Kaltura
# @subpackage Client
class KalturaHouseholdQuota(KalturaObjectBase):
    def __init__(self,
            householdId=NotImplemented,
            totalQuota=NotImplemented,
            availableQuota=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Household identifier
        # @var int
        # @readonly
        self.householdId = householdId

        # Total quota that is allocated to the household
        # @var int
        # @readonly
        self.totalQuota = totalQuota

        # Available quota that household has remaining
        # @var int
        # @readonly
        self.availableQuota = availableQuota


    PROPERTY_LOADERS = {
        'householdId': getXmlNodeInt, 
        'totalQuota': getXmlNodeInt, 
        'availableQuota': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHouseholdQuota.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaHouseholdQuota")
        return kparams

    def getHouseholdId(self):
        return self.householdId

    def getTotalQuota(self):
        return self.totalQuota

    def getAvailableQuota(self):
        return self.availableQuota


# @package Kaltura
# @subpackage Client
class KalturaContentResource(KalturaObjectBase):
    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaContentResource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaContentResource")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaUploadedFileTokenResource(KalturaContentResource):
    def __init__(self,
            token=NotImplemented):
        KalturaContentResource.__init__(self)

        # Token that returned from uploadToken.add action
        # @var string
        self.token = token


    PROPERTY_LOADERS = {
        'token': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaContentResource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUploadedFileTokenResource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaContentResource.toParams(self)
        kparams.put("objectType", "KalturaUploadedFileTokenResource")
        kparams.addStringIfDefined("token", self.token)
        return kparams

    def getToken(self):
        return self.token

    def setToken(self, newToken):
        self.token = newToken


# @package Kaltura
# @subpackage Client
class KalturaUrlResource(KalturaContentResource):
    def __init__(self,
            url=NotImplemented):
        KalturaContentResource.__init__(self)

        # URL of the content
        # @var string
        self.url = url


    PROPERTY_LOADERS = {
        'url': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaContentResource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUrlResource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaContentResource.toParams(self)
        kparams.put("objectType", "KalturaUrlResource")
        kparams.addStringIfDefined("url", self.url)
        return kparams

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl


# @package Kaltura
# @subpackage Client
class KalturaIngestStatusEpgConfiguration(KalturaObjectBase):
    def __init__(self,
            isSupported=NotImplemented,
            retainingPeriod=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Defines whether partner in question enabled core ingest status service.
        # @var bool
        self.isSupported = isSupported

        # Defines the time in seconds that the service retain information about ingest status.
        # @var int
        self.retainingPeriod = retainingPeriod


    PROPERTY_LOADERS = {
        'isSupported': getXmlNodeBool, 
        'retainingPeriod': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIngestStatusEpgConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaIngestStatusEpgConfiguration")
        kparams.addBoolIfDefined("isSupported", self.isSupported)
        kparams.addIntIfDefined("retainingPeriod", self.retainingPeriod)
        return kparams

    def getIsSupported(self):
        return self.isSupported

    def setIsSupported(self, newIsSupported):
        self.isSupported = newIsSupported

    def getRetainingPeriod(self):
        return self.retainingPeriod

    def setRetainingPeriod(self, newRetainingPeriod):
        self.retainingPeriod = newRetainingPeriod


# @package Kaltura
# @subpackage Client
class KalturaIngestStatusPartnerConfiguration(KalturaObjectBase):
    def __init__(self,
            epg=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Defines the epg configuration of the partner.
        # @var KalturaIngestStatusEpgConfiguration
        self.epg = epg


    PROPERTY_LOADERS = {
        'epg': (KalturaObjectFactory.create, 'KalturaIngestStatusEpgConfiguration'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIngestStatusPartnerConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaIngestStatusPartnerConfiguration")
        kparams.addObjectIfDefined("epg", self.epg)
        return kparams

    def getEpg(self):
        return self.epg

    def setEpg(self, newEpg):
        self.epg = newEpg


# @package Kaltura
# @subpackage Client
class KalturaIotClientConfiguration(KalturaObjectBase):
    """Iot client Configuration"""

    def __init__(self,
            identityPoolId=NotImplemented,
            userPoolId=NotImplemented,
            awsRegion=NotImplemented,
            appClientId=NotImplemented,
            legacyEndPoint=NotImplemented,
            endPoint=NotImplemented,
            thingName=NotImplemented,
            thingArn=NotImplemented,
            thingId=NotImplemented,
            username=NotImplemented,
            password=NotImplemented,
            topics=NotImplemented,
            status=NotImplemented,
            message=NotImplemented):
        KalturaObjectBase.__init__(self)

        # IdentityPoolId
        # @var string
        self.identityPoolId = identityPoolId

        # UserPoolId
        # @var string
        self.userPoolId = userPoolId

        # AwsRegion
        # @var string
        self.awsRegion = awsRegion

        # appClientId
        # @var string
        self.appClientId = appClientId

        # legacyEndPoint
        # @var string
        self.legacyEndPoint = legacyEndPoint

        # endPoint
        # @var string
        self.endPoint = endPoint

        # thingName
        # @var string
        self.thingName = thingName

        # thingArn
        # @var string
        self.thingArn = thingArn

        # thingId
        # @var string
        self.thingId = thingId

        # username
        # @var string
        self.username = username

        # password
        # @var string
        self.password = password

        # topics
        # @var array of KalturaKeyValue
        self.topics = topics

        # status
        # @var string
        self.status = status

        # message
        # @var string
        self.message = message


    PROPERTY_LOADERS = {
        'identityPoolId': getXmlNodeText, 
        'userPoolId': getXmlNodeText, 
        'awsRegion': getXmlNodeText, 
        'appClientId': getXmlNodeText, 
        'legacyEndPoint': getXmlNodeText, 
        'endPoint': getXmlNodeText, 
        'thingName': getXmlNodeText, 
        'thingArn': getXmlNodeText, 
        'thingId': getXmlNodeText, 
        'username': getXmlNodeText, 
        'password': getXmlNodeText, 
        'topics': (KalturaObjectFactory.createArray, 'KalturaKeyValue'), 
        'status': getXmlNodeText, 
        'message': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIotClientConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaIotClientConfiguration")
        kparams.addStringIfDefined("identityPoolId", self.identityPoolId)
        kparams.addStringIfDefined("userPoolId", self.userPoolId)
        kparams.addStringIfDefined("awsRegion", self.awsRegion)
        kparams.addStringIfDefined("appClientId", self.appClientId)
        kparams.addStringIfDefined("legacyEndPoint", self.legacyEndPoint)
        kparams.addStringIfDefined("endPoint", self.endPoint)
        kparams.addStringIfDefined("thingName", self.thingName)
        kparams.addStringIfDefined("thingArn", self.thingArn)
        kparams.addStringIfDefined("thingId", self.thingId)
        kparams.addStringIfDefined("username", self.username)
        kparams.addStringIfDefined("password", self.password)
        kparams.addArrayIfDefined("topics", self.topics)
        kparams.addStringIfDefined("status", self.status)
        kparams.addStringIfDefined("message", self.message)
        return kparams

    def getIdentityPoolId(self):
        return self.identityPoolId

    def setIdentityPoolId(self, newIdentityPoolId):
        self.identityPoolId = newIdentityPoolId

    def getUserPoolId(self):
        return self.userPoolId

    def setUserPoolId(self, newUserPoolId):
        self.userPoolId = newUserPoolId

    def getAwsRegion(self):
        return self.awsRegion

    def setAwsRegion(self, newAwsRegion):
        self.awsRegion = newAwsRegion

    def getAppClientId(self):
        return self.appClientId

    def setAppClientId(self, newAppClientId):
        self.appClientId = newAppClientId

    def getLegacyEndPoint(self):
        return self.legacyEndPoint

    def setLegacyEndPoint(self, newLegacyEndPoint):
        self.legacyEndPoint = newLegacyEndPoint

    def getEndPoint(self):
        return self.endPoint

    def setEndPoint(self, newEndPoint):
        self.endPoint = newEndPoint

    def getThingName(self):
        return self.thingName

    def setThingName(self, newThingName):
        self.thingName = newThingName

    def getThingArn(self):
        return self.thingArn

    def setThingArn(self, newThingArn):
        self.thingArn = newThingArn

    def getThingId(self):
        return self.thingId

    def setThingId(self, newThingId):
        self.thingId = newThingId

    def getUsername(self):
        return self.username

    def setUsername(self, newUsername):
        self.username = newUsername

    def getPassword(self):
        return self.password

    def setPassword(self, newPassword):
        self.password = newPassword

    def getTopics(self):
        return self.topics

    def setTopics(self, newTopics):
        self.topics = newTopics

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getMessage(self):
        return self.message

    def setMessage(self, newMessage):
        self.message = newMessage


# @package Kaltura
# @subpackage Client
class KalturaLicensedUrl(KalturaObjectBase):
    def __init__(self,
            mainUrl=NotImplemented,
            altUrl=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Main licensed URL
        # @var string
        self.mainUrl = mainUrl

        # An alternate URL to use in case the main fails
        # @var string
        self.altUrl = altUrl


    PROPERTY_LOADERS = {
        'mainUrl': getXmlNodeText, 
        'altUrl': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLicensedUrl.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLicensedUrl")
        kparams.addStringIfDefined("mainUrl", self.mainUrl)
        kparams.addStringIfDefined("altUrl", self.altUrl)
        return kparams

    def getMainUrl(self):
        return self.mainUrl

    def setMainUrl(self, newMainUrl):
        self.mainUrl = newMainUrl

    def getAltUrl(self):
        return self.altUrl

    def setAltUrl(self, newAltUrl):
        self.altUrl = newAltUrl


# @package Kaltura
# @subpackage Client
class KalturaLicensedUrlBaseRequest(KalturaObjectBase):
    def __init__(self,
            assetId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Asset identifier
        # @var string
        self.assetId = assetId


    PROPERTY_LOADERS = {
        'assetId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLicensedUrlBaseRequest.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLicensedUrlBaseRequest")
        kparams.addStringIfDefined("assetId", self.assetId)
        return kparams

    def getAssetId(self):
        return self.assetId

    def setAssetId(self, newAssetId):
        self.assetId = newAssetId


# @package Kaltura
# @subpackage Client
class KalturaLicensedUrlMediaRequest(KalturaLicensedUrlBaseRequest):
    def __init__(self,
            assetId=NotImplemented,
            contentId=NotImplemented,
            baseUrl=NotImplemented):
        KalturaLicensedUrlBaseRequest.__init__(self,
            assetId)

        # Identifier of the content to get the link for (file identifier)
        # @var int
        self.contentId = contentId

        # Base URL for the licensed URLs
        # @var string
        self.baseUrl = baseUrl


    PROPERTY_LOADERS = {
        'contentId': getXmlNodeInt, 
        'baseUrl': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaLicensedUrlBaseRequest.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLicensedUrlMediaRequest.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaLicensedUrlBaseRequest.toParams(self)
        kparams.put("objectType", "KalturaLicensedUrlMediaRequest")
        kparams.addIntIfDefined("contentId", self.contentId)
        kparams.addStringIfDefined("baseUrl", self.baseUrl)
        return kparams

    def getContentId(self):
        return self.contentId

    def setContentId(self, newContentId):
        self.contentId = newContentId

    def getBaseUrl(self):
        return self.baseUrl

    def setBaseUrl(self, newBaseUrl):
        self.baseUrl = newBaseUrl


# @package Kaltura
# @subpackage Client
class KalturaLicensedUrlEpgRequest(KalturaLicensedUrlMediaRequest):
    def __init__(self,
            assetId=NotImplemented,
            contentId=NotImplemented,
            baseUrl=NotImplemented,
            streamType=NotImplemented,
            startDate=NotImplemented):
        KalturaLicensedUrlMediaRequest.__init__(self,
            assetId,
            contentId,
            baseUrl)

        # The stream type to get the URL for
        # @var KalturaStreamType
        self.streamType = streamType

        # The start date of the stream (epoch)
        # @var int
        self.startDate = startDate


    PROPERTY_LOADERS = {
        'streamType': (KalturaEnumsFactory.createString, "KalturaStreamType"), 
        'startDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaLicensedUrlMediaRequest.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLicensedUrlEpgRequest.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaLicensedUrlMediaRequest.toParams(self)
        kparams.put("objectType", "KalturaLicensedUrlEpgRequest")
        kparams.addStringEnumIfDefined("streamType", self.streamType)
        kparams.addIntIfDefined("startDate", self.startDate)
        return kparams

    def getStreamType(self):
        return self.streamType

    def setStreamType(self, newStreamType):
        self.streamType = newStreamType

    def getStartDate(self):
        return self.startDate

    def setStartDate(self, newStartDate):
        self.startDate = newStartDate


# @package Kaltura
# @subpackage Client
class KalturaLicensedUrlRecordingRequest(KalturaLicensedUrlBaseRequest):
    def __init__(self,
            assetId=NotImplemented,
            fileType=NotImplemented):
        KalturaLicensedUrlBaseRequest.__init__(self,
            assetId)

        # The file type for the URL
        # @var string
        self.fileType = fileType


    PROPERTY_LOADERS = {
        'fileType': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaLicensedUrlBaseRequest.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLicensedUrlRecordingRequest.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaLicensedUrlBaseRequest.toParams(self)
        kparams.put("objectType", "KalturaLicensedUrlRecordingRequest")
        kparams.addStringIfDefined("fileType", self.fileType)
        return kparams

    def getFileType(self):
        return self.fileType

    def setFileType(self, newFileType):
        self.fileType = newFileType


# @package Kaltura
# @subpackage Client
class KalturaLiveToVodLinearAssetConfiguration(KalturaObjectBase):
    """Configuration of isL2vEnabled and retentionPeriodDays per each channel, overriding the defaults set in the account&#39;s configuration."""

    def __init__(self,
            linearAssetId=NotImplemented,
            isL2vEnabled=NotImplemented,
            retentionPeriodDays=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Linear asset&#39;s identifier.
        # @var int
        self.linearAssetId = linearAssetId

        # Enable/disable the feature per linear channel. Considered only if the flag is enabled on the account level.
        # @var bool
        self.isL2vEnabled = isL2vEnabled

        # Number of days the L2V asset is retained in the system.
        #             Optional - if configured, overriding the account level value.
        # @var int
        self.retentionPeriodDays = retentionPeriodDays


    PROPERTY_LOADERS = {
        'linearAssetId': getXmlNodeInt, 
        'isL2vEnabled': getXmlNodeBool, 
        'retentionPeriodDays': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveToVodLinearAssetConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLiveToVodLinearAssetConfiguration")
        kparams.addIntIfDefined("linearAssetId", self.linearAssetId)
        kparams.addBoolIfDefined("isL2vEnabled", self.isL2vEnabled)
        kparams.addIntIfDefined("retentionPeriodDays", self.retentionPeriodDays)
        return kparams

    def getLinearAssetId(self):
        return self.linearAssetId

    def setLinearAssetId(self, newLinearAssetId):
        self.linearAssetId = newLinearAssetId

    def getIsL2vEnabled(self):
        return self.isL2vEnabled

    def setIsL2vEnabled(self, newIsL2vEnabled):
        self.isL2vEnabled = newIsL2vEnabled

    def getRetentionPeriodDays(self):
        return self.retentionPeriodDays

    def setRetentionPeriodDays(self, newRetentionPeriodDays):
        self.retentionPeriodDays = newRetentionPeriodDays


# @package Kaltura
# @subpackage Client
class KalturaLiveToVodFullConfiguration(KalturaObjectBase):
    def __init__(self,
            isL2vEnabled=NotImplemented,
            retentionPeriodDays=NotImplemented,
            metadataClassifier=NotImplemented,
            linearAssets=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Enable/disable the feature globally. If disabled, then all linear assets are not enabled.
        # @var bool
        self.isL2vEnabled = isL2vEnabled

        # Number of days the L2V asset is retained in the system.
        # @var int
        self.retentionPeriodDays = retentionPeriodDays

        # The name (label) of the metadata field marking the program asset to be duplicated as a L2V asset.
        # @var string
        self.metadataClassifier = metadataClassifier

        # Configuring isL2vEnabled/retentionPeriodDays per each channel, overriding the defaults set in the global isL2vEnabled and retentionPeriodDays parameters.
        # @var array of KalturaLiveToVodLinearAssetConfiguration
        self.linearAssets = linearAssets


    PROPERTY_LOADERS = {
        'isL2vEnabled': getXmlNodeBool, 
        'retentionPeriodDays': getXmlNodeInt, 
        'metadataClassifier': getXmlNodeText, 
        'linearAssets': (KalturaObjectFactory.createArray, 'KalturaLiveToVodLinearAssetConfiguration'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveToVodFullConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLiveToVodFullConfiguration")
        kparams.addBoolIfDefined("isL2vEnabled", self.isL2vEnabled)
        kparams.addIntIfDefined("retentionPeriodDays", self.retentionPeriodDays)
        kparams.addStringIfDefined("metadataClassifier", self.metadataClassifier)
        kparams.addArrayIfDefined("linearAssets", self.linearAssets)
        return kparams

    def getIsL2vEnabled(self):
        return self.isL2vEnabled

    def setIsL2vEnabled(self, newIsL2vEnabled):
        self.isL2vEnabled = newIsL2vEnabled

    def getRetentionPeriodDays(self):
        return self.retentionPeriodDays

    def setRetentionPeriodDays(self, newRetentionPeriodDays):
        self.retentionPeriodDays = newRetentionPeriodDays

    def getMetadataClassifier(self):
        return self.metadataClassifier

    def setMetadataClassifier(self, newMetadataClassifier):
        self.metadataClassifier = newMetadataClassifier

    def getLinearAssets(self):
        return self.linearAssets

    def setLinearAssets(self, newLinearAssets):
        self.linearAssets = newLinearAssets


# @package Kaltura
# @subpackage Client
class KalturaLiveToVodPartnerConfiguration(KalturaObjectBase):
    def __init__(self,
            isL2vEnabled=NotImplemented,
            retentionPeriodDays=NotImplemented,
            metadataClassifier=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Enable/disable the feature globally. If disabled, then all linear assets are not enabled.
        # @var bool
        self.isL2vEnabled = isL2vEnabled

        # Number of days the L2V asset is retained in the system.
        # @var int
        self.retentionPeriodDays = retentionPeriodDays

        # The name (label) of the metadata field marking the program asset to be duplicated as a L2V asset.
        # @var string
        self.metadataClassifier = metadataClassifier


    PROPERTY_LOADERS = {
        'isL2vEnabled': getXmlNodeBool, 
        'retentionPeriodDays': getXmlNodeInt, 
        'metadataClassifier': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveToVodPartnerConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLiveToVodPartnerConfiguration")
        kparams.addBoolIfDefined("isL2vEnabled", self.isL2vEnabled)
        kparams.addIntIfDefined("retentionPeriodDays", self.retentionPeriodDays)
        kparams.addStringIfDefined("metadataClassifier", self.metadataClassifier)
        return kparams

    def getIsL2vEnabled(self):
        return self.isL2vEnabled

    def setIsL2vEnabled(self, newIsL2vEnabled):
        self.isL2vEnabled = newIsL2vEnabled

    def getRetentionPeriodDays(self):
        return self.retentionPeriodDays

    def setRetentionPeriodDays(self, newRetentionPeriodDays):
        self.retentionPeriodDays = newRetentionPeriodDays

    def getMetadataClassifier(self):
        return self.metadataClassifier

    def setMetadataClassifier(self, newMetadataClassifier):
        self.metadataClassifier = newMetadataClassifier


# @package Kaltura
# @subpackage Client
class KalturaMessageTemplate(KalturaObjectBase):
    def __init__(self,
            message=NotImplemented,
            dateFormat=NotImplemented,
            messageType=NotImplemented,
            sound=NotImplemented,
            action=NotImplemented,
            url=NotImplemented,
            mailTemplate=NotImplemented,
            mailSubject=NotImplemented,
            ratioId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The message template with placeholders
        # @var string
        self.message = message

        # Default date format for the date &amp; time entries used in the template
        # @var string
        self.dateFormat = dateFormat

        # Template type. Possible values: Series, Reminder,Churn, SeriesReminder
        # @var KalturaMessageTemplateType
        self.messageType = messageType

        # Sound file name to play upon message arrival to the device (if supported by target device)
        # @var string
        self.sound = sound

        # an optional action
        # @var string
        self.action = action

        # URL template for deep linking. Example - /app/location/{mediaId}
        # @var string
        self.url = url

        # Mail template name
        # @var string
        self.mailTemplate = mailTemplate

        # Mail subject
        # @var string
        self.mailSubject = mailSubject

        # Ratio identifier
        # @var string
        self.ratioId = ratioId


    PROPERTY_LOADERS = {
        'message': getXmlNodeText, 
        'dateFormat': getXmlNodeText, 
        'messageType': (KalturaEnumsFactory.createString, "KalturaMessageTemplateType"), 
        'sound': getXmlNodeText, 
        'action': getXmlNodeText, 
        'url': getXmlNodeText, 
        'mailTemplate': getXmlNodeText, 
        'mailSubject': getXmlNodeText, 
        'ratioId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMessageTemplate.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaMessageTemplate")
        kparams.addStringIfDefined("message", self.message)
        kparams.addStringIfDefined("dateFormat", self.dateFormat)
        kparams.addStringEnumIfDefined("messageType", self.messageType)
        kparams.addStringIfDefined("sound", self.sound)
        kparams.addStringIfDefined("action", self.action)
        kparams.addStringIfDefined("url", self.url)
        kparams.addStringIfDefined("mailTemplate", self.mailTemplate)
        kparams.addStringIfDefined("mailSubject", self.mailSubject)
        kparams.addStringIfDefined("ratioId", self.ratioId)
        return kparams

    def getMessage(self):
        return self.message

    def setMessage(self, newMessage):
        self.message = newMessage

    def getDateFormat(self):
        return self.dateFormat

    def setDateFormat(self, newDateFormat):
        self.dateFormat = newDateFormat

    def getMessageType(self):
        return self.messageType

    def setMessageType(self, newMessageType):
        self.messageType = newMessageType

    def getSound(self):
        return self.sound

    def setSound(self, newSound):
        self.sound = newSound

    def getAction(self):
        return self.action

    def setAction(self, newAction):
        self.action = newAction

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl

    def getMailTemplate(self):
        return self.mailTemplate

    def setMailTemplate(self, newMailTemplate):
        self.mailTemplate = newMailTemplate

    def getMailSubject(self):
        return self.mailSubject

    def setMailSubject(self, newMailSubject):
        self.mailSubject = newMailSubject

    def getRatioId(self):
        return self.ratioId

    def setRatioId(self, newRatioId):
        self.ratioId = newRatioId


# @package Kaltura
# @subpackage Client
class KalturaRegistryResponse(KalturaObjectBase):
    def __init__(self,
            announcementId=NotImplemented,
            key=NotImplemented,
            url=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Announcement Id
        # @var int
        self.announcementId = announcementId

        # Key
        # @var string
        self.key = key

        # URL
        # @var string
        self.url = url


    PROPERTY_LOADERS = {
        'announcementId': getXmlNodeInt, 
        'key': getXmlNodeText, 
        'url': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRegistryResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaRegistryResponse")
        kparams.addIntIfDefined("announcementId", self.announcementId)
        kparams.addStringIfDefined("key", self.key)
        kparams.addStringIfDefined("url", self.url)
        return kparams

    def getAnnouncementId(self):
        return self.announcementId

    def setAnnouncementId(self, newAnnouncementId):
        self.announcementId = newAnnouncementId

    def getKey(self):
        return self.key

    def setKey(self, newKey):
        self.key = newKey

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl


# @package Kaltura
# @subpackage Client
class KalturaPushMessage(KalturaObjectBase):
    def __init__(self,
            message=NotImplemented,
            sound=NotImplemented,
            action=NotImplemented,
            url=NotImplemented,
            udid=NotImplemented,
            pushChannels=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The message that will be presented to the user.
        # @var string
        self.message = message

        # Optional. Can be used to change the default push sound on the user device.
        # @var string
        self.sound = sound

        # Optional. Used to change the default action of the application when a push is received.
        # @var string
        self.action = action

        # Optional. Used to direct the application to the relevant page.
        # @var string
        self.url = url

        # Device unique identifier
        # @var string
        self.udid = udid

        # PushChannels - separated with comma
        # @var string
        self.pushChannels = pushChannels


    PROPERTY_LOADERS = {
        'message': getXmlNodeText, 
        'sound': getXmlNodeText, 
        'action': getXmlNodeText, 
        'url': getXmlNodeText, 
        'udid': getXmlNodeText, 
        'pushChannels': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPushMessage.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPushMessage")
        kparams.addStringIfDefined("message", self.message)
        kparams.addStringIfDefined("sound", self.sound)
        kparams.addStringIfDefined("action", self.action)
        kparams.addStringIfDefined("url", self.url)
        kparams.addStringIfDefined("udid", self.udid)
        kparams.addStringIfDefined("pushChannels", self.pushChannels)
        return kparams

    def getMessage(self):
        return self.message

    def setMessage(self, newMessage):
        self.message = newMessage

    def getSound(self):
        return self.sound

    def setSound(self, newSound):
        self.sound = newSound

    def getAction(self):
        return self.action

    def setAction(self, newAction):
        self.action = newAction

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl

    def getUdid(self):
        return self.udid

    def setUdid(self, newUdid):
        self.udid = newUdid

    def getPushChannels(self):
        return self.pushChannels

    def setPushChannels(self, newPushChannels):
        self.pushChannels = newPushChannels


# @package Kaltura
# @subpackage Client
class KalturaEpgNotificationSettings(KalturaObjectBase):
    def __init__(self,
            enabled=NotImplemented,
            deviceFamilyIds=NotImplemented,
            liveAssetIds=NotImplemented,
            backwardTimeRange=NotImplemented,
            forwardTimeRange=NotImplemented):
        KalturaObjectBase.__init__(self)

        # EPG notification capability is enabled for the account
        # @var bool
        self.enabled = enabled

        # Specify which devices should receive notifications
        # @var string
        self.deviceFamilyIds = deviceFamilyIds

        # Specify which live assets should fire notifications
        # @var string
        self.liveAssetIds = liveAssetIds

        # The backward range (in hours), in which, EPG updates triggers a notification,
        #             every program that is updated and it's starts time falls within this range shall trigger a notification
        # @var int
        self.backwardTimeRange = backwardTimeRange

        # The forward range (in hours), in which, EPG updates triggers a notification,
        #             every program that is updated and it's starts time falls within this range shall trigger a notification
        # @var int
        self.forwardTimeRange = forwardTimeRange


    PROPERTY_LOADERS = {
        'enabled': getXmlNodeBool, 
        'deviceFamilyIds': getXmlNodeText, 
        'liveAssetIds': getXmlNodeText, 
        'backwardTimeRange': getXmlNodeInt, 
        'forwardTimeRange': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEpgNotificationSettings.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaEpgNotificationSettings")
        kparams.addBoolIfDefined("enabled", self.enabled)
        kparams.addStringIfDefined("deviceFamilyIds", self.deviceFamilyIds)
        kparams.addStringIfDefined("liveAssetIds", self.liveAssetIds)
        kparams.addIntIfDefined("backwardTimeRange", self.backwardTimeRange)
        kparams.addIntIfDefined("forwardTimeRange", self.forwardTimeRange)
        return kparams

    def getEnabled(self):
        return self.enabled

    def setEnabled(self, newEnabled):
        self.enabled = newEnabled

    def getDeviceFamilyIds(self):
        return self.deviceFamilyIds

    def setDeviceFamilyIds(self, newDeviceFamilyIds):
        self.deviceFamilyIds = newDeviceFamilyIds

    def getLiveAssetIds(self):
        return self.liveAssetIds

    def setLiveAssetIds(self, newLiveAssetIds):
        self.liveAssetIds = newLiveAssetIds

    def getBackwardTimeRange(self):
        return self.backwardTimeRange

    def setBackwardTimeRange(self, newBackwardTimeRange):
        self.backwardTimeRange = newBackwardTimeRange

    def getForwardTimeRange(self):
        return self.forwardTimeRange

    def setForwardTimeRange(self, newForwardTimeRange):
        self.forwardTimeRange = newForwardTimeRange


# @package Kaltura
# @subpackage Client
class KalturaLineupNotificationSettings(KalturaObjectBase):
    def __init__(self,
            enabled=NotImplemented):
        KalturaObjectBase.__init__(self)

        # if lineup notifications are enabled.
        # @var bool
        self.enabled = enabled


    PROPERTY_LOADERS = {
        'enabled': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLineupNotificationSettings.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLineupNotificationSettings")
        kparams.addBoolIfDefined("enabled", self.enabled)
        return kparams

    def getEnabled(self):
        return self.enabled

    def setEnabled(self, newEnabled):
        self.enabled = newEnabled


# @package Kaltura
# @subpackage Client
class KalturaNotificationsPartnerSettings(KalturaObjectBase):
    def __init__(self,
            pushNotificationEnabled=NotImplemented,
            pushSystemAnnouncementsEnabled=NotImplemented,
            pushStartHour=NotImplemented,
            pushEndHour=NotImplemented,
            inboxEnabled=NotImplemented,
            messageTTLDays=NotImplemented,
            automaticIssueFollowNotification=NotImplemented,
            topicExpirationDurationDays=NotImplemented,
            reminderEnabled=NotImplemented,
            reminderOffsetSec=NotImplemented,
            pushAdapterUrl=NotImplemented,
            churnMailTemplateName=NotImplemented,
            churnMailSubject=NotImplemented,
            senderEmail=NotImplemented,
            mailSenderName=NotImplemented,
            mailNotificationAdapterId=NotImplemented,
            smsEnabled=NotImplemented,
            iotEnabled=NotImplemented,
            epgNotification=NotImplemented,
            lineupNotification=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Push notification capability is enabled for the account
        # @var bool
        self.pushNotificationEnabled = pushNotificationEnabled

        # System announcement capability is enabled for the account
        # @var bool
        self.pushSystemAnnouncementsEnabled = pushSystemAnnouncementsEnabled

        # Window start time (UTC) for send automated push messages
        # @var int
        self.pushStartHour = pushStartHour

        # Window end time (UTC) for send automated push messages
        # @var int
        self.pushEndHour = pushEndHour

        # Inbox enabled
        # @var bool
        self.inboxEnabled = inboxEnabled

        # Message TTL in days
        # @var int
        self.messageTTLDays = messageTTLDays

        # Automatic issue follow notification
        # @var bool
        self.automaticIssueFollowNotification = automaticIssueFollowNotification

        # Topic expiration duration in days
        # @var int
        self.topicExpirationDurationDays = topicExpirationDurationDays

        # Reminder enabled
        # @var bool
        self.reminderEnabled = reminderEnabled

        # Offset time (UTC) in seconds for send reminder
        # @var int
        self.reminderOffsetSec = reminderOffsetSec

        # Push adapter URL
        # @var string
        self.pushAdapterUrl = pushAdapterUrl

        # Churn mail template name
        # @var string
        self.churnMailTemplateName = churnMailTemplateName

        # Churn mail subject
        # @var string
        self.churnMailSubject = churnMailSubject

        # Sender email
        # @var string
        self.senderEmail = senderEmail

        # Mail sender name
        # @var string
        self.mailSenderName = mailSenderName

        # Mail notification adapter identifier
        # @var int
        self.mailNotificationAdapterId = mailNotificationAdapterId

        # SMS capability is enabled for the account
        # @var bool
        self.smsEnabled = smsEnabled

        # IOT capability is enabled for the account
        # @var bool
        self.iotEnabled = iotEnabled

        # Settings for epg notifications
        # @var KalturaEpgNotificationSettings
        self.epgNotification = epgNotification

        # Settings for lineup notifications
        # @var KalturaLineupNotificationSettings
        self.lineupNotification = lineupNotification


    PROPERTY_LOADERS = {
        'pushNotificationEnabled': getXmlNodeBool, 
        'pushSystemAnnouncementsEnabled': getXmlNodeBool, 
        'pushStartHour': getXmlNodeInt, 
        'pushEndHour': getXmlNodeInt, 
        'inboxEnabled': getXmlNodeBool, 
        'messageTTLDays': getXmlNodeInt, 
        'automaticIssueFollowNotification': getXmlNodeBool, 
        'topicExpirationDurationDays': getXmlNodeInt, 
        'reminderEnabled': getXmlNodeBool, 
        'reminderOffsetSec': getXmlNodeInt, 
        'pushAdapterUrl': getXmlNodeText, 
        'churnMailTemplateName': getXmlNodeText, 
        'churnMailSubject': getXmlNodeText, 
        'senderEmail': getXmlNodeText, 
        'mailSenderName': getXmlNodeText, 
        'mailNotificationAdapterId': getXmlNodeInt, 
        'smsEnabled': getXmlNodeBool, 
        'iotEnabled': getXmlNodeBool, 
        'epgNotification': (KalturaObjectFactory.create, 'KalturaEpgNotificationSettings'), 
        'lineupNotification': (KalturaObjectFactory.create, 'KalturaLineupNotificationSettings'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaNotificationsPartnerSettings.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaNotificationsPartnerSettings")
        kparams.addBoolIfDefined("pushNotificationEnabled", self.pushNotificationEnabled)
        kparams.addBoolIfDefined("pushSystemAnnouncementsEnabled", self.pushSystemAnnouncementsEnabled)
        kparams.addIntIfDefined("pushStartHour", self.pushStartHour)
        kparams.addIntIfDefined("pushEndHour", self.pushEndHour)
        kparams.addBoolIfDefined("inboxEnabled", self.inboxEnabled)
        kparams.addIntIfDefined("messageTTLDays", self.messageTTLDays)
        kparams.addBoolIfDefined("automaticIssueFollowNotification", self.automaticIssueFollowNotification)
        kparams.addIntIfDefined("topicExpirationDurationDays", self.topicExpirationDurationDays)
        kparams.addBoolIfDefined("reminderEnabled", self.reminderEnabled)
        kparams.addIntIfDefined("reminderOffsetSec", self.reminderOffsetSec)
        kparams.addStringIfDefined("pushAdapterUrl", self.pushAdapterUrl)
        kparams.addStringIfDefined("churnMailTemplateName", self.churnMailTemplateName)
        kparams.addStringIfDefined("churnMailSubject", self.churnMailSubject)
        kparams.addStringIfDefined("senderEmail", self.senderEmail)
        kparams.addStringIfDefined("mailSenderName", self.mailSenderName)
        kparams.addIntIfDefined("mailNotificationAdapterId", self.mailNotificationAdapterId)
        kparams.addBoolIfDefined("smsEnabled", self.smsEnabled)
        kparams.addBoolIfDefined("iotEnabled", self.iotEnabled)
        kparams.addObjectIfDefined("epgNotification", self.epgNotification)
        kparams.addObjectIfDefined("lineupNotification", self.lineupNotification)
        return kparams

    def getPushNotificationEnabled(self):
        return self.pushNotificationEnabled

    def setPushNotificationEnabled(self, newPushNotificationEnabled):
        self.pushNotificationEnabled = newPushNotificationEnabled

    def getPushSystemAnnouncementsEnabled(self):
        return self.pushSystemAnnouncementsEnabled

    def setPushSystemAnnouncementsEnabled(self, newPushSystemAnnouncementsEnabled):
        self.pushSystemAnnouncementsEnabled = newPushSystemAnnouncementsEnabled

    def getPushStartHour(self):
        return self.pushStartHour

    def setPushStartHour(self, newPushStartHour):
        self.pushStartHour = newPushStartHour

    def getPushEndHour(self):
        return self.pushEndHour

    def setPushEndHour(self, newPushEndHour):
        self.pushEndHour = newPushEndHour

    def getInboxEnabled(self):
        return self.inboxEnabled

    def setInboxEnabled(self, newInboxEnabled):
        self.inboxEnabled = newInboxEnabled

    def getMessageTTLDays(self):
        return self.messageTTLDays

    def setMessageTTLDays(self, newMessageTTLDays):
        self.messageTTLDays = newMessageTTLDays

    def getAutomaticIssueFollowNotification(self):
        return self.automaticIssueFollowNotification

    def setAutomaticIssueFollowNotification(self, newAutomaticIssueFollowNotification):
        self.automaticIssueFollowNotification = newAutomaticIssueFollowNotification

    def getTopicExpirationDurationDays(self):
        return self.topicExpirationDurationDays

    def setTopicExpirationDurationDays(self, newTopicExpirationDurationDays):
        self.topicExpirationDurationDays = newTopicExpirationDurationDays

    def getReminderEnabled(self):
        return self.reminderEnabled

    def setReminderEnabled(self, newReminderEnabled):
        self.reminderEnabled = newReminderEnabled

    def getReminderOffsetSec(self):
        return self.reminderOffsetSec

    def setReminderOffsetSec(self, newReminderOffsetSec):
        self.reminderOffsetSec = newReminderOffsetSec

    def getPushAdapterUrl(self):
        return self.pushAdapterUrl

    def setPushAdapterUrl(self, newPushAdapterUrl):
        self.pushAdapterUrl = newPushAdapterUrl

    def getChurnMailTemplateName(self):
        return self.churnMailTemplateName

    def setChurnMailTemplateName(self, newChurnMailTemplateName):
        self.churnMailTemplateName = newChurnMailTemplateName

    def getChurnMailSubject(self):
        return self.churnMailSubject

    def setChurnMailSubject(self, newChurnMailSubject):
        self.churnMailSubject = newChurnMailSubject

    def getSenderEmail(self):
        return self.senderEmail

    def setSenderEmail(self, newSenderEmail):
        self.senderEmail = newSenderEmail

    def getMailSenderName(self):
        return self.mailSenderName

    def setMailSenderName(self, newMailSenderName):
        self.mailSenderName = newMailSenderName

    def getMailNotificationAdapterId(self):
        return self.mailNotificationAdapterId

    def setMailNotificationAdapterId(self, newMailNotificationAdapterId):
        self.mailNotificationAdapterId = newMailNotificationAdapterId

    def getSmsEnabled(self):
        return self.smsEnabled

    def setSmsEnabled(self, newSmsEnabled):
        self.smsEnabled = newSmsEnabled

    def getIotEnabled(self):
        return self.iotEnabled

    def setIotEnabled(self, newIotEnabled):
        self.iotEnabled = newIotEnabled

    def getEpgNotification(self):
        return self.epgNotification

    def setEpgNotification(self, newEpgNotification):
        self.epgNotification = newEpgNotification

    def getLineupNotification(self):
        return self.lineupNotification

    def setLineupNotification(self, newLineupNotification):
        self.lineupNotification = newLineupNotification


# @package Kaltura
# @subpackage Client
class KalturaNotificationsSettings(KalturaObjectBase):
    def __init__(self,
            pushNotificationEnabled=NotImplemented,
            pushFollowEnabled=NotImplemented,
            mailEnabled=NotImplemented,
            smsEnabled=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Specify if the user want to receive push notifications or not
        # @var bool
        self.pushNotificationEnabled = pushNotificationEnabled

        # Specify if the user will be notified for followed content via push. (requires push_notification_enabled to be enabled)
        # @var bool
        self.pushFollowEnabled = pushFollowEnabled

        # Specify if the user wants to receive mail notifications or not
        # @var bool
        self.mailEnabled = mailEnabled

        # Specify if the user wants to receive SMS notifications or not
        # @var bool
        self.smsEnabled = smsEnabled


    PROPERTY_LOADERS = {
        'pushNotificationEnabled': getXmlNodeBool, 
        'pushFollowEnabled': getXmlNodeBool, 
        'mailEnabled': getXmlNodeBool, 
        'smsEnabled': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaNotificationsSettings.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaNotificationsSettings")
        kparams.addBoolIfDefined("pushNotificationEnabled", self.pushNotificationEnabled)
        kparams.addBoolIfDefined("pushFollowEnabled", self.pushFollowEnabled)
        kparams.addBoolIfDefined("mailEnabled", self.mailEnabled)
        kparams.addBoolIfDefined("smsEnabled", self.smsEnabled)
        return kparams

    def getPushNotificationEnabled(self):
        return self.pushNotificationEnabled

    def setPushNotificationEnabled(self, newPushNotificationEnabled):
        self.pushNotificationEnabled = newPushNotificationEnabled

    def getPushFollowEnabled(self):
        return self.pushFollowEnabled

    def setPushFollowEnabled(self, newPushFollowEnabled):
        self.pushFollowEnabled = newPushFollowEnabled

    def getMailEnabled(self):
        return self.mailEnabled

    def setMailEnabled(self, newMailEnabled):
        self.mailEnabled = newMailEnabled

    def getSmsEnabled(self):
        return self.smsEnabled

    def setSmsEnabled(self, newSmsEnabled):
        self.smsEnabled = newSmsEnabled


# @package Kaltura
# @subpackage Client
class KalturaOTTUserDynamicData(KalturaObjectBase):
    """User dynamic data"""

    def __init__(self,
            userId=NotImplemented,
            key=NotImplemented,
            value=NotImplemented):
        KalturaObjectBase.__init__(self)

        # User identifier
        # @var string
        # @readonly
        self.userId = userId

        # Key
        # @var string
        self.key = key

        # Value
        # @var KalturaStringValue
        self.value = value


    PROPERTY_LOADERS = {
        'userId': getXmlNodeText, 
        'key': getXmlNodeText, 
        'value': (KalturaObjectFactory.create, 'KalturaStringValue'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaOTTUserDynamicData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaOTTUserDynamicData")
        kparams.addStringIfDefined("key", self.key)
        kparams.addObjectIfDefined("value", self.value)
        return kparams

    def getUserId(self):
        return self.userId

    def getKey(self):
        return self.key

    def setKey(self, newKey):
        self.key = newKey

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaPartnerSetup(KalturaObjectBase):
    """Parameters for partner setup"""

    def __init__(self,
            adminUsername=NotImplemented,
            adminPassword=NotImplemented,
            basePartnerConfiguration=NotImplemented):
        KalturaObjectBase.__init__(self)

        # admin Username
        # @var string
        self.adminUsername = adminUsername

        # admin Password
        # @var string
        self.adminPassword = adminPassword

        # basePartnerConfiguration
        # @var KalturaBasePartnerConfiguration
        self.basePartnerConfiguration = basePartnerConfiguration


    PROPERTY_LOADERS = {
        'adminUsername': getXmlNodeText, 
        'adminPassword': getXmlNodeText, 
        'basePartnerConfiguration': (KalturaObjectFactory.create, 'KalturaBasePartnerConfiguration'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPartnerSetup.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPartnerSetup")
        kparams.addStringIfDefined("adminUsername", self.adminUsername)
        kparams.addStringIfDefined("adminPassword", self.adminPassword)
        kparams.addObjectIfDefined("basePartnerConfiguration", self.basePartnerConfiguration)
        return kparams

    def getAdminUsername(self):
        return self.adminUsername

    def setAdminUsername(self, newAdminUsername):
        self.adminUsername = newAdminUsername

    def getAdminPassword(self):
        return self.adminPassword

    def setAdminPassword(self, newAdminPassword):
        self.adminPassword = newAdminPassword

    def getBasePartnerConfiguration(self):
        return self.basePartnerConfiguration

    def setBasePartnerConfiguration(self, newBasePartnerConfiguration):
        self.basePartnerConfiguration = newBasePartnerConfiguration


# @package Kaltura
# @subpackage Client
class KalturaPartnerPremiumService(KalturaObjectBase):
    """Premium service"""

    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            isApplied=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Service identifier
        # @var int
        self.id = id

        # Service name / description
        # @var string
        # @readonly
        self.name = name

        # Service name / description
        # @var bool
        self.isApplied = isApplied


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'isApplied': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPartnerPremiumService.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPartnerPremiumService")
        kparams.addIntIfDefined("id", self.id)
        kparams.addBoolIfDefined("isApplied", self.isApplied)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getName(self):
        return self.name

    def getIsApplied(self):
        return self.isApplied

    def setIsApplied(self, newIsApplied):
        self.isApplied = newIsApplied


# @package Kaltura
# @subpackage Client
class KalturaPartnerPremiumServices(KalturaObjectBase):
    def __init__(self,
            objects=NotImplemented):
        KalturaObjectBase.__init__(self)

        # A list of services
        # @var array of KalturaPartnerPremiumService
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, 'KalturaPartnerPremiumService'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPartnerPremiumServices.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPartnerPremiumServices")
        kparams.addArrayIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaPin(KalturaObjectBase):
    """PIN and its origin of definition"""

    def __init__(self,
            pin=NotImplemented,
            origin=NotImplemented,
            type=NotImplemented):
        KalturaObjectBase.__init__(self)

        # PIN code
        # @var string
        self.pin = pin

        # Where the PIN was defined at - account, household or user
        # @var KalturaRuleLevel
        self.origin = origin

        # PIN type
        # @var KalturaPinType
        self.type = type


    PROPERTY_LOADERS = {
        'pin': getXmlNodeText, 
        'origin': (KalturaEnumsFactory.createString, "KalturaRuleLevel"), 
        'type': (KalturaEnumsFactory.createString, "KalturaPinType"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPin.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPin")
        kparams.addStringIfDefined("pin", self.pin)
        kparams.addStringEnumIfDefined("origin", self.origin)
        kparams.addStringEnumIfDefined("type", self.type)
        return kparams

    def getPin(self):
        return self.pin

    def setPin(self, newPin):
        self.pin = newPin

    def getOrigin(self):
        return self.origin

    def setOrigin(self, newOrigin):
        self.origin = newOrigin

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType


# @package Kaltura
# @subpackage Client
class KalturaPurchaseSettings(KalturaPin):
    """Purchase settings and PIN"""

    def __init__(self,
            pin=NotImplemented,
            origin=NotImplemented,
            type=NotImplemented,
            permission=NotImplemented):
        KalturaPin.__init__(self,
            pin,
            origin,
            type)

        # Purchase permission - block, ask or allow
        # @var KalturaPurchaseSettingsType
        self.permission = permission


    PROPERTY_LOADERS = {
        'permission': (KalturaEnumsFactory.createString, "KalturaPurchaseSettingsType"), 
    }

    def fromXml(self, node):
        KalturaPin.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPurchaseSettings.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPin.toParams(self)
        kparams.put("objectType", "KalturaPurchaseSettings")
        kparams.addStringEnumIfDefined("permission", self.permission)
        return kparams

    def getPermission(self):
        return self.permission

    def setPermission(self, newPermission):
        self.permission = newPermission


# @package Kaltura
# @subpackage Client
class KalturaActionResult(KalturaObjectBase):
    """Result of action performed on entity with Id"""

    def __init__(self,
            id=NotImplemented,
            result=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Identifier of entity
        # @var int
        # @readonly
        self.id = id

        # Identifier of entity
        # @var KalturaMessage
        # @readonly
        self.result = result


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'result': (KalturaObjectFactory.create, 'KalturaMessage'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaActionResult.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaActionResult")
        return kparams

    def getId(self):
        return self.id

    def getResult(self):
        return self.result


# @package Kaltura
# @subpackage Client
class KalturaRegionChannelNumber(KalturaObjectBase):
    def __init__(self,
            regionId=NotImplemented,
            channelNumber=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The identifier of the region
        # @var int
        self.regionId = regionId

        # The number of the channel
        # @var int
        self.channelNumber = channelNumber


    PROPERTY_LOADERS = {
        'regionId': getXmlNodeInt, 
        'channelNumber': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRegionChannelNumber.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaRegionChannelNumber")
        kparams.addIntIfDefined("regionId", self.regionId)
        kparams.addIntIfDefined("channelNumber", self.channelNumber)
        return kparams

    def getRegionId(self):
        return self.regionId

    def setRegionId(self, newRegionId):
        self.regionId = newRegionId

    def getChannelNumber(self):
        return self.channelNumber

    def setChannelNumber(self, newChannelNumber):
        self.channelNumber = newChannelNumber


# @package Kaltura
# @subpackage Client
class KalturaRegionChannelNumberMultiLcns(KalturaRegionChannelNumber):
    def __init__(self,
            regionId=NotImplemented,
            channelNumber=NotImplemented,
            lcns=NotImplemented):
        KalturaRegionChannelNumber.__init__(self,
            regionId,
            channelNumber)

        # Linear channel numbers
        # @var string
        self.lcns = lcns


    PROPERTY_LOADERS = {
        'lcns': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaRegionChannelNumber.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRegionChannelNumberMultiLcns.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRegionChannelNumber.toParams(self)
        kparams.put("objectType", "KalturaRegionChannelNumberMultiLcns")
        kparams.addStringIfDefined("lcns", self.lcns)
        return kparams

    def getLcns(self):
        return self.lcns

    def setLcns(self, newLcns):
        self.lcns = newLcns


# @package Kaltura
# @subpackage Client
class KalturaSearchPriorityGroupOrderedIdsSet(KalturaObjectBase):
    def __init__(self,
            priorityGroupIds=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The order and effectively the priority of each group.
        # @var string
        self.priorityGroupIds = priorityGroupIds


    PROPERTY_LOADERS = {
        'priorityGroupIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchPriorityGroupOrderedIdsSet.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSearchPriorityGroupOrderedIdsSet")
        kparams.addStringIfDefined("priorityGroupIds", self.priorityGroupIds)
        return kparams

    def getPriorityGroupIds(self):
        return self.priorityGroupIds

    def setPriorityGroupIds(self, newPriorityGroupIds):
        self.priorityGroupIds = newPriorityGroupIds


# @package Kaltura
# @subpackage Client
class KalturaSegmentationPartnerConfiguration(KalturaObjectBase):
    """Partner configuration for segments configuration"""

    def __init__(self,
            maxCalculatedPeriod=NotImplemented,
            maxDynamicSegments=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The maximum number of past days to be calculated for dynamic segments, default=180
        # @var int
        self.maxCalculatedPeriod = maxCalculatedPeriod

        # How many dynamic segments (segments with conditions) the operator is allowed to have, default=50
        # @var int
        self.maxDynamicSegments = maxDynamicSegments


    PROPERTY_LOADERS = {
        'maxCalculatedPeriod': getXmlNodeInt, 
        'maxDynamicSegments': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSegmentationPartnerConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSegmentationPartnerConfiguration")
        kparams.addIntIfDefined("maxCalculatedPeriod", self.maxCalculatedPeriod)
        kparams.addIntIfDefined("maxDynamicSegments", self.maxDynamicSegments)
        return kparams

    def getMaxCalculatedPeriod(self):
        return self.maxCalculatedPeriod

    def setMaxCalculatedPeriod(self, newMaxCalculatedPeriod):
        self.maxCalculatedPeriod = newMaxCalculatedPeriod

    def getMaxDynamicSegments(self):
        return self.maxDynamicSegments

    def setMaxDynamicSegments(self, newMaxDynamicSegments):
        self.maxDynamicSegments = newMaxDynamicSegments


# @package Kaltura
# @subpackage Client
class KalturaNetworkActionStatus(KalturaObjectBase):
    def __init__(self,
            status=NotImplemented,
            network=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Status
        # @var KalturaSocialStatus
        self.status = status

        # Social network
        # @var KalturaSocialNetwork
        self.network = network


    PROPERTY_LOADERS = {
        'status': (KalturaEnumsFactory.createString, "KalturaSocialStatus"), 
        'network': (KalturaEnumsFactory.createString, "KalturaSocialNetwork"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaNetworkActionStatus.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaNetworkActionStatus")
        kparams.addStringEnumIfDefined("status", self.status)
        kparams.addStringEnumIfDefined("network", self.network)
        return kparams

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getNetwork(self):
        return self.network

    def setNetwork(self, newNetwork):
        self.network = newNetwork


# @package Kaltura
# @subpackage Client
class KalturaUserSocialActionResponse(KalturaObjectBase):
    def __init__(self,
            socialAction=NotImplemented,
            failStatus=NotImplemented):
        KalturaObjectBase.__init__(self)

        # socialAction
        # @var KalturaSocialAction
        self.socialAction = socialAction

        # List of action permission items
        # @var array of KalturaNetworkActionStatus
        self.failStatus = failStatus


    PROPERTY_LOADERS = {
        'socialAction': (KalturaObjectFactory.create, 'KalturaSocialAction'), 
        'failStatus': (KalturaObjectFactory.createArray, 'KalturaNetworkActionStatus'), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserSocialActionResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUserSocialActionResponse")
        kparams.addObjectIfDefined("socialAction", self.socialAction)
        kparams.addArrayIfDefined("failStatus", self.failStatus)
        return kparams

    def getSocialAction(self):
        return self.socialAction

    def setSocialAction(self, newSocialAction):
        self.socialAction = newSocialAction

    def getFailStatus(self):
        return self.failStatus

    def setFailStatus(self, newFailStatus):
        self.failStatus = newFailStatus


# @package Kaltura
# @subpackage Client
class KalturaSocial(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            firstName=NotImplemented,
            lastName=NotImplemented,
            email=NotImplemented,
            gender=NotImplemented,
            userId=NotImplemented,
            birthday=NotImplemented,
            status=NotImplemented,
            pictureUrl=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Facebook identifier
        # @var string
        # @readonly
        self.id = id

        # Full name
        # @var string
        self.name = name

        # First name
        # @var string
        self.firstName = firstName

        # Last name
        # @var string
        self.lastName = lastName

        # User email
        # @var string
        self.email = email

        # Gender
        # @var string
        self.gender = gender

        # User identifier
        # @var string
        # @readonly
        self.userId = userId

        # User birthday
        # @var string
        self.birthday = birthday

        # User model status
        #             Possible values: UNKNOWN, OK, ERROR, NOACTION, NOTEXIST, CONFLICT, MERGE, MERGEOK, NEWUSER, MINFRIENDS, INVITEOK, INVITEERROR, ACCESSDENIED, WRONGPASSWORDORUSERNAME, UNMERGEOK, USEREMAILISMISSING
        # @var string
        # @readonly
        self.status = status

        # Profile picture URL
        # @var string
        self.pictureUrl = pictureUrl


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'name': getXmlNodeText, 
        'firstName': getXmlNodeText, 
        'lastName': getXmlNodeText, 
        'email': getXmlNodeText, 
        'gender': getXmlNodeText, 
        'userId': getXmlNodeText, 
        'birthday': getXmlNodeText, 
        'status': getXmlNodeText, 
        'pictureUrl': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSocial.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSocial")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("firstName", self.firstName)
        kparams.addStringIfDefined("lastName", self.lastName)
        kparams.addStringIfDefined("email", self.email)
        kparams.addStringIfDefined("gender", self.gender)
        kparams.addStringIfDefined("birthday", self.birthday)
        kparams.addStringIfDefined("pictureUrl", self.pictureUrl)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getFirstName(self):
        return self.firstName

    def setFirstName(self, newFirstName):
        self.firstName = newFirstName

    def getLastName(self):
        return self.lastName

    def setLastName(self, newLastName):
        self.lastName = newLastName

    def getEmail(self):
        return self.email

    def setEmail(self, newEmail):
        self.email = newEmail

    def getGender(self):
        return self.gender

    def setGender(self, newGender):
        self.gender = newGender

    def getUserId(self):
        return self.userId

    def getBirthday(self):
        return self.birthday

    def setBirthday(self, newBirthday):
        self.birthday = newBirthday

    def getStatus(self):
        return self.status

    def getPictureUrl(self):
        return self.pictureUrl

    def setPictureUrl(self, newPictureUrl):
        self.pictureUrl = newPictureUrl


# @package Kaltura
# @subpackage Client
class KalturaFacebookSocial(KalturaSocial):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            firstName=NotImplemented,
            lastName=NotImplemented,
            email=NotImplemented,
            gender=NotImplemented,
            userId=NotImplemented,
            birthday=NotImplemented,
            status=NotImplemented,
            pictureUrl=NotImplemented):
        KalturaSocial.__init__(self,
            id,
            name,
            firstName,
            lastName,
            email,
            gender,
            userId,
            birthday,
            status,
            pictureUrl)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaSocial.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFacebookSocial.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSocial.toParams(self)
        kparams.put("objectType", "KalturaFacebookSocial")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSocialConfig(KalturaObjectBase):
    """Returns social configuration for the partner"""

    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSocialConfig.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSocialConfig")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSocialFacebookConfig(KalturaSocialConfig):
    """Returns social configuration for the partner"""

    def __init__(self,
            appId=NotImplemented,
            permissions=NotImplemented):
        KalturaSocialConfig.__init__(self)

        # The application identifier
        # @var string
        self.appId = appId

        # List of application permissions
        # @var string
        self.permissions = permissions


    PROPERTY_LOADERS = {
        'appId': getXmlNodeText, 
        'permissions': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaSocialConfig.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSocialFacebookConfig.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSocialConfig.toParams(self)
        kparams.put("objectType", "KalturaSocialFacebookConfig")
        kparams.addStringIfDefined("appId", self.appId)
        kparams.addStringIfDefined("permissions", self.permissions)
        return kparams

    def getAppId(self):
        return self.appId

    def setAppId(self, newAppId):
        self.appId = newAppId

    def getPermissions(self):
        return self.permissions

    def setPermissions(self, newPermissions):
        self.permissions = newPermissions


# @package Kaltura
# @subpackage Client
class KalturaActionPermissionItem(KalturaObjectBase):
    def __init__(self,
            network=NotImplemented,
            actionPrivacy=NotImplemented,
            privacy=NotImplemented,
            action=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Social network
        # @var KalturaSocialNetwork
        self.network = network

        # Action privacy
        # @var KalturaSocialActionPrivacy
        self.actionPrivacy = actionPrivacy

        # Social privacy
        # @var KalturaSocialPrivacy
        self.privacy = privacy

        # Action - separated with comma
        # @var string
        self.action = action


    PROPERTY_LOADERS = {
        'network': (KalturaEnumsFactory.createString, "KalturaSocialNetwork"), 
        'actionPrivacy': (KalturaEnumsFactory.createString, "KalturaSocialActionPrivacy"), 
        'privacy': (KalturaEnumsFactory.createString, "KalturaSocialPrivacy"), 
        'action': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaActionPermissionItem.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaActionPermissionItem")
        kparams.addStringEnumIfDefined("network", self.network)
        kparams.addStringEnumIfDefined("actionPrivacy", self.actionPrivacy)
        kparams.addStringEnumIfDefined("privacy", self.privacy)
        kparams.addStringIfDefined("action", self.action)
        return kparams

    def getNetwork(self):
        return self.network

    def setNetwork(self, newNetwork):
        self.network = newNetwork

    def getActionPrivacy(self):
        return self.actionPrivacy

    def setActionPrivacy(self, newActionPrivacy):
        self.actionPrivacy = newActionPrivacy

    def getPrivacy(self):
        return self.privacy

    def setPrivacy(self, newPrivacy):
        self.privacy = newPrivacy

    def getAction(self):
        return self.action

    def setAction(self, newAction):
        self.action = newAction


# @package Kaltura
# @subpackage Client
class KalturaSocialUserConfig(KalturaSocialConfig):
    def __init__(self,
            actionPermissionItems=NotImplemented):
        KalturaSocialConfig.__init__(self)

        # List of action permission items
        # @var array of KalturaActionPermissionItem
        self.actionPermissionItems = actionPermissionItems


    PROPERTY_LOADERS = {
        'actionPermissionItems': (KalturaObjectFactory.createArray, 'KalturaActionPermissionItem'), 
    }

    def fromXml(self, node):
        KalturaSocialConfig.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSocialUserConfig.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSocialConfig.toParams(self)
        kparams.put("objectType", "KalturaSocialUserConfig")
        kparams.addArrayIfDefined("actionPermissionItems", self.actionPermissionItems)
        return kparams

    def getActionPermissionItems(self):
        return self.actionPermissionItems

    def setActionPermissionItems(self, newActionPermissionItems):
        self.actionPermissionItems = newActionPermissionItems


# @package Kaltura
# @subpackage Client
class KalturaSSOAdapterProfileInvoke(KalturaObjectBase):
    def __init__(self,
            adapterData=NotImplemented,
            code=NotImplemented,
            message=NotImplemented):
        KalturaObjectBase.__init__(self)

        # key/value map field for adapter data
        # @var map
        self.adapterData = adapterData

        # code
        # @var string
        self.code = code

        # message
        # @var string
        self.message = message


    PROPERTY_LOADERS = {
        'adapterData': (KalturaObjectFactory.createMap, 'KalturaStringValue'), 
        'code': getXmlNodeText, 
        'message': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSSOAdapterProfileInvoke.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSSOAdapterProfileInvoke")
        kparams.addMapIfDefined("adapterData", self.adapterData)
        kparams.addStringIfDefined("code", self.code)
        kparams.addStringIfDefined("message", self.message)
        return kparams

    def getAdapterData(self):
        return self.adapterData

    def setAdapterData(self, newAdapterData):
        self.adapterData = newAdapterData

    def getCode(self):
        return self.code

    def setCode(self, newCode):
        self.code = newCode

    def getMessage(self):
        return self.message

    def setMessage(self, newMessage):
        self.message = newMessage


# @package Kaltura
# @subpackage Client
class KalturaTimeShiftedTvPartnerSettings(KalturaObjectBase):
    def __init__(self,
            catchUpEnabled=NotImplemented,
            cdvrEnabled=NotImplemented,
            startOverEnabled=NotImplemented,
            trickPlayEnabled=NotImplemented,
            recordingScheduleWindowEnabled=NotImplemented,
            protectionEnabled=NotImplemented,
            catchUpBufferLength=NotImplemented,
            trickPlayBufferLength=NotImplemented,
            recordingScheduleWindow=NotImplemented,
            paddingBeforeProgramStarts=NotImplemented,
            paddingAfterProgramEnds=NotImplemented,
            protectionPeriod=NotImplemented,
            protectionQuotaPercentage=NotImplemented,
            recordingLifetimePeriod=NotImplemented,
            cleanupNoticePeriod=NotImplemented,
            seriesRecordingEnabled=NotImplemented,
            nonEntitledChannelPlaybackEnabled=NotImplemented,
            nonExistingChannelPlaybackEnabled=NotImplemented,
            quotaOveragePolicy=NotImplemented,
            protectionPolicy=NotImplemented,
            recoveryGracePeriod=NotImplemented,
            privateCopyEnabled=NotImplemented,
            defaultQuota=NotImplemented,
            personalizedRecording=NotImplemented,
            maxRecordingConcurrency=NotImplemented,
            maxConcurrencyMargin=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Is catch-up enabled
        # @var bool
        self.catchUpEnabled = catchUpEnabled

        # Is c-dvr enabled
        # @var bool
        self.cdvrEnabled = cdvrEnabled

        # Is start-over enabled
        # @var bool
        self.startOverEnabled = startOverEnabled

        # Is trick-play enabled
        # @var bool
        self.trickPlayEnabled = trickPlayEnabled

        # Is recording schedule window enabled
        # @var bool
        self.recordingScheduleWindowEnabled = recordingScheduleWindowEnabled

        # Is recording protection enabled
        # @var bool
        self.protectionEnabled = protectionEnabled

        # Catch-up buffer length
        # @var int
        self.catchUpBufferLength = catchUpBufferLength

        # Trick play buffer length
        # @var int
        self.trickPlayBufferLength = trickPlayBufferLength

        # Recording schedule window. Indicates how long (in minutes) after the program starts it is allowed to schedule the recording
        # @var int
        self.recordingScheduleWindow = recordingScheduleWindow

        # Indicates how long (in seconds) before the program starts the recording will begin
        # @var int
        self.paddingBeforeProgramStarts = paddingBeforeProgramStarts

        # Indicates how long (in seconds) after the program ends the recording will end
        # @var int
        self.paddingAfterProgramEnds = paddingAfterProgramEnds

        # Specify the time in days that a recording should be protected. Start time begins at protection request.
        # @var int
        self.protectionPeriod = protectionPeriod

        # Indicates how many percent of the quota can be used for protection
        # @var int
        self.protectionQuotaPercentage = protectionQuotaPercentage

        # Specify the time in days that a recording should be kept for user. Start time begins with the program end date.
        # @var int
        self.recordingLifetimePeriod = recordingLifetimePeriod

        # The time in days before the recording lifetime is due from which the client should be able to warn user about deletion.
        # @var int
        self.cleanupNoticePeriod = cleanupNoticePeriod

        # Is recording of series enabled
        # @var bool
        self.seriesRecordingEnabled = seriesRecordingEnabled

        # Is recording playback for non-entitled channel enables
        # @var bool
        self.nonEntitledChannelPlaybackEnabled = nonEntitledChannelPlaybackEnabled

        # Is recording playback for non-existing channel enables
        # @var bool
        self.nonExistingChannelPlaybackEnabled = nonExistingChannelPlaybackEnabled

        # Quota Policy
        # @var KalturaQuotaOveragePolicy
        self.quotaOveragePolicy = quotaOveragePolicy

        # Protection Policy
        # @var KalturaProtectionPolicy
        self.protectionPolicy = protectionPolicy

        # The time in days for recovery recording that was delete by Auto Delete .
        # @var int
        self.recoveryGracePeriod = recoveryGracePeriod

        # Is private copy enabled for the account
        # @var bool
        self.privateCopyEnabled = privateCopyEnabled

        # Quota in seconds
        # @var int
        self.defaultQuota = defaultQuota

        # Define whatever the partner enables the Personal Padding and Immediate / Stop recording services to the partner. Default value should be FALSE
        # @var bool
        self.personalizedRecording = personalizedRecording

        # Define the max allowed number of parallel recordings. Default NULL unlimited
        # @var int
        self.maxRecordingConcurrency = maxRecordingConcurrency

        # Define the max grace margin time for overlapping recording. Default NULL 0 margin
        # @var int
        self.maxConcurrencyMargin = maxConcurrencyMargin


    PROPERTY_LOADERS = {
        'catchUpEnabled': getXmlNodeBool, 
        'cdvrEnabled': getXmlNodeBool, 
        'startOverEnabled': getXmlNodeBool, 
        'trickPlayEnabled': getXmlNodeBool, 
        'recordingScheduleWindowEnabled': getXmlNodeBool, 
        'protectionEnabled': getXmlNodeBool, 
        'catchUpBufferLength': getXmlNodeInt, 
        'trickPlayBufferLength': getXmlNodeInt, 
        'recordingScheduleWindow': getXmlNodeInt, 
        'paddingBeforeProgramStarts': getXmlNodeInt, 
        'paddingAfterProgramEnds': getXmlNodeInt, 
        'protectionPeriod': getXmlNodeInt, 
        'protectionQuotaPercentage': getXmlNodeInt, 
        'recordingLifetimePeriod': getXmlNodeInt, 
        'cleanupNoticePeriod': getXmlNodeInt, 
        'seriesRecordingEnabled': getXmlNodeBool, 
        'nonEntitledChannelPlaybackEnabled': getXmlNodeBool, 
        'nonExistingChannelPlaybackEnabled': getXmlNodeBool, 
        'quotaOveragePolicy': (KalturaEnumsFactory.createString, "KalturaQuotaOveragePolicy"), 
        'protectionPolicy': (KalturaEnumsFactory.createString, "KalturaProtectionPolicy"), 
        'recoveryGracePeriod': getXmlNodeInt, 
        'privateCopyEnabled': getXmlNodeBool, 
        'defaultQuota': getXmlNodeInt, 
        'personalizedRecording': getXmlNodeBool, 
        'maxRecordingConcurrency': getXmlNodeInt, 
        'maxConcurrencyMargin': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTimeShiftedTvPartnerSettings.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaTimeShiftedTvPartnerSettings")
        kparams.addBoolIfDefined("catchUpEnabled", self.catchUpEnabled)
        kparams.addBoolIfDefined("cdvrEnabled", self.cdvrEnabled)
        kparams.addBoolIfDefined("startOverEnabled", self.startOverEnabled)
        kparams.addBoolIfDefined("trickPlayEnabled", self.trickPlayEnabled)
        kparams.addBoolIfDefined("recordingScheduleWindowEnabled", self.recordingScheduleWindowEnabled)
        kparams.addBoolIfDefined("protectionEnabled", self.protectionEnabled)
        kparams.addIntIfDefined("catchUpBufferLength", self.catchUpBufferLength)
        kparams.addIntIfDefined("trickPlayBufferLength", self.trickPlayBufferLength)
        kparams.addIntIfDefined("recordingScheduleWindow", self.recordingScheduleWindow)
        kparams.addIntIfDefined("paddingBeforeProgramStarts", self.paddingBeforeProgramStarts)
        kparams.addIntIfDefined("paddingAfterProgramEnds", self.paddingAfterProgramEnds)
        kparams.addIntIfDefined("protectionPeriod", self.protectionPeriod)
        kparams.addIntIfDefined("protectionQuotaPercentage", self.protectionQuotaPercentage)
        kparams.addIntIfDefined("recordingLifetimePeriod", self.recordingLifetimePeriod)
        kparams.addIntIfDefined("cleanupNoticePeriod", self.cleanupNoticePeriod)
        kparams.addBoolIfDefined("seriesRecordingEnabled", self.seriesRecordingEnabled)
        kparams.addBoolIfDefined("nonEntitledChannelPlaybackEnabled", self.nonEntitledChannelPlaybackEnabled)
        kparams.addBoolIfDefined("nonExistingChannelPlaybackEnabled", self.nonExistingChannelPlaybackEnabled)
        kparams.addStringEnumIfDefined("quotaOveragePolicy", self.quotaOveragePolicy)
        kparams.addStringEnumIfDefined("protectionPolicy", self.protectionPolicy)
        kparams.addIntIfDefined("recoveryGracePeriod", self.recoveryGracePeriod)
        kparams.addBoolIfDefined("privateCopyEnabled", self.privateCopyEnabled)
        kparams.addIntIfDefined("defaultQuota", self.defaultQuota)
        kparams.addBoolIfDefined("personalizedRecording", self.personalizedRecording)
        kparams.addIntIfDefined("maxRecordingConcurrency", self.maxRecordingConcurrency)
        kparams.addIntIfDefined("maxConcurrencyMargin", self.maxConcurrencyMargin)
        return kparams

    def getCatchUpEnabled(self):
        return self.catchUpEnabled

    def setCatchUpEnabled(self, newCatchUpEnabled):
        self.catchUpEnabled = newCatchUpEnabled

    def getCdvrEnabled(self):
        return self.cdvrEnabled

    def setCdvrEnabled(self, newCdvrEnabled):
        self.cdvrEnabled = newCdvrEnabled

    def getStartOverEnabled(self):
        return self.startOverEnabled

    def setStartOverEnabled(self, newStartOverEnabled):
        self.startOverEnabled = newStartOverEnabled

    def getTrickPlayEnabled(self):
        return self.trickPlayEnabled

    def setTrickPlayEnabled(self, newTrickPlayEnabled):
        self.trickPlayEnabled = newTrickPlayEnabled

    def getRecordingScheduleWindowEnabled(self):
        return self.recordingScheduleWindowEnabled

    def setRecordingScheduleWindowEnabled(self, newRecordingScheduleWindowEnabled):
        self.recordingScheduleWindowEnabled = newRecordingScheduleWindowEnabled

    def getProtectionEnabled(self):
        return self.protectionEnabled

    def setProtectionEnabled(self, newProtectionEnabled):
        self.protectionEnabled = newProtectionEnabled

    def getCatchUpBufferLength(self):
        return self.catchUpBufferLength

    def setCatchUpBufferLength(self, newCatchUpBufferLength):
        self.catchUpBufferLength = newCatchUpBufferLength

    def getTrickPlayBufferLength(self):
        return self.trickPlayBufferLength

    def setTrickPlayBufferLength(self, newTrickPlayBufferLength):
        self.trickPlayBufferLength = newTrickPlayBufferLength

    def getRecordingScheduleWindow(self):
        return self.recordingScheduleWindow

    def setRecordingScheduleWindow(self, newRecordingScheduleWindow):
        self.recordingScheduleWindow = newRecordingScheduleWindow

    def getPaddingBeforeProgramStarts(self):
        return self.paddingBeforeProgramStarts

    def setPaddingBeforeProgramStarts(self, newPaddingBeforeProgramStarts):
        self.paddingBeforeProgramStarts = newPaddingBeforeProgramStarts

    def getPaddingAfterProgramEnds(self):
        return self.paddingAfterProgramEnds

    def setPaddingAfterProgramEnds(self, newPaddingAfterProgramEnds):
        self.paddingAfterProgramEnds = newPaddingAfterProgramEnds

    def getProtectionPeriod(self):
        return self.protectionPeriod

    def setProtectionPeriod(self, newProtectionPeriod):
        self.protectionPeriod = newProtectionPeriod

    def getProtectionQuotaPercentage(self):
        return self.protectionQuotaPercentage

    def setProtectionQuotaPercentage(self, newProtectionQuotaPercentage):
        self.protectionQuotaPercentage = newProtectionQuotaPercentage

    def getRecordingLifetimePeriod(self):
        return self.recordingLifetimePeriod

    def setRecordingLifetimePeriod(self, newRecordingLifetimePeriod):
        self.recordingLifetimePeriod = newRecordingLifetimePeriod

    def getCleanupNoticePeriod(self):
        return self.cleanupNoticePeriod

    def setCleanupNoticePeriod(self, newCleanupNoticePeriod):
        self.cleanupNoticePeriod = newCleanupNoticePeriod

    def getSeriesRecordingEnabled(self):
        return self.seriesRecordingEnabled

    def setSeriesRecordingEnabled(self, newSeriesRecordingEnabled):
        self.seriesRecordingEnabled = newSeriesRecordingEnabled

    def getNonEntitledChannelPlaybackEnabled(self):
        return self.nonEntitledChannelPlaybackEnabled

    def setNonEntitledChannelPlaybackEnabled(self, newNonEntitledChannelPlaybackEnabled):
        self.nonEntitledChannelPlaybackEnabled = newNonEntitledChannelPlaybackEnabled

    def getNonExistingChannelPlaybackEnabled(self):
        return self.nonExistingChannelPlaybackEnabled

    def setNonExistingChannelPlaybackEnabled(self, newNonExistingChannelPlaybackEnabled):
        self.nonExistingChannelPlaybackEnabled = newNonExistingChannelPlaybackEnabled

    def getQuotaOveragePolicy(self):
        return self.quotaOveragePolicy

    def setQuotaOveragePolicy(self, newQuotaOveragePolicy):
        self.quotaOveragePolicy = newQuotaOveragePolicy

    def getProtectionPolicy(self):
        return self.protectionPolicy

    def setProtectionPolicy(self, newProtectionPolicy):
        self.protectionPolicy = newProtectionPolicy

    def getRecoveryGracePeriod(self):
        return self.recoveryGracePeriod

    def setRecoveryGracePeriod(self, newRecoveryGracePeriod):
        self.recoveryGracePeriod = newRecoveryGracePeriod

    def getPrivateCopyEnabled(self):
        return self.privateCopyEnabled

    def setPrivateCopyEnabled(self, newPrivateCopyEnabled):
        self.privateCopyEnabled = newPrivateCopyEnabled

    def getDefaultQuota(self):
        return self.defaultQuota

    def setDefaultQuota(self, newDefaultQuota):
        self.defaultQuota = newDefaultQuota

    def getPersonalizedRecording(self):
        return self.personalizedRecording

    def setPersonalizedRecording(self, newPersonalizedRecording):
        self.personalizedRecording = newPersonalizedRecording

    def getMaxRecordingConcurrency(self):
        return self.maxRecordingConcurrency

    def setMaxRecordingConcurrency(self, newMaxRecordingConcurrency):
        self.maxRecordingConcurrency = newMaxRecordingConcurrency

    def getMaxConcurrencyMargin(self):
        return self.maxConcurrencyMargin

    def setMaxConcurrencyMargin(self, newMaxConcurrencyMargin):
        self.maxConcurrencyMargin = newMaxConcurrencyMargin


# @package Kaltura
# @subpackage Client
class KalturaPurchaseBase(KalturaObjectBase):
    def __init__(self,
            productId=NotImplemented,
            contentId=NotImplemented,
            productType=NotImplemented,
            adapterData=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Identifier for the package from which this content is offered
        # @var int
        self.productId = productId

        # Identifier for the content to purchase. Relevant only if Product type = PPV
        # @var int
        self.contentId = contentId

        # Package type. Possible values: PPV, Subscription, Collection
        # @var KalturaTransactionType
        self.productType = productType

        # Additional data for the adapter
        # @var string
        self.adapterData = adapterData


    PROPERTY_LOADERS = {
        'productId': getXmlNodeInt, 
        'contentId': getXmlNodeInt, 
        'productType': (KalturaEnumsFactory.createString, "KalturaTransactionType"), 
        'adapterData': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPurchaseBase.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPurchaseBase")
        kparams.addIntIfDefined("productId", self.productId)
        kparams.addIntIfDefined("contentId", self.contentId)
        kparams.addStringEnumIfDefined("productType", self.productType)
        kparams.addStringIfDefined("adapterData", self.adapterData)
        return kparams

    def getProductId(self):
        return self.productId

    def setProductId(self, newProductId):
        self.productId = newProductId

    def getContentId(self):
        return self.contentId

    def setContentId(self, newContentId):
        self.contentId = newContentId

    def getProductType(self):
        return self.productType

    def setProductType(self, newProductType):
        self.productType = newProductType

    def getAdapterData(self):
        return self.adapterData

    def setAdapterData(self, newAdapterData):
        self.adapterData = newAdapterData


# @package Kaltura
# @subpackage Client
class KalturaPurchase(KalturaPurchaseBase):
    def __init__(self,
            productId=NotImplemented,
            contentId=NotImplemented,
            productType=NotImplemented,
            adapterData=NotImplemented,
            currency=NotImplemented,
            price=NotImplemented,
            paymentMethodId=NotImplemented,
            paymentGatewayId=NotImplemented,
            coupon=NotImplemented):
        KalturaPurchaseBase.__init__(self,
            productId,
            contentId,
            productType,
            adapterData)

        # Identifier for paying currency, according to ISO 4217
        # @var string
        self.currency = currency

        # Net sum to charge - as a one-time transaction. Price must match the previously provided price for the specified content.
        # @var float
        self.price = price

        # Identifier for a pre-entered payment method. If not provided - the household's default payment method is used
        # @var int
        self.paymentMethodId = paymentMethodId

        # Identifier for a pre-associated payment gateway. If not provided - the account's default payment gateway is used
        # @var int
        self.paymentGatewayId = paymentGatewayId

        # Coupon code
        # @var string
        self.coupon = coupon


    PROPERTY_LOADERS = {
        'currency': getXmlNodeText, 
        'price': getXmlNodeFloat, 
        'paymentMethodId': getXmlNodeInt, 
        'paymentGatewayId': getXmlNodeInt, 
        'coupon': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaPurchaseBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPurchase.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPurchaseBase.toParams(self)
        kparams.put("objectType", "KalturaPurchase")
        kparams.addStringIfDefined("currency", self.currency)
        kparams.addFloatIfDefined("price", self.price)
        kparams.addIntIfDefined("paymentMethodId", self.paymentMethodId)
        kparams.addIntIfDefined("paymentGatewayId", self.paymentGatewayId)
        kparams.addStringIfDefined("coupon", self.coupon)
        return kparams

    def getCurrency(self):
        return self.currency

    def setCurrency(self, newCurrency):
        self.currency = newCurrency

    def getPrice(self):
        return self.price

    def setPrice(self, newPrice):
        self.price = newPrice

    def getPaymentMethodId(self):
        return self.paymentMethodId

    def setPaymentMethodId(self, newPaymentMethodId):
        self.paymentMethodId = newPaymentMethodId

    def getPaymentGatewayId(self):
        return self.paymentGatewayId

    def setPaymentGatewayId(self, newPaymentGatewayId):
        self.paymentGatewayId = newPaymentGatewayId

    def getCoupon(self):
        return self.coupon

    def setCoupon(self, newCoupon):
        self.coupon = newCoupon


# @package Kaltura
# @subpackage Client
class KalturaExternalReceipt(KalturaPurchaseBase):
    def __init__(self,
            productId=NotImplemented,
            contentId=NotImplemented,
            productType=NotImplemented,
            adapterData=NotImplemented,
            receiptId=NotImplemented,
            paymentGatewayName=NotImplemented):
        KalturaPurchaseBase.__init__(self,
            productId,
            contentId,
            productType,
            adapterData)

        # A unique identifier that was provided by the In-App billing service to validate the purchase
        # @var string
        self.receiptId = receiptId

        # The payment gateway name for the In-App billing service to be used. Possible values: Google/Apple
        # @var string
        self.paymentGatewayName = paymentGatewayName


    PROPERTY_LOADERS = {
        'receiptId': getXmlNodeText, 
        'paymentGatewayName': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaPurchaseBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaExternalReceipt.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPurchaseBase.toParams(self)
        kparams.put("objectType", "KalturaExternalReceipt")
        kparams.addStringIfDefined("receiptId", self.receiptId)
        kparams.addStringIfDefined("paymentGatewayName", self.paymentGatewayName)
        return kparams

    def getReceiptId(self):
        return self.receiptId

    def setReceiptId(self, newReceiptId):
        self.receiptId = newReceiptId

    def getPaymentGatewayName(self):
        return self.paymentGatewayName

    def setPaymentGatewayName(self, newPaymentGatewayName):
        self.paymentGatewayName = newPaymentGatewayName


# @package Kaltura
# @subpackage Client
class KalturaPurchaseSession(KalturaPurchase):
    def __init__(self,
            productId=NotImplemented,
            contentId=NotImplemented,
            productType=NotImplemented,
            adapterData=NotImplemented,
            currency=NotImplemented,
            price=NotImplemented,
            paymentMethodId=NotImplemented,
            paymentGatewayId=NotImplemented,
            coupon=NotImplemented,
            previewModuleId=NotImplemented):
        KalturaPurchase.__init__(self,
            productId,
            contentId,
            productType,
            adapterData,
            currency,
            price,
            paymentMethodId,
            paymentGatewayId,
            coupon)

        # Preview module identifier (relevant only for subscription)
        # @var int
        self.previewModuleId = previewModuleId


    PROPERTY_LOADERS = {
        'previewModuleId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaPurchase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPurchaseSession.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPurchase.toParams(self)
        kparams.put("objectType", "KalturaPurchaseSession")
        kparams.addIntIfDefined("previewModuleId", self.previewModuleId)
        return kparams

    def getPreviewModuleId(self):
        return self.previewModuleId

    def setPreviewModuleId(self, newPreviewModuleId):
        self.previewModuleId = newPreviewModuleId


# @package Kaltura
# @subpackage Client
class KalturaTransaction(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            paymentGatewayReferenceId=NotImplemented,
            paymentGatewayResponseId=NotImplemented,
            state=NotImplemented,
            failReasonCode=NotImplemented,
            createdAt=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Kaltura unique ID representing the transaction
        # @var string
        self.id = id

        # Transaction reference ID received from the payment gateway. 
        #             Value is available only if the payment gateway provides this information.
        # @var string
        self.paymentGatewayReferenceId = paymentGatewayReferenceId

        # Response ID received from by the payment gateway. 
        #             Value is available only if the payment gateway provides this information.
        # @var string
        self.paymentGatewayResponseId = paymentGatewayResponseId

        # Transaction state: OK/Pending/Failed
        # @var string
        self.state = state

        # Adapter failure reason code
        #             Insufficient funds = 20, Invalid account = 21, User unknown = 22, Reason unknown = 23, Unknown payment gateway response = 24,
        #             No response from payment gateway = 25, Exceeded retry limit = 26, Illegal client request = 27, Expired = 28
        # @var int
        self.failReasonCode = failReasonCode

        # Entitlement creation date
        # @var int
        self.createdAt = createdAt


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'paymentGatewayReferenceId': getXmlNodeText, 
        'paymentGatewayResponseId': getXmlNodeText, 
        'state': getXmlNodeText, 
        'failReasonCode': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTransaction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaTransaction")
        kparams.addStringIfDefined("id", self.id)
        kparams.addStringIfDefined("paymentGatewayReferenceId", self.paymentGatewayReferenceId)
        kparams.addStringIfDefined("paymentGatewayResponseId", self.paymentGatewayResponseId)
        kparams.addStringIfDefined("state", self.state)
        kparams.addIntIfDefined("failReasonCode", self.failReasonCode)
        kparams.addIntIfDefined("createdAt", self.createdAt)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getPaymentGatewayReferenceId(self):
        return self.paymentGatewayReferenceId

    def setPaymentGatewayReferenceId(self, newPaymentGatewayReferenceId):
        self.paymentGatewayReferenceId = newPaymentGatewayReferenceId

    def getPaymentGatewayResponseId(self):
        return self.paymentGatewayResponseId

    def setPaymentGatewayResponseId(self, newPaymentGatewayResponseId):
        self.paymentGatewayResponseId = newPaymentGatewayResponseId

    def getState(self):
        return self.state

    def setState(self, newState):
        self.state = newState

    def getFailReasonCode(self):
        return self.failReasonCode

    def setFailReasonCode(self, newFailReasonCode):
        self.failReasonCode = newFailReasonCode

    def getCreatedAt(self):
        return self.createdAt

    def setCreatedAt(self, newCreatedAt):
        self.createdAt = newCreatedAt


# @package Kaltura
# @subpackage Client
class KalturaTransactionStatus(KalturaObjectBase):
    def __init__(self,
            adapterTransactionStatus=NotImplemented,
            externalId=NotImplemented,
            externalStatus=NotImplemented,
            externalMessage=NotImplemented,
            failReason=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Payment gateway adapter application state for the transaction to update
        # @var KalturaTransactionAdapterStatus
        self.adapterTransactionStatus = adapterTransactionStatus

        # External transaction identifier
        # @var string
        self.externalId = externalId

        # Payment gateway transaction status
        # @var string
        self.externalStatus = externalStatus

        # Payment gateway message
        # @var string
        self.externalMessage = externalMessage

        # The reason the transaction failed
        # @var int
        self.failReason = failReason


    PROPERTY_LOADERS = {
        'adapterTransactionStatus': (KalturaEnumsFactory.createString, "KalturaTransactionAdapterStatus"), 
        'externalId': getXmlNodeText, 
        'externalStatus': getXmlNodeText, 
        'externalMessage': getXmlNodeText, 
        'failReason': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTransactionStatus.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaTransactionStatus")
        kparams.addStringEnumIfDefined("adapterTransactionStatus", self.adapterTransactionStatus)
        kparams.addStringIfDefined("externalId", self.externalId)
        kparams.addStringIfDefined("externalStatus", self.externalStatus)
        kparams.addStringIfDefined("externalMessage", self.externalMessage)
        kparams.addIntIfDefined("failReason", self.failReason)
        return kparams

    def getAdapterTransactionStatus(self):
        return self.adapterTransactionStatus

    def setAdapterTransactionStatus(self, newAdapterTransactionStatus):
        self.adapterTransactionStatus = newAdapterTransactionStatus

    def getExternalId(self):
        return self.externalId

    def setExternalId(self, newExternalId):
        self.externalId = newExternalId

    def getExternalStatus(self):
        return self.externalStatus

    def setExternalStatus(self, newExternalStatus):
        self.externalStatus = newExternalStatus

    def getExternalMessage(self):
        return self.externalMessage

    def setExternalMessage(self, newExternalMessage):
        self.externalMessage = newExternalMessage

    def getFailReason(self):
        return self.failReason

    def setFailReason(self, newFailReason):
        self.failReason = newFailReason


# @package Kaltura
# @subpackage Client
class KalturaEntitlementRenewalBase(KalturaObjectBase):
    def __init__(self,
            price=NotImplemented,
            purchaseId=NotImplemented,
            subscriptionId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Price that is going to be paid on the renewal
        # @var float
        self.price = price

        # Puchase ID
        # @var int
        self.purchaseId = purchaseId

        # Subscription ID
        # @var int
        self.subscriptionId = subscriptionId


    PROPERTY_LOADERS = {
        'price': getXmlNodeFloat, 
        'purchaseId': getXmlNodeInt, 
        'subscriptionId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntitlementRenewalBase.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaEntitlementRenewalBase")
        kparams.addFloatIfDefined("price", self.price)
        kparams.addIntIfDefined("purchaseId", self.purchaseId)
        kparams.addIntIfDefined("subscriptionId", self.subscriptionId)
        return kparams

    def getPrice(self):
        return self.price

    def setPrice(self, newPrice):
        self.price = newPrice

    def getPurchaseId(self):
        return self.purchaseId

    def setPurchaseId(self, newPurchaseId):
        self.purchaseId = newPurchaseId

    def getSubscriptionId(self):
        return self.subscriptionId

    def setSubscriptionId(self, newSubscriptionId):
        self.subscriptionId = newSubscriptionId


# @package Kaltura
# @subpackage Client
class KalturaUnifiedPaymentRenewal(KalturaObjectBase):
    def __init__(self,
            price=NotImplemented,
            date=NotImplemented,
            unifiedPaymentId=NotImplemented,
            entitlements=NotImplemented,
            userId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Price that is going to be paid on the renewal
        # @var KalturaPrice
        self.price = price

        # Next renewal date
        # @var int
        self.date = date

        # Unified payment ID
        # @var int
        self.unifiedPaymentId = unifiedPaymentId

        # List of entitlements in this unified payment renewal
        # @var array of KalturaEntitlementRenewalBase
        self.entitlements = entitlements

        # User ID
        # @var int
        self.userId = userId


    PROPERTY_LOADERS = {
        'price': (KalturaObjectFactory.create, 'KalturaPrice'), 
        'date': getXmlNodeInt, 
        'unifiedPaymentId': getXmlNodeInt, 
        'entitlements': (KalturaObjectFactory.createArray, 'KalturaEntitlementRenewalBase'), 
        'userId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUnifiedPaymentRenewal.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUnifiedPaymentRenewal")
        kparams.addObjectIfDefined("price", self.price)
        kparams.addIntIfDefined("date", self.date)
        kparams.addIntIfDefined("unifiedPaymentId", self.unifiedPaymentId)
        kparams.addArrayIfDefined("entitlements", self.entitlements)
        kparams.addIntIfDefined("userId", self.userId)
        return kparams

    def getPrice(self):
        return self.price

    def setPrice(self, newPrice):
        self.price = newPrice

    def getDate(self):
        return self.date

    def setDate(self, newDate):
        self.date = newDate

    def getUnifiedPaymentId(self):
        return self.unifiedPaymentId

    def setUnifiedPaymentId(self, newUnifiedPaymentId):
        self.unifiedPaymentId = newUnifiedPaymentId

    def getEntitlements(self):
        return self.entitlements

    def setEntitlements(self, newEntitlements):
        self.entitlements = newEntitlements

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId


# @package Kaltura
# @subpackage Client
class KalturaUploadToken(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            status=NotImplemented,
            fileSize=NotImplemented,
            createDate=NotImplemented,
            updateDate=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Upload-token identifier
        # @var string
        # @readonly
        self.id = id

        # Status
        # @var KalturaUploadTokenStatus
        # @readonly
        self.status = status

        # File size
        # @var float
        # @readonly
        self.fileSize = fileSize

        # Specifies when was the Asset was created. Date and time represented as epoch.
        # @var int
        # @readonly
        self.createDate = createDate

        # Specifies when was the Asset last updated. Date and time represented as epoch.
        # @var int
        # @readonly
        self.updateDate = updateDate


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createString, "KalturaUploadTokenStatus"), 
        'fileSize': getXmlNodeFloat, 
        'createDate': getXmlNodeInt, 
        'updateDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUploadToken.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUploadToken")
        return kparams

    def getId(self):
        return self.id

    def getStatus(self):
        return self.status

    def getFileSize(self):
        return self.fileSize

    def getCreateDate(self):
        return self.createDate

    def getUpdateDate(self):
        return self.updateDate


# @package Kaltura
# @subpackage Client
class KalturaUserAssetsListItem(KalturaObjectBase):
    """An item of user asset list"""

    def __init__(self,
            id=NotImplemented,
            orderIndex=NotImplemented,
            type=NotImplemented,
            userId=NotImplemented,
            listType=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Asset identifier
        # @var string
        self.id = id

        # The order index of the asset in the list
        # @var int
        self.orderIndex = orderIndex

        # The type of the asset
        # @var KalturaUserAssetsListItemType
        self.type = type

        # The identifier of the user who added the item to the list
        # @var string
        # @readonly
        self.userId = userId

        # The type of the list, all is not supported
        # @var KalturaUserAssetsListType
        self.listType = listType


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'orderIndex': getXmlNodeInt, 
        'type': (KalturaEnumsFactory.createString, "KalturaUserAssetsListItemType"), 
        'userId': getXmlNodeText, 
        'listType': (KalturaEnumsFactory.createString, "KalturaUserAssetsListType"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserAssetsListItem.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUserAssetsListItem")
        kparams.addStringIfDefined("id", self.id)
        kparams.addIntIfDefined("orderIndex", self.orderIndex)
        kparams.addStringEnumIfDefined("type", self.type)
        kparams.addStringEnumIfDefined("listType", self.listType)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getOrderIndex(self):
        return self.orderIndex

    def setOrderIndex(self, newOrderIndex):
        self.orderIndex = newOrderIndex

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getUserId(self):
        return self.userId

    def getListType(self):
        return self.listType

    def setListType(self, newListType):
        self.listType = newListType


# @package Kaltura
# @subpackage Client
class KalturaUserLoginPin(KalturaObjectBase):
    """Log in pin code details"""

    def __init__(self,
            pinCode=NotImplemented,
            expirationTime=NotImplemented,
            userId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Generated login pin code
        # @var string
        self.pinCode = pinCode

        # Login pin expiration time (epoch)
        # @var int
        self.expirationTime = expirationTime

        # User Identifier
        # @var string
        # @readonly
        self.userId = userId


    PROPERTY_LOADERS = {
        'pinCode': getXmlNodeText, 
        'expirationTime': getXmlNodeInt, 
        'userId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserLoginPin.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUserLoginPin")
        kparams.addStringIfDefined("pinCode", self.pinCode)
        kparams.addIntIfDefined("expirationTime", self.expirationTime)
        return kparams

    def getPinCode(self):
        return self.pinCode

    def setPinCode(self, newPinCode):
        self.pinCode = newPinCode

    def getExpirationTime(self):
        return self.expirationTime

    def setExpirationTime(self, newExpirationTime):
        self.expirationTime = newExpirationTime

    def getUserId(self):
        return self.userId


########## services ##########

# @package Kaltura
# @subpackage Client
class KalturaAnnouncementService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, announcement):
        """Add a new future scheduled system announcement push notification"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("announcement", announcement)
        self.client.queueServiceActionCall("announcement", "add", "KalturaAnnouncement", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAnnouncement')

    def delete(self, id):
        """Delete an existing announcing. Announcement cannot be delete while being sent."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("announcement", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def enableSystemAnnouncements(self):
        """Enable system announcements"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("announcement", "enableSystemAnnouncements", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter, pager = NotImplemented):
        """Lists all announcements in the system."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("announcement", "list", "KalturaAnnouncementListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAnnouncementListResponse')

    def update(self, announcementId, announcement):
        """Update an existing future system announcement push notification. Announcement can only be updated only before sending"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("announcementId", announcementId);
        kparams.addObjectIfDefined("announcement", announcement)
        self.client.queueServiceActionCall("announcement", "update", "KalturaAnnouncement", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAnnouncement')

    def updateStatus(self, id, status):
        """Update a system announcement status"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addBoolIfDefined("status", status);
        self.client.queueServiceActionCall("announcement", "updateStatus", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaAppTokenService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, appToken):
        """Add new application authentication token"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("appToken", appToken)
        self.client.queueServiceActionCall("apptoken", "add", "KalturaAppToken", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAppToken')

    def delete(self, id):
        """Delete application authentication token by id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("apptoken", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def get(self, id):
        """Get application authentication token by id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("apptoken", "get", "KalturaAppToken", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAppToken')

    def startSession(self, id, tokenHash, userId = NotImplemented, expiry = NotImplemented, udid = NotImplemented):
        """Starts a new KS (Kaltura Session) based on application authentication token id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addStringIfDefined("tokenHash", tokenHash)
        kparams.addStringIfDefined("userId", userId)
        kparams.addIntIfDefined("expiry", expiry);
        kparams.addStringIfDefined("udid", udid)
        self.client.queueServiceActionCall("apptoken", "startSession", "KalturaSessionInfo", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSessionInfo')


# @package Kaltura
# @subpackage Client
class KalturaAssetCommentService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, comment):
        """Add asset comments by asset id"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("comment", comment)
        self.client.queueServiceActionCall("assetcomment", "add", "KalturaAssetComment", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetComment')

    def list(self, filter, pager = NotImplemented):
        """Returns asset comments by asset id"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("assetcomment", "list", "KalturaAssetCommentListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetCommentListResponse')


# @package Kaltura
# @subpackage Client
class KalturaAssetService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, asset):
        """Add a new asset.
                    For metas of type bool-&gt; use kalturaBoolValue, type number-&gt; KalturaDoubleValue, type date -&gt; KalturaLongValue, type string -&gt; KalturaStringValue"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("asset", asset)
        self.client.queueServiceActionCall("asset", "add", "KalturaAsset", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAsset')

    def addFromBulkUpload(self, fileData, bulkUploadJobData, bulkUploadAssetData):
        """Add new bulk upload batch job Conversion profile id can be specified in the API."""

        kparams = KalturaParams()
        kfiles = {"fileData": fileData}
        kparams.addObjectIfDefined("bulkUploadJobData", bulkUploadJobData)
        kparams.addObjectIfDefined("bulkUploadAssetData", bulkUploadAssetData)
        self.client.queueServiceActionCall("asset", "addFromBulkUpload", "KalturaBulkUpload", kparams, kfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaBulkUpload')

    def count(self, filter = NotImplemented):
        """Returns a group-by result for media or EPG according to given filter. Lists values of each field and their respective count."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("asset", "count", "KalturaAssetCount", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetCount')

    def delete(self, id, assetReferenceType):
        """Delete an existing asset"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addStringIfDefined("assetReferenceType", assetReferenceType)
        self.client.queueServiceActionCall("asset", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def get(self, id, assetReferenceType):
        """Returns media or EPG asset by media / EPG internal or external identifier"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addStringIfDefined("assetReferenceType", assetReferenceType)
        self.client.queueServiceActionCall("asset", "get", "KalturaAsset", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAsset')

    def getAdsContext(self, assetId, assetType, contextDataParams):
        """Returns the data for ads control"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("assetId", assetId)
        kparams.addStringIfDefined("assetType", assetType)
        kparams.addObjectIfDefined("contextDataParams", contextDataParams)
        self.client.queueServiceActionCall("asset", "getAdsContext", "KalturaAdsContext", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAdsContext')

    def getPlaybackContext(self, assetId, assetType, contextDataParams, sourceType = NotImplemented):
        """This action delivers all data relevant for player"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("assetId", assetId)
        kparams.addStringIfDefined("assetType", assetType)
        kparams.addObjectIfDefined("contextDataParams", contextDataParams)
        kparams.addStringIfDefined("sourceType", sourceType)
        self.client.queueServiceActionCall("asset", "getPlaybackContext", "KalturaPlaybackContext", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPlaybackContext')

    def getPlaybackManifest(self, assetId, assetType, contextDataParams, sourceType = NotImplemented):
        """This action delivers all data relevant for player"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("assetId", assetId)
        kparams.addStringIfDefined("assetType", assetType)
        kparams.addObjectIfDefined("contextDataParams", contextDataParams)
        kparams.addStringIfDefined("sourceType", sourceType)
        self.client.queueServiceActionCall("asset", "getPlaybackManifest", "KalturaPlaybackContext", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPlaybackContext')

    def groupRepresentativeList(self, groupBy, unmatchedItemsPolicy, orderBy = NotImplemented, filter = NotImplemented, selectionPolicy = NotImplemented, pager = NotImplemented):
        """Returns assets deduplicated by asset metadata (or supported asset&#39;s property)."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("groupBy", groupBy)
        kparams.addStringIfDefined("unmatchedItemsPolicy", unmatchedItemsPolicy)
        kparams.addObjectIfDefined("orderBy", orderBy)
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("selectionPolicy", selectionPolicy)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("asset", "groupRepresentativeList", "KalturaAssetListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetListResponse')

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Returns media or EPG assets. Filters by media identifiers or by EPG internal or external identifier."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("asset", "list", "KalturaAssetListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetListResponse')

    def listPersonalSelection(self, filter):
        """Returns recent selected assets"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("asset", "listPersonalSelection", "KalturaAssetListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetListResponse')

    def removeMetasAndTags(self, id, assetReferenceType, idIn):
        """remove metas and tags from asset"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addStringIfDefined("assetReferenceType", assetReferenceType)
        kparams.addStringIfDefined("idIn", idIn)
        self.client.queueServiceActionCall("asset", "removeMetasAndTags", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def update(self, id, asset):
        """update an existing asset.
                    For metas of type bool-&gt; use kalturaBoolValue, type number-&gt; KalturaDoubleValue, type date -&gt; KalturaLongValue, type string -&gt; KalturaStringValue"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("asset", asset)
        self.client.queueServiceActionCall("asset", "update", "KalturaAsset", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAsset')


# @package Kaltura
# @subpackage Client
class KalturaAssetFileService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def getContext(self, id, contextType):
        """get KalturaAssetFileContext"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addStringIfDefined("contextType", contextType)
        self.client.queueServiceActionCall("assetfile", "getContext", "KalturaAssetFileContext", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetFileContext')

    def playManifest(self, partnerId, assetId, assetType, assetFileId, contextType, ks = NotImplemented, tokenizedUrl = NotImplemented, isAltUrl = False):
        """Redirects to play manifest"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("partnerId", partnerId);
        kparams.addStringIfDefined("assetId", assetId)
        kparams.addStringIfDefined("assetType", assetType)
        kparams.addIntIfDefined("assetFileId", assetFileId);
        kparams.addStringIfDefined("contextType", contextType)
        kparams.addStringIfDefined("ks", ks)
        kparams.addStringIfDefined("tokenizedUrl", tokenizedUrl)
        kparams.addBoolIfDefined("isAltUrl", isAltUrl);
        self.client.queueServiceActionCall("assetfile", "playManifest", "KalturaAssetFile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetFile')


# @package Kaltura
# @subpackage Client
class KalturaAssetFilePpvService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, assetFilePpv):
        """Add asset file ppv"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("assetFilePpv", assetFilePpv)
        self.client.queueServiceActionCall("assetfileppv", "add", "KalturaAssetFilePpv", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetFilePpv')

    def delete(self, assetFileId, ppvModuleId):
        """Delete asset file ppv"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("assetFileId", assetFileId);
        kparams.addIntIfDefined("ppvModuleId", ppvModuleId);
        self.client.queueServiceActionCall("assetfileppv", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter):
        """Return a list of asset files ppvs for the account with optional filter"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("assetfileppv", "list", "KalturaAssetFilePpvListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetFilePpvListResponse')

    def update(self, assetFileId, ppvModuleId, assetFilePpv):
        """Update assetFilePpv"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("assetFileId", assetFileId);
        kparams.addIntIfDefined("ppvModuleId", ppvModuleId);
        kparams.addObjectIfDefined("assetFilePpv", assetFilePpv)
        self.client.queueServiceActionCall("assetfileppv", "update", "KalturaAssetFilePpv", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetFilePpv')


# @package Kaltura
# @subpackage Client
class KalturaAssetHistoryService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def clean(self, filter = NotImplemented):
        """Clean the user's viewing history"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("assethistory", "clean", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def getNextEpisode(self, assetId):
        """Get next episode by last watch asset in given assetId"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("assetId", assetId);
        self.client.queueServiceActionCall("assethistory", "getNextEpisode", "KalturaAssetHistory", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetHistory')

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Get recently watched media for user, ordered by recently watched first."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("assethistory", "list", "KalturaAssetHistoryListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetHistoryListResponse')


# @package Kaltura
# @subpackage Client
class KalturaAssetPersonalMarkupService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self, filter):
        """Response with list of assetPersonalMarkup."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("assetpersonalmarkup", "list", "KalturaAssetPersonalMarkupListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetPersonalMarkupListResponse')


# @package Kaltura
# @subpackage Client
class KalturaAssetPersonalSelectionService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def delete(self, assetId, assetType, slotNumber):
        """Remove asset selection in slot"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("assetId", assetId);
        kparams.addStringIfDefined("assetType", assetType)
        kparams.addIntIfDefined("slotNumber", slotNumber);
        self.client.queueServiceActionCall("assetpersonalselection", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def deleteAll(self, slotNumber):
        """Remove asset selection in slot"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("slotNumber", slotNumber);
        self.client.queueServiceActionCall("assetpersonalselection", "deleteAll", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def upsert(self, assetId, assetType, slotNumber):
        """Add or update asset selection in slot"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("assetId", assetId);
        kparams.addStringIfDefined("assetType", assetType)
        kparams.addIntIfDefined("slotNumber", slotNumber);
        self.client.queueServiceActionCall("assetpersonalselection", "upsert", "KalturaAssetPersonalSelection", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetPersonalSelection')


# @package Kaltura
# @subpackage Client
class KalturaAssetRuleService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, assetRule):
        """Add asset rule"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("assetRule", assetRule)
        self.client.queueServiceActionCall("assetrule", "add", "KalturaAssetRule", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetRule')

    def delete(self, id):
        """Delete asset rule"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("assetrule", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter = NotImplemented):
        """Get the list of asset rules for the partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("assetrule", "list", "KalturaAssetRuleListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetRuleListResponse')

    def update(self, id, assetRule):
        """Update asset rule"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("assetRule", assetRule)
        self.client.queueServiceActionCall("assetrule", "update", "KalturaAssetRule", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetRule')


# @package Kaltura
# @subpackage Client
class KalturaAssetStatisticsService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def query(self, query):
        """Returns statistics for given list of assets by type and / or time period"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("query", query)
        self.client.queueServiceActionCall("assetstatistics", "query", "KalturaAssetStatisticsListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetStatisticsListResponse')


# @package Kaltura
# @subpackage Client
class KalturaAssetStructService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, assetStruct):
        """Add a new assetStruct"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("assetStruct", assetStruct)
        self.client.queueServiceActionCall("assetstruct", "add", "KalturaAssetStruct", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetStruct')

    def delete(self, id):
        """Delete an existing assetStruct"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("assetstruct", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def get(self, id):
        """Get AssetStruct by ID"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("assetstruct", "get", "KalturaAssetStruct", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetStruct')

    def list(self, filter = NotImplemented):
        """Return a list of asset structs for the account with optional filter"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("assetstruct", "list", "KalturaAssetStructListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetStructListResponse')

    def update(self, id, assetStruct):
        """Update an existing assetStruct"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("assetStruct", assetStruct)
        self.client.queueServiceActionCall("assetstruct", "update", "KalturaAssetStruct", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetStruct')


# @package Kaltura
# @subpackage Client
class KalturaAssetStructMetaService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self, filter):
        """Return a list of asset struct metas for the account with optional filter"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("assetstructmeta", "list", "KalturaAssetStructMetaListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetStructMetaListResponse')

    def update(self, assetStructId, metaId, assetStructMeta):
        """Update Asset struct meta"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("assetStructId", assetStructId);
        kparams.addIntIfDefined("metaId", metaId);
        kparams.addObjectIfDefined("assetStructMeta", assetStructMeta)
        self.client.queueServiceActionCall("assetstructmeta", "update", "KalturaAssetStructMeta", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetStructMeta')


# @package Kaltura
# @subpackage Client
class KalturaAssetUserRuleService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, assetUserRule):
        """Add asset user rule"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("assetUserRule", assetUserRule)
        self.client.queueServiceActionCall("assetuserrule", "add", "KalturaAssetUserRule", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetUserRule')

    def attachUser(self, ruleId):
        """Attach AssetUserRule To User"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("ruleId", ruleId);
        self.client.queueServiceActionCall("assetuserrule", "attachUser", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def delete(self, id):
        """Delete asset user rule"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("assetuserrule", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def detachUser(self, ruleId):
        """Detach AssetUserRule from user"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("ruleId", ruleId);
        self.client.queueServiceActionCall("assetuserrule", "detachUser", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented):
        """Get the list of asset user rules for the partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("assetuserrule", "list", "KalturaAssetUserRuleListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetUserRuleListResponse')

    def update(self, id, assetUserRule):
        """Update asset user rule"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("assetUserRule", assetUserRule)
        self.client.queueServiceActionCall("assetuserrule", "update", "KalturaAssetUserRule", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaAssetUserRule')


# @package Kaltura
# @subpackage Client
class KalturaBookmarkService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, bookmark):
        """Report player position and action for the user on the watched asset. Player position is used to later allow resume watching."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("bookmark", bookmark)
        self.client.queueServiceActionCall("bookmark", "add", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter):
        """Returns player position record/s for the requested asset and the requesting user. 
                    If default user makes the request - player position records are provided for all of the users in the household.
                    If non-default user makes the request - player position records are provided for the requesting user and the default user of the household."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("bookmark", "list", "KalturaBookmarkListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaBookmarkListResponse')


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self, id):
        """Get BulkUpload by ID"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("bulkupload", "get", "KalturaBulkUpload", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaBulkUpload')

    def list(self, filter, pager = NotImplemented):
        """Get list of KalturaBulkUpload by filter"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("bulkupload", "list", "KalturaBulkUploadListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaBulkUploadListResponse')


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadStatisticsService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self, bulkObjectTypeEqual, createDateGreaterThanOrEqual):
        """Get BulkUploadStatistics count summary by status"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("bulkObjectTypeEqual", bulkObjectTypeEqual)
        kparams.addIntIfDefined("createDateGreaterThanOrEqual", createDateGreaterThanOrEqual);
        self.client.queueServiceActionCall("bulkuploadstatistics", "get", "KalturaBulkUploadStatistics", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaBulkUploadStatistics')


# @package Kaltura
# @subpackage Client
class KalturaBusinessModuleRuleService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, businessModuleRule):
        """Add business module rule"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("businessModuleRule", businessModuleRule)
        self.client.queueServiceActionCall("businessmodulerule", "add", "KalturaBusinessModuleRule", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaBusinessModuleRule')

    def delete(self, id):
        """Delete business module rule"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("businessmodulerule", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def get(self, id):
        """Get business module rule by ID"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("businessmodulerule", "get", "KalturaBusinessModuleRule", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaBusinessModuleRule')

    def list(self, filter = NotImplemented):
        """Get the list of business module rules for the partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("businessmodulerule", "list", "KalturaBusinessModuleRuleListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaBusinessModuleRuleListResponse')

    def update(self, id, businessModuleRule):
        """Update business module rule"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("businessModuleRule", businessModuleRule)
        self.client.queueServiceActionCall("businessmodulerule", "update", "KalturaBusinessModuleRule", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaBusinessModuleRule')


# @package Kaltura
# @subpackage Client
class KalturaCampaignService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, objectToAdd):
        """Add new Campaign"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("objectToAdd", objectToAdd)
        self.client.queueServiceActionCall("campaign", "add", "KalturaCampaign", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCampaign')

    def delete(self, id):
        """Delete existing Campaign"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("campaign", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter, pager = NotImplemented):
        """Returns the list of available Campaigns"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("campaign", "list", "KalturaCampaignListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCampaignListResponse')

    def setState(self, campaignId, newState):
        """Set campaign&#39;s state"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("campaignId", campaignId);
        kparams.addStringIfDefined("newState", newState)
        self.client.queueServiceActionCall("campaign", "setState", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def update(self, id, objectToUpdate):
        """Update existing Campaign"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("objectToUpdate", objectToUpdate)
        self.client.queueServiceActionCall("campaign", "update", "KalturaCampaign", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCampaign')


# @package Kaltura
# @subpackage Client
class KalturaCategoryItemService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, objectToAdd):
        """categoryItem add"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("objectToAdd", objectToAdd)
        self.client.queueServiceActionCall("categoryitem", "add", "KalturaCategoryItem", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCategoryItem')

    def delete(self, id):
        """Remove category"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("categoryitem", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Gets all categoryItem items"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("categoryitem", "list", "KalturaCategoryItemListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCategoryItemListResponse')

    def update(self, id, objectToUpdate):
        """categoryItem update"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("objectToUpdate", objectToUpdate)
        self.client.queueServiceActionCall("categoryitem", "update", "KalturaCategoryItem", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCategoryItem')


# @package Kaltura
# @subpackage Client
class KalturaCategoryTreeService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def duplicate(self, categoryItemId, name):
        """Duplicate category Item"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("categoryItemId", categoryItemId);
        kparams.addStringIfDefined("name", name)
        self.client.queueServiceActionCall("categorytree", "duplicate", "KalturaCategoryTree", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCategoryTree')

    def get(self, categoryItemId, filter = False):
        """Retrive category tree."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("categoryItemId", categoryItemId);
        kparams.addBoolIfDefined("filter", filter);
        self.client.queueServiceActionCall("categorytree", "get", "KalturaCategoryTree", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCategoryTree')

    def getByVersion(self, versionId = NotImplemented, deviceFamilyId = NotImplemented):
        """Retrieve default category tree of deviceFamilyId by KS or specific one if versionId is set."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("versionId", versionId);
        kparams.addIntIfDefined("deviceFamilyId", deviceFamilyId);
        self.client.queueServiceActionCall("categorytree", "getByVersion", "KalturaCategoryTree", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCategoryTree')


# @package Kaltura
# @subpackage Client
class KalturaCategoryVersionService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, objectToAdd):
        """categoryVersion add"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("objectToAdd", objectToAdd)
        self.client.queueServiceActionCall("categoryversion", "add", "KalturaCategoryVersion", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCategoryVersion')

    def createTree(self, categoryItemId, name, comment):
        """Acreate new tree for this categoryItem"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("categoryItemId", categoryItemId);
        kparams.addStringIfDefined("name", name)
        kparams.addStringIfDefined("comment", comment)
        self.client.queueServiceActionCall("categoryversion", "createTree", "KalturaCategoryVersion", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCategoryVersion')

    def delete(self, id):
        """Remove category version"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("categoryversion", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter, pager = NotImplemented):
        """Gets all category versions"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("categoryversion", "list", "KalturaCategoryVersionListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCategoryVersionListResponse')

    def setDefault(self, id, force = False):
        """Set new default category version"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addBoolIfDefined("force", force);
        self.client.queueServiceActionCall("categoryversion", "setDefault", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def update(self, id, objectToUpdate):
        """categoryVersion update"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("objectToUpdate", objectToUpdate)
        self.client.queueServiceActionCall("categoryversion", "update", "KalturaCategoryVersion", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCategoryVersion')


# @package Kaltura
# @subpackage Client
class KalturaCdnAdapterProfileService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, adapter):
        """Insert new CDN adapter for partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("adapter", adapter)
        self.client.queueServiceActionCall("cdnadapterprofile", "add", "KalturaCDNAdapterProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCDNAdapterProfile')

    def delete(self, adapterId):
        """Delete CDN adapter by CDN adapter id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("adapterId", adapterId);
        self.client.queueServiceActionCall("cdnadapterprofile", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def generateSharedSecret(self, adapterId):
        """Generate CDN adapter shared secret"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("adapterId", adapterId);
        self.client.queueServiceActionCall("cdnadapterprofile", "generateSharedSecret", "KalturaCDNAdapterProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCDNAdapterProfile')

    def list(self):
        """Returns all CDN adapters for partner"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("cdnadapterprofile", "list", "KalturaCDNAdapterProfileListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCDNAdapterProfileListResponse')

    def update(self, adapterId, adapter):
        """Update CDN adapter details"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("adapterId", adapterId);
        kparams.addObjectIfDefined("adapter", adapter)
        self.client.queueServiceActionCall("cdnadapterprofile", "update", "KalturaCDNAdapterProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCDNAdapterProfile')


# @package Kaltura
# @subpackage Client
class KalturaCdnPartnerSettingsService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self):
        """Retrieve the partner's CDN settings (default adapters)"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("cdnpartnersettings", "get", "KalturaCDNPartnerSettings", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCDNPartnerSettings')

    def update(self, settings):
        """Configure the partner's CDN settings (default adapters)"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("settings", settings)
        self.client.queueServiceActionCall("cdnpartnersettings", "update", "KalturaCDNPartnerSettings", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCDNPartnerSettings')


# @package Kaltura
# @subpackage Client
class KalturaCDVRAdapterProfileService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, adapter):
        """Insert new C-DVR adapter for partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("adapter", adapter)
        self.client.queueServiceActionCall("cdvradapterprofile", "add", "KalturaCDVRAdapterProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCDVRAdapterProfile')

    def delete(self, adapterId):
        """Delete C-DVR adapter by C-DVR adapter id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("adapterId", adapterId);
        self.client.queueServiceActionCall("cdvradapterprofile", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def generateSharedSecret(self, adapterId):
        """Generate C-DVR adapter shared secret"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("adapterId", adapterId);
        self.client.queueServiceActionCall("cdvradapterprofile", "generateSharedSecret", "KalturaCDVRAdapterProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCDVRAdapterProfile')

    def list(self):
        """Returns all C-DVR adapters for partner"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("cdvradapterprofile", "list", "KalturaCDVRAdapterProfileListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCDVRAdapterProfileListResponse')

    def update(self, adapterId, adapter):
        """Update C-DVR adapter details"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("adapterId", adapterId);
        kparams.addObjectIfDefined("adapter", adapter)
        self.client.queueServiceActionCall("cdvradapterprofile", "update", "KalturaCDVRAdapterProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCDVRAdapterProfile')


# @package Kaltura
# @subpackage Client
class KalturaChannelService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, channel):
        """Insert new channel for partner. Supports KalturaDynamicChannel or KalturaManualChannel"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("channel", channel)
        self.client.queueServiceActionCall("channel", "add", "KalturaChannel", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaChannel')

    def delete(self, channelId):
        """Delete channel by its channel id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("channelId", channelId);
        self.client.queueServiceActionCall("channel", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def get(self, id):
        """Returns channel"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("channel", "get", "KalturaChannel", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaChannel')

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Get the list of tags for the partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("channel", "list", "KalturaChannelListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaChannelListResponse')

    def update(self, id, channel):
        """Update channel details. Supports KalturaDynamicChannel or KalturaManualChannel"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("channel", channel)
        self.client.queueServiceActionCall("channel", "update", "KalturaChannel", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaChannel')


# @package Kaltura
# @subpackage Client
class KalturaCollectionService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, collection):
        """Insert new collection for partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("collection", collection)
        self.client.queueServiceActionCall("collection", "add", "KalturaCollection", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCollection')

    def delete(self, id):
        """Delete collection"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("collection", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Returns a list of collections requested by Collection IDs or file identifier or coupon group identifier"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("collection", "list", "KalturaCollectionListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCollectionListResponse')

    def update(self, id, collection):
        """Update Collection"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("collection", collection)
        self.client.queueServiceActionCall("collection", "update", "KalturaCollection", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCollection')


# @package Kaltura
# @subpackage Client
class KalturaCompensationService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, compensation):
        """Adds a new compensation for a household for a given number of iterations of a subscription renewal for a fixed amount / percentage of the renewal price."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("compensation", compensation)
        self.client.queueServiceActionCall("compensation", "add", "KalturaCompensation", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCompensation')

    def delete(self, id):
        """Delete a compensation by identifier"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("compensation", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def get(self, id):
        """Get a compensation by identifier"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("compensation", "get", "KalturaCompensation", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCompensation')


# @package Kaltura
# @subpackage Client
class KalturaConfigurationGroupService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, configurationGroup):
        """Add a new configuration group"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("configurationGroup", configurationGroup)
        self.client.queueServiceActionCall("configurationgroup", "add", "KalturaConfigurationGroup", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaConfigurationGroup')

    def delete(self, id):
        """Remove a configuration group, including its tags, device configurations and devices associations"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("configurationgroup", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def get(self, id):
        """Return the configuration group details, including group identifiers, tags, and number of associated devices, and list of device configuration"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("configurationgroup", "get", "KalturaConfigurationGroup", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaConfigurationGroup')

    def list(self):
        """Return the list of configuration groups"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("configurationgroup", "list", "KalturaConfigurationGroupListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaConfigurationGroupListResponse')

    def update(self, id, configurationGroup):
        """Update configuration group name"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addObjectIfDefined("configurationGroup", configurationGroup)
        self.client.queueServiceActionCall("configurationgroup", "update", "KalturaConfigurationGroup", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaConfigurationGroup')


# @package Kaltura
# @subpackage Client
class KalturaConfigurationGroupDeviceService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, configurationGroupDevice):
        """Associate a collection of devices to a configuration group. If a device is already associated to another group - old association is replaced"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("configurationGroupDevice", configurationGroupDevice)
        self.client.queueServiceActionCall("configurationgroupdevice", "add", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def delete(self, udid):
        """Remove a device association"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("udid", udid)
        self.client.queueServiceActionCall("configurationgroupdevice", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def get(self, udid):
        """Return the configuration group to which a specific device is associated to"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("udid", udid)
        self.client.queueServiceActionCall("configurationgroupdevice", "get", "KalturaConfigurationGroupDevice", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaConfigurationGroupDevice')

    def list(self, filter, pager = NotImplemented):
        """Return the list of associated devices for a given configuration group"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("configurationgroupdevice", "list", "KalturaConfigurationGroupDeviceListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaConfigurationGroupDeviceListResponse')


# @package Kaltura
# @subpackage Client
class KalturaConfigurationGroupTagService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, configurationGroupTag):
        """Add a new tag to a configuration group. If this tag is already associated to another group, request fails"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("configurationGroupTag", configurationGroupTag)
        self.client.queueServiceActionCall("configurationgrouptag", "add", "KalturaConfigurationGroupTag", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaConfigurationGroupTag')

    def delete(self, tag):
        """Remove a tag association from configuration group"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("tag", tag)
        self.client.queueServiceActionCall("configurationgrouptag", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def get(self, tag):
        """Return the configuration group the tag is associated to"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("tag", tag)
        self.client.queueServiceActionCall("configurationgrouptag", "get", "KalturaConfigurationGroupTag", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaConfigurationGroupTag')

    def list(self, filter):
        """Return list of tags for a configuration group"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("configurationgrouptag", "list", "KalturaConfigurationGroupTagListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaConfigurationGroupTagListResponse')


# @package Kaltura
# @subpackage Client
class KalturaConfigurationsService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, configurations):
        """Add a new device configuration to a configuration group"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("configurations", configurations)
        self.client.queueServiceActionCall("configurations", "add", "KalturaConfigurations", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaConfigurations')

    def delete(self, id):
        """Delete a device configuration"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("configurations", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def get(self, id):
        """Return the device configuration"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("configurations", "get", "KalturaConfigurations", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaConfigurations')

    def list(self, filter):
        """Return a list of device configurations of a configuration group"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("configurations", "list", "KalturaConfigurationsListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaConfigurationsListResponse')

    def serveByDevice(self, applicationName, clientVersion, platform, udid, tag, partnerId = 0):
        """Return a device configuration applicable for a specific device (UDID), app name, software version, platform and optionally a configuration group's tag"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("applicationName", applicationName)
        kparams.addStringIfDefined("clientVersion", clientVersion)
        kparams.addStringIfDefined("platform", platform)
        kparams.addStringIfDefined("udid", udid)
        kparams.addStringIfDefined("tag", tag)
        kparams.addIntIfDefined("partnerId", partnerId);
        self.client.queueServiceActionCall('configurations', 'serveByDevice', None ,kparams)
        return self.client.getServeUrl()

    def update(self, id, configurations):
        """Update device configuration"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addObjectIfDefined("configurations", configurations)
        self.client.queueServiceActionCall("configurations", "update", "KalturaConfigurations", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaConfigurations')


# @package Kaltura
# @subpackage Client
class KalturaCountryService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self, filter):
        """Get the list of countries for the partner with option to filter by countries identifiers"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("country", "list", "KalturaCountryListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCountryListResponse')


# @package Kaltura
# @subpackage Client
class KalturaCouponService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self, code):
        """Returns information about a coupon"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("code", code)
        self.client.queueServiceActionCall("coupon", "get", "KalturaCoupon", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCoupon')


# @package Kaltura
# @subpackage Client
class KalturaCouponsGroupService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, couponsGroup):
        """Add coupons group"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("couponsGroup", couponsGroup)
        self.client.queueServiceActionCall("couponsgroup", "add", "KalturaCouponsGroup", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCouponsGroup')

    def delete(self, id):
        """Delete a coupons group"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("couponsgroup", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def generate(self, id, couponGenerationOptions):
        """Generate a coupon"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("couponGenerationOptions", couponGenerationOptions)
        self.client.queueServiceActionCall("couponsgroup", "generate", "KalturaStringValueArray", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaStringValueArray')

    def get(self, id):
        """Returns information about coupons group"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("couponsgroup", "get", "KalturaCouponsGroup", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCouponsGroup')

    def list(self):
        """Returns information about partner coupons groups"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("couponsgroup", "list", "KalturaCouponsGroupListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCouponsGroupListResponse')

    def update(self, id, couponsGroup):
        """Update coupons group"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("couponsGroup", couponsGroup)
        self.client.queueServiceActionCall("couponsgroup", "update", "KalturaCouponsGroup", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCouponsGroup')


# @package Kaltura
# @subpackage Client
class KalturaCurrencyService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self, filter):
        """Get the list of currencies for the partner with option to filter by currency codes"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("currency", "list", "KalturaCurrencyListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCurrencyListResponse')


# @package Kaltura
# @subpackage Client
class KalturaDeviceBrandService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, deviceBrand):
        """Adds a new device brand which belongs to a specific group."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("deviceBrand", deviceBrand)
        self.client.queueServiceActionCall("devicebrand", "add", "KalturaDeviceBrand", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDeviceBrand')

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Return a list of the available device brands."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("devicebrand", "list", "KalturaDeviceBrandListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDeviceBrandListResponse')

    def update(self, id, deviceBrand):
        """Updates an existing device brand which belongs to a specific group."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("deviceBrand", deviceBrand)
        self.client.queueServiceActionCall("devicebrand", "update", "KalturaDeviceBrand", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDeviceBrand')


# @package Kaltura
# @subpackage Client
class KalturaDeviceFamilyService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, deviceFamily):
        """Adds a new device family which belongs to a specific group."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("deviceFamily", deviceFamily)
        self.client.queueServiceActionCall("devicefamily", "add", "KalturaDeviceFamily", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDeviceFamily')

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Return a list of the available device families."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("devicefamily", "list", "KalturaDeviceFamilyListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDeviceFamilyListResponse')

    def update(self, id, deviceFamily):
        """Updates an existing device family which belongs to a specific group."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("deviceFamily", deviceFamily)
        self.client.queueServiceActionCall("devicefamily", "update", "KalturaDeviceFamily", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDeviceFamily')


# @package Kaltura
# @subpackage Client
class KalturaDeviceReferenceDataService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, objectToAdd):
        """add DeviceReferenceData"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("objectToAdd", objectToAdd)
        self.client.queueServiceActionCall("devicereferencedata", "add", "KalturaDeviceReferenceData", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDeviceReferenceData')

    def delete(self, id):
        """Delete existing DeviceReferenceData"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("devicereferencedata", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter, pager = NotImplemented):
        """Returns the list of available DeviceReferenceData"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("devicereferencedata", "list", "KalturaDeviceReferenceDataListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDeviceReferenceDataListResponse')

    def update(self, id, objectToUpdate):
        """Update existing DeviceReferenceData"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("objectToUpdate", objectToUpdate)
        self.client.queueServiceActionCall("devicereferencedata", "update", "KalturaDeviceReferenceData", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDeviceReferenceData')


# @package Kaltura
# @subpackage Client
class KalturaDiscountDetailsService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, discountDetails):
        """Internal API !!! Insert new DiscountDetails for partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("discountDetails", discountDetails)
        self.client.queueServiceActionCall("discountdetails", "add", "KalturaDiscountDetails", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDiscountDetails')

    def delete(self, id):
        """Internal API !!! Delete DiscountDetails"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("discountdetails", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter = NotImplemented):
        """Returns the list of available discounts details, can be filtered by discount codes"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("discountdetails", "list", "KalturaDiscountDetailsListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDiscountDetailsListResponse')

    def update(self, id, discountDetails):
        """Update discount details"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("discountDetails", discountDetails)
        self.client.queueServiceActionCall("discountdetails", "update", "KalturaDiscountDetails", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDiscountDetails')


# @package Kaltura
# @subpackage Client
class KalturaDrmProfileService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, drmProfile):
        """Internal API !!! Insert new DrmProfile"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("drmProfile", drmProfile)
        self.client.queueServiceActionCall("drmprofile", "add", "KalturaDrmProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDrmProfile')

    def delete(self, id):
        """Internal API !!! Delete DrmProfile"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("drmprofile", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self):
        """Returns all DRM adapters for partner"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("drmprofile", "list", "KalturaDrmProfileListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDrmProfileListResponse')


# @package Kaltura
# @subpackage Client
class KalturaDurationService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self):
        """Get the list of optinal Duration codes"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("duration", "list", "KalturaDurationListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDurationListResponse')


# @package Kaltura
# @subpackage Client
class KalturaDynamicListService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, objectToAdd):
        """Add new KalturaDynamicList"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("objectToAdd", objectToAdd)
        self.client.queueServiceActionCall("dynamiclist", "add", "KalturaDynamicList", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDynamicList')

    def addFromBulkUpload(self, fileData, jobData, bulkUploadData):
        """Add new bulk upload batch job Conversion profile id can be specified in the API."""

        kparams = KalturaParams()
        kfiles = {"fileData": fileData}
        kparams.addObjectIfDefined("jobData", jobData)
        kparams.addObjectIfDefined("bulkUploadData", bulkUploadData)
        self.client.queueServiceActionCall("dynamiclist", "addFromBulkUpload", "KalturaBulkUpload", kparams, kfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaBulkUpload')

    def delete(self, id):
        """Delete existing DynamicList"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("dynamiclist", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter, pager = NotImplemented):
        """Returns the list of available DynamicList"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("dynamiclist", "list", "KalturaDynamicListListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDynamicListListResponse')

    def update(self, id, objectToUpdate):
        """Update existing KalturaDynamicList"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("objectToUpdate", objectToUpdate)
        self.client.queueServiceActionCall("dynamiclist", "update", "KalturaDynamicList", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDynamicList')


# @package Kaltura
# @subpackage Client
class KalturaEmailService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def send(self, emailMessage):
        """Sends email notification"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("emailMessage", emailMessage)
        self.client.queueServiceActionCall("email", "send", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaEngagementAdapterService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, engagementAdapter):
        """Insert new Engagement adapter for partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("engagementAdapter", engagementAdapter)
        self.client.queueServiceActionCall("engagementadapter", "add", "KalturaEngagementAdapter", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaEngagementAdapter')

    def delete(self, id):
        """Delete Engagement adapter by Engagement adapter id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("engagementadapter", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def generateSharedSecret(self, id):
        """Generate engagement adapter shared secret"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("engagementadapter", "generateSharedSecret", "KalturaEngagementAdapter", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaEngagementAdapter')

    def get(self, id):
        """Returns all Engagement adapters for partner : id + name"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("engagementadapter", "get", "KalturaEngagementAdapter", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaEngagementAdapter')

    def list(self):
        """Returns all Engagement adapters for partner : id + name"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("engagementadapter", "list", "KalturaEngagementAdapterListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaEngagementAdapterListResponse')

    def update(self, id, engagementAdapter):
        """Update Engagement adapter details"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("engagementAdapter", engagementAdapter)
        self.client.queueServiceActionCall("engagementadapter", "update", "KalturaEngagementAdapter", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaEngagementAdapter')


# @package Kaltura
# @subpackage Client
class KalturaEngagementService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, engagement):
        """Insert new Engagement for partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("engagement", engagement)
        self.client.queueServiceActionCall("engagement", "add", "KalturaEngagement", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaEngagement')

    def delete(self, id):
        """Delete engagement by engagement adapter id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("engagement", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def get(self, id):
        """Return engagement"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("engagement", "get", "KalturaEngagement", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaEngagement')

    def list(self, filter):
        """Returns all Engagement for partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("engagement", "list", "KalturaEngagementListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaEngagementListResponse')


# @package Kaltura
# @subpackage Client
class KalturaEntitlementService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def applyCoupon(self, purchaseId, couponCode):
        """Apply new coupon for existing subscription"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("purchaseId", purchaseId);
        kparams.addStringIfDefined("couponCode", couponCode)
        self.client.queueServiceActionCall("entitlement", "applyCoupon", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def cancel(self, assetId, productType):
        """Immediately cancel a subscription, PPV, collection or programAssetGroupOffer. Cancel is possible only if within cancellation window and content not already consumed"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("assetId", assetId);
        kparams.addStringIfDefined("productType", productType)
        self.client.queueServiceActionCall("entitlement", "cancel", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def cancelRenewal(self, subscriptionId):
        """Cancel a household service subscription at the next renewal. The subscription stays valid till the next renewal."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("subscriptionId", subscriptionId)
        self.client.queueServiceActionCall("entitlement", "cancelRenewal", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def cancelScheduledSubscription(self, scheduledSubscriptionId):
        """Cancel Scheduled Subscription"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("scheduledSubscriptionId", scheduledSubscriptionId);
        self.client.queueServiceActionCall("entitlement", "cancelScheduledSubscription", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def externalReconcile(self):
        """Reconcile the user household&#39;s entitlements with an external entitlements source. This request is frequency protected to avoid too frequent calls per household."""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("entitlement", "externalReconcile", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def forceCancel(self, assetId, productType):
        """Immediately cancel a subscription, PPV, collection or programAssetGroupOffer. Cancel applies regardless of cancellation window and content consumption status"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("assetId", assetId);
        kparams.addStringIfDefined("productType", productType)
        self.client.queueServiceActionCall("entitlement", "forceCancel", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def getNextRenewal(self, id):
        """Returns the data about the next renewal"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("entitlement", "getNextRenewal", "KalturaEntitlementRenewal", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaEntitlementRenewal')

    def grant(self, productId, productType, history, contentId = 0):
        """Grant household for an entitlement for a PPV, Subscription or programAssetGroupOffer."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("productId", productId);
        kparams.addStringIfDefined("productType", productType)
        kparams.addBoolIfDefined("history", history);
        kparams.addIntIfDefined("contentId", contentId);
        self.client.queueServiceActionCall("entitlement", "grant", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter, pager = NotImplemented):
        """Gets all the entitled media items for a household"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("entitlement", "list", "KalturaEntitlementListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaEntitlementListResponse')

    def swap(self, currentProductId, newProductId, history):
        """Swap current entitlement (subscription) with new entitlement (subscription) - only Grant"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("currentProductId", currentProductId);
        kparams.addIntIfDefined("newProductId", newProductId);
        kparams.addBoolIfDefined("history", history);
        self.client.queueServiceActionCall("entitlement", "swap", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def update(self, id, entitlement):
        """Update Kaltura Entitelment by Purchase id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("entitlement", entitlement)
        self.client.queueServiceActionCall("entitlement", "update", "KalturaEntitlement", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaEntitlement')


# @package Kaltura
# @subpackage Client
class KalturaEpgService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self, filter = NotImplemented):
        """Returns EPG assets."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("epg", "list", "KalturaEpgListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaEpgListResponse')


# @package Kaltura
# @subpackage Client
class KalturaEpgServicePartnerConfigurationService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self):
        """Returns EPG cache service partner configurations"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("epgservicepartnerconfiguration", "get", "KalturaEpgServicePartnerConfiguration", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaEpgServicePartnerConfiguration')

    def update(self, config):
        """Returns EPG cache service partner configurations"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("config", config)
        self.client.queueServiceActionCall("epgservicepartnerconfiguration", "update", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()


# @package Kaltura
# @subpackage Client
class KalturaEventNotificationActionService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def dispatch(self, scope):
        """Dispatches event notification"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("scope", scope)
        self.client.queueServiceActionCall("eventnotificationaction", "dispatch", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaEventNotificationService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self, filter):
        """Gets all EventNotification items for a given Object id and type"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("eventnotification", "list", "KalturaEventNotificationListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaEventNotificationListResponse')

    def update(self, id, objectToUpdate):
        """eventNotification update"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addObjectIfDefined("objectToUpdate", objectToUpdate)
        self.client.queueServiceActionCall("eventnotification", "update", "KalturaEventNotification", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaEventNotification')


# @package Kaltura
# @subpackage Client
class KalturaExportTaskService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, task):
        """Adds a new bulk export task"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("task", task)
        self.client.queueServiceActionCall("exporttask", "add", "KalturaExportTask", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaExportTask')

    def delete(self, id):
        """Deletes an existing bulk export task by task identifier"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("exporttask", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def get(self, id):
        """Gets an existing bulk export task by task identifier"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("exporttask", "get", "KalturaExportTask", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaExportTask')

    def list(self, filter = NotImplemented):
        """Returns bulk export tasks by tasks identifiers"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("exporttask", "list", "KalturaExportTaskListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaExportTaskListResponse')

    def update(self, id, task):
        """Updates an existing bulk export task by task identifier"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("task", task)
        self.client.queueServiceActionCall("exporttask", "update", "KalturaExportTask", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaExportTask')


# @package Kaltura
# @subpackage Client
class KalturaExternalChannelProfileService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, externalChannel):
        """Insert new External channel for partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("externalChannel", externalChannel)
        self.client.queueServiceActionCall("externalchannelprofile", "add", "KalturaExternalChannelProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaExternalChannelProfile')

    def delete(self, externalChannelId):
        """Delete External channel by External channel id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("externalChannelId", externalChannelId);
        self.client.queueServiceActionCall("externalchannelprofile", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter = NotImplemented):
        """Returns all External channels for partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("externalchannelprofile", "list", "KalturaExternalChannelProfileListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaExternalChannelProfileListResponse')

    def update(self, externalChannelId, externalChannel):
        """Update External channel details"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("externalChannelId", externalChannelId);
        kparams.addObjectIfDefined("externalChannel", externalChannel)
        self.client.queueServiceActionCall("externalchannelprofile", "update", "KalturaExternalChannelProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaExternalChannelProfile')


# @package Kaltura
# @subpackage Client
class KalturaFavoriteService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, favorite):
        """Add media to user&#39;s favorite list"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("favorite", favorite)
        self.client.queueServiceActionCall("favorite", "add", "KalturaFavorite", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaFavorite')

    def delete(self, id):
        """Remove media from user&#39;s favorite list"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("favorite", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter = NotImplemented):
        """Retrieving users&#39; favorites"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("favorite", "list", "KalturaFavoriteListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaFavoriteListResponse')


# @package Kaltura
# @subpackage Client
class KalturaFollowTvSeriesService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, followTvSeries):
        """Add a user&#39;s tv series follow.
                    Possible status codes: UserAlreadyFollowing = 8013, NotFound = 500007, InvalidAssetId = 4024"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("followTvSeries", followTvSeries)
        self.client.queueServiceActionCall("followtvseries", "add", "KalturaFollowTvSeries", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaFollowTvSeries')

    def delete(self, assetId):
        """Delete a user&#39;s tv series follow."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("assetId", assetId);
        self.client.queueServiceActionCall("followtvseries", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def deleteWithToken(self, assetId, token, partnerId):
        """Delete a user&#39;s tv series follow."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("assetId", assetId);
        kparams.addStringIfDefined("token", token)
        kparams.addIntIfDefined("partnerId", partnerId);
        self.client.queueServiceActionCall("followtvseries", "deleteWithToken", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter, pager = NotImplemented):
        """List user&#39;s tv series follows.
                    Possible status codes:"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("followtvseries", "list", "KalturaFollowTvSeriesListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaFollowTvSeriesListResponse')


# @package Kaltura
# @subpackage Client
class KalturaHomeNetworkService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, homeNetwork):
        """Add a new home network to a household"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("homeNetwork", homeNetwork)
        self.client.queueServiceActionCall("homenetwork", "add", "KalturaHomeNetwork", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHomeNetwork')

    def delete(self, externalId):
        """Delete household's existing home network"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("externalId", externalId)
        self.client.queueServiceActionCall("homenetwork", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self):
        """Retrieve the household's home networks"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("homenetwork", "list", "KalturaHomeNetworkListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHomeNetworkListResponse')

    def update(self, externalId, homeNetwork):
        """Update and existing home network for a household"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("externalId", externalId)
        kparams.addObjectIfDefined("homeNetwork", homeNetwork)
        self.client.queueServiceActionCall("homenetwork", "update", "KalturaHomeNetwork", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHomeNetwork')


# @package Kaltura
# @subpackage Client
class KalturaHouseholdService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, household):
        """Creates a household for the user"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("household", household)
        self.client.queueServiceActionCall("household", "add", "KalturaHousehold", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHousehold')

    def delete(self, id = NotImplemented):
        """Fully delete a household. Delete all of the household information, including users, devices, entitlements, payment methods and notification date."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("household", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def get(self, id = NotImplemented):
        """Returns the household model"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("household", "get", "KalturaHousehold", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHousehold')

    def list(self, filter, pager = NotImplemented):
        """Retrive household for the partner filter by external identifier"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("household", "list", "KalturaHouseholdListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdListResponse')

    def purge(self, id):
        """Purge a household. Delete all of the household information, including users, devices, entitlements, payment methods and notification date."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("household", "purge", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def resetFrequency(self, frequencyType):
        """Reset a household's time limitation for removing user or device"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("frequencyType", frequencyType)
        self.client.queueServiceActionCall("household", "resetFrequency", "KalturaHousehold", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHousehold')

    def resume(self):
        """Resumed a given household service to its previous service settings"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("household", "resume", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def suspend(self, roleId = NotImplemented):
        """Suspend a given household service. Sets the household status to "suspended&quot;.The household service settings are maintained for later resume"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("roleId", roleId);
        self.client.queueServiceActionCall("household", "suspend", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def update(self, household):
        """Update the household name and description"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("household", household)
        self.client.queueServiceActionCall("household", "update", "KalturaHousehold", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHousehold')


# @package Kaltura
# @subpackage Client
class KalturaHouseholdCouponService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, objectToAdd):
        """householdCoupon add"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("objectToAdd", objectToAdd)
        self.client.queueServiceActionCall("householdcoupon", "add", "KalturaHouseholdCoupon", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdCoupon')

    def delete(self, id):
        """Remove coupon from household"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("householdcoupon", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented):
        """Gets all HouseholdCoupon items for a household"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("householdcoupon", "list", "KalturaHouseholdCouponListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdCouponListResponse')


# @package Kaltura
# @subpackage Client
class KalturaHouseholdDeviceService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, device):
        """Add device to household"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("device", device)
        self.client.queueServiceActionCall("householddevice", "add", "KalturaHouseholdDevice", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdDevice')

    def addByPin(self, deviceName, pin):
        """Registers a device to a household using pin code"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("deviceName", deviceName)
        kparams.addStringIfDefined("pin", pin)
        self.client.queueServiceActionCall("householddevice", "addByPin", "KalturaHouseholdDevice", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdDevice')

    def delete(self, udid):
        """Removes a device from household"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("udid", udid)
        self.client.queueServiceActionCall("householddevice", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def deleteDynamicData(self, udid, key):
        """Deletes dynamic data item with key  for device with identifier ."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("udid", udid)
        kparams.addStringIfDefined("key", key)
        self.client.queueServiceActionCall("householddevice", "deleteDynamicData", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def generatePin(self, udid, brandId):
        """Generates device pin to use when adding a device to household by pin"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("udid", udid)
        kparams.addIntIfDefined("brandId", brandId);
        self.client.queueServiceActionCall("householddevice", "generatePin", "KalturaDevicePin", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDevicePin')

    def get(self, udid = NotImplemented):
        """Returns device registration status to the supplied household"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("udid", udid)
        self.client.queueServiceActionCall("householddevice", "get", "KalturaHouseholdDevice", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdDevice')

    def list(self, filter = NotImplemented):
        """Returns the devices within the household"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("householddevice", "list", "KalturaHouseholdDeviceListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdDeviceListResponse')

    def loginWithPin(self, partnerId, pin, udid = NotImplemented, extraParams = NotImplemented):
        """User sign-in via a time-expired sign-in PIN."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("partnerId", partnerId);
        kparams.addStringIfDefined("pin", pin)
        kparams.addStringIfDefined("udid", udid)
        kparams.addMapIfDefined("extraParams", extraParams)
        self.client.queueServiceActionCall("householddevice", "loginWithPin", "KalturaLoginResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaLoginResponse')

    def update(self, udid, device):
        """Update the name of the device by UDID"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("udid", udid)
        kparams.addObjectIfDefined("device", device)
        self.client.queueServiceActionCall("householddevice", "update", "KalturaHouseholdDevice", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdDevice')

    def updateStatus(self, udid, status):
        """Update the name of the device by UDID"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("udid", udid)
        kparams.addStringIfDefined("status", status)
        self.client.queueServiceActionCall("householddevice", "updateStatus", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def upsertDynamicData(self, udid, key, value):
        """Adds or updates dynamic data item for device with identifier udid. If it is needed to update several items, use a multi-request to avoid race conditions."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("udid", udid)
        kparams.addStringIfDefined("key", key)
        kparams.addObjectIfDefined("value", value)
        self.client.queueServiceActionCall("householddevice", "upsertDynamicData", "KalturaDynamicData", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDynamicData')


# @package Kaltura
# @subpackage Client
class KalturaHouseholdLimitationsService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, householdLimitations):
        """Add household limitation"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("householdLimitations", householdLimitations)
        self.client.queueServiceActionCall("householdlimitations", "add", "KalturaHouseholdLimitations", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdLimitations')

    def delete(self, householdLimitationsId):
        """Delete household limitation"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("householdLimitationsId", householdLimitationsId);
        self.client.queueServiceActionCall("householdlimitations", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def get(self, id):
        """Get the limitation module by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("householdlimitations", "get", "KalturaHouseholdLimitations", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdLimitations')

    def isUsed(self, dlmId):
        """Checks if the DLM is used"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("dlmId", dlmId);
        self.client.queueServiceActionCall("householdlimitations", "isUsed", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self):
        """Get the list of PartnerConfiguration"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("householdlimitations", "list", "KalturaHouseholdLimitationsListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdLimitationsListResponse')

    def update(self, dlmId, householdLimitation):
        """Updates household limitation"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("dlmId", dlmId);
        kparams.addObjectIfDefined("householdLimitation", householdLimitation)
        self.client.queueServiceActionCall("householdlimitations", "update", "KalturaHouseholdLimitations", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdLimitations')


# @package Kaltura
# @subpackage Client
class KalturaHouseholdPaymentGatewayService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def disable(self, paymentGatewayId):
        """Disable payment-gateway on the household"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("paymentGatewayId", paymentGatewayId);
        self.client.queueServiceActionCall("householdpaymentgateway", "disable", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def enable(self, paymentGatewayId):
        """Enable a payment-gateway provider for the household."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("paymentGatewayId", paymentGatewayId);
        self.client.queueServiceActionCall("householdpaymentgateway", "enable", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def getChargeID(self, paymentGatewayExternalId):
        """Get a household's billing account identifier (charge ID) for a given payment gateway"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("paymentGatewayExternalId", paymentGatewayExternalId)
        self.client.queueServiceActionCall("householdpaymentgateway", "getChargeID", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def invoke(self, paymentGatewayId, intent, extraParameters):
        """Gets the Payment Gateway Configuration for the payment gateway identifier given"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("paymentGatewayId", paymentGatewayId);
        kparams.addStringIfDefined("intent", intent)
        kparams.addArrayIfDefined("extraParameters", extraParameters)
        self.client.queueServiceActionCall("householdpaymentgateway", "invoke", "KalturaPaymentGatewayConfiguration", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPaymentGatewayConfiguration')

    def list(self):
        """Get a list of all configured Payment Gateways providers available for the account. For each payment is provided with the household associated payment methods."""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("householdpaymentgateway", "list", "KalturaHouseholdPaymentGatewayListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdPaymentGatewayListResponse')

    def resume(self, paymentGatewayId, adapterData = NotImplemented):
        """Resumes all the entitlements of the given payment gateway"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("paymentGatewayId", paymentGatewayId);
        kparams.addArrayIfDefined("adapterData", adapterData)
        self.client.queueServiceActionCall("householdpaymentgateway", "resume", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def setChargeID(self, paymentGatewayExternalId, chargeId):
        """Set user billing account identifier (charge ID), for a specific household and a specific payment gateway"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("paymentGatewayExternalId", paymentGatewayExternalId)
        kparams.addStringIfDefined("chargeId", chargeId)
        self.client.queueServiceActionCall("householdpaymentgateway", "setChargeID", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def suspend(self, paymentGatewayId, suspendSettings = NotImplemented):
        """Suspends all the entitlements of the given payment gateway"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("paymentGatewayId", paymentGatewayId);
        kparams.addObjectIfDefined("suspendSettings", suspendSettings)
        self.client.queueServiceActionCall("householdpaymentgateway", "suspend", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()


# @package Kaltura
# @subpackage Client
class KalturaHouseholdPaymentMethodService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, householdPaymentMethod):
        """Add a new payment method for household"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("householdPaymentMethod", householdPaymentMethod)
        self.client.queueServiceActionCall("householdpaymentmethod", "add", "KalturaHouseholdPaymentMethod", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdPaymentMethod')

    def forceRemove(self, paymentGatewayId, paymentMethodId):
        """Force remove of a payment method of the household."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("paymentGatewayId", paymentGatewayId);
        kparams.addIntIfDefined("paymentMethodId", paymentMethodId);
        self.client.queueServiceActionCall("householdpaymentmethod", "forceRemove", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self):
        """Get a list of all payment methods of the household."""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("householdpaymentmethod", "list", "KalturaHouseholdPaymentMethodListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdPaymentMethodListResponse')

    def remove(self, paymentGatewayId, paymentMethodId):
        """Removes a payment method of the household."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("paymentGatewayId", paymentGatewayId);
        kparams.addIntIfDefined("paymentMethodId", paymentMethodId);
        self.client.queueServiceActionCall("householdpaymentmethod", "remove", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def setAsDefault(self, paymentGatewayId, paymentMethodId):
        """Set a payment method as default for the household."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("paymentGatewayId", paymentGatewayId);
        kparams.addIntIfDefined("paymentMethodId", paymentMethodId);
        self.client.queueServiceActionCall("householdpaymentmethod", "setAsDefault", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaHouseholdPremiumServiceService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self):
        """Returns all the premium services allowed for the household"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("householdpremiumservice", "list", "KalturaHouseholdPremiumServiceListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdPremiumServiceListResponse')


# @package Kaltura
# @subpackage Client
class KalturaHouseholdQuotaService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self):
        """Returns the household&#39;s quota data"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("householdquota", "get", "KalturaHouseholdQuota", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdQuota')


# @package Kaltura
# @subpackage Client
class KalturaHouseholdSegmentService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, objectToAdd):
        """householdSegment add"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("objectToAdd", objectToAdd)
        self.client.queueServiceActionCall("householdsegment", "add", "KalturaHouseholdSegment", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdSegment')

    def delete(self, id):
        """Remove segment from household"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("householdsegment", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented):
        """Gets all HouseholdSegment items for a household"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("householdsegment", "list", "KalturaHouseholdSegmentListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdSegmentListResponse')


# @package Kaltura
# @subpackage Client
class KalturaHouseholdUserService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, householdUser):
        """Adds a user to household"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("householdUser", householdUser)
        self.client.queueServiceActionCall("householduser", "add", "KalturaHouseholdUser", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdUser')

    def delete(self, id):
        """Removes a user from household"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("householduser", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter = NotImplemented):
        """Returns the users within the household"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("householduser", "list", "KalturaHouseholdUserListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaHouseholdUserListResponse')


# @package Kaltura
# @subpackage Client
class KalturaImageService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, image):
        """Add a new image"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("image", image)
        self.client.queueServiceActionCall("image", "add", "KalturaImage", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaImage')

    def delete(self, id):
        """Delete an existing image"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("image", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter):
        """Get the list of images by different filtering"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("image", "list", "KalturaImageListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaImageListResponse')

    def setContent(self, id, content):
        """Sets the content of an existing image"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("content", content)
        self.client.queueServiceActionCall("image", "setContent", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()


# @package Kaltura
# @subpackage Client
class KalturaImageTypeService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, imageType):
        """Add a new image type"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("imageType", imageType)
        self.client.queueServiceActionCall("imagetype", "add", "KalturaImageType", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaImageType')

    def delete(self, id):
        """Delete an existing image type"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("imagetype", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter = NotImplemented):
        """Get the list of image types for the partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("imagetype", "list", "KalturaImageTypeListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaImageTypeListResponse')

    def update(self, id, imageType):
        """Update an existing image type"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("imageType", imageType)
        self.client.queueServiceActionCall("imagetype", "update", "KalturaImageType", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaImageType')


# @package Kaltura
# @subpackage Client
class KalturaInboxMessageService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self, id):
        """TBD"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("inboxmessage", "get", "KalturaInboxMessage", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaInboxMessage')

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List inbox messages"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("inboxmessage", "list", "KalturaInboxMessageListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaInboxMessageListResponse')

    def updateStatus(self, id, status):
        """Updates the message status."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addStringIfDefined("status", status)
        self.client.queueServiceActionCall("inboxmessage", "updateStatus", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaIngestProfileService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, ingestProfile):
        """Insert new ingest profile for partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("ingestProfile", ingestProfile)
        self.client.queueServiceActionCall("ingestprofile", "add", "KalturaIngestProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaIngestProfile')

    def delete(self, ingestProfileId):
        """Delete ingest profiles by ingest profiles id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("ingestProfileId", ingestProfileId);
        self.client.queueServiceActionCall("ingestprofile", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self):
        """Returns all ingest profiles for partner"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("ingestprofile", "list", "KalturaIngestProfileListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaIngestProfileListResponse')

    def update(self, ingestProfileId, ingestProfile):
        """Update ingest profile details"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("ingestProfileId", ingestProfileId);
        kparams.addObjectIfDefined("ingestProfile", ingestProfile)
        self.client.queueServiceActionCall("ingestprofile", "update", "KalturaIngestProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaIngestProfile')


# @package Kaltura
# @subpackage Client
class KalturaIngestStatusService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def getEpgDetails(self, ingestId):
        """Returns information about specific Ingest job"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("ingestId", ingestId);
        self.client.queueServiceActionCall("ingeststatus", "getEpgDetails", "KalturaIngestEpgDetails", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaIngestEpgDetails')

    def getEpgList(self, idsFilter = NotImplemented, filter = NotImplemented, pager = NotImplemented):
        """Response with list of ingest jobs."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("idsFilter", idsFilter)
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("ingeststatus", "getEpgList", "KalturaIngestStatusEpgListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaIngestStatusEpgListResponse')

    def getEpgProgramResultList(self, ingestId, filter = NotImplemented, pager = NotImplemented):
        """Get as input ingest job id, filter and pager and response with page of filtered detailed ingest job results."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("ingestId", ingestId);
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("ingeststatus", "getEpgProgramResultList", "KalturaIngestStatusEpgProgramResultListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaIngestStatusEpgProgramResultListResponse')

    def getPartnerConfiguration(self):
        """Returns Core Ingest service partner configurations"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("ingeststatus", "getPartnerConfiguration", "KalturaIngestStatusPartnerConfiguration", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaIngestStatusPartnerConfiguration')

    def updatePartnerConfiguration(self, config):
        """Returns Core Ingest service partner configurations"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("config", config)
        self.client.queueServiceActionCall("ingeststatus", "updatePartnerConfiguration", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()


# @package Kaltura
# @subpackage Client
class KalturaIotService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def getClientConfiguration(self):
        """Get iot Client Configuration"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("iot", "getClientConfiguration", "KalturaIotClientConfiguration", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaIotClientConfiguration')

    def register(self):
        """Register IOT device"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("iot", "register", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaIotProfileService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self):
        """Add new environment in aws"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("iotprofile", "add", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaLabelService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, label):
        """Create a new label associated with a predefined entity attribute. Currently supports only labels on KalturaMediaFile."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("label", label)
        self.client.queueServiceActionCall("label", "add", "KalturaLabel", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaLabel')

    def delete(self, id):
        """Deletes the existing label by its identifier."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("label", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter, pager = NotImplemented):
        """Gets list of labels which meet the filter criteria."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("label", "list", "KalturaLabelListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaLabelListResponse')

    def update(self, id, label):
        """Updates the existing label with a new value."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("label", label)
        self.client.queueServiceActionCall("label", "update", "KalturaLabel", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaLabel')


# @package Kaltura
# @subpackage Client
class KalturaLanguageService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self, filter):
        """Get the list of languages for the partner with option to filter by language codes"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("language", "list", "KalturaLanguageListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaLanguageListResponse')


# @package Kaltura
# @subpackage Client
class KalturaLicensedUrlService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self, request):
        """Get the URL for playing an asset - program, media or recording"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("request", request)
        self.client.queueServiceActionCall("licensedurl", "get", "KalturaLicensedUrl", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaLicensedUrl')


# @package Kaltura
# @subpackage Client
class KalturaLineupService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self, pageIndex, pageSize):
        """Return regional lineup (list of lineup channel asset objects) based on the requester session characteristics and his region."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("pageIndex", pageIndex);
        kparams.addIntIfDefined("pageSize", pageSize);
        self.client.queueServiceActionCall("lineup", "get", "KalturaLineupChannelAssetListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaLineupChannelAssetListResponse')

    def sendUpdatedNotification(self, regionIds):
        """Sends lineup update requested notification."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("regionIds", regionIds)
        self.client.queueServiceActionCall("lineup", "sendUpdatedNotification", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaLiveToVodService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def getConfiguration(self):
        """Get existing L2V configuration for both the partner level and all channels level."""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("livetovod", "getConfiguration", "KalturaLiveToVodFullConfiguration", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaLiveToVodFullConfiguration')

    def getLinearAssetConfiguration(self, linearAssetId):
        """Get existing L2V configuration for a specific linear asset."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("linearAssetId", linearAssetId);
        self.client.queueServiceActionCall("livetovod", "getLinearAssetConfiguration", "KalturaLiveToVodLinearAssetConfiguration", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaLiveToVodLinearAssetConfiguration')

    def getPartnerConfiguration(self):
        """Get existing L2V partner configuration."""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("livetovod", "getPartnerConfiguration", "KalturaLiveToVodPartnerConfiguration", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaLiveToVodPartnerConfiguration')

    def updateLinearAssetConfiguration(self, configuration):
        """Set L2V configuration for a specific Linear channel."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("configuration", configuration)
        self.client.queueServiceActionCall("livetovod", "updateLinearAssetConfiguration", "KalturaLiveToVodLinearAssetConfiguration", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaLiveToVodLinearAssetConfiguration')

    def updatePartnerConfiguration(self, configuration):
        """Set L2V configuration on the partner level."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("configuration", configuration)
        self.client.queueServiceActionCall("livetovod", "updatePartnerConfiguration", "KalturaLiveToVodPartnerConfiguration", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaLiveToVodPartnerConfiguration')


# @package Kaltura
# @subpackage Client
class KalturaMediaConcurrencyRuleService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self):
        """Get the list of meta mappings for the partner"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("mediaconcurrencyrule", "list", "KalturaMediaConcurrencyRuleListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaMediaConcurrencyRuleListResponse')


# @package Kaltura
# @subpackage Client
class KalturaMediaFileService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, mediaFile):
        """Add a new media file"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("mediaFile", mediaFile)
        self.client.queueServiceActionCall("mediafile", "add", "KalturaMediaFile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaMediaFile')

    def delete(self, id):
        """Delete an existing media file"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("mediafile", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter = NotImplemented):
        """Returns a list of media-file"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("mediafile", "list", "KalturaMediaFileListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaMediaFileListResponse')

    def update(self, id, mediaFile):
        """update an existing media file"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("mediaFile", mediaFile)
        self.client.queueServiceActionCall("mediafile", "update", "KalturaMediaFile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaMediaFile')


# @package Kaltura
# @subpackage Client
class KalturaMediaFileDynamicDataService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, dynamicData):
        """Add a dynamicData value to the values list of a specific key name in a specific mediaFileTypeId"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("dynamicData", dynamicData)
        self.client.queueServiceActionCall("mediafiledynamicdata", "add", "KalturaMediaFileDynamicData", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaMediaFileDynamicData')

    def delete(self, id):
        """Delete an existing DynamicData value"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("mediafiledynamicdata", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List and filter existing mediaFile dynamicData values"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("mediafiledynamicdata", "list", "KalturaMediaFileDynamicDataListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaMediaFileDynamicDataListResponse')


# @package Kaltura
# @subpackage Client
class KalturaMediaFileTypeService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, mediaFileType):
        """Add new media-file type"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("mediaFileType", mediaFileType)
        self.client.queueServiceActionCall("mediafiletype", "add", "KalturaMediaFileType", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaMediaFileType')

    def delete(self, id):
        """Delete media-file type by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("mediafiletype", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self):
        """Returns a list of media-file types"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("mediafiletype", "list", "KalturaMediaFileTypeListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaMediaFileTypeListResponse')

    def update(self, id, mediaFileType):
        """Update existing media-file type"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("mediaFileType", mediaFileType)
        self.client.queueServiceActionCall("mediafiletype", "update", "KalturaMediaFileType", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaMediaFileType')


# @package Kaltura
# @subpackage Client
class KalturaMessageTemplateService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self, messageType):
        """Retrieve a message template used in push notifications and inbox"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("messageType", messageType)
        self.client.queueServiceActionCall("messagetemplate", "get", "KalturaMessageTemplate", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaMessageTemplate')

    def update(self, messageType, template):
        """Set the account's push notifications and inbox messages templates"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("messageType", messageType)
        kparams.addObjectIfDefined("template", template)
        self.client.queueServiceActionCall("messagetemplate", "update", "KalturaMessageTemplate", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaMessageTemplate')


# @package Kaltura
# @subpackage Client
class KalturaMetaService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, meta):
        """Add a new meta"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("meta", meta)
        self.client.queueServiceActionCall("meta", "add", "KalturaMeta", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaMeta')

    def delete(self, id):
        """Delete an existing meta"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("meta", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter = NotImplemented):
        """Return a list of metas for the account with optional filter"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("meta", "list", "KalturaMetaListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaMetaListResponse')

    def update(self, id, meta):
        """Update an existing meta"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("meta", meta)
        self.client.queueServiceActionCall("meta", "update", "KalturaMeta", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaMeta')


# @package Kaltura
# @subpackage Client
class KalturaNotificationService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def register(self, identifier, type):
        """TBD"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("identifier", identifier)
        kparams.addStringIfDefined("type", type)
        self.client.queueServiceActionCall("notification", "register", "KalturaRegistryResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaRegistryResponse')

    def sendPush(self, userId, pushMessage):
        """Sends push notification to user devices"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("userId", userId);
        kparams.addObjectIfDefined("pushMessage", pushMessage)
        self.client.queueServiceActionCall("notification", "sendPush", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def sendSms(self, message, phoneNumber = NotImplemented, adapterData = NotImplemented):
        """Sends SMS notification to user"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("message", message)
        kparams.addStringIfDefined("phoneNumber", phoneNumber)
        kparams.addMapIfDefined("adapterData", adapterData)
        self.client.queueServiceActionCall("notification", "sendSms", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def setDevicePushToken(self, pushToken):
        """Registers the device push token to the push service"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("pushToken", pushToken)
        self.client.queueServiceActionCall("notification", "setDevicePushToken", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaNotificationsPartnerSettingsService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self):
        """Retrieve the partner notification settings."""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("notificationspartnersettings", "get", "KalturaNotificationsPartnerSettings", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaNotificationsPartnerSettings')

    def update(self, settings):
        """Update the account notification settings"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("settings", settings)
        self.client.queueServiceActionCall("notificationspartnersettings", "update", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaNotificationsSettingsService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self):
        """Retrieve the user's notification settings."""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("notificationssettings", "get", "KalturaNotificationsSettings", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaNotificationsSettings')

    def update(self, settings):
        """Update the user's notification settings."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("settings", settings)
        self.client.queueServiceActionCall("notificationssettings", "update", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def updateWithToken(self, settings, token, partnerId):
        """Update the user's notification settings."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("settings", settings)
        kparams.addStringIfDefined("token", token)
        kparams.addIntIfDefined("partnerId", partnerId);
        self.client.queueServiceActionCall("notificationssettings", "updateWithToken", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaOssAdapterProfileService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, ossAdapter):
        """Insert new OSS adapter for partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("ossAdapter", ossAdapter)
        self.client.queueServiceActionCall("ossadapterprofile", "add", "KalturaOSSAdapterProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaOSSAdapterProfile')

    def delete(self, ossAdapterId):
        """Delete OSS adapter by OSS adapter id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("ossAdapterId", ossAdapterId);
        self.client.queueServiceActionCall("ossadapterprofile", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def generateSharedSecret(self, ossAdapterId):
        """Generate oss adapter shared secret"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("ossAdapterId", ossAdapterId);
        self.client.queueServiceActionCall("ossadapterprofile", "generateSharedSecret", "KalturaOSSAdapterProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaOSSAdapterProfile')

    def get(self, id):
        """Returns all OSS adapters for partner : id + name"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("ossadapterprofile", "get", "KalturaOSSAdapterProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaOSSAdapterProfile')

    def list(self):
        """Returns all OSS adapters for partner : id + name"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("ossadapterprofile", "list", "KalturaOSSAdapterProfileListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaOSSAdapterProfileListResponse')

    def update(self, ossAdapterId, ossAdapter):
        """Update OSS adapter details"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("ossAdapterId", ossAdapterId);
        kparams.addObjectIfDefined("ossAdapter", ossAdapter)
        self.client.queueServiceActionCall("ossadapterprofile", "update", "KalturaOSSAdapterProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaOSSAdapterProfile')


# @package Kaltura
# @subpackage Client
class KalturaOttCategoryService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self, id):
        """Retrieve the list of categories (hierarchical) and their associated channels"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("ottcategory", "get", "KalturaOTTCategory", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaOTTCategory')


# @package Kaltura
# @subpackage Client
class KalturaOttUserService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def activate(self, partnerId, username, activationToken):
        """Activate the account by activation token"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("partnerId", partnerId);
        kparams.addStringIfDefined("username", username)
        kparams.addStringIfDefined("activationToken", activationToken)
        self.client.queueServiceActionCall("ottuser", "activate", "KalturaOTTUser", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaOTTUser')

    def addRole(self, roleId):
        """Deprecate - use Register or Update actions instead by setting user.roleIds parameter"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("roleId", roleId);
        self.client.queueServiceActionCall("ottuser", "addRole", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def anonymousLogin(self, partnerId, udid = NotImplemented):
        """Returns tokens (KS and refresh token) for anonymous access"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("partnerId", partnerId);
        kparams.addStringIfDefined("udid", udid)
        self.client.queueServiceActionCall("ottuser", "anonymousLogin", "KalturaLoginSession", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaLoginSession')

    def delete(self):
        """Permanently delete a user. User to delete cannot be an exclusive household master, and cannot be default user."""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("ottuser", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def deleteDynamicData(self, key):
        """Deletes dynamic data item for a user."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("key", key)
        self.client.queueServiceActionCall("ottuser", "deleteDynamicData", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def get(self):
        """Retrieving users&#39; data"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("ottuser", "get", "KalturaOTTUser", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaOTTUser')

    def getEncryptedUserId(self):
        """Returns the identifier of the user encrypted with SHA1 using configured key"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("ottuser", "getEncryptedUserId", "KalturaStringValue", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaStringValue')

    def list(self, filter = NotImplemented):
        """Returns list of OTTUser (limited to 500 items). Filters by username/external identifier/idIn or roleIdIn"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("ottuser", "list", "KalturaOTTUserListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaOTTUserListResponse')

    def login(self, partnerId, username = NotImplemented, password = NotImplemented, extraParams = NotImplemented, udid = NotImplemented):
        """login with user name and password."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("partnerId", partnerId);
        kparams.addStringIfDefined("username", username)
        kparams.addStringIfDefined("password", password)
        kparams.addMapIfDefined("extraParams", extraParams)
        kparams.addStringIfDefined("udid", udid)
        self.client.queueServiceActionCall("ottuser", "login", "KalturaLoginResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaLoginResponse')

    def loginWithPin(self, partnerId, pin, udid = NotImplemented, secret = NotImplemented, extraParams = NotImplemented):
        """User sign-in via a time-expired sign-in PIN."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("partnerId", partnerId);
        kparams.addStringIfDefined("pin", pin)
        kparams.addStringIfDefined("udid", udid)
        kparams.addStringIfDefined("secret", secret)
        kparams.addMapIfDefined("extraParams", extraParams)
        self.client.queueServiceActionCall("ottuser", "loginWithPin", "KalturaLoginResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaLoginResponse')

    def logout(self, adapterData = NotImplemented):
        """Logout the calling user."""

        kparams = KalturaParams()
        kparams.addMapIfDefined("adapterData", adapterData)
        self.client.queueServiceActionCall("ottuser", "logout", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def register(self, partnerId, user, password):
        """Sign up a new user."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("partnerId", partnerId);
        kparams.addObjectIfDefined("user", user)
        kparams.addStringIfDefined("password", password)
        self.client.queueServiceActionCall("ottuser", "register", "KalturaOTTUser", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaOTTUser')

    def resendActivationToken(self, partnerId, username):
        """Resend the activation token to a user"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("partnerId", partnerId);
        kparams.addStringIfDefined("username", username)
        self.client.queueServiceActionCall("ottuser", "resendActivationToken", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def resetPassword(self, partnerId, username, templateName = NotImplemented):
        """Send an e-mail with URL to enable the user to set new password."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("partnerId", partnerId);
        kparams.addStringIfDefined("username", username)
        kparams.addStringIfDefined("templateName", templateName)
        self.client.queueServiceActionCall("ottuser", "resetPassword", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def setInitialPassword(self, partnerId, token, password):
        """Renew the user&#39;s password after validating the token that sent as part of URL in e-mail."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("partnerId", partnerId);
        kparams.addStringIfDefined("token", token)
        kparams.addStringIfDefined("password", password)
        self.client.queueServiceActionCall("ottuser", "setInitialPassword", "KalturaOTTUser", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaOTTUser')

    def update(self, user, id = NotImplemented):
        """Update user information"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("user", user)
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("ottuser", "update", "KalturaOTTUser", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaOTTUser')

    def updateDynamicData(self, key, value):
        """Update user dynamic data. If it is needed to update several items, use a multi-request to avoid race conditions.
                    This API endpoint will deprecated soon. Please use UpsertDynamicData instead of it."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("key", key)
        kparams.addObjectIfDefined("value", value)
        self.client.queueServiceActionCall("ottuser", "updateDynamicData", "KalturaOTTUserDynamicData", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaOTTUserDynamicData')

    def updateLoginData(self, username, oldPassword, newPassword):
        """Given a user name and existing password, change to a new password."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("username", username)
        kparams.addStringIfDefined("oldPassword", oldPassword)
        kparams.addStringIfDefined("newPassword", newPassword)
        self.client.queueServiceActionCall("ottuser", "updateLoginData", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def updatePassword(self, userId, password):
        """Update the user&#39;s existing password."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("userId", userId);
        kparams.addStringIfDefined("password", password)
        self.client.queueServiceActionCall("ottuser", "updatePassword", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def upsertDynamicData(self, key, value):
        """Adds or updates dynamic data item for a user. If it is needed to update several items, use a multi-request to avoid race conditions."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("key", key)
        kparams.addObjectIfDefined("value", value)
        self.client.queueServiceActionCall("ottuser", "upsertDynamicData", "KalturaDynamicData", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaDynamicData')


# @package Kaltura
# @subpackage Client
class KalturaParentalRuleService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, parentalRule):
        """Add a new parentalRule"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("parentalRule", parentalRule)
        self.client.queueServiceActionCall("parentalrule", "add", "KalturaParentalRule", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaParentalRule')

    def delete(self, id):
        """Delete an existing parentalRule"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("parentalrule", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def disable(self, ruleId, entityReference):
        """Disables a parental rule that was previously defined by the household master. Disable can be at specific user or household level."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("ruleId", ruleId);
        kparams.addStringIfDefined("entityReference", entityReference)
        self.client.queueServiceActionCall("parentalrule", "disable", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def disableDefault(self, entityReference):
        """Disables a parental rule that was defined at account level. Disable can be at specific user or household level."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entityReference", entityReference)
        self.client.queueServiceActionCall("parentalrule", "disableDefault", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def enable(self, ruleId, entityReference):
        """Enable a parental rules for a user"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("ruleId", ruleId);
        kparams.addStringIfDefined("entityReference", entityReference)
        self.client.queueServiceActionCall("parentalrule", "enable", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def get(self, id):
        """Get an existing parentalRule by identifier"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("parentalrule", "get", "KalturaParentalRule", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaParentalRule')

    def list(self, filter):
        """Return the parental rules that applies for the user or household. Can include rules that have been associated in account, household, or user level.
                    Association level is also specified in the response."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("parentalrule", "list", "KalturaParentalRuleListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaParentalRuleListResponse')

    def update(self, id, parentalRule):
        """Update an existing parentalRule"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("parentalRule", parentalRule)
        self.client.queueServiceActionCall("parentalrule", "update", "KalturaParentalRule", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaParentalRule')


# @package Kaltura
# @subpackage Client
class KalturaPartnerConfigurationService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self, filter):
        """Get the list of PartnerConfiguration"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("partnerconfiguration", "list", "KalturaPartnerConfigurationListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPartnerConfigurationListResponse')

    def update(self, configuration):
        """Update/set Partner Configuration"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("configuration", configuration)
        self.client.queueServiceActionCall("partnerconfiguration", "update", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaPartnerService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, partner, partnerSetup):
        """Add a partner with default user"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("partner", partner)
        kparams.addObjectIfDefined("partnerSetup", partnerSetup)
        self.client.queueServiceActionCall("partner", "add", "KalturaPartner", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPartner')

    def createIndexes(self):
        """Internal API !!! create ElasticSearch indexes for partner"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("partner", "createIndexes", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def delete(self, id):
        """Internal API !!! Delete Partner"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("partner", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def externalLogin(self):
        """Returns a login session for external system (like OVP)"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("partner", "externalLogin", "KalturaLoginSession", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaLoginSession')

    def list(self, filter = NotImplemented):
        """Internal API !!! Returns the list of active Partners"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("partner", "list", "KalturaPartnerListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPartnerListResponse')


# @package Kaltura
# @subpackage Client
class KalturaPartnerPremiumServicesService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self):
        """Returns list of services"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("partnerpremiumservices", "get", "KalturaPartnerPremiumServices", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPartnerPremiumServices')

    def update(self, partnerPremiumServices):
        """update partnerPremiumServices"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("partnerPremiumServices", partnerPremiumServices)
        self.client.queueServiceActionCall("partnerpremiumservices", "update", "KalturaPartnerPremiumServices", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPartnerPremiumServices')


# @package Kaltura
# @subpackage Client
class KalturaPasswordPolicyService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, objectToAdd):
        """Add new KalturaPasswordPolicy"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("objectToAdd", objectToAdd)
        self.client.queueServiceActionCall("passwordpolicy", "add", "KalturaPasswordPolicy", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPasswordPolicy')

    def delete(self, id):
        """Delete existing PasswordPolicy"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("passwordpolicy", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented):
        """Returns the list of available KalturaPasswordPolicy"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("passwordpolicy", "list", "KalturaPasswordPolicyListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPasswordPolicyListResponse')

    def update(self, id, objectToUpdate):
        """Update existing KalturaPasswordPolicy"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("objectToUpdate", objectToUpdate)
        self.client.queueServiceActionCall("passwordpolicy", "update", "KalturaPasswordPolicy", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPasswordPolicy')


# @package Kaltura
# @subpackage Client
class KalturaPaymentGatewayProfileService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, paymentGateway):
        """Insert new payment gateway for partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("paymentGateway", paymentGateway)
        self.client.queueServiceActionCall("paymentgatewayprofile", "add", "KalturaPaymentGatewayProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPaymentGatewayProfile')

    def delete(self, paymentGatewayId):
        """Delete payment gateway by payment gateway id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("paymentGatewayId", paymentGatewayId);
        self.client.queueServiceActionCall("paymentgatewayprofile", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def generateSharedSecret(self, paymentGatewayId):
        """Generate payment gateway shared secret"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("paymentGatewayId", paymentGatewayId);
        self.client.queueServiceActionCall("paymentgatewayprofile", "generateSharedSecret", "KalturaPaymentGatewayProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPaymentGatewayProfile')

    def getConfiguration(self, alias, intent, extraParameters):
        """Gets the Payment Gateway Configuration for the payment gateway identifier given"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("alias", alias)
        kparams.addStringIfDefined("intent", intent)
        kparams.addArrayIfDefined("extraParameters", extraParameters)
        self.client.queueServiceActionCall("paymentgatewayprofile", "getConfiguration", "KalturaPaymentGatewayConfiguration", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPaymentGatewayConfiguration')

    def list(self):
        """Returns all payment gateways for partner : id + name"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("paymentgatewayprofile", "list", "KalturaPaymentGatewayProfileListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPaymentGatewayProfileListResponse')

    def update(self, paymentGatewayId, paymentGateway):
        """Update payment gateway details"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("paymentGatewayId", paymentGatewayId);
        kparams.addObjectIfDefined("paymentGateway", paymentGateway)
        self.client.queueServiceActionCall("paymentgatewayprofile", "update", "KalturaPaymentGatewayProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPaymentGatewayProfile')


# @package Kaltura
# @subpackage Client
class KalturaPaymentMethodProfileService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, paymentMethod):
        """TBD"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("paymentMethod", paymentMethod)
        self.client.queueServiceActionCall("paymentmethodprofile", "add", "KalturaPaymentMethodProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPaymentMethodProfile')

    def delete(self, paymentMethodId):
        """Delete payment method profile"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("paymentMethodId", paymentMethodId);
        self.client.queueServiceActionCall("paymentmethodprofile", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter):
        """TBD"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("paymentmethodprofile", "list", "KalturaPaymentMethodProfileListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPaymentMethodProfileListResponse')

    def update(self, paymentMethodId, paymentMethod):
        """Update payment method"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("paymentMethodId", paymentMethodId);
        kparams.addObjectIfDefined("paymentMethod", paymentMethod)
        self.client.queueServiceActionCall("paymentmethodprofile", "update", "KalturaPaymentMethodProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPaymentMethodProfile')


# @package Kaltura
# @subpackage Client
class KalturaPermissionService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, permission):
        """Adds new permission"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("permission", permission)
        self.client.queueServiceActionCall("permission", "add", "KalturaPermission", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPermission')

    def addPermissionItem(self, permissionId, permissionItemId):
        """Adds permission item to permission"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("permissionId", permissionId);
        kparams.addIntIfDefined("permissionItemId", permissionItemId);
        self.client.queueServiceActionCall("permission", "addPermissionItem", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def delete(self, id):
        """Deletes an existing permission"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("permission", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def getCurrentPermissions(self):
        """Returns permission names as comma separated string"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("permission", "getCurrentPermissions", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def list(self, filter = NotImplemented):
        """Retrieving permissions by identifiers, if filter is empty, returns all partner permissions"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("permission", "list", "KalturaPermissionListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPermissionListResponse')

    def removePermissionItem(self, permissionId, permissionItemId):
        """Removes permission item from permission"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("permissionId", permissionId);
        kparams.addIntIfDefined("permissionItemId", permissionItemId);
        self.client.queueServiceActionCall("permission", "removePermissionItem", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def update(self, id, permission):
        """Update an existing permission."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("permission", permission)
        self.client.queueServiceActionCall("permission", "update", "KalturaPermission", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPermission')


# @package Kaltura
# @subpackage Client
class KalturaPermissionItemService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Return a list of permission items with filtering options"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("permissionitem", "list", "KalturaPermissionItemListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPermissionItemListResponse')


# @package Kaltura
# @subpackage Client
class KalturaPersonalFeedService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self, filter, pager = NotImplemented):
        """List user&#39;s feeds.
                    Possible status codes:"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("personalfeed", "list", "KalturaPersonalFeedListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPersonalFeedListResponse')


# @package Kaltura
# @subpackage Client
class KalturaPersonalListService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, personalList):
        """Add a user&#39;s personal list item to follow."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("personalList", personalList)
        self.client.queueServiceActionCall("personallist", "add", "KalturaPersonalList", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPersonalList')

    def delete(self, personalListId):
        """Remove followed item from user&#39;s personal list"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("personalListId", personalListId);
        self.client.queueServiceActionCall("personallist", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List user&#39;s tv personal item to follow.
                    Possible status codes:"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("personallist", "list", "KalturaPersonalListListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPersonalListListResponse')


# @package Kaltura
# @subpackage Client
class KalturaPinService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self, by, type, ruleId = NotImplemented):
        """Retrieve the parental or purchase PIN that applies for the household or user. Includes specification of where the PIN was defined at - account, household or user  level"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("by", by)
        kparams.addStringIfDefined("type", type)
        kparams.addIntIfDefined("ruleId", ruleId);
        self.client.queueServiceActionCall("pin", "get", "KalturaPin", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPin')

    def update(self, by, type, pin, ruleId = NotImplemented):
        """Set the parental or purchase PIN that applies for the user or the household."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("by", by)
        kparams.addStringIfDefined("type", type)
        kparams.addObjectIfDefined("pin", pin)
        kparams.addIntIfDefined("ruleId", ruleId);
        self.client.queueServiceActionCall("pin", "update", "KalturaPin", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPin')

    def validate(self, pin, type, ruleId = NotImplemented):
        """Validate a purchase or parental PIN for a user."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("pin", pin)
        kparams.addStringIfDefined("type", type)
        kparams.addIntIfDefined("ruleId", ruleId);
        self.client.queueServiceActionCall("pin", "validate", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaPlaybackProfileService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, playbackProfile):
        """Insert new Playback adapter for partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("playbackProfile", playbackProfile)
        self.client.queueServiceActionCall("playbackprofile", "add", "KalturaPlaybackProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPlaybackProfile')

    def delete(self, id):
        """Delete Playback adapter by Playback adapter id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("playbackprofile", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def generateSharedSecret(self, id):
        """Generate playback adapter shared secret"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("playbackprofile", "generateSharedSecret", "KalturaPlaybackProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPlaybackProfile')

    def list(self, filter = NotImplemented):
        """Returns all playback profiles for partner : id + name"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("playbackprofile", "list", "KalturaPlaybackProfileListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPlaybackProfileListResponse')

    def update(self, id, playbackProfile):
        """Update Playback adapter details"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("playbackProfile", playbackProfile)
        self.client.queueServiceActionCall("playbackprofile", "update", "KalturaPlaybackProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPlaybackProfile')


# @package Kaltura
# @subpackage Client
class KalturaPpvService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, ppv):
        """Add new ppv"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("ppv", ppv)
        self.client.queueServiceActionCall("ppv", "add", "KalturaPpv", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPpv')

    def delete(self, id):
        """Delete Ppv"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("ppv", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def get(self, id):
        """Returns ppv object by internal identifier"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("ppv", "get", "KalturaPpv", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPpv')

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Returns all ppv objects"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("ppv", "list", "KalturaPpvListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPpvListResponse')

    def update(self, id, ppv):
        """Update ppv"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("ppv", ppv)
        self.client.queueServiceActionCall("ppv", "update", "KalturaPpv", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPpv')


# @package Kaltura
# @subpackage Client
class KalturaPreviewModuleService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, previewModule):
        """Insert new PreviewModule for partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("previewModule", previewModule)
        self.client.queueServiceActionCall("previewmodule", "add", "KalturaPreviewModule", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPreviewModule')

    def delete(self, id):
        """Internal API !!! Delete PreviewModule"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("previewmodule", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter = NotImplemented):
        """Returns all PreviewModule"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("previewmodule", "list", "KalturaPreviewModuleListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPreviewModuleListResponse')

    def update(self, id, previewModule):
        """Update PreviewModule"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("previewModule", previewModule)
        self.client.queueServiceActionCall("previewmodule", "update", "KalturaPreviewModule", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPreviewModule')


# @package Kaltura
# @subpackage Client
class KalturaPriceDetailsService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, priceDetails):
        """Insert new PriceDetails for partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("priceDetails", priceDetails)
        self.client.queueServiceActionCall("pricedetails", "add", "KalturaPriceDetails", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPriceDetails')

    def delete(self, id):
        """Delete PriceDetails"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("pricedetails", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter = NotImplemented):
        """Returns the list of available prices, can be filtered by price IDs"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("pricedetails", "list", "KalturaPriceDetailsListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPriceDetailsListResponse')

    def update(self, id, priceDetails):
        """update existing PriceDetails"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("priceDetails", priceDetails)
        self.client.queueServiceActionCall("pricedetails", "update", "KalturaPriceDetails", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPriceDetails')


# @package Kaltura
# @subpackage Client
class KalturaPricePlanService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, pricePlan):
        """Insert new PricePlan"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("pricePlan", pricePlan)
        self.client.queueServiceActionCall("priceplan", "add", "KalturaPricePlan", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPricePlan')

    def delete(self, id):
        """Delete PricePlan"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("priceplan", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter = NotImplemented):
        """Returns a list of price plans by IDs"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("priceplan", "list", "KalturaPricePlanListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPricePlanListResponse')

    def update(self, id, pricePlan):
        """Updates a price plan"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("pricePlan", pricePlan)
        self.client.queueServiceActionCall("priceplan", "update", "KalturaPricePlan", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPricePlan')


# @package Kaltura
# @subpackage Client
class KalturaProductPriceService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self, filter):
        """Returns a price and a purchase status for each subscription or/and media file, for a given user (if passed) and with the consideration of a coupon code (if passed)."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("productprice", "list", "KalturaProductPriceListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaProductPriceListResponse')


# @package Kaltura
# @subpackage Client
class KalturaProgramAssetGroupOfferService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, programAssetGroupOffer):
        """Insert new ProgramAssetGroupOffer for partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("programAssetGroupOffer", programAssetGroupOffer)
        self.client.queueServiceActionCall("programassetgroupoffer", "add", "KalturaProgramAssetGroupOffer", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaProgramAssetGroupOffer')

    def delete(self, id):
        """Delete programAssetGroupOffer"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("programassetgroupoffer", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Gets all Program asset group offer"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("programassetgroupoffer", "list", "KalturaProgramAssetGroupOfferListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaProgramAssetGroupOfferListResponse')

    def update(self, id, programAssetGroupOffer):
        """Update ProgramAssetGroupOffer"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("programAssetGroupOffer", programAssetGroupOffer)
        self.client.queueServiceActionCall("programassetgroupoffer", "update", "KalturaProgramAssetGroupOffer", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaProgramAssetGroupOffer')


# @package Kaltura
# @subpackage Client
class KalturaPurchaseSettingsService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self, by):
        """Retrieve the purchase settings.
                    Includes specification of where these settings were defined - account, household or user"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("by", by)
        self.client.queueServiceActionCall("purchasesettings", "get", "KalturaPurchaseSettings", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPurchaseSettings')

    def update(self, entityReference, settings):
        """Set a purchase PIN for the household or user"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entityReference", entityReference)
        kparams.addObjectIfDefined("settings", settings)
        self.client.queueServiceActionCall("purchasesettings", "update", "KalturaPurchaseSettings", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaPurchaseSettings')


# @package Kaltura
# @subpackage Client
class KalturaRatioService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, ratio):
        """Add new group ratio"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("ratio", ratio)
        self.client.queueServiceActionCall("ratio", "add", "KalturaRatio", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaRatio')

    def list(self):
        """Get the list of available ratios"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("ratio", "list", "KalturaRatioListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaRatioListResponse')

    def update(self, id, ratio):
        """Update group ratio&#39;s PrecisionPrecentage"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("ratio", ratio)
        self.client.queueServiceActionCall("ratio", "update", "KalturaRatio", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaRatio')


# @package Kaltura
# @subpackage Client
class KalturaRecommendationProfileService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, recommendationEngine):
        """Insert new recommendation engine for partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("recommendationEngine", recommendationEngine)
        self.client.queueServiceActionCall("recommendationprofile", "add", "KalturaRecommendationProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaRecommendationProfile')

    def delete(self, id):
        """Delete recommendation engine by recommendation engine id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("recommendationprofile", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def generateSharedSecret(self, recommendationEngineId):
        """Generate recommendation engine  shared secret"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("recommendationEngineId", recommendationEngineId);
        self.client.queueServiceActionCall("recommendationprofile", "generateSharedSecret", "KalturaRecommendationProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaRecommendationProfile')

    def list(self):
        """Returns all recommendation engines for partner"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("recommendationprofile", "list", "KalturaRecommendationProfileListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaRecommendationProfileListResponse')

    def update(self, recommendationEngineId, recommendationEngine):
        """Update recommendation engine details"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("recommendationEngineId", recommendationEngineId);
        kparams.addObjectIfDefined("recommendationEngine", recommendationEngine)
        self.client.queueServiceActionCall("recommendationprofile", "update", "KalturaRecommendationProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaRecommendationProfile')


# @package Kaltura
# @subpackage Client
class KalturaRecordingService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, recording):
        """Issue a record request for a program"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("recording", recording)
        self.client.queueServiceActionCall("recording", "add", "KalturaRecording", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaRecording')

    def bulkdelete(self, recordingIds):
        """Delete list of user&#39;s recordings. Recording can be deleted only in status Recorded.
                    Possible error codes for each recording: RecordingNotFound = 3039, RecordingStatusNotValid = 3043, Error = 1"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("recordingIds", recordingIds)
        self.client.queueServiceActionCall("recording", "bulkdelete", "KalturaActionResult", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.createArray(resultNode, 'KalturaActionResult')

    def cancel(self, id):
        """Cancel a previously requested recording. Cancel recording can be called for recording in status Scheduled or Recording Only"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("recording", "cancel", "KalturaRecording", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaRecording')

    def delete(self, id):
        """Delete one or more user recording(s). Delete recording can be called only for recordings in status Recorded"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("recording", "delete", "KalturaRecording", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaRecording')

    def get(self, id):
        """Returns recording object by internal identifier"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("recording", "get", "KalturaRecording", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaRecording')

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Return a list of recordings for the household with optional filter by status and KSQL."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("recording", "list", "KalturaRecordingListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaRecordingListResponse')

    def protect(self, id):
        """Deprecated, please use recording.update instead
                    Protects an existing recording from the cleanup process for the defined protection period"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("recording", "protect", "KalturaRecording", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaRecording')

    def update(self, id, recording):
        """Update an existing recording with is protected field"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("recording", recording)
        self.client.queueServiceActionCall("recording", "update", "KalturaRecording", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaRecording')


# @package Kaltura
# @subpackage Client
class KalturaRegionService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, region):
        """Adds a new region for partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("region", region)
        self.client.queueServiceActionCall("region", "add", "KalturaRegion", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaRegion')

    def linearchannelbulkadd(self, linearChannelId, regionChannelNumbers):
        """Adds a linear channel to the list of regions."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("linearChannelId", linearChannelId);
        kparams.addArrayIfDefined("regionChannelNumbers", regionChannelNumbers)
        self.client.queueServiceActionCall("region", "linearchannelbulkadd", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def linearchannelbulkdelete(self, linearChannelId, regionIds):
        """Deletes a linear channel from the list of regions."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("linearChannelId", linearChannelId);
        kparams.addStringIfDefined("regionIds", regionIds)
        self.client.queueServiceActionCall("region", "linearchannelbulkdelete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def delete(self, id):
        """Delete an existing region"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("region", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter, pager = NotImplemented):
        """Returns all regions for the partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("region", "list", "KalturaRegionListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaRegionListResponse')

    def update(self, id, region):
        """Update an existing region"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("region", region)
        self.client.queueServiceActionCall("region", "update", "KalturaRegion", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaRegion')


# @package Kaltura
# @subpackage Client
class KalturaRegistrySettingsService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self):
        """Retrieve the registry settings."""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("registrysettings", "list", "KalturaRegistrySettingsListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaRegistrySettingsListResponse')


# @package Kaltura
# @subpackage Client
class KalturaReminderService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, reminder):
        """Add a new future reminder"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("reminder", reminder)
        self.client.queueServiceActionCall("reminder", "add", "KalturaReminder", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaReminder')

    def delete(self, id, type):
        """Delete a reminder. Reminder cannot be delete while being sent."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addStringIfDefined("type", type)
        self.client.queueServiceActionCall("reminder", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def deleteWithToken(self, id, type, token, partnerId):
        """Delete a reminder. Reminder cannot be delete while being sent."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addStringIfDefined("type", type)
        kparams.addStringIfDefined("token", token)
        kparams.addIntIfDefined("partnerId", partnerId);
        self.client.queueServiceActionCall("reminder", "deleteWithToken", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter, pager = NotImplemented):
        """Return a list of reminders with optional filter by KSQL."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("reminder", "list", "KalturaReminderListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaReminderListResponse')


# @package Kaltura
# @subpackage Client
class KalturaReportService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self, udid):
        """Return a device configuration retrieval log request for a specific device."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("udid", udid)
        self.client.queueServiceActionCall("report", "get", "KalturaReport", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaReport')

    def list(self, filter, pager = NotImplemented):
        """Return device configurations retrieval log. Supports paging and can be filtered with the parameter &quot;FromData&quot;."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("report", "list", "KalturaReportListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaReportListResponse')


# @package Kaltura
# @subpackage Client
class KalturaSearchHistoryService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def clean(self, filter = NotImplemented):
        """Clean the user's search history"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("searchhistory", "clean", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def delete(self, id):
        """Delete a specific search history.
                    Possible error code: 2032 - ItemNotFound"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("searchhistory", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Get user&#39;s last search requests"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("searchhistory", "list", "KalturaSearchHistoryListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSearchHistoryListResponse')


# @package Kaltura
# @subpackage Client
class KalturaSearchPriorityGroupService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, searchPriorityGroup):
        """Add a new priority group."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("searchPriorityGroup", searchPriorityGroup)
        self.client.queueServiceActionCall("searchprioritygroup", "add", "KalturaSearchPriorityGroup", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSearchPriorityGroup')

    def delete(self, id):
        """Delete the existing priority group by its identifier."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("searchprioritygroup", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter, pager = NotImplemented):
        """Gets list of search priority groups which meet the filter criteria."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("searchprioritygroup", "list", "KalturaSearchPriorityGroupListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSearchPriorityGroupListResponse')

    def update(self, id, searchPriorityGroup):
        """Update an existing priority group."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("searchPriorityGroup", searchPriorityGroup)
        self.client.queueServiceActionCall("searchprioritygroup", "update", "KalturaSearchPriorityGroup", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSearchPriorityGroup')


# @package Kaltura
# @subpackage Client
class KalturaSearchPriorityGroupOrderedIdsSetService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self):
        """Return the current ordering of priority groups for the partner."""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("searchprioritygrouporderedidsset", "get", "KalturaSearchPriorityGroupOrderedIdsSet", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSearchPriorityGroupOrderedIdsSet')

    def set(self, orderedList):
        """Set the ordering of priority groups for the partner."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("orderedList", orderedList)
        self.client.queueServiceActionCall("searchprioritygrouporderedidsset", "set", "KalturaSearchPriorityGroupOrderedIdsSet", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSearchPriorityGroupOrderedIdsSet')


# @package Kaltura
# @subpackage Client
class KalturaSegmentationTypeService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, segmentationType):
        """Adds a new segmentation type to the system"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("segmentationType", segmentationType)
        self.client.queueServiceActionCall("segmentationtype", "add", "KalturaSegmentationType", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSegmentationType')

    def delete(self, id):
        """Delete a segmentation type from the system"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("segmentationtype", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def getPartnerConfiguration(self):
        """Gets existing partner segmentation configuration"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("segmentationtype", "getPartnerConfiguration", "KalturaSegmentationPartnerConfiguration", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSegmentationPartnerConfiguration')

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Lists all segmentation types in group"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("segmentationtype", "list", "KalturaSegmentationTypeListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSegmentationTypeListResponse')

    def update(self, segmentationTypeId, segmentationType):
        """Updates an existing segmentation type"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("segmentationTypeId", segmentationTypeId);
        kparams.addObjectIfDefined("segmentationType", segmentationType)
        self.client.queueServiceActionCall("segmentationtype", "update", "KalturaSegmentationType", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSegmentationType')

    def updatePartnerConfiguration(self, configuration):
        """Sets partner configuration for segments configuration"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("configuration", configuration)
        self.client.queueServiceActionCall("segmentationtype", "updatePartnerConfiguration", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaSeriesRecordingService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, recording):
        """Issue a record request for a complete season or series"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("recording", recording)
        self.client.queueServiceActionCall("seriesrecording", "add", "KalturaSeriesRecording", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSeriesRecording')

    def cancel(self, id):
        """Cancel a previously requested series recording. Cancel series recording can be called for recording in status Scheduled or Recording Only"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("seriesrecording", "cancel", "KalturaSeriesRecording", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSeriesRecording')

    def cancelByEpgId(self, id, epgId):
        """Cancel EPG recording that was recorded as part of series"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addIntIfDefined("epgId", epgId);
        self.client.queueServiceActionCall("seriesrecording", "cancelByEpgId", "KalturaSeriesRecording", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSeriesRecording')

    def cancelBySeasonNumber(self, id, seasonNumber):
        """Cancel Season recording epgs that was recorded as part of series"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addIntIfDefined("seasonNumber", seasonNumber);
        self.client.queueServiceActionCall("seriesrecording", "cancelBySeasonNumber", "KalturaSeriesRecording", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSeriesRecording')

    def delete(self, id):
        """Delete series recording(s). Delete series recording can be called recordings in any status"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("seriesrecording", "delete", "KalturaSeriesRecording", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSeriesRecording')

    def deleteBySeasonNumber(self, id, seasonNumber):
        """Delete Season recording epgs that was recorded as part of series"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addIntIfDefined("seasonNumber", seasonNumber);
        self.client.queueServiceActionCall("seriesrecording", "deleteBySeasonNumber", "KalturaSeriesRecording", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSeriesRecording')

    def list(self, filter = NotImplemented):
        """Return a list of series recordings for the household with optional filter by status and KSQL."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("seriesrecording", "list", "KalturaSeriesRecordingListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSeriesRecordingListResponse')

    def rebookCanceledByEpgId(self, epgId):
        """Enable EPG recording that was canceled as part of series"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("epgId", epgId);
        self.client.queueServiceActionCall("seriesrecording", "rebookCanceledByEpgId", "KalturaSeriesRecording", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSeriesRecording')


# @package Kaltura
# @subpackage Client
class KalturaSessionService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self, session = NotImplemented):
        """Parses KS"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("session", session)
        self.client.queueServiceActionCall("session", "get", "KalturaSession", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSession')

    def revoke(self):
        """Revokes all the sessions (KS) of a given user"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("session", "revoke", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def switchUser(self, userIdToSwitch):
        """Switching the user in the session by generating a new session for a new user within the same household"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("userIdToSwitch", userIdToSwitch)
        self.client.queueServiceActionCall("session", "switchUser", "KalturaLoginSession", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaLoginSession')


# @package Kaltura
# @subpackage Client
class KalturaSmsAdapterProfileService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, objectToAdd):
        """SmsAdapterProfile add"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("objectToAdd", objectToAdd)
        self.client.queueServiceActionCall("smsadapterprofile", "add", "KalturaSmsAdapterProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSmsAdapterProfile')

    def delete(self, id):
        """Remove SmsAdapterProfile"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("smsadapterprofile", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def generateSharedSecret(self, smsAdapterId):
        """Generate Sms Adapter shared secret"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("smsAdapterId", smsAdapterId);
        self.client.queueServiceActionCall("smsadapterprofile", "generateSharedSecret", "KalturaSmsAdapterProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSmsAdapterProfile')

    def get(self, id):
        """Get SmsAdapterProfile"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("smsadapterprofile", "get", "KalturaSmsAdapterProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSmsAdapterProfile')

    def list(self, filter = NotImplemented):
        """Gets all SmsAdapterProfile items"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("smsadapterprofile", "list", "KalturaSmsAdapterProfileListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSmsAdapterProfileListResponse')

    def update(self, id, objectToUpdate):
        """SmsAdapterProfile update"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("objectToUpdate", objectToUpdate)
        self.client.queueServiceActionCall("smsadapterprofile", "update", "KalturaSmsAdapterProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSmsAdapterProfile')


# @package Kaltura
# @subpackage Client
class KalturaSocialActionService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, socialAction):
        """Insert new user social action"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("socialAction", socialAction)
        self.client.queueServiceActionCall("socialaction", "add", "KalturaUserSocialActionResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUserSocialActionResponse')

    def delete(self, id):
        """delete user social action"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("socialaction", "delete", "KalturaNetworkActionStatus", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.createArray(resultNode, 'KalturaNetworkActionStatus')

    def list(self, filter, pager = NotImplemented):
        """Get list of user social actions"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("socialaction", "list", "KalturaSocialActionListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSocialActionListResponse')


# @package Kaltura
# @subpackage Client
class KalturaSocialCommentService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self, filter, pager = NotImplemented):
        """Get a list of all social comments filtered by asset ID and social platform"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("socialcomment", "list", "KalturaSocialCommentListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSocialCommentListResponse')


# @package Kaltura
# @subpackage Client
class KalturaSocialService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self, type):
        """List social accounts"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("type", type)
        self.client.queueServiceActionCall("social", "get", "KalturaSocial", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSocial')

    def getByToken(self, partnerId, token, type):
        """Return the user object with social information according to a provided external social token"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("partnerId", partnerId);
        kparams.addStringIfDefined("token", token)
        kparams.addStringIfDefined("type", type)
        self.client.queueServiceActionCall("social", "getByToken", "KalturaSocial", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSocial')

    def getConfiguration(self, type, partnerId = NotImplemented):
        """Retrieve the social network's configuration information"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("type", type)
        kparams.addIntIfDefined("partnerId", partnerId);
        self.client.queueServiceActionCall("social", "getConfiguration", "KalturaSocialConfig", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSocialConfig')

    def login(self, partnerId, token, type, udid = NotImplemented):
        """Login using social token"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("partnerId", partnerId);
        kparams.addStringIfDefined("token", token)
        kparams.addStringIfDefined("type", type)
        kparams.addStringIfDefined("udid", udid)
        self.client.queueServiceActionCall("social", "login", "KalturaLoginResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaLoginResponse')

    def merge(self, token, type):
        """Connect an existing user in the system to an external social network user"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("token", token)
        kparams.addStringIfDefined("type", type)
        self.client.queueServiceActionCall("social", "merge", "KalturaSocial", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSocial')

    def register(self, partnerId, token, type, email = NotImplemented):
        """Create a new user in the system using a provided external social token"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("partnerId", partnerId);
        kparams.addStringIfDefined("token", token)
        kparams.addStringIfDefined("type", type)
        kparams.addStringIfDefined("email", email)
        self.client.queueServiceActionCall("social", "register", "KalturaSocial", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSocial')

    def unmerge(self, type):
        """Disconnect an existing user in the system from its external social network user"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("type", type)
        self.client.queueServiceActionCall("social", "unmerge", "KalturaSocial", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSocial')

    def UpdateConfiguration(self, configuration):
        """Set the user social network's configuration information"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("configuration", configuration)
        self.client.queueServiceActionCall("social", "UpdateConfiguration", "KalturaSocialConfig", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSocialConfig')


# @package Kaltura
# @subpackage Client
class KalturaSocialFriendActivityService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Get a list of the social friends activity for a user"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("socialfriendactivity", "list", "KalturaSocialFriendActivityListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSocialFriendActivityListResponse')


# @package Kaltura
# @subpackage Client
class KalturaSsoAdapterProfileService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, ssoAdapter):
        """Insert new sso adapter for partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("ssoAdapter", ssoAdapter)
        self.client.queueServiceActionCall("ssoadapterprofile", "add", "KalturaSSOAdapterProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSSOAdapterProfile')

    def delete(self, ssoAdapterId):
        """Delete sso adapters by sso adapters id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("ssoAdapterId", ssoAdapterId);
        self.client.queueServiceActionCall("ssoadapterprofile", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def generateSharedSecret(self, ssoAdapterId):
        """Generate SSO Adapter shared secret"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("ssoAdapterId", ssoAdapterId);
        self.client.queueServiceActionCall("ssoadapterprofile", "generateSharedSecret", "KalturaSSOAdapterProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSSOAdapterProfile')

    def invoke(self, intent, adapterData):
        """Request validation against 3rd party"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("intent", intent)
        kparams.addArrayIfDefined("adapterData", adapterData)
        self.client.queueServiceActionCall("ssoadapterprofile", "invoke", "KalturaSSOAdapterProfileInvoke", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSSOAdapterProfileInvoke')

    def list(self):
        """Returns all sso adapters for partner : id + name"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("ssoadapterprofile", "list", "KalturaSSOAdapterProfileListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSSOAdapterProfileListResponse')

    def update(self, ssoAdapterId, ssoAdapter):
        """Update sso adapter details"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("ssoAdapterId", ssoAdapterId);
        kparams.addObjectIfDefined("ssoAdapter", ssoAdapter)
        self.client.queueServiceActionCall("ssoadapterprofile", "update", "KalturaSSOAdapterProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSSOAdapterProfile')


# @package Kaltura
# @subpackage Client
class KalturaStreamingDeviceService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def bookPlaybackSession(self, fileId, assetId, assetType):
        """Reserves a concurrency slot for the given asset-device combination"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("fileId", fileId)
        kparams.addStringIfDefined("assetId", assetId)
        kparams.addStringIfDefined("assetType", assetType)
        self.client.queueServiceActionCall("streamingdevice", "bookPlaybackSession", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter = NotImplemented):
        """Lists of devices that are streaming at that moment"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("streamingdevice", "list", "KalturaStreamingDeviceListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaStreamingDeviceListResponse')


# @package Kaltura
# @subpackage Client
class KalturaSubscriptionService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, subscription):
        """Insert new subscription for partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("subscription", subscription)
        self.client.queueServiceActionCall("subscription", "add", "KalturaSubscription", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSubscription')

    def delete(self, id):
        """Delete subscription"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("subscription", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Returns a list of subscriptions requested by Subscription ID or file ID"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("subscription", "list", "KalturaSubscriptionListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSubscriptionListResponse')

    def update(self, id, subscription):
        """Update Subscription"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("subscription", subscription)
        self.client.queueServiceActionCall("subscription", "update", "KalturaSubscription", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSubscription')

    def validateCoupon(self, id, code):
        """Returns information about a coupon for subscription"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addStringIfDefined("code", code)
        self.client.queueServiceActionCall("subscription", "validateCoupon", "KalturaCoupon", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaCoupon')


# @package Kaltura
# @subpackage Client
class KalturaSubscriptionSetService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, subscriptionSet):
        """Add a new subscriptionSet"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("subscriptionSet", subscriptionSet)
        self.client.queueServiceActionCall("subscriptionset", "add", "KalturaSubscriptionSet", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSubscriptionSet')

    def delete(self, id):
        """Delete a subscriptionSet"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("subscriptionset", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def get(self, id):
        """Get the subscriptionSet according to the Identifier"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("subscriptionset", "get", "KalturaSubscriptionSet", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSubscriptionSet')

    def list(self, filter = NotImplemented):
        """Returns a list of subscriptionSets requested by ids or subscription ids"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("subscriptionset", "list", "KalturaSubscriptionSetListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSubscriptionSetListResponse')

    def update(self, id, subscriptionSet):
        """Update the subscriptionSet"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("subscriptionSet", subscriptionSet)
        self.client.queueServiceActionCall("subscriptionset", "update", "KalturaSubscriptionSet", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaSubscriptionSet')


# @package Kaltura
# @subpackage Client
class KalturaSystemService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def clearLocalServerCache(self, clearCacheAction = NotImplemented, key = NotImplemented):
        """Clear local server cache"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("clearCacheAction", clearCacheAction)
        kparams.addStringIfDefined("key", key)
        self.client.queueServiceActionCall("system", "clearLocalServerCache", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def getInvalidationKeyValue(self, invalidationKey, layeredCacheConfigName = NotImplemented, groupId = 0):
        """Returns the epoch value of an invalidation key if it was found"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("invalidationKey", invalidationKey)
        kparams.addStringIfDefined("layeredCacheConfigName", layeredCacheConfigName)
        kparams.addIntIfDefined("groupId", groupId);
        self.client.queueServiceActionCall("system", "getInvalidationKeyValue", "KalturaLongValue", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaLongValue')

    def getLayeredCacheGroupConfig(self, groupId = 0):
        """Returns the current layered cache group config of the sent groupId. You need to send groupId only if you wish to get it for a specific groupId and not the one the KS belongs to."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("groupId", groupId);
        self.client.queueServiceActionCall("system", "getLayeredCacheGroupConfig", "KalturaStringValue", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaStringValue')

    def getTime(self):
        """Returns current server timestamp"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("system", "getTime", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def getVersion(self):
        """Returns current server version"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("system", "getVersion", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def incrementLayeredCacheGroupConfigVersion(self, groupId = 0):
        """Returns true if version has been incremented successfully or false otherwise. You need to send groupId only if you wish to increment for a specific groupId and not the one the KS belongs to."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("groupId", groupId);
        self.client.queueServiceActionCall("system", "incrementLayeredCacheGroupConfigVersion", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def invalidateLayeredCacheInvalidationKey(self, key):
        """Returns true if the invalidation key was invalidated successfully or false otherwise."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("key", key)
        self.client.queueServiceActionCall("system", "invalidateLayeredCacheInvalidationKey", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def ping(self):
        """Returns true"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("system", "ping", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaTagService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, tag):
        """Add a new tag"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("tag", tag)
        self.client.queueServiceActionCall("tag", "add", "KalturaTag", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaTag')

    def delete(self, id):
        """Delete an existing tag"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("tag", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Get the list of tags for the partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("tag", "list", "KalturaTagListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaTagListResponse')

    def update(self, id, tag):
        """Update an existing tag"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("tag", tag)
        self.client.queueServiceActionCall("tag", "update", "KalturaTag", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaTag')


# @package Kaltura
# @subpackage Client
class KalturaTimeShiftedTvPartnerSettingsService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self):
        """Retrieve the account's time-shifted TV settings (catch-up and C-DVR, Trick-play, Start-over)"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("timeshiftedtvpartnersettings", "get", "KalturaTimeShiftedTvPartnerSettings", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaTimeShiftedTvPartnerSettings')

    def update(self, settings):
        """Configure the account's time-shifted TV settings (catch-up and C-DVR, Trick-play, Start-over)"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("settings", settings)
        self.client.queueServiceActionCall("timeshiftedtvpartnersettings", "update", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaTopicService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def delete(self, id):
        """Deleted a topic"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("topic", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def get(self, id):
        """Gets a topic"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("topic", "get", "KalturaTopic", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaTopic')

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Get list of topics"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("topic", "list", "KalturaTopicListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaTopicListResponse')

    def updateStatus(self, id, automaticIssueNotification):
        """Updates a topic &quot;automatic issue notification&quot; behavior."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addStringIfDefined("automaticIssueNotification", automaticIssueNotification)
        self.client.queueServiceActionCall("topic", "updateStatus", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaTopicNotificationService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, topicNotification):
        """Add a new topic notification"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("topicNotification", topicNotification)
        self.client.queueServiceActionCall("topicnotification", "add", "KalturaTopicNotification", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaTopicNotification')

    def delete(self, id):
        """Delete an existing topic notification"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("topicnotification", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter):
        """Lists all topic notifications in the system."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("topicnotification", "list", "KalturaTopicNotificationListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaTopicNotificationListResponse')

    def subscribe(self, topicNotificationId):
        """Subscribe a user to a topic notification"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("topicNotificationId", topicNotificationId);
        self.client.queueServiceActionCall("topicnotification", "subscribe", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def unsubscribe(self, topicNotificationId):
        """Unubscribe a user from a topic notification"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("topicNotificationId", topicNotificationId);
        self.client.queueServiceActionCall("topicnotification", "unsubscribe", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def update(self, id, topicNotification):
        """Update an existing topic notification"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("topicNotification", topicNotification)
        self.client.queueServiceActionCall("topicnotification", "update", "KalturaTopicNotification", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaTopicNotification')


# @package Kaltura
# @subpackage Client
class KalturaTopicNotificationMessageService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, topicNotificationMessage):
        """Add a new topic notification message"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("topicNotificationMessage", topicNotificationMessage)
        self.client.queueServiceActionCall("topicnotificationmessage", "add", "KalturaTopicNotificationMessage", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaTopicNotificationMessage')

    def delete(self, id):
        """Delete an existing topic notification message"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("topicnotificationmessage", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Lists all topic notifications in the system."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("topicnotificationmessage", "list", "KalturaTopicNotificationMessageListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaTopicNotificationMessageListResponse')

    def update(self, id, topicNotificationMessage):
        """Update an existing topic notification message"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("topicNotificationMessage", topicNotificationMessage)
        self.client.queueServiceActionCall("topicnotificationmessage", "update", "KalturaTopicNotificationMessage", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaTopicNotificationMessage')


# @package Kaltura
# @subpackage Client
class KalturaTransactionService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def downgrade(self, purchase):
        """downgrade specific subscription for a household. entitlements will be updated on the existing subscription end date."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("purchase", purchase)
        self.client.queueServiceActionCall("transaction", "downgrade", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def getPurchaseSessionId(self, purchaseSession):
        """Retrieve the purchase session identifier"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("purchaseSession", purchaseSession)
        self.client.queueServiceActionCall("transaction", "getPurchaseSessionId", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def purchase(self, purchase):
        """Purchase specific product, subscription or Program asset group offer (PAGO) for a household. Upon successful charge entitlements to use the requested product or subscription are granted."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("purchase", purchase)
        self.client.queueServiceActionCall("transaction", "purchase", "KalturaTransaction", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaTransaction')

    def setWaiver(self, assetId, transactionType):
        """This method shall set the waiver flag on the user entitlement table and the waiver date field to the current date."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("assetId", assetId);
        kparams.addStringIfDefined("transactionType", transactionType)
        self.client.queueServiceActionCall("transaction", "setWaiver", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def updateStatus(self, paymentGatewayId, externalTransactionId, signature, status):
        """Updates a pending purchase transaction state."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("paymentGatewayId", paymentGatewayId)
        kparams.addStringIfDefined("externalTransactionId", externalTransactionId)
        kparams.addStringIfDefined("signature", signature)
        kparams.addObjectIfDefined("status", status)
        self.client.queueServiceActionCall("transaction", "updateStatus", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def upgrade(self, purchase):
        """upgrade specific subscription for a household. Upon successful charge entitlements to use the requested product or subscription are granted."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("purchase", purchase)
        self.client.queueServiceActionCall("transaction", "upgrade", "KalturaTransaction", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaTransaction')

    def validateReceipt(self, externalReceipt):
        """Verifies PPV/Subscription/Collection client purchase (such as InApp) and entitles the user."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("externalReceipt", externalReceipt)
        self.client.queueServiceActionCall("transaction", "validateReceipt", "KalturaTransaction", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaTransaction')


# @package Kaltura
# @subpackage Client
class KalturaTransactionHistoryService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Gets user or household transaction history."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("transactionhistory", "list", "KalturaBillingTransactionListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaBillingTransactionListResponse')


# @package Kaltura
# @subpackage Client
class KalturaTvmRuleService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self, filter = NotImplemented):
        """Get the list of tvm rules for the partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("tvmrule", "list", "KalturaTvmRuleListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaTvmRuleListResponse')


# @package Kaltura
# @subpackage Client
class KalturaUnifiedPaymentService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def getNextRenewal(self, id):
        """Returns the data about the next renewal"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("unifiedpayment", "getNextRenewal", "KalturaUnifiedPaymentRenewal", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUnifiedPaymentRenewal')


# @package Kaltura
# @subpackage Client
class KalturaUploadTokenService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, uploadToken = NotImplemented):
        """Adds new upload token to upload a file"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("uploadToken", uploadToken)
        self.client.queueServiceActionCall("uploadtoken", "add", "KalturaUploadToken", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUploadToken')

    def upload(self, uploadTokenId, fileData):
        """Upload a file using the upload token id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("uploadTokenId", uploadTokenId)
        kfiles = {"fileData": fileData}
        self.client.queueServiceActionCall("uploadtoken", "upload", "KalturaUploadToken", kparams, kfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUploadToken')


# @package Kaltura
# @subpackage Client
class KalturaUsageModuleService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, usageModule):
        """Insert new UsageModule"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("usageModule", usageModule)
        self.client.queueServiceActionCall("usagemodule", "add", "KalturaUsageModule", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUsageModule')

    def delete(self, id):
        """Delete UsageModule"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("usagemodule", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter = NotImplemented):
        """Returns the list of available usage module"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("usagemodule", "list", "KalturaUsageModuleListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUsageModuleListResponse')

    def update(self, id, usageModule):
        """Update usage module"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("usageModule", usageModule)
        self.client.queueServiceActionCall("usagemodule", "update", "KalturaUsageModule", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUsageModule')


# @package Kaltura
# @subpackage Client
class KalturaUserAssetRuleService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self, filter):
        """Retrieve all the rules (parental, geo, device or user-type) that applies for this user and asset."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("userassetrule", "list", "KalturaUserAssetRuleListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUserAssetRuleListResponse')


# @package Kaltura
# @subpackage Client
class KalturaUserAssetsListItemService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, userAssetsListItem):
        """Adds a new item to user's private asset list"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("userAssetsListItem", userAssetsListItem)
        self.client.queueServiceActionCall("userassetslistitem", "add", "KalturaUserAssetsListItem", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUserAssetsListItem')

    def delete(self, assetId, listType):
        """Deletes an item from user's private asset list"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("assetId", assetId)
        kparams.addStringIfDefined("listType", listType)
        self.client.queueServiceActionCall("userassetslistitem", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def get(self, assetId, listType, itemType):
        """Get an item from user's private asset list"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("assetId", assetId)
        kparams.addStringIfDefined("listType", listType)
        kparams.addStringIfDefined("itemType", itemType)
        self.client.queueServiceActionCall("userassetslistitem", "get", "KalturaUserAssetsListItem", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUserAssetsListItem')


# @package Kaltura
# @subpackage Client
class KalturaUserInterestService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, userInterest):
        """Insert new user interest for partner user"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("userInterest", userInterest)
        self.client.queueServiceActionCall("userinterest", "add", "KalturaUserInterest", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUserInterest')

    def delete(self, id):
        """Delete new user interest for partner user"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("userinterest", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def deleteWithToken(self, id, token, partnerId):
        """Delete new user interest for partner user"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addStringIfDefined("token", token)
        kparams.addIntIfDefined("partnerId", partnerId);
        self.client.queueServiceActionCall("userinterest", "deleteWithToken", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self):
        """Returns all Engagement for partner"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("userinterest", "list", "KalturaUserInterestListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUserInterestListResponse')


# @package Kaltura
# @subpackage Client
class KalturaUserLoginPinService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, secret = NotImplemented, pinUsages = NotImplemented, pinDuration = NotImplemented):
        """Generate a time and usage expiry login-PIN that can allow a single/multiple login/s per PIN. 
                    If an active login-PIN already exists. Calling this API again for same user will add another login-PIN"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("secret", secret)
        kparams.addIntIfDefined("pinUsages", pinUsages);
        kparams.addIntIfDefined("pinDuration", pinDuration);
        self.client.queueServiceActionCall("userloginpin", "add", "KalturaUserLoginPin", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUserLoginPin')

    def delete(self, pinCode):
        """Immediately deletes a given pre set login pin code for the user."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("pinCode", pinCode)
        self.client.queueServiceActionCall("userloginpin", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def deleteAll(self):
        """Immediately expire all active login-PINs for a user"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("userloginpin", "deleteAll", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def update(self, pinCode, secret = NotImplemented, pinUsages = NotImplemented, pinDuration = NotImplemented):
        """Set a time and usage expiry login-PIN that can allow a single login per PIN. If an active login-PIN already exists. Calling this API again for same user will add another login-PIN"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("pinCode", pinCode)
        kparams.addStringIfDefined("secret", secret)
        kparams.addIntIfDefined("pinUsages", pinUsages);
        kparams.addIntIfDefined("pinDuration", pinDuration);
        self.client.queueServiceActionCall("userloginpin", "update", "KalturaUserLoginPin", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUserLoginPin')


# @package Kaltura
# @subpackage Client
class KalturaUserRoleService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, role):
        """Creates a new role"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("role", role)
        self.client.queueServiceActionCall("userrole", "add", "KalturaUserRole", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUserRole')

    def delete(self, id):
        """Delete role"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("userrole", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter = NotImplemented):
        """Retrieving user roles by identifiers, if filter is empty, returns all partner roles"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("userrole", "list", "KalturaUserRoleListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUserRoleListResponse')

    def update(self, id, role):
        """Update role"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("role", role)
        self.client.queueServiceActionCall("userrole", "update", "KalturaUserRole", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUserRole')


# @package Kaltura
# @subpackage Client
class KalturaUserSegmentService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, userSegment):
        """Adds a segment to a user"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("userSegment", userSegment)
        self.client.queueServiceActionCall("usersegment", "add", "KalturaUserSegment", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUserSegment')

    def delete(self, userId, segmentId):
        """Deletes a segment from a user"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("userId", userId)
        kparams.addIntIfDefined("segmentId", segmentId);
        self.client.queueServiceActionCall("usersegment", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def list(self, filter, pager = NotImplemented):
        """Retrieve all the segments that apply for given user"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("usersegment", "list", "KalturaUserSegmentListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUserSegmentListResponse')


# @package Kaltura
# @subpackage Client
class KalturaUserSessionProfileService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, userSessionProfile):
        """Add new UserSessionProfile"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("userSessionProfile", userSessionProfile)
        self.client.queueServiceActionCall("usersessionprofile", "add", "KalturaUserSessionProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUserSessionProfile')

    def delete(self, id):
        """Delete existing UserSessionProfile"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("usersessionprofile", "delete", "None", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Returns the list of available UserSessionProfiles"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("usersessionprofile", "list", "KalturaUserSessionProfileListResponse", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUserSessionProfileListResponse')

    def update(self, id, userSessionProfile):
        """Update existing UserSessionProfile"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("userSessionProfile", userSessionProfile)
        self.client.queueServiceActionCall("usersessionprofile", "update", "KalturaUserSessionProfile", kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, 'KalturaUserSessionProfile')

########## main ##########
class KalturaCoreClient(KalturaClientPlugin):
    # KalturaCoreClient
    instance = None

    # @return KalturaCoreClient
    @staticmethod
    def get():
        if KalturaCoreClient.instance == None:
            KalturaCoreClient.instance = KalturaCoreClient()
        return KalturaCoreClient.instance

    # @return array<KalturaServiceBase>
    def getServices(self):
        return {
            'announcement': KalturaAnnouncementService,
            'appToken': KalturaAppTokenService,
            'assetComment': KalturaAssetCommentService,
            'asset': KalturaAssetService,
            'assetFile': KalturaAssetFileService,
            'assetFilePpv': KalturaAssetFilePpvService,
            'assetHistory': KalturaAssetHistoryService,
            'assetPersonalMarkup': KalturaAssetPersonalMarkupService,
            'assetPersonalSelection': KalturaAssetPersonalSelectionService,
            'assetRule': KalturaAssetRuleService,
            'assetStatistics': KalturaAssetStatisticsService,
            'assetStruct': KalturaAssetStructService,
            'assetStructMeta': KalturaAssetStructMetaService,
            'assetUserRule': KalturaAssetUserRuleService,
            'bookmark': KalturaBookmarkService,
            'bulkUpload': KalturaBulkUploadService,
            'bulkUploadStatistics': KalturaBulkUploadStatisticsService,
            'businessModuleRule': KalturaBusinessModuleRuleService,
            'campaign': KalturaCampaignService,
            'categoryItem': KalturaCategoryItemService,
            'categoryTree': KalturaCategoryTreeService,
            'categoryVersion': KalturaCategoryVersionService,
            'cdnAdapterProfile': KalturaCdnAdapterProfileService,
            'cdnPartnerSettings': KalturaCdnPartnerSettingsService,
            'cDVRAdapterProfile': KalturaCDVRAdapterProfileService,
            'channel': KalturaChannelService,
            'collection': KalturaCollectionService,
            'compensation': KalturaCompensationService,
            'configurationGroup': KalturaConfigurationGroupService,
            'configurationGroupDevice': KalturaConfigurationGroupDeviceService,
            'configurationGroupTag': KalturaConfigurationGroupTagService,
            'configurations': KalturaConfigurationsService,
            'country': KalturaCountryService,
            'coupon': KalturaCouponService,
            'couponsGroup': KalturaCouponsGroupService,
            'currency': KalturaCurrencyService,
            'deviceBrand': KalturaDeviceBrandService,
            'deviceFamily': KalturaDeviceFamilyService,
            'deviceReferenceData': KalturaDeviceReferenceDataService,
            'discountDetails': KalturaDiscountDetailsService,
            'drmProfile': KalturaDrmProfileService,
            'duration': KalturaDurationService,
            'dynamicList': KalturaDynamicListService,
            'email': KalturaEmailService,
            'engagementAdapter': KalturaEngagementAdapterService,
            'engagement': KalturaEngagementService,
            'entitlement': KalturaEntitlementService,
            'epg': KalturaEpgService,
            'epgServicePartnerConfiguration': KalturaEpgServicePartnerConfigurationService,
            'eventNotificationAction': KalturaEventNotificationActionService,
            'eventNotification': KalturaEventNotificationService,
            'exportTask': KalturaExportTaskService,
            'externalChannelProfile': KalturaExternalChannelProfileService,
            'favorite': KalturaFavoriteService,
            'followTvSeries': KalturaFollowTvSeriesService,
            'homeNetwork': KalturaHomeNetworkService,
            'household': KalturaHouseholdService,
            'householdCoupon': KalturaHouseholdCouponService,
            'householdDevice': KalturaHouseholdDeviceService,
            'householdLimitations': KalturaHouseholdLimitationsService,
            'householdPaymentGateway': KalturaHouseholdPaymentGatewayService,
            'householdPaymentMethod': KalturaHouseholdPaymentMethodService,
            'householdPremiumService': KalturaHouseholdPremiumServiceService,
            'householdQuota': KalturaHouseholdQuotaService,
            'householdSegment': KalturaHouseholdSegmentService,
            'householdUser': KalturaHouseholdUserService,
            'image': KalturaImageService,
            'imageType': KalturaImageTypeService,
            'inboxMessage': KalturaInboxMessageService,
            'IngestProfile': KalturaIngestProfileService,
            'ingestStatus': KalturaIngestStatusService,
            'iot': KalturaIotService,
            'iotProfile': KalturaIotProfileService,
            'label': KalturaLabelService,
            'language': KalturaLanguageService,
            'licensedUrl': KalturaLicensedUrlService,
            'lineup': KalturaLineupService,
            'liveToVod': KalturaLiveToVodService,
            'mediaConcurrencyRule': KalturaMediaConcurrencyRuleService,
            'mediaFile': KalturaMediaFileService,
            'mediaFileDynamicData': KalturaMediaFileDynamicDataService,
            'mediaFileType': KalturaMediaFileTypeService,
            'messageTemplate': KalturaMessageTemplateService,
            'meta': KalturaMetaService,
            'notification': KalturaNotificationService,
            'notificationsPartnerSettings': KalturaNotificationsPartnerSettingsService,
            'notificationsSettings': KalturaNotificationsSettingsService,
            'ossAdapterProfile': KalturaOssAdapterProfileService,
            'ottCategory': KalturaOttCategoryService,
            'ottUser': KalturaOttUserService,
            'parentalRule': KalturaParentalRuleService,
            'partnerConfiguration': KalturaPartnerConfigurationService,
            'partner': KalturaPartnerService,
            'partnerPremiumServices': KalturaPartnerPremiumServicesService,
            'passwordPolicy': KalturaPasswordPolicyService,
            'paymentGatewayProfile': KalturaPaymentGatewayProfileService,
            'paymentMethodProfile': KalturaPaymentMethodProfileService,
            'permission': KalturaPermissionService,
            'permissionItem': KalturaPermissionItemService,
            'personalFeed': KalturaPersonalFeedService,
            'personalList': KalturaPersonalListService,
            'pin': KalturaPinService,
            'playbackProfile': KalturaPlaybackProfileService,
            'ppv': KalturaPpvService,
            'previewModule': KalturaPreviewModuleService,
            'priceDetails': KalturaPriceDetailsService,
            'pricePlan': KalturaPricePlanService,
            'productPrice': KalturaProductPriceService,
            'programAssetGroupOffer': KalturaProgramAssetGroupOfferService,
            'purchaseSettings': KalturaPurchaseSettingsService,
            'ratio': KalturaRatioService,
            'recommendationProfile': KalturaRecommendationProfileService,
            'recording': KalturaRecordingService,
            'region': KalturaRegionService,
            'registrySettings': KalturaRegistrySettingsService,
            'reminder': KalturaReminderService,
            'report': KalturaReportService,
            'searchHistory': KalturaSearchHistoryService,
            'searchPriorityGroup': KalturaSearchPriorityGroupService,
            'searchPriorityGroupOrderedIdsSet': KalturaSearchPriorityGroupOrderedIdsSetService,
            'segmentationType': KalturaSegmentationTypeService,
            'seriesRecording': KalturaSeriesRecordingService,
            'session': KalturaSessionService,
            'smsAdapterProfile': KalturaSmsAdapterProfileService,
            'socialAction': KalturaSocialActionService,
            'socialComment': KalturaSocialCommentService,
            'social': KalturaSocialService,
            'socialFriendActivity': KalturaSocialFriendActivityService,
            'ssoAdapterProfile': KalturaSsoAdapterProfileService,
            'streamingDevice': KalturaStreamingDeviceService,
            'subscription': KalturaSubscriptionService,
            'subscriptionSet': KalturaSubscriptionSetService,
            'system': KalturaSystemService,
            'tag': KalturaTagService,
            'timeShiftedTvPartnerSettings': KalturaTimeShiftedTvPartnerSettingsService,
            'topic': KalturaTopicService,
            'topicNotification': KalturaTopicNotificationService,
            'topicNotificationMessage': KalturaTopicNotificationMessageService,
            'transaction': KalturaTransactionService,
            'transactionHistory': KalturaTransactionHistoryService,
            'tvmRule': KalturaTvmRuleService,
            'unifiedPayment': KalturaUnifiedPaymentService,
            'uploadToken': KalturaUploadTokenService,
            'usageModule': KalturaUsageModuleService,
            'userAssetRule': KalturaUserAssetRuleService,
            'userAssetsListItem': KalturaUserAssetsListItemService,
            'userInterest': KalturaUserInterestService,
            'userLoginPin': KalturaUserLoginPinService,
            'userRole': KalturaUserRoleService,
            'userSegment': KalturaUserSegmentService,
            'userSessionProfile': KalturaUserSessionProfileService,
        }

    def getEnums(self):
        return {
            'KalturaAdsPolicy': KalturaAdsPolicy,
            'KalturaAggregationCountOrderBy': KalturaAggregationCountOrderBy,
            'KalturaAggregationType': KalturaAggregationType,
            'KalturaAnnouncementOrderBy': KalturaAnnouncementOrderBy,
            'KalturaAnnouncementRecipientsType': KalturaAnnouncementRecipientsType,
            'KalturaAnnouncementStatus': KalturaAnnouncementStatus,
            'KalturaApiAction': KalturaApiAction,
            'KalturaApiParameterPermissionItemAction': KalturaApiParameterPermissionItemAction,
            'KalturaApiService': KalturaApiService,
            'KalturaAppTokenHashType': KalturaAppTokenHashType,
            'KalturaAssetCommentOrderBy': KalturaAssetCommentOrderBy,
            'KalturaAssetFilePpvOrderBy': KalturaAssetFilePpvOrderBy,
            'KalturaAssetHistoryOrderBy': KalturaAssetHistoryOrderBy,
            'KalturaAssetImagePerRatioOrderBy': KalturaAssetImagePerRatioOrderBy,
            'KalturaAssetIndexStatus': KalturaAssetIndexStatus,
            'KalturaAssetInheritancePolicy': KalturaAssetInheritancePolicy,
            'KalturaAssetLifeCycleRuleActionType': KalturaAssetLifeCycleRuleActionType,
            'KalturaAssetLifeCycleRuleTransitionType': KalturaAssetLifeCycleRuleTransitionType,
            'KalturaAssetOrderBy': KalturaAssetOrderBy,
            'KalturaAssetOrderByStatistics': KalturaAssetOrderByStatistics,
            'KalturaAssetOrderByType': KalturaAssetOrderByType,
            'KalturaAssetPersonalMarkupSearchOrderBy': KalturaAssetPersonalMarkupSearchOrderBy,
            'KalturaAssetReferenceType': KalturaAssetReferenceType,
            'KalturaAssetReminderOrderBy': KalturaAssetReminderOrderBy,
            'KalturaAssetRuleOrderBy': KalturaAssetRuleOrderBy,
            'KalturaAssetRuleStatus': KalturaAssetRuleStatus,
            'KalturaAssetStructMetaOrderBy': KalturaAssetStructMetaOrderBy,
            'KalturaAssetStructOrderBy': KalturaAssetStructOrderBy,
            'KalturaAssetType': KalturaAssetType,
            'KalturaAssetUserRuleOrderBy': KalturaAssetUserRuleOrderBy,
            'KalturaBillingAction': KalturaBillingAction,
            'KalturaBillingItemsType': KalturaBillingItemsType,
            'KalturaBillingPriceType': KalturaBillingPriceType,
            'KalturaBookmarkActionType': KalturaBookmarkActionType,
            'KalturaBookmarkOrderBy': KalturaBookmarkOrderBy,
            'KalturaBooleanOperator': KalturaBooleanOperator,
            'KalturaBulkUploadJobAction': KalturaBulkUploadJobAction,
            'KalturaBulkUploadJobStatus': KalturaBulkUploadJobStatus,
            'KalturaBulkUploadOrderBy': KalturaBulkUploadOrderBy,
            'KalturaBulkUploadResultStatus': KalturaBulkUploadResultStatus,
            'KalturaBundleType': KalturaBundleType,
            'KalturaCampaignOrderBy': KalturaCampaignOrderBy,
            'KalturaCategoryItemOrderBy': KalturaCategoryItemOrderBy,
            'KalturaCategoryVersionOrderBy': KalturaCategoryVersionOrderBy,
            'KalturaCategoryVersionState': KalturaCategoryVersionState,
            'KalturaChannelEnrichment': KalturaChannelEnrichment,
            'KalturaChannelFieldOrderByType': KalturaChannelFieldOrderByType,
            'KalturaChannelOrderBy': KalturaChannelOrderBy,
            'KalturaChannelSlidingWindowOrderByType': KalturaChannelSlidingWindowOrderByType,
            'KalturaChannelsOrderBy': KalturaChannelsOrderBy,
            'KalturaChannelStruct': KalturaChannelStruct,
            'KalturaChannelType': KalturaChannelType,
            'KalturaChronologicalRecordStartTime': KalturaChronologicalRecordStartTime,
            'KalturaCollectionOrderBy': KalturaCollectionOrderBy,
            'KalturaCompensationType': KalturaCompensationType,
            'KalturaConcurrencyLimitationType': KalturaConcurrencyLimitationType,
            'KalturaConfigurationGroupDeviceOrderBy': KalturaConfigurationGroupDeviceOrderBy,
            'KalturaConfigurationGroupTagOrderBy': KalturaConfigurationGroupTagOrderBy,
            'KalturaConfigurationsOrderBy': KalturaConfigurationsOrderBy,
            'KalturaContentAction': KalturaContentAction,
            'KalturaContentActionConditionLengthType': KalturaContentActionConditionLengthType,
            'KalturaContextType': KalturaContextType,
            'KalturaCountryOrderBy': KalturaCountryOrderBy,
            'KalturaCouponGroupType': KalturaCouponGroupType,
            'KalturaCouponStatus': KalturaCouponStatus,
            'KalturaCurrencyOrderBy': KalturaCurrencyOrderBy,
            'KalturaDeleteMediaPolicy': KalturaDeleteMediaPolicy,
            'KalturaDeviceBrandOrderBy': KalturaDeviceBrandOrderBy,
            'KalturaDeviceBrandType': KalturaDeviceBrandType,
            'KalturaDeviceFamilyOrderBy': KalturaDeviceFamilyOrderBy,
            'KalturaDeviceFamilyType': KalturaDeviceFamilyType,
            'KalturaDeviceReferenceDataOrderBy': KalturaDeviceReferenceDataOrderBy,
            'KalturaDeviceStatus': KalturaDeviceStatus,
            'KalturaDowngradePolicy': KalturaDowngradePolicy,
            'KalturaDrmSchemeName': KalturaDrmSchemeName,
            'KalturaDurationUnit': KalturaDurationUnit,
            'KalturaDynamicListOrderBy': KalturaDynamicListOrderBy,
            'KalturaEncryptionType': KalturaEncryptionType,
            'KalturaEngagementOrderBy': KalturaEngagementOrderBy,
            'KalturaEngagementType': KalturaEngagementType,
            'KalturaEntitlementOrderBy': KalturaEntitlementOrderBy,
            'KalturaEntityAttribute': KalturaEntityAttribute,
            'KalturaEntityReferenceBy': KalturaEntityReferenceBy,
            'KalturaEpgOrderBy': KalturaEpgOrderBy,
            'KalturaEventNotificationOrderBy': KalturaEventNotificationOrderBy,
            'KalturaEventNotificationStatus': KalturaEventNotificationStatus,
            'KalturaEvictionPolicyType': KalturaEvictionPolicyType,
            'KalturaExportDataType': KalturaExportDataType,
            'KalturaExportTaskOrderBy': KalturaExportTaskOrderBy,
            'KalturaExportType': KalturaExportType,
            'KalturaExternalChannelProfileOrderBy': KalturaExternalChannelProfileOrderBy,
            'KalturaExternalRecordingResponseProfileOrderBy': KalturaExternalRecordingResponseProfileOrderBy,
            'KalturaFavoriteOrderBy': KalturaFavoriteOrderBy,
            'KalturaFollowTvSeriesOrderBy': KalturaFollowTvSeriesOrderBy,
            'KalturaGroupByField': KalturaGroupByField,
            'KalturaGroupByOrder': KalturaGroupByOrder,
            'KalturaGroupingOption': KalturaGroupingOption,
            'KalturaHouseholdCouponOrderBy': KalturaHouseholdCouponOrderBy,
            'KalturaHouseholdDeviceOrderBy': KalturaHouseholdDeviceOrderBy,
            'KalturaHouseholdFrequencyType': KalturaHouseholdFrequencyType,
            'KalturaHouseholdOrderBy': KalturaHouseholdOrderBy,
            'KalturaHouseholdPaymentGatewaySelectedBy': KalturaHouseholdPaymentGatewaySelectedBy,
            'KalturaHouseholdRestriction': KalturaHouseholdRestriction,
            'KalturaHouseholdSegmentOrderBy': KalturaHouseholdSegmentOrderBy,
            'KalturaHouseholdState': KalturaHouseholdState,
            'KalturaHouseholdSuspensionState': KalturaHouseholdSuspensionState,
            'KalturaHouseholdUserOrderBy': KalturaHouseholdUserOrderBy,
            'KalturaHouseholdUserStatus': KalturaHouseholdUserStatus,
            'KalturaImageObjectType': KalturaImageObjectType,
            'KalturaImageOrderBy': KalturaImageOrderBy,
            'KalturaImageStatus': KalturaImageStatus,
            'KalturaImageTypeOrderBy': KalturaImageTypeOrderBy,
            'KalturaInboxMessageOrderBy': KalturaInboxMessageOrderBy,
            'KalturaInboxMessageStatus': KalturaInboxMessageStatus,
            'KalturaInboxMessageType': KalturaInboxMessageType,
            'KalturaIngestEpgProgramResultOrderBy': KalturaIngestEpgProgramResultOrderBy,
            'KalturaIngestEpgProgramStatus': KalturaIngestEpgProgramStatus,
            'KalturaIngestProfileAutofillPolicy': KalturaIngestProfileAutofillPolicy,
            'KalturaIngestProfileOverlapPolicy': KalturaIngestProfileOverlapPolicy,
            'KalturaIngestStatus': KalturaIngestStatus,
            'KalturaIotOrderBy': KalturaIotOrderBy,
            'KalturaIotProfileOrderBy': KalturaIotProfileOrderBy,
            'KalturaLabelOrderBy': KalturaLabelOrderBy,
            'KalturaLanguageOrderBy': KalturaLanguageOrderBy,
            'KalturaLinearChannelType': KalturaLinearChannelType,
            'KalturaListGroupsRepresentativesOrderBy': KalturaListGroupsRepresentativesOrderBy,
            'KalturaManualCollectionAssetType': KalturaManualCollectionAssetType,
            'KalturaMathemticalOperatorType': KalturaMathemticalOperatorType,
            'KalturaMediaFileDynamicDataOrderBy': KalturaMediaFileDynamicDataOrderBy,
            'KalturaMediaFileOrderBy': KalturaMediaFileOrderBy,
            'KalturaMediaFileStreamerType': KalturaMediaFileStreamerType,
            'KalturaMediaFileTypeQuality': KalturaMediaFileTypeQuality,
            'KalturaMessageTemplateType': KalturaMessageTemplateType,
            'KalturaMetaDataType': KalturaMetaDataType,
            'KalturaMetaOrderBy': KalturaMetaOrderBy,
            'KalturaMetaTagOrderBy': KalturaMetaTagOrderBy,
            'KalturaMonetizationType': KalturaMonetizationType,
            'KalturaNotificationType': KalturaNotificationType,
            'KalturaObjectState': KalturaObjectState,
            'KalturaObjectVirtualAssetInfoType': KalturaObjectVirtualAssetInfoType,
            'KalturaOTTUserOrderBy': KalturaOTTUserOrderBy,
            'KalturaParentalRuleOrderBy': KalturaParentalRuleOrderBy,
            'KalturaParentalRuleType': KalturaParentalRuleType,
            'KalturaPartnerConfigurationOrderBy': KalturaPartnerConfigurationOrderBy,
            'KalturaPartnerConfigurationType': KalturaPartnerConfigurationType,
            'KalturaPasswordPolicyOrderBy': KalturaPasswordPolicyOrderBy,
            'KalturaPaymentMethodProfileOrderBy': KalturaPaymentMethodProfileOrderBy,
            'KalturaPaymentMethodType': KalturaPaymentMethodType,
            'KalturaPermissionItemOrderBy': KalturaPermissionItemOrderBy,
            'KalturaPermissionOrderBy': KalturaPermissionOrderBy,
            'KalturaPermissionType': KalturaPermissionType,
            'KalturaPersonalAssetSelectionOrderBy': KalturaPersonalAssetSelectionOrderBy,
            'KalturaPersonalFeedOrderBy': KalturaPersonalFeedOrderBy,
            'KalturaPersonalListOrderBy': KalturaPersonalListOrderBy,
            'KalturaPinType': KalturaPinType,
            'KalturaPlatform': KalturaPlatform,
            'KalturaPlaybackContextType': KalturaPlaybackContextType,
            'KalturaPlaybackProfileOrderBy': KalturaPlaybackProfileOrderBy,
            'KalturaPositionOwner': KalturaPositionOwner,
            'KalturaPpvOrderBy': KalturaPpvOrderBy,
            'KalturaPreviewModuleOrderBy': KalturaPreviewModuleOrderBy,
            'KalturaPriceDetailsOrderBy': KalturaPriceDetailsOrderBy,
            'KalturaPricePlanOrderBy': KalturaPricePlanOrderBy,
            'KalturaProductPriceOrderBy': KalturaProductPriceOrderBy,
            'KalturaProgramAssetGroupOfferOrderBy': KalturaProgramAssetGroupOfferOrderBy,
            'KalturaProtectionPolicy': KalturaProtectionPolicy,
            'KalturaPurchaseSettingsType': KalturaPurchaseSettingsType,
            'KalturaPurchaseStatus': KalturaPurchaseStatus,
            'KalturaQuotaOveragePolicy': KalturaQuotaOveragePolicy,
            'KalturaRecordingContextOrderBy': KalturaRecordingContextOrderBy,
            'KalturaRecordingOrderBy': KalturaRecordingOrderBy,
            'KalturaRecordingStatus': KalturaRecordingStatus,
            'KalturaRecordingType': KalturaRecordingType,
            'KalturaRegionOrderBy': KalturaRegionOrderBy,
            'KalturaRelatedEntityType': KalturaRelatedEntityType,
            'KalturaReminderType': KalturaReminderType,
            'KalturaReportOrderBy': KalturaReportOrderBy,
            'KalturaResponseType': KalturaResponseType,
            'KalturaRollingDevicePolicy': KalturaRollingDevicePolicy,
            'KalturaRuleActionType': KalturaRuleActionType,
            'KalturaRuleConditionType': KalturaRuleConditionType,
            'KalturaRuleLevel': KalturaRuleLevel,
            'KalturaRuleType': KalturaRuleType,
            'KalturaScheduledRecordingAssetType': KalturaScheduledRecordingAssetType,
            'KalturaSearchHistoryOrderBy': KalturaSearchHistoryOrderBy,
            'KalturaSearchPriorityCriteriaType': KalturaSearchPriorityCriteriaType,
            'KalturaSearchPriorityGroupOrderBy': KalturaSearchPriorityGroupOrderBy,
            'KalturaSegmentationTypeOrderBy': KalturaSegmentationTypeOrderBy,
            'KalturaSeriesRecordingOrderBy': KalturaSeriesRecordingOrderBy,
            'KalturaSeriesReminderOrderBy': KalturaSeriesReminderOrderBy,
            'KalturaSkipOperators': KalturaSkipOperators,
            'KalturaSkipOptions': KalturaSkipOptions,
            'KalturaSmsAdapterProfileOrderBy': KalturaSmsAdapterProfileOrderBy,
            'KalturaSocialActionOrderBy': KalturaSocialActionOrderBy,
            'KalturaSocialActionPrivacy': KalturaSocialActionPrivacy,
            'KalturaSocialActionType': KalturaSocialActionType,
            'KalturaSocialCommentOrderBy': KalturaSocialCommentOrderBy,
            'KalturaSocialFriendActivityOrderBy': KalturaSocialFriendActivityOrderBy,
            'KalturaSocialNetwork': KalturaSocialNetwork,
            'KalturaSocialPlatform': KalturaSocialPlatform,
            'KalturaSocialPrivacy': KalturaSocialPrivacy,
            'KalturaSocialStatus': KalturaSocialStatus,
            'KalturaStreamingDeviceOrderBy': KalturaStreamingDeviceOrderBy,
            'KalturaStreamType': KalturaStreamType,
            'KalturaSubscriptionDependencyType': KalturaSubscriptionDependencyType,
            'KalturaSubscriptionOrderBy': KalturaSubscriptionOrderBy,
            'KalturaSubscriptionSetOrderBy': KalturaSubscriptionSetOrderBy,
            'KalturaSubscriptionSetType': KalturaSubscriptionSetType,
            'KalturaSubscriptionTriggerType': KalturaSubscriptionTriggerType,
            'KalturaSuspensionProfileInheritanceType': KalturaSuspensionProfileInheritanceType,
            'KalturaTagOrderBy': KalturaTagOrderBy,
            'KalturaTimeShiftedTvState': KalturaTimeShiftedTvState,
            'KalturaTopicAutomaticIssueNotification': KalturaTopicAutomaticIssueNotification,
            'KalturaTopicNotificationMessageOrderBy': KalturaTopicNotificationMessageOrderBy,
            'KalturaTopicNotificationOrderBy': KalturaTopicNotificationOrderBy,
            'KalturaTopicOrderBy': KalturaTopicOrderBy,
            'KalturaTransactionAdapterStatus': KalturaTransactionAdapterStatus,
            'KalturaTransactionHistoryOrderBy': KalturaTransactionHistoryOrderBy,
            'KalturaTransactionType': KalturaTransactionType,
            'KalturaTvmRuleOrderBy': KalturaTvmRuleOrderBy,
            'KalturaTvmRuleType': KalturaTvmRuleType,
            'KalturaUnmatchedItemsPolicy': KalturaUnmatchedItemsPolicy,
            'KalturaUploadTokenStatus': KalturaUploadTokenStatus,
            'KalturaUrlType': KalturaUrlType,
            'KalturaUserAssetRuleOrderBy': KalturaUserAssetRuleOrderBy,
            'KalturaUserAssetsListItemType': KalturaUserAssetsListItemType,
            'KalturaUserAssetsListType': KalturaUserAssetsListType,
            'KalturaUserRoleOrderBy': KalturaUserRoleOrderBy,
            'KalturaUserRoleProfile': KalturaUserRoleProfile,
            'KalturaUserRoleType': KalturaUserRoleType,
            'KalturaUserState': KalturaUserState,
            'KalturaWatchStatus': KalturaWatchStatus,
        }

    def getTypes(self):
        return {
            'KalturaApiExceptionArg': KalturaApiExceptionArg,
            'KalturaClientConfiguration': KalturaClientConfiguration,
            'KalturaBaseResponseProfile': KalturaBaseResponseProfile,
            'KalturaSkipCondition': KalturaSkipCondition,
            'KalturaRequestConfiguration': KalturaRequestConfiguration,
            'KalturaFilter': KalturaFilter,
            'KalturaDetachedResponseProfile': KalturaDetachedResponseProfile,
            'KalturaOnDemandResponseProfile': KalturaOnDemandResponseProfile,
            'KalturaRelatedObjectFilter': KalturaRelatedObjectFilter,
            'KalturaDeviceReferenceDataFilter': KalturaDeviceReferenceDataFilter,
            'KalturaDeviceManufacturersReferenceDataFilter': KalturaDeviceManufacturersReferenceDataFilter,
            'KalturaValue': KalturaValue,
            'KalturaIntegerValue': KalturaIntegerValue,
            'KalturaFavoriteFilter': KalturaFavoriteFilter,
            'KalturaBooleanValue': KalturaBooleanValue,
            'KalturaDoubleValue': KalturaDoubleValue,
            'KalturaLongValue': KalturaLongValue,
            'KalturaTranslationToken': KalturaTranslationToken,
            'KalturaMultilingualStringValue': KalturaMultilingualStringValue,
            'KalturaStringValue': KalturaStringValue,
            'KalturaOTTUserFilter': KalturaOTTUserFilter,
            'KalturaPartnerFilter': KalturaPartnerFilter,
            'KalturaPasswordPolicyFilter': KalturaPasswordPolicyFilter,
            'KalturaUserSessionProfileFilter': KalturaUserSessionProfileFilter,
            'KalturaBulkUploadFilter': KalturaBulkUploadFilter,
            'KalturaSocialActionFilter': KalturaSocialActionFilter,
            'KalturaSocialCommentFilter': KalturaSocialCommentFilter,
            'KalturaSocialFriendActivityFilter': KalturaSocialFriendActivityFilter,
            'KalturaBaseSegmentationTypeFilter': KalturaBaseSegmentationTypeFilter,
            'KalturaSegmentationTypeFilter': KalturaSegmentationTypeFilter,
            'KalturaSegmentValueFilter': KalturaSegmentValueFilter,
            'KalturaHouseholdSegmentFilter': KalturaHouseholdSegmentFilter,
            'KalturaUserSegmentFilter': KalturaUserSegmentFilter,
            'KalturaAssetFilePpvFilter': KalturaAssetFilePpvFilter,
            'KalturaCollectionFilter': KalturaCollectionFilter,
            'KalturaDiscountDetailsFilter': KalturaDiscountDetailsFilter,
            'KalturaPpvFilter': KalturaPpvFilter,
            'KalturaPreviewModuleFilter': KalturaPreviewModuleFilter,
            'KalturaPriceDetailsFilter': KalturaPriceDetailsFilter,
            'KalturaPricePlanFilter': KalturaPricePlanFilter,
            'KalturaProgramAssetGroupOfferFilter': KalturaProgramAssetGroupOfferFilter,
            'KalturaProgramAssetGroupOfferIdInFilter': KalturaProgramAssetGroupOfferIdInFilter,
            'KalturaSubscriptionSetFilter': KalturaSubscriptionSetFilter,
            'KalturaSubscriptionDependencySetFilter': KalturaSubscriptionDependencySetFilter,
            'KalturaSubscriptionFilter': KalturaSubscriptionFilter,
            'KalturaUsageModuleFilter': KalturaUsageModuleFilter,
            'KalturaPartnerConfigurationFilter': KalturaPartnerConfigurationFilter,
            'KalturaPersonalListFilter': KalturaPersonalListFilter,
            'KalturaReminderFilter': KalturaReminderFilter,
            'KalturaAssetReminderFilter': KalturaAssetReminderFilter,
            'KalturaSeasonsReminderFilter': KalturaSeasonsReminderFilter,
            'KalturaSeriesReminderFilter': KalturaSeriesReminderFilter,
            'KalturaEngagementFilter': KalturaEngagementFilter,
            'KalturaFollowTvSeriesFilter': KalturaFollowTvSeriesFilter,
            'KalturaInboxMessageFilter': KalturaInboxMessageFilter,
            'KalturaAnnouncementFilter': KalturaAnnouncementFilter,
            'KalturaPersonalFeedFilter': KalturaPersonalFeedFilter,
            'KalturaSmsAdapterProfileFilter': KalturaSmsAdapterProfileFilter,
            'KalturaTopicFilter': KalturaTopicFilter,
            'KalturaSubscribeReference': KalturaSubscribeReference,
            'KalturaTopicNotificationFilter': KalturaTopicNotificationFilter,
            'KalturaSubscriptionSubscribeReference': KalturaSubscriptionSubscribeReference,
            'KalturaTopicNotificationMessageFilter': KalturaTopicNotificationMessageFilter,
            'KalturaIngestByCompoundFilter': KalturaIngestByCompoundFilter,
            'KalturaIngestByIdsFilter': KalturaIngestByIdsFilter,
            'KalturaIngestEpgProgramResultFilter': KalturaIngestEpgProgramResultFilter,
            'KalturaIngestProgramResultsByRefineFilter': KalturaIngestProgramResultsByRefineFilter,
            'KalturaIngestProgramResultsByCombinedFieldsFilter': KalturaIngestProgramResultsByCombinedFieldsFilter,
            'KalturaIngestProgramResultsByCompoundFilter': KalturaIngestProgramResultsByCompoundFilter,
            'KalturaIngestProgramResultsByExternalIdsFilter': KalturaIngestProgramResultsByExternalIdsFilter,
            'KalturaIngestProgramResultsByProgramIdsFilter': KalturaIngestProgramResultsByProgramIdsFilter,
            'KalturaAggregationCountFilter': KalturaAggregationCountFilter,
            'KalturaDynamicListFilter': KalturaDynamicListFilter,
            'KalturaDynamicListIdInFilter': KalturaDynamicListIdInFilter,
            'KalturaDynamicListSearchFilter': KalturaDynamicListSearchFilter,
            'KalturaUdidDynamicListSearchFilter': KalturaUdidDynamicListSearchFilter,
            'KalturaPersistedFilter': KalturaPersistedFilter,
            'KalturaBaseAssetOrder': KalturaBaseAssetOrder,
            'KalturaDynamicOrderBy': KalturaDynamicOrderBy,
            'KalturaAssetFilter': KalturaAssetFilter,
            'KalturaAssetGroupBy': KalturaAssetGroupBy,
            'KalturaBaseSearchAssetFilter': KalturaBaseSearchAssetFilter,
            'KalturaChannelFilter': KalturaChannelFilter,
            'KalturaAssetDynamicOrder': KalturaAssetDynamicOrder,
            'KalturaAssetOrder': KalturaAssetOrder,
            'KalturaAssetStatisticsOrder': KalturaAssetStatisticsOrder,
            'KalturaPersonalListSearchFilter': KalturaPersonalListSearchFilter,
            'KalturaRelatedFilter': KalturaRelatedFilter,
            'KalturaSearchAssetFilter': KalturaSearchAssetFilter,
            'KalturaSearchAssetListFilter': KalturaSearchAssetListFilter,
            'KalturaAssetMetaOrTagGroupBy': KalturaAssetMetaOrTagGroupBy,
            'KalturaAssetFieldGroupBy': KalturaAssetFieldGroupBy,
            'KalturaBundleFilter': KalturaBundleFilter,
            'KalturaChannelExternalFilter': KalturaChannelExternalFilter,
            'KalturaRelatedExternalFilter': KalturaRelatedExternalFilter,
            'KalturaScheduledRecordingProgramFilter': KalturaScheduledRecordingProgramFilter,
            'KalturaSearchExternalFilter': KalturaSearchExternalFilter,
            'KalturaPriorityGroupFilter': KalturaPriorityGroupFilter,
            'KalturaReportFilter': KalturaReportFilter,
            'KalturaDeviceReportFilter': KalturaDeviceReportFilter,
            'KalturaHouseholdCouponCodeFilter': KalturaHouseholdCouponCodeFilter,
            'KalturaHouseholdCouponFilter': KalturaHouseholdCouponFilter,
            'KalturaHouseholdDeviceFilter': KalturaHouseholdDeviceFilter,
            'KalturaHouseholdFilter': KalturaHouseholdFilter,
            'KalturaHouseholdUserFilter': KalturaHouseholdUserFilter,
            'KalturaConfigurationGroupDeviceFilter': KalturaConfigurationGroupDeviceFilter,
            'KalturaConfigurationGroupTagFilter': KalturaConfigurationGroupTagFilter,
            'KalturaConfigurationsFilter': KalturaConfigurationsFilter,
            'KalturaBaseEntitlementFilter': KalturaBaseEntitlementFilter,
            'KalturaEntitlementFilter': KalturaEntitlementFilter,
            'KalturaProgramAssetGroupOfferEntitlementFilter': KalturaProgramAssetGroupOfferEntitlementFilter,
            'KalturaRecordingFilter': KalturaRecordingFilter,
            'KalturaExternalRecordingFilter': KalturaExternalRecordingFilter,
            'KalturaCloudRecordingFilter': KalturaCloudRecordingFilter,
            'KalturaSeriesRecordingFilter': KalturaSeriesRecordingFilter,
            'KalturaCloudSeriesRecordingFilter': KalturaCloudSeriesRecordingFilter,
            'KalturaExternalRecordingResponseProfileFilter': KalturaExternalRecordingResponseProfileFilter,
            'KalturaProductPriceFilter': KalturaProductPriceFilter,
            'KalturaRecordingContextFilter': KalturaRecordingContextFilter,
            'KalturaTransactionHistoryFilter': KalturaTransactionHistoryFilter,
            'KalturaAssetCommentFilter': KalturaAssetCommentFilter,
            'KalturaAssetHistoryFilter': KalturaAssetHistoryFilter,
            'KalturaAssetHistorySuppressFilter': KalturaAssetHistorySuppressFilter,
            'KalturaAssetImagePerRatioFilter': KalturaAssetImagePerRatioFilter,
            'KalturaBaseAssetStructFilter': KalturaBaseAssetStructFilter,
            'KalturaAssetStructFilter': KalturaAssetStructFilter,
            'KalturaLinearAssetStructFilter': KalturaLinearAssetStructFilter,
            'KalturaAssetStructMetaFilter': KalturaAssetStructMetaFilter,
            'KalturaSlimAsset': KalturaSlimAsset,
            'KalturaBookmarkFilter': KalturaBookmarkFilter,
            'KalturaBaseOTTUser': KalturaBaseOTTUser,
            'KalturaCountry': KalturaCountry,
            'KalturaOTTUserType': KalturaOTTUserType,
            'KalturaOTTUser': KalturaOTTUser,
            'KalturaBookmarkPlayerData': KalturaBookmarkPlayerData,
            'KalturaBookmark': KalturaBookmark,
            'KalturaCategoryItemFilter': KalturaCategoryItemFilter,
            'KalturaCategoryItemAncestorsFilter': KalturaCategoryItemAncestorsFilter,
            'KalturaCategoryItemByIdInFilter': KalturaCategoryItemByIdInFilter,
            'KalturaCategoryItemSearchFilter': KalturaCategoryItemSearchFilter,
            'KalturaCategoryVersionFilter': KalturaCategoryVersionFilter,
            'KalturaCategoryVersionFilterByTree': KalturaCategoryVersionFilterByTree,
            'KalturaChannelsBaseFilter': KalturaChannelsBaseFilter,
            'KalturaChannelsFilter': KalturaChannelsFilter,
            'KalturaChannelSearchByKsqlFilter': KalturaChannelSearchByKsqlFilter,
            'KalturaImageFilter': KalturaImageFilter,
            'KalturaImageTypeFilter': KalturaImageTypeFilter,
            'KalturaLabelFilter': KalturaLabelFilter,
            'KalturaMediaFileFilter': KalturaMediaFileFilter,
            'KalturaPersonalAssetSelectionFilter': KalturaPersonalAssetSelectionFilter,
            'KalturaStreamingDeviceFilter': KalturaStreamingDeviceFilter,
            'KalturaTagFilter': KalturaTagFilter,
            'KalturaSearchPriorityGroupFilter': KalturaSearchPriorityGroupFilter,
            'KalturaListGroupsRepresentativesFilter': KalturaListGroupsRepresentativesFilter,
            'KalturaPaymentMethodProfileFilter': KalturaPaymentMethodProfileFilter,
            'KalturaAssetPersonalMarkupSearchFilter': KalturaAssetPersonalMarkupSearchFilter,
            'KalturaAssetRuleFilter': KalturaAssetRuleFilter,
            'KalturaAssetUserRuleFilter': KalturaAssetUserRuleFilter,
            'KalturaCampaignFilter': KalturaCampaignFilter,
            'KalturaCampaignSearchFilter': KalturaCampaignSearchFilter,
            'KalturaBatchCampaignSearchFilter': KalturaBatchCampaignSearchFilter,
            'KalturaCampaignIdInFilter': KalturaCampaignIdInFilter,
            'KalturaCampaignSegmentFilter': KalturaCampaignSegmentFilter,
            'KalturaTriggerCampaignSearchFilter': KalturaTriggerCampaignSearchFilter,
            'KalturaBusinessModuleRuleFilter': KalturaBusinessModuleRuleFilter,
            'KalturaCountryFilter': KalturaCountryFilter,
            'KalturaCurrencyFilter': KalturaCurrencyFilter,
            'KalturaDeviceBrandFilter': KalturaDeviceBrandFilter,
            'KalturaDeviceFamilyFilter': KalturaDeviceFamilyFilter,
            'KalturaEventNotificationFilter': KalturaEventNotificationFilter,
            'KalturaExportTaskFilter': KalturaExportTaskFilter,
            'KalturaExternalChannelProfileFilter': KalturaExternalChannelProfileFilter,
            'KalturaExternalChannelProfileByIdInFilter': KalturaExternalChannelProfileByIdInFilter,
            'KalturaIotFilter': KalturaIotFilter,
            'KalturaIotProfileFilter': KalturaIotProfileFilter,
            'KalturaLanguageFilter': KalturaLanguageFilter,
            'KalturaMediaFileDynamicDataFilter': KalturaMediaFileDynamicDataFilter,
            'KalturaMetaFilter': KalturaMetaFilter,
            'KalturaParentalRuleFilter': KalturaParentalRuleFilter,
            'KalturaBasePermissionFilter': KalturaBasePermissionFilter,
            'KalturaPermissionFilter': KalturaPermissionFilter,
            'KalturaPermissionByIdInFilter': KalturaPermissionByIdInFilter,
            'KalturaPermissionItemFilter': KalturaPermissionItemFilter,
            'KalturaPermissionItemByIdInFilter': KalturaPermissionItemByIdInFilter,
            'KalturaPermissionItemByApiActionFilter': KalturaPermissionItemByApiActionFilter,
            'KalturaPermissionItemByArgumentFilter': KalturaPermissionItemByArgumentFilter,
            'KalturaPermissionItemByParameterFilter': KalturaPermissionItemByParameterFilter,
            'KalturaPlaybackProfileFilter': KalturaPlaybackProfileFilter,
            'KalturaBaseRegionFilter': KalturaBaseRegionFilter,
            'KalturaRegionFilter': KalturaRegionFilter,
            'KalturaDefaultRegionFilter': KalturaDefaultRegionFilter,
            'KalturaAddDefaultIfEmptyResponseProfile': KalturaAddDefaultIfEmptyResponseProfile,
            'KalturaSearchHistoryFilter': KalturaSearchHistoryFilter,
            'KalturaTvmRuleFilter': KalturaTvmRuleFilter,
            'KalturaUserAssetRuleFilter': KalturaUserAssetRuleFilter,
            'KalturaUserRoleFilter': KalturaUserRoleFilter,
            'KalturaEpgFilter': KalturaEpgFilter,
            'KalturaPropertySkipCondition': KalturaPropertySkipCondition,
            'KalturaAggregatedPropertySkipCondition': KalturaAggregatedPropertySkipCondition,
            'KalturaSkipOnErrorCondition': KalturaSkipOnErrorCondition,
            'KalturaAnnouncement': KalturaAnnouncement,
            'KalturaFilterPager': KalturaFilterPager,
            'KalturaListResponse': KalturaListResponse,
            'KalturaAnnouncementListResponse': KalturaAnnouncementListResponse,
            'KalturaOTTObjectSupportNullable': KalturaOTTObjectSupportNullable,
            'KalturaDeviceReferenceData': KalturaDeviceReferenceData,
            'KalturaDeviceReferenceDataListResponse': KalturaDeviceReferenceDataListResponse,
            'KalturaDeviceManufacturerInformation': KalturaDeviceManufacturerInformation,
            'KalturaRegexExpression': KalturaRegexExpression,
            'KalturaPasswordPolicy': KalturaPasswordPolicy,
            'KalturaHouseholdSegment': KalturaHouseholdSegment,
            'KalturaAssetFilePpv': KalturaAssetFilePpv,
            'KalturaBaseChannel': KalturaBaseChannel,
            'KalturaDiscountModule': KalturaDiscountModule,
            'KalturaUsageModule': KalturaUsageModule,
            'KalturaCouponsGroup': KalturaCouponsGroup,
            'KalturaCollectionCouponGroup': KalturaCollectionCouponGroup,
            'KalturaProductCode': KalturaProductCode,
            'KalturaCollection': KalturaCollection,
            'KalturaMediaImage': KalturaMediaImage,
            'KalturaChannelOrder': KalturaChannelOrder,
            'KalturaBaseChannelOrder': KalturaBaseChannelOrder,
            'KalturaChannel': KalturaChannel,
            'KalturaDynamicChannel': KalturaDynamicChannel,
            'KalturaManualCollectionAsset': KalturaManualCollectionAsset,
            'KalturaManualChannel': KalturaManualChannel,
            'KalturaChannelDynamicOrder': KalturaChannelDynamicOrder,
            'KalturaChannelFieldOrder': KalturaChannelFieldOrder,
            'KalturaChannelSlidingWindowOrder': KalturaChannelSlidingWindowOrder,
            'KalturaPricePlan': KalturaPricePlan,
            'KalturaProgramAssetGroupOffer': KalturaProgramAssetGroupOffer,
            'KalturaPrice': KalturaPrice,
            'KalturaPriceDetails': KalturaPriceDetails,
            'KalturaPreviewModule': KalturaPreviewModule,
            'KalturaPremiumService': KalturaPremiumService,
            'KalturaSubscriptionCouponGroup': KalturaSubscriptionCouponGroup,
            'KalturaSubscription': KalturaSubscription,
            'KalturaDiscount': KalturaDiscount,
            'KalturaHouseholdPremiumService': KalturaHouseholdPremiumService,
            'KalturaNpvrPremiumService': KalturaNpvrPremiumService,
            'KalturaSmsAdapterProfile': KalturaSmsAdapterProfile,
            'KalturaDynamicList': KalturaDynamicList,
            'KalturaUdidDynamicList': KalturaUdidDynamicList,
            'KalturaHouseholdCoupon': KalturaHouseholdCoupon,
            'KalturaPluginData': KalturaPluginData,
            'KalturaDrmPlaybackPluginData': KalturaDrmPlaybackPluginData,
            'KalturaCustomDrmPlaybackPluginData': KalturaCustomDrmPlaybackPluginData,
            'KalturaHouseholdDevice': KalturaHouseholdDevice,
            'KalturaFairPlayPlaybackPluginData': KalturaFairPlayPlaybackPluginData,
            'KalturaUnifiedChannel': KalturaUnifiedChannel,
            'KalturaCategoryItem': KalturaCategoryItem,
            'KalturaUnifiedChannelInfo': KalturaUnifiedChannelInfo,
            'KalturaCategoryVersion': KalturaCategoryVersion,
            'KalturaRule': KalturaRule,
            'KalturaAssetRuleBase': KalturaAssetRuleBase,
            'KalturaCondition': KalturaCondition,
            'KalturaRuleAction': KalturaRuleAction,
            'KalturaAssetRuleAction': KalturaAssetRuleAction,
            'KalturaAssetRule': KalturaAssetRule,
            'KalturaAssetConditionBase': KalturaAssetConditionBase,
            'KalturaAssetUserRuleAction': KalturaAssetUserRuleAction,
            'KalturaAssetUserRule': KalturaAssetUserRule,
            'KalturaAssetCondition': KalturaAssetCondition,
            'KalturaConcurrencyCondition': KalturaConcurrencyCondition,
            'KalturaStringValueArray': KalturaStringValueArray,
            'KalturaAssetShopCondition': KalturaAssetShopCondition,
            'KalturaSubscriptionCondition': KalturaSubscriptionCondition,
            'KalturaAssetSubscriptionCondition': KalturaAssetSubscriptionCondition,
            'KalturaUserSubscriptionCondition': KalturaUserSubscriptionCondition,
            'KalturaBusinessModuleCondition': KalturaBusinessModuleCondition,
            'KalturaChannelCondition': KalturaChannelCondition,
            'KalturaNotCondition': KalturaNotCondition,
            'KalturaCountryCondition': KalturaCountryCondition,
            'KalturaDateCondition': KalturaDateCondition,
            'KalturaHeaderCondition': KalturaHeaderCondition,
            'KalturaOrCondition': KalturaOrCondition,
            'KalturaDeviceBrandCondition': KalturaDeviceBrandCondition,
            'KalturaDeviceDynamicDataCondition': KalturaDeviceDynamicDataCondition,
            'KalturaDeviceFamilyCondition': KalturaDeviceFamilyCondition,
            'KalturaDeviceManufacturerCondition': KalturaDeviceManufacturerCondition,
            'KalturaDeviceModelCondition': KalturaDeviceModelCondition,
            'KalturaDynamicKeysCondition': KalturaDynamicKeysCondition,
            'KalturaFileTypeCondition': KalturaFileTypeCondition,
            'KalturaIpRangeCondition': KalturaIpRangeCondition,
            'KalturaIpV6RangeCondition': KalturaIpV6RangeCondition,
            'KalturaSegmentsCondition': KalturaSegmentsCondition,
            'KalturaUdidDynamicListCondition': KalturaUdidDynamicListCondition,
            'KalturaUserRoleCondition': KalturaUserRoleCondition,
            'KalturaUserSessionProfileCondition': KalturaUserSessionProfileCondition,
            'KalturaAccessControlBlockAction': KalturaAccessControlBlockAction,
            'KalturaAllowPlaybackAction': KalturaAllowPlaybackAction,
            'KalturaApplyPlaybackAdapterAction': KalturaApplyPlaybackAdapterAction,
            'KalturaAssetLifeCycleTransitionAction': KalturaAssetLifeCycleTransitionAction,
            'KalturaAssetLifeCycleBuisnessModuleTransitionAction': KalturaAssetLifeCycleBuisnessModuleTransitionAction,
            'KalturaAssetLifeCycleTagTransitionAction': KalturaAssetLifeCycleTagTransitionAction,
            'KalturaBlockPlaybackAction': KalturaBlockPlaybackAction,
            'KalturaTimeOffsetRuleAction': KalturaTimeOffsetRuleAction,
            'KalturaEndDateOffsetRuleAction': KalturaEndDateOffsetRuleAction,
            'KalturaStartDateOffsetRuleAction': KalturaStartDateOffsetRuleAction,
            'KalturaFilterAction': KalturaFilterAction,
            'KalturaFilterFileByAudioCodecAction': KalturaFilterFileByAudioCodecAction,
            'KalturaFilterFileByAudioCodecInDiscoveryAction': KalturaFilterFileByAudioCodecInDiscoveryAction,
            'KalturaFilterFileByAudioCodecInPlaybackAction': KalturaFilterFileByAudioCodecInPlaybackAction,
            'KalturaFilterFileByDynamicDataAction': KalturaFilterFileByDynamicDataAction,
            'KalturaFilterFileByDynamicDataInDiscoveryAction': KalturaFilterFileByDynamicDataInDiscoveryAction,
            'KalturaFilterFileByDynamicDataInPlaybackAction': KalturaFilterFileByDynamicDataInPlaybackAction,
            'KalturaFilterFileByFileTypeIdAction': KalturaFilterFileByFileTypeIdAction,
            'KalturaFilterFileByFileTypeIdForAssetTypeAction': KalturaFilterFileByFileTypeIdForAssetTypeAction,
            'KalturaFilterFileByFileTypeIdForAssetTypeInDiscoveryAction': KalturaFilterFileByFileTypeIdForAssetTypeInDiscoveryAction,
            'KalturaFilterFileByFileTypeIdForAssetTypeInPlaybackAction': KalturaFilterFileByFileTypeIdForAssetTypeInPlaybackAction,
            'KalturaFilterFileByFileTypeIdInDiscoveryAction': KalturaFilterFileByFileTypeIdInDiscoveryAction,
            'KalturaFilterFileByFileTypeIdInPlaybackAction': KalturaFilterFileByFileTypeIdInPlaybackAction,
            'KalturaFilterFileByLabelAction': KalturaFilterFileByLabelAction,
            'KalturaFilterFileByLabelInDiscoveryAction': KalturaFilterFileByLabelInDiscoveryAction,
            'KalturaFilterFileByLabelInPlaybackAction': KalturaFilterFileByLabelInPlaybackAction,
            'KalturaFilterFileByQualityAction': KalturaFilterFileByQualityAction,
            'KalturaFilterFileByQualityInDiscoveryAction': KalturaFilterFileByQualityInDiscoveryAction,
            'KalturaFilterFileByQualityInPlaybackAction': KalturaFilterFileByQualityInPlaybackAction,
            'KalturaFilterFileByStreamerTypeAction': KalturaFilterFileByStreamerTypeAction,
            'KalturaFilterFileByStreamerTypeInDiscovery': KalturaFilterFileByStreamerTypeInDiscovery,
            'KalturaFilterFileByStreamerTypeInPlayback': KalturaFilterFileByStreamerTypeInPlayback,
            'KalturaFilterFileByVideoCodecAction': KalturaFilterFileByVideoCodecAction,
            'KalturaFilterFileByVideoCodecInDiscoveryAction': KalturaFilterFileByVideoCodecInDiscoveryAction,
            'KalturaFilterFileByVideoCodecInPlayback': KalturaFilterFileByVideoCodecInPlayback,
            'KalturaFilterAssetByKsqlAction': KalturaFilterAssetByKsqlAction,
            'KalturaBusinessModuleRuleAction': KalturaBusinessModuleRuleAction,
            'KalturaApplyDiscountModuleAction': KalturaApplyDiscountModuleAction,
            'KalturaApplyFreePlaybackAction': KalturaApplyFreePlaybackAction,
            'KalturaAssetUserRuleBlockAction': KalturaAssetUserRuleBlockAction,
            'KalturaAssetUserRuleFilterAction': KalturaAssetUserRuleFilterAction,
            'KalturaBusinessModuleRule': KalturaBusinessModuleRule,
            'KalturaTvmRule': KalturaTvmRule,
            'KalturaTvmDeviceRule': KalturaTvmDeviceRule,
            'KalturaTvmGeoRule': KalturaTvmGeoRule,
            'KalturaBasePromotion': KalturaBasePromotion,
            'KalturaCampaign': KalturaCampaign,
            'KalturaBatchCampaign': KalturaBatchCampaign,
            'KalturaTriggerCampaign': KalturaTriggerCampaign,
            'KalturaCouponPromotion': KalturaCouponPromotion,
            'KalturaPromotion': KalturaPromotion,
            'KalturaEventNotification': KalturaEventNotification,
            'KalturaIot': KalturaIot,
            'KalturaIotProfileAws': KalturaIotProfileAws,
            'KalturaAssetFile': KalturaAssetFile,
            'KalturaBusinessModuleDetails': KalturaBusinessModuleDetails,
            'KalturaMediaFile': KalturaMediaFile,
            'KalturaBuzzScore': KalturaBuzzScore,
            'KalturaAssetStatistics': KalturaAssetStatistics,
            'KalturaMultilingualStringValueArray': KalturaMultilingualStringValueArray,
            'KalturaFavorite': KalturaFavorite,
            'KalturaFavoriteListResponse': KalturaFavoriteListResponse,
            'KalturaPlaybackSource': KalturaPlaybackSource,
            'KalturaDiscoveryMediaFile': KalturaDiscoveryMediaFile,
            'KalturaOTTUserListResponse': KalturaOTTUserListResponse,
            'KalturaPartner': KalturaPartner,
            'KalturaPartnerListResponse': KalturaPartnerListResponse,
            'KalturaPasswordPolicyListResponse': KalturaPasswordPolicyListResponse,
            'KalturaSSOAdapterProfile': KalturaSSOAdapterProfile,
            'KalturaSSOAdapterProfileListResponse': KalturaSSOAdapterProfileListResponse,
            'KalturaUserInterestTopic': KalturaUserInterestTopic,
            'KalturaUserInterest': KalturaUserInterest,
            'KalturaUserInterestListResponse': KalturaUserInterestListResponse,
            'KalturaUserSessionProfileExpression': KalturaUserSessionProfileExpression,
            'KalturaUserSessionProfile': KalturaUserSessionProfile,
            'KalturaUserSessionProfileListResponse': KalturaUserSessionProfileListResponse,
            'KalturaExpressionAnd': KalturaExpressionAnd,
            'KalturaExpressionNot': KalturaExpressionNot,
            'KalturaExpressionOr': KalturaExpressionOr,
            'KalturaUserSessionCondition': KalturaUserSessionCondition,
            'KalturaMessage': KalturaMessage,
            'KalturaBulkUploadResult': KalturaBulkUploadResult,
            'KalturaBulkUpload': KalturaBulkUpload,
            'KalturaBulkUploadListResponse': KalturaBulkUploadListResponse,
            'KalturaBulkUploadAssetResult': KalturaBulkUploadAssetResult,
            'KalturaBulkUploadMediaAssetResult': KalturaBulkUploadMediaAssetResult,
            'KalturaBulkUploadLiveAssetResult': KalturaBulkUploadLiveAssetResult,
            'KalturaBulkUploadDynamicListResult': KalturaBulkUploadDynamicListResult,
            'KalturaBulkUploadUdidDynamicListResult': KalturaBulkUploadUdidDynamicListResult,
            'KalturaBulkUploadProgramAssetResult': KalturaBulkUploadProgramAssetResult,
            'KalturaSocialAction': KalturaSocialAction,
            'KalturaSocialActionListResponse': KalturaSocialActionListResponse,
            'KalturaSocialActionRate': KalturaSocialActionRate,
            'KalturaSocialComment': KalturaSocialComment,
            'KalturaSocialCommentListResponse': KalturaSocialCommentListResponse,
            'KalturaSocialNetworkComment': KalturaSocialNetworkComment,
            'KalturaFacebookPost': KalturaFacebookPost,
            'KalturaTwitterTwit': KalturaTwitterTwit,
            'KalturaAssetComment': KalturaAssetComment,
            'KalturaSocialFriendActivity': KalturaSocialFriendActivity,
            'KalturaSocialFriendActivityListResponse': KalturaSocialFriendActivityListResponse,
            'KalturaHouseholdSegmentListResponse': KalturaHouseholdSegmentListResponse,
            'KalturaBaseSegmentCondition': KalturaBaseSegmentCondition,
            'KalturaBaseSegmentAction': KalturaBaseSegmentAction,
            'KalturaBaseSegmentValue': KalturaBaseSegmentValue,
            'KalturaSegmentationType': KalturaSegmentationType,
            'KalturaSegmentationTypeListResponse': KalturaSegmentationTypeListResponse,
            'KalturaContentActionCondition': KalturaContentActionCondition,
            'KalturaContentScoreCondition': KalturaContentScoreCondition,
            'KalturaMonetizationCondition': KalturaMonetizationCondition,
            'KalturaUserDataCondition': KalturaUserDataCondition,
            'KalturaAssetOrderSegmentAction': KalturaAssetOrderSegmentAction,
            'KalturaKsqlSegmentAction': KalturaKsqlSegmentAction,
            'KalturaBlockSubscriptionSegmentAction': KalturaBlockSubscriptionSegmentAction,
            'KalturaSegmentAssetFilterAction': KalturaSegmentAssetFilterAction,
            'KalturaSegmentAssetFilterSegmentAction': KalturaSegmentAssetFilterSegmentAction,
            'KalturaSegmentAssetFilterSubscriptionAction': KalturaSegmentAssetFilterSubscriptionAction,
            'KalturaSegmentBlockCancelSubscriptionAction': KalturaSegmentBlockCancelSubscriptionAction,
            'KalturaSegmentBlockPlaybackSubscriptionAction': KalturaSegmentBlockPlaybackSubscriptionAction,
            'KalturaSegmentBlockPurchaseSubscriptionAction': KalturaSegmentBlockPurchaseSubscriptionAction,
            'KalturaSegmentSource': KalturaSegmentSource,
            'KalturaSegmentValue': KalturaSegmentValue,
            'KalturaSegmentValues': KalturaSegmentValues,
            'KalturaSegmentAllValues': KalturaSegmentAllValues,
            'KalturaContentSource': KalturaContentSource,
            'KalturaMonetizationSource': KalturaMonetizationSource,
            'KalturaUserDynamicDataSource': KalturaUserDynamicDataSource,
            'KalturaSegmentRange': KalturaSegmentRange,
            'KalturaSegmentRanges': KalturaSegmentRanges,
            'KalturaSingleSegmentValue': KalturaSingleSegmentValue,
            'KalturaUserSegment': KalturaUserSegment,
            'KalturaUserSegmentListResponse': KalturaUserSegmentListResponse,
            'KalturaAssetFilePpvListResponse': KalturaAssetFilePpvListResponse,
            'KalturaCollectionListResponse': KalturaCollectionListResponse,
            'KalturaCoupon': KalturaCoupon,
            'KalturaCouponListResponse': KalturaCouponListResponse,
            'KalturaCouponsGroupListResponse': KalturaCouponsGroupListResponse,
            'KalturaDiscountDetails': KalturaDiscountDetails,
            'KalturaDiscountDetailsListResponse': KalturaDiscountDetailsListResponse,
            'KalturaPromotionInfo': KalturaPromotionInfo,
            'KalturaProductPrice': KalturaProductPrice,
            'KalturaCollectionPrice': KalturaCollectionPrice,
            'KalturaPpvPrice': KalturaPpvPrice,
            'KalturaProgramAssetGroupOfferPrice': KalturaProgramAssetGroupOfferPrice,
            'KalturaSubscriptionPrice': KalturaSubscriptionPrice,
            'KalturaPpv': KalturaPpv,
            'KalturaPpvListResponse': KalturaPpvListResponse,
            'KalturaPreviewModuleListResponse': KalturaPreviewModuleListResponse,
            'KalturaPriceDetailsListResponse': KalturaPriceDetailsListResponse,
            'KalturaPricePlanListResponse': KalturaPricePlanListResponse,
            'KalturaProductPriceListResponse': KalturaProductPriceListResponse,
            'KalturaProductsPriceListResponse': KalturaProductsPriceListResponse,
            'KalturaProgramAssetGroupOfferListResponse': KalturaProgramAssetGroupOfferListResponse,
            'KalturaSubscriptionListResponse': KalturaSubscriptionListResponse,
            'KalturaSubscriptionSet': KalturaSubscriptionSet,
            'KalturaSubscriptionSetListResponse': KalturaSubscriptionSetListResponse,
            'KalturaSubscriptionDependencySet': KalturaSubscriptionDependencySet,
            'KalturaSubscriptionSwitchSet': KalturaSubscriptionSwitchSet,
            'KalturaUsageModuleListResponse': KalturaUsageModuleListResponse,
            'KalturaPartnerConfiguration': KalturaPartnerConfiguration,
            'KalturaPartnerConfigurationListResponse': KalturaPartnerConfigurationListResponse,
            'KalturaBasePartnerConfiguration': KalturaBasePartnerConfiguration,
            'KalturaBillingPartnerConfig': KalturaBillingPartnerConfig,
            'KalturaCategoryManagement': KalturaCategoryManagement,
            'KalturaCatalogPartnerConfig': KalturaCatalogPartnerConfig,
            'KalturaBookmarkEventThreshold': KalturaBookmarkEventThreshold,
            'KalturaCommercePartnerConfig': KalturaCommercePartnerConfig,
            'KalturaConcurrencyPartnerConfig': KalturaConcurrencyPartnerConfig,
            'KalturaCustomFieldsPartnerConfiguration': KalturaCustomFieldsPartnerConfiguration,
            'KalturaDefaultParentalSettingsPartnerConfig': KalturaDefaultParentalSettingsPartnerConfig,
            'KalturaRollingDeviceRemovalData': KalturaRollingDeviceRemovalData,
            'KalturaGeneralPartnerConfig': KalturaGeneralPartnerConfig,
            'KalturaObjectVirtualAssetInfo': KalturaObjectVirtualAssetInfo,
            'KalturaObjectVirtualAssetPartnerConfig': KalturaObjectVirtualAssetPartnerConfig,
            'KalturaResetPasswordPartnerConfigTemplate': KalturaResetPasswordPartnerConfigTemplate,
            'KalturaResetPasswordPartnerConfig': KalturaResetPasswordPartnerConfig,
            'KalturaOpcPartnerConfiguration': KalturaOpcPartnerConfiguration,
            'KalturaDuration': KalturaDuration,
            'KalturaUnifiedBillingCycle': KalturaUnifiedBillingCycle,
            'KalturaPaymentPartnerConfig': KalturaPaymentPartnerConfig,
            'KalturaDefaultPlaybackAdapters': KalturaDefaultPlaybackAdapters,
            'KalturaPlaybackPartnerConfig': KalturaPlaybackPartnerConfig,
            'KalturaEncryption': KalturaEncryption,
            'KalturaDataEncryption': KalturaDataEncryption,
            'KalturaSecurityPartnerConfig': KalturaSecurityPartnerConfig,
            'KalturaPersonalList': KalturaPersonalList,
            'KalturaPersonalListListResponse': KalturaPersonalListListResponse,
            'KalturaEngagementAdapterBase': KalturaEngagementAdapterBase,
            'KalturaEngagementAdapter': KalturaEngagementAdapter,
            'KalturaEngagementAdapterListResponse': KalturaEngagementAdapterListResponse,
            'KalturaEngagement': KalturaEngagement,
            'KalturaEngagementListResponse': KalturaEngagementListResponse,
            'KalturaFollowDataBase': KalturaFollowDataBase,
            'KalturaFollowTvSeries': KalturaFollowTvSeries,
            'KalturaFollowTvSeriesListResponse': KalturaFollowTvSeriesListResponse,
            'KalturaInboxMessage': KalturaInboxMessage,
            'KalturaInboxMessageListResponse': KalturaInboxMessageListResponse,
            'KalturaFeed': KalturaFeed,
            'KalturaPersonalFeed': KalturaPersonalFeed,
            'KalturaPersonalFeedListResponse': KalturaPersonalFeedListResponse,
            'KalturaReminder': KalturaReminder,
            'KalturaReminderListResponse': KalturaReminderListResponse,
            'KalturaAssetReminder': KalturaAssetReminder,
            'KalturaSeriesReminder': KalturaSeriesReminder,
            'KalturaSmsAdapterProfileListResponse': KalturaSmsAdapterProfileListResponse,
            'KalturaTopic': KalturaTopic,
            'KalturaTopicListResponse': KalturaTopicListResponse,
            'KalturaTopicNotification': KalturaTopicNotification,
            'KalturaTopicNotificationListResponse': KalturaTopicNotificationListResponse,
            'KalturaTrigger': KalturaTrigger,
            'KalturaDispatcher': KalturaDispatcher,
            'KalturaTopicNotificationMessage': KalturaTopicNotificationMessage,
            'KalturaTopicNotificationMessageListResponse': KalturaTopicNotificationMessageListResponse,
            'KalturaDateTrigger': KalturaDateTrigger,
            'KalturaSubscriptionTrigger': KalturaSubscriptionTrigger,
            'KalturaSmsDispatcher': KalturaSmsDispatcher,
            'KalturaMailDispatcher': KalturaMailDispatcher,
            'KalturaIngestEpg': KalturaIngestEpg,
            'KalturaIngestStatusEpgListResponse': KalturaIngestStatusEpgListResponse,
            'KalturaEpgIngestErrorMessage': KalturaEpgIngestErrorMessage,
            'KalturaAggregatedIngestInfo': KalturaAggregatedIngestInfo,
            'KalturaChannelAggregatedIngestInfo': KalturaChannelAggregatedIngestInfo,
            'KalturaDateAggregatedIngestInfo': KalturaDateAggregatedIngestInfo,
            'KalturaIngestEpgDetailsAggregation': KalturaIngestEpgDetailsAggregation,
            'KalturaIngestEpgDetails': KalturaIngestEpgDetails,
            'KalturaIngestEpgProgramResult': KalturaIngestEpgProgramResult,
            'KalturaIngestStatusEpgProgramResultListResponse': KalturaIngestStatusEpgProgramResultListResponse,
            'KalturaDurationListResponse': KalturaDurationListResponse,
            'KalturaDynamicListListResponse': KalturaDynamicListListResponse,
            'KalturaIntegerValueListResponse': KalturaIntegerValueListResponse,
            'KalturaReport': KalturaReport,
            'KalturaReportListResponse': KalturaReportListResponse,
            'KalturaPushParams': KalturaPushParams,
            'KalturaDeviceReport': KalturaDeviceReport,
            'KalturaHomeNetwork': KalturaHomeNetwork,
            'KalturaHomeNetworkListResponse': KalturaHomeNetworkListResponse,
            'KalturaHouseholdCouponListResponse': KalturaHouseholdCouponListResponse,
            'KalturaHouseholdDeviceListResponse': KalturaHouseholdDeviceListResponse,
            'KalturaDeviceFamilyBase': KalturaDeviceFamilyBase,
            'KalturaHouseholdDeviceFamilyLimitations': KalturaHouseholdDeviceFamilyLimitations,
            'KalturaHouseholdLimitations': KalturaHouseholdLimitations,
            'KalturaHouseholdLimitationsListResponse': KalturaHouseholdLimitationsListResponse,
            'KalturaDeviceFamily': KalturaDeviceFamily,
            'KalturaHousehold': KalturaHousehold,
            'KalturaHouseholdListResponse': KalturaHouseholdListResponse,
            'KalturaHouseholdUser': KalturaHouseholdUser,
            'KalturaHouseholdUserListResponse': KalturaHouseholdUserListResponse,
            'KalturaConfigurationGroupDevice': KalturaConfigurationGroupDevice,
            'KalturaConfigurationGroupDeviceListResponse': KalturaConfigurationGroupDeviceListResponse,
            'KalturaConfigurationIdentifier': KalturaConfigurationIdentifier,
            'KalturaConfigurationGroup': KalturaConfigurationGroup,
            'KalturaConfigurationGroupListResponse': KalturaConfigurationGroupListResponse,
            'KalturaConfigurationGroupTag': KalturaConfigurationGroupTag,
            'KalturaConfigurationGroupTagListResponse': KalturaConfigurationGroupTagListResponse,
            'KalturaConfigurations': KalturaConfigurations,
            'KalturaConfigurationsListResponse': KalturaConfigurationsListResponse,
            'KalturaBillingTransaction': KalturaBillingTransaction,
            'KalturaBillingTransactionListResponse': KalturaBillingTransactionListResponse,
            'KalturaCDVRAdapterProfile': KalturaCDVRAdapterProfile,
            'KalturaCDVRAdapterProfileListResponse': KalturaCDVRAdapterProfileListResponse,
            'KalturaEntitlement': KalturaEntitlement,
            'KalturaEntitlementListResponse': KalturaEntitlementListResponse,
            'KalturaCollectionEntitlement': KalturaCollectionEntitlement,
            'KalturaPpvEntitlement': KalturaPpvEntitlement,
            'KalturaProgramAssetGroupOfferEntitlement': KalturaProgramAssetGroupOfferEntitlement,
            'KalturaEntitlementDiscountDetails': KalturaEntitlementDiscountDetails,
            'KalturaEntitlementPriceDetails': KalturaEntitlementPriceDetails,
            'KalturaSubscriptionEntitlement': KalturaSubscriptionEntitlement,
            'KalturaEntitlementDiscountDetailsIdentifier': KalturaEntitlementDiscountDetailsIdentifier,
            'KalturaCampaignEntitlementDiscountDetails': KalturaCampaignEntitlementDiscountDetails,
            'KalturaCompensationEntitlementDiscountDetails': KalturaCompensationEntitlementDiscountDetails,
            'KalturaDiscountEntitlementDiscountDetails': KalturaDiscountEntitlementDiscountDetails,
            'KalturaTrailEntitlementDiscountDetails': KalturaTrailEntitlementDiscountDetails,
            'KalturaCouponEntitlementDiscountDetails': KalturaCouponEntitlementDiscountDetails,
            'KalturaHouseholdPremiumServiceListResponse': KalturaHouseholdPremiumServiceListResponse,
            'KalturaRecording': KalturaRecording,
            'KalturaExternalRecording': KalturaExternalRecording,
            'KalturaRecordingListResponse': KalturaRecordingListResponse,
            'KalturaSeriesRecordingOption': KalturaSeriesRecordingOption,
            'KalturaSeriesRecording': KalturaSeriesRecording,
            'KalturaSeriesRecordingListResponse': KalturaSeriesRecordingListResponse,
            'KalturaExternalSeriesRecording': KalturaExternalSeriesRecording,
            'KalturaAssetCommentListResponse': KalturaAssetCommentListResponse,
            'KalturaAssetCount': KalturaAssetCount,
            'KalturaAssetsCount': KalturaAssetsCount,
            'KalturaAssetCountListResponse': KalturaAssetCountListResponse,
            'KalturaAssetHistory': KalturaAssetHistory,
            'KalturaAssetHistoryListResponse': KalturaAssetHistoryListResponse,
            'KalturaRelatedEntity': KalturaRelatedEntity,
            'KalturaRelatedEntityArray': KalturaRelatedEntityArray,
            'KalturaAsset': KalturaAsset,
            'KalturaAssetListResponse': KalturaAssetListResponse,
            'KalturaLiveToVodInfoAsset': KalturaLiveToVodInfoAsset,
            'KalturaMediaAsset': KalturaMediaAsset,
            'KalturaLiveAsset': KalturaLiveAsset,
            'KalturaLineupChannelAsset': KalturaLineupChannelAsset,
            'KalturaProgramAsset': KalturaProgramAsset,
            'KalturaRecordingAsset': KalturaRecordingAsset,
            'KalturaEpg': KalturaEpg,
            'KalturaAssetStatisticsListResponse': KalturaAssetStatisticsListResponse,
            'KalturaAssetStruct': KalturaAssetStruct,
            'KalturaAssetStructListResponse': KalturaAssetStructListResponse,
            'KalturaAssetStructMeta': KalturaAssetStructMeta,
            'KalturaAssetStructMetaListResponse': KalturaAssetStructMetaListResponse,
            'KalturaBookmarkListResponse': KalturaBookmarkListResponse,
            'KalturaCategoryItemListResponse': KalturaCategoryItemListResponse,
            'KalturaCategoryVersionListResponse': KalturaCategoryVersionListResponse,
            'KalturaChannelListResponse': KalturaChannelListResponse,
            'KalturaImage': KalturaImage,
            'KalturaImageListResponse': KalturaImageListResponse,
            'KalturaImageType': KalturaImageType,
            'KalturaImageTypeListResponse': KalturaImageTypeListResponse,
            'KalturaLabel': KalturaLabel,
            'KalturaLabelListResponse': KalturaLabelListResponse,
            'KalturaLineupChannelAssetListResponse': KalturaLineupChannelAssetListResponse,
            'KalturaMediaFileDynamicData': KalturaMediaFileDynamicData,
            'KalturaMediaFileDynamicDataListResponse': KalturaMediaFileDynamicDataListResponse,
            'KalturaMediaFileListResponse': KalturaMediaFileListResponse,
            'KalturaMediaFileType': KalturaMediaFileType,
            'KalturaMediaFileTypeListResponse': KalturaMediaFileTypeListResponse,
            'KalturaRatio': KalturaRatio,
            'KalturaRatioListResponse': KalturaRatioListResponse,
            'KalturaStreamingDevice': KalturaStreamingDevice,
            'KalturaStreamingDeviceListResponse': KalturaStreamingDeviceListResponse,
            'KalturaTag': KalturaTag,
            'KalturaTagListResponse': KalturaTagListResponse,
            'KalturaSearchPriorityCriteria': KalturaSearchPriorityCriteria,
            'KalturaSearchPriorityGroup': KalturaSearchPriorityGroup,
            'KalturaSearchPriorityGroupListResponse': KalturaSearchPriorityGroupListResponse,
            'KalturaSuspendSettings': KalturaSuspendSettings,
            'KalturaHouseholdPaymentGateway': KalturaHouseholdPaymentGateway,
            'KalturaHouseholdPaymentGatewayListResponse': KalturaHouseholdPaymentGatewayListResponse,
            'KalturaHouseholdPaymentMethod': KalturaHouseholdPaymentMethod,
            'KalturaHouseholdPaymentMethodListResponse': KalturaHouseholdPaymentMethodListResponse,
            'KalturaPaymentGatewayBaseProfile': KalturaPaymentGatewayBaseProfile,
            'KalturaPaymentGatewayProfile': KalturaPaymentGatewayProfile,
            'KalturaPaymentGatewayProfileListResponse': KalturaPaymentGatewayProfileListResponse,
            'KalturaPaymentMethodProfile': KalturaPaymentMethodProfile,
            'KalturaPaymentMethodProfileListResponse': KalturaPaymentMethodProfileListResponse,
            'KalturaProductMarkup': KalturaProductMarkup,
            'KalturaAssetPersonalMarkup': KalturaAssetPersonalMarkup,
            'KalturaAssetPersonalMarkupListResponse': KalturaAssetPersonalMarkupListResponse,
            'KalturaAssetRuleListResponse': KalturaAssetRuleListResponse,
            'KalturaAssetUserRuleListResponse': KalturaAssetUserRuleListResponse,
            'KalturaBusinessModuleRuleListResponse': KalturaBusinessModuleRuleListResponse,
            'KalturaCampaignListResponse': KalturaCampaignListResponse,
            'KalturaCDNAdapterProfile': KalturaCDNAdapterProfile,
            'KalturaCDNAdapterProfileListResponse': KalturaCDNAdapterProfileListResponse,
            'KalturaCountryListResponse': KalturaCountryListResponse,
            'KalturaCurrency': KalturaCurrency,
            'KalturaCurrencyListResponse': KalturaCurrencyListResponse,
            'KalturaDeviceBrand': KalturaDeviceBrand,
            'KalturaDeviceBrandListResponse': KalturaDeviceBrandListResponse,
            'KalturaDeviceFamilyListResponse': KalturaDeviceFamilyListResponse,
            'KalturaDrmProfile': KalturaDrmProfile,
            'KalturaDrmProfileListResponse': KalturaDrmProfileListResponse,
            'KalturaEventNotificationListResponse': KalturaEventNotificationListResponse,
            'KalturaExportTask': KalturaExportTask,
            'KalturaExportTaskListResponse': KalturaExportTaskListResponse,
            'KalturaChannelEnrichmentHolder': KalturaChannelEnrichmentHolder,
            'KalturaExternalChannelProfile': KalturaExternalChannelProfile,
            'KalturaExternalChannelProfileListResponse': KalturaExternalChannelProfileListResponse,
            'KalturaIngestProfile': KalturaIngestProfile,
            'KalturaIngestProfileListResponse': KalturaIngestProfileListResponse,
            'KalturaIotListResponse': KalturaIotListResponse,
            'KalturaLanguage': KalturaLanguage,
            'KalturaLanguageListResponse': KalturaLanguageListResponse,
            'KalturaMediaConcurrencyRule': KalturaMediaConcurrencyRule,
            'KalturaMediaConcurrencyRuleListResponse': KalturaMediaConcurrencyRuleListResponse,
            'KalturaMeta': KalturaMeta,
            'KalturaMetaListResponse': KalturaMetaListResponse,
            'KalturaOSSAdapterBaseProfile': KalturaOSSAdapterBaseProfile,
            'KalturaOSSAdapterProfile': KalturaOSSAdapterProfile,
            'KalturaOSSAdapterProfileListResponse': KalturaOSSAdapterProfileListResponse,
            'KalturaParentalRule': KalturaParentalRule,
            'KalturaParentalRuleListResponse': KalturaParentalRuleListResponse,
            'KalturaPermissionItem': KalturaPermissionItem,
            'KalturaPermissionItemListResponse': KalturaPermissionItemListResponse,
            'KalturaApiActionPermissionItem': KalturaApiActionPermissionItem,
            'KalturaApiArgumentPermissionItem': KalturaApiArgumentPermissionItem,
            'KalturaApiParameterPermissionItem': KalturaApiParameterPermissionItem,
            'KalturaApiPriviligesPermissionItem': KalturaApiPriviligesPermissionItem,
            'KalturaPermission': KalturaPermission,
            'KalturaPermissionListResponse': KalturaPermissionListResponse,
            'KalturaGroupPermission': KalturaGroupPermission,
            'KalturaPlaybackProfile': KalturaPlaybackProfile,
            'KalturaPlaybackProfileListResponse': KalturaPlaybackProfileListResponse,
            'KalturaRecommendationProfile': KalturaRecommendationProfile,
            'KalturaRecommendationProfileListResponse': KalturaRecommendationProfileListResponse,
            'KalturaRegionalChannel': KalturaRegionalChannel,
            'KalturaRegion': KalturaRegion,
            'KalturaRegionListResponse': KalturaRegionListResponse,
            'KalturaRegionalChannelMultiLcns': KalturaRegionalChannelMultiLcns,
            'KalturaRegistrySettings': KalturaRegistrySettings,
            'KalturaRegistrySettingsListResponse': KalturaRegistrySettingsListResponse,
            'KalturaSearchHistory': KalturaSearchHistory,
            'KalturaSearchHistoryListResponse': KalturaSearchHistoryListResponse,
            'KalturaTvmRuleListResponse': KalturaTvmRuleListResponse,
            'KalturaUserAssetRule': KalturaUserAssetRule,
            'KalturaUserAssetRuleListResponse': KalturaUserAssetRuleListResponse,
            'KalturaUserRole': KalturaUserRole,
            'KalturaUserRoleListResponse': KalturaUserRoleListResponse,
            'KalturaEpgListResponse': KalturaEpgListResponse,
            'KalturaAppToken': KalturaAppToken,
            'KalturaSession': KalturaSession,
            'KalturaSessionInfo': KalturaSessionInfo,
            'KalturaRepresentativeSelectionPolicy': KalturaRepresentativeSelectionPolicy,
            'KalturaTopRsp': KalturaTopRsp,
            'KalturaTopSubscriptionEntitledRsp': KalturaTopSubscriptionEntitledRsp,
            'KalturaPlaybackContextOptions': KalturaPlaybackContextOptions,
            'KalturaAccessControlMessage': KalturaAccessControlMessage,
            'KalturaCaptionPlaybackPluginData': KalturaCaptionPlaybackPluginData,
            'KalturaPlaybackPluginData': KalturaPlaybackPluginData,
            'KalturaPlaybackContext': KalturaPlaybackContext,
            'KalturaBumpersPlaybackPluginData': KalturaBumpersPlaybackPluginData,
            'KalturaAdsSource': KalturaAdsSource,
            'KalturaAdsContext': KalturaAdsContext,
            'KalturaBulkUploadJobData': KalturaBulkUploadJobData,
            'KalturaBulkUploadExcelJobData': KalturaBulkUploadExcelJobData,
            'KalturaBulkUploadIngestJobData': KalturaBulkUploadIngestJobData,
            'KalturaBulkUploadObjectData': KalturaBulkUploadObjectData,
            'KalturaBulkUploadAssetData': KalturaBulkUploadAssetData,
            'KalturaBulkUploadDynamicListData': KalturaBulkUploadDynamicListData,
            'KalturaBulkUploadUdidDynamicListData': KalturaBulkUploadUdidDynamicListData,
            'KalturaBulkUploadMediaAssetData': KalturaBulkUploadMediaAssetData,
            'KalturaBulkUploadLiveAssetData': KalturaBulkUploadLiveAssetData,
            'KalturaBulkUploadProgramAssetData': KalturaBulkUploadProgramAssetData,
            'KalturaAssetFileContext': KalturaAssetFileContext,
            'KalturaAssetPersonalSelection': KalturaAssetPersonalSelection,
            'KalturaAssetStatisticsQuery': KalturaAssetStatisticsQuery,
            'KalturaBulkUploadStatistics': KalturaBulkUploadStatistics,
            'KalturaOTTCategory': KalturaOTTCategory,
            'KalturaCategoryTree': KalturaCategoryTree,
            'KalturaCDNPartnerSettings': KalturaCDNPartnerSettings,
            'KalturaCompensation': KalturaCompensation,
            'KalturaCouponGenerationOptions': KalturaCouponGenerationOptions,
            'KalturaPublicCouponGenerationOptions': KalturaPublicCouponGenerationOptions,
            'KalturaRandomCouponGenerationOptions': KalturaRandomCouponGenerationOptions,
            'KalturaKeyValue': KalturaKeyValue,
            'KalturaEmailMessage': KalturaEmailMessage,
            'KalturaEntitlementRenewal': KalturaEntitlementRenewal,
            'KalturaEpgServicePartnerConfiguration': KalturaEpgServicePartnerConfiguration,
            'KalturaEventNotificationScope': KalturaEventNotificationScope,
            'KalturaEventObject': KalturaEventObject,
            'KalturaEventNotificationObjectScope': KalturaEventNotificationObjectScope,
            'KalturaAssetEvent': KalturaAssetEvent,
            'KalturaProgramAssetEvent': KalturaProgramAssetEvent,
            'KalturaBookmarkEvent': KalturaBookmarkEvent,
            'KalturaConcurrencyViolation': KalturaConcurrencyViolation,
            'KalturaTriggerCampaignEvent': KalturaTriggerCampaignEvent,
            'KalturaDevicePin': KalturaDevicePin,
            'KalturaLoginSession': KalturaLoginSession,
            'KalturaLoginResponse': KalturaLoginResponse,
            'KalturaDynamicData': KalturaDynamicData,
            'KalturaPaymentGatewayConfiguration': KalturaPaymentGatewayConfiguration,
            'KalturaHouseholdQuota': KalturaHouseholdQuota,
            'KalturaContentResource': KalturaContentResource,
            'KalturaUploadedFileTokenResource': KalturaUploadedFileTokenResource,
            'KalturaUrlResource': KalturaUrlResource,
            'KalturaIngestStatusEpgConfiguration': KalturaIngestStatusEpgConfiguration,
            'KalturaIngestStatusPartnerConfiguration': KalturaIngestStatusPartnerConfiguration,
            'KalturaIotClientConfiguration': KalturaIotClientConfiguration,
            'KalturaLicensedUrl': KalturaLicensedUrl,
            'KalturaLicensedUrlBaseRequest': KalturaLicensedUrlBaseRequest,
            'KalturaLicensedUrlMediaRequest': KalturaLicensedUrlMediaRequest,
            'KalturaLicensedUrlEpgRequest': KalturaLicensedUrlEpgRequest,
            'KalturaLicensedUrlRecordingRequest': KalturaLicensedUrlRecordingRequest,
            'KalturaLiveToVodLinearAssetConfiguration': KalturaLiveToVodLinearAssetConfiguration,
            'KalturaLiveToVodFullConfiguration': KalturaLiveToVodFullConfiguration,
            'KalturaLiveToVodPartnerConfiguration': KalturaLiveToVodPartnerConfiguration,
            'KalturaMessageTemplate': KalturaMessageTemplate,
            'KalturaRegistryResponse': KalturaRegistryResponse,
            'KalturaPushMessage': KalturaPushMessage,
            'KalturaEpgNotificationSettings': KalturaEpgNotificationSettings,
            'KalturaLineupNotificationSettings': KalturaLineupNotificationSettings,
            'KalturaNotificationsPartnerSettings': KalturaNotificationsPartnerSettings,
            'KalturaNotificationsSettings': KalturaNotificationsSettings,
            'KalturaOTTUserDynamicData': KalturaOTTUserDynamicData,
            'KalturaPartnerSetup': KalturaPartnerSetup,
            'KalturaPartnerPremiumService': KalturaPartnerPremiumService,
            'KalturaPartnerPremiumServices': KalturaPartnerPremiumServices,
            'KalturaPin': KalturaPin,
            'KalturaPurchaseSettings': KalturaPurchaseSettings,
            'KalturaActionResult': KalturaActionResult,
            'KalturaRegionChannelNumber': KalturaRegionChannelNumber,
            'KalturaRegionChannelNumberMultiLcns': KalturaRegionChannelNumberMultiLcns,
            'KalturaSearchPriorityGroupOrderedIdsSet': KalturaSearchPriorityGroupOrderedIdsSet,
            'KalturaSegmentationPartnerConfiguration': KalturaSegmentationPartnerConfiguration,
            'KalturaNetworkActionStatus': KalturaNetworkActionStatus,
            'KalturaUserSocialActionResponse': KalturaUserSocialActionResponse,
            'KalturaSocial': KalturaSocial,
            'KalturaFacebookSocial': KalturaFacebookSocial,
            'KalturaSocialConfig': KalturaSocialConfig,
            'KalturaSocialFacebookConfig': KalturaSocialFacebookConfig,
            'KalturaActionPermissionItem': KalturaActionPermissionItem,
            'KalturaSocialUserConfig': KalturaSocialUserConfig,
            'KalturaSSOAdapterProfileInvoke': KalturaSSOAdapterProfileInvoke,
            'KalturaTimeShiftedTvPartnerSettings': KalturaTimeShiftedTvPartnerSettings,
            'KalturaPurchaseBase': KalturaPurchaseBase,
            'KalturaPurchase': KalturaPurchase,
            'KalturaExternalReceipt': KalturaExternalReceipt,
            'KalturaPurchaseSession': KalturaPurchaseSession,
            'KalturaTransaction': KalturaTransaction,
            'KalturaTransactionStatus': KalturaTransactionStatus,
            'KalturaEntitlementRenewalBase': KalturaEntitlementRenewalBase,
            'KalturaUnifiedPaymentRenewal': KalturaUnifiedPaymentRenewal,
            'KalturaUploadToken': KalturaUploadToken,
            'KalturaUserAssetsListItem': KalturaUserAssetsListItem,
            'KalturaUserLoginPin': KalturaUserLoginPin,
        }

    # @return string
    def getName(self):
        return ''

